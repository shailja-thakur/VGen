example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 3-to-2 multiplexer.
module mux3( 
input [4:0] a, b, c,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
//
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Signals
input [4:0] a;
input [4:0] b;
input [1:0] sel;
output [4:0] out;

// Blocks
mux mux_0( a, b, sel, out );
mux mux_1( a, b, sel, out );

// Module
module top(
input [4:0] a,
input [4:0] b,
input [1:0] sel,
output [4:0] out );

mux mux_2( a, b, sel, out );
mux mux_3( a, b, sel, out );

// Signals
input [4:0] a;
input [4:0] b;
input [1:0] sel;
output [4:0
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign nothing to out. 

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 1-to-1 multiplexer.
module mux1( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-2 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 3-to-2 multiplexer.
module mux3( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0,
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=0, assign 0 to out.

wire [4:0] c;

mux mux1(
input [4:0] a, b,
input sel,
output [4:0] out);
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=0, assign 0 to out.

mux mux2(
input [4:0] a, b,
input sel,
output [4:0] out);
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=0, assign 0 to out.

mux mux3(
input [4:0] a, b,
input sel,
output [4
================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 1-to-2 multiplexer.
module mux2( 
input [3:0] a, b,
input sel,
output [3:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 3-to-3 multiplexer.
module mux3( 
input [2:0] a, b,
input sel,
output [2:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 3-to-4 multiplexer.
module mux4( 
input [1:0] a, b,
input sel,
output [1:0] out );
// When sel=0,
================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk) begin
    if (sel == 0)
        out[0] = a;
    else
        out[0] = b;
end

// Wire up the output pins of the multiplexer.
mux mux_out_0(
mux_out_0_clk,
mux_out_0_rst,
mux_out_0_sel,
mux_out_0_a,
mux_out_0_b,
mux_out_0_out );

mux mux_out_1(
mux_out_1_clk,
mux_out_1_rst,
mux_out_1_sel,
mux_out_1_a,
mux_out_1_b,
mux_out_1_out
================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
wire [4:0] inp;

// The following defines the primitives of the multiplexer.

// 1. a -> inp[0]
// 2. a -> inp[1]
// 3. a -> inp[2]
// 4. a -> inp[3]
// 5. b -> inp[4]
// 6. b -> inp[5]
// 7. b -> inp[6]
// 8. b -> inp[7]

// The following defines the primitives of the multiplexer.

// 1. a -> out[0]
// 2. a -> out[1]
// 3. a -> out[2]
// 4. a -> out[3]
// 5. b -> out[4]
// 6. b -> out[5]
// 7. b -> out[6
================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
{
    if (sel == 0)
        out[0] = a;
    else if (sel == 1)
        out[0] = b;
}


================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

always @(posedge clk) 
begin
  if (sel == 0)
    out[0] = a;
  else if (sel == 1)
    out[0] = b;
  else if (sel == 2)
    out[0] = a, out[1] = b;
end


================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] c;

assign out[4:0] = a[sel];
assign out[4:0] = b[sel];

assign c[sel] = out[4:0];


================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 
// When sel=3, assign a and b to out. 

// The following function is an example of a 4-to-4 multiplexer.
// It is used to demonstrate the design rules for multiplexers. 
// The function can be used to test the design rules of multiplexers. 
module mux4( 
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When sel=3, assign d to out. 
// When sel=4, assign a and b to out. 
// When sel
================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-n multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a n-to-n multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a n-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to
================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk) begin
  if (sel == 0)
    out[0] = a;
  else
    out[0] = b;
end

// Design a 2-to-3 multiplexer.
module mux( 
input [4:0] a, b, c,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out.

always @(posedge clk) begin
  if (sel == 0)
    out[0] = a;
  else if (sel == 1)
    out[0] = b;
  else
    out[0] = c;
end

// Design a 2-to-4
================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 4-to-1 multiplexer.
module mux4( 
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign c to out.
// When sel=3, assign d to out.

// Design a 4-to-1 demultiplexer.
module demux4( 
================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out.

// Design an 8-to-1 multiplexer.
module mux( 
input [8:0] a, b,
input sel,
output [8:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out.

// Design an 8-to-1 demultiplexer.
module demux( 
input [8:0] a, b,
input sel,
output [8:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out.

// Design a 4
================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
begin
    if (sel == 0)
        out <= a;
    else
        out <= b;
end

// A module-level statement can be used to assign a
// signal from an input to an output.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
begin
    if (sel == 0)
        out <= a;
    else
        out <= b;
end

// The following is a design example that shows how to use a
// multiplexer to select between two signals.
module mux3( 
input [4:0] a, b
================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

wire [4:0] inp;

// design a 4-to-1 multiplexer
module mux4( 
input [4:0] a, b,
input sel,
output [4:0] out );

wire [4:0] inp;

// design a 4-to-3 multiplexer
module mux4( 
input [4:0] a, b,
input sel,
output [4:0] out );

wire [4:0] inp;

// Design a 4-to-1 multiplexer
module mux4( 
input [4:0] a, b,
input sel,
output [4:0] out );

wire [4:0] inp;

// Design a 4-to-3 multiplexer
module mux4( 
================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// VCD
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function [out, a, b, sel] = mux( a, b, sel );
// function
================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design a 2-to-2 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
//When sel=2, assign a to out. 
//When sel=3, assign b to out. 

// Design a 2-to-4 multiplexer.
module mux4( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign
================================================================
