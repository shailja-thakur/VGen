example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

// Design a 2-to-1 multiplexer with a single input and output.
module mux2(
input [4:0] a, b,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

// Design a 2-to-1 multiplexer with a single input and output.
module mux3(
input [4:0] a, b,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
//
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.
// When sel=4, assign a to out.
// When sel=5, assign b to out.
// When sel=6, assign a to out.
// When sel=7, assign b to out.
// When sel=8, assign a to out.
// When sel=9, assign b to out.
// When sel=10, assign a to out.
// When sel=11, assign b to out.
// When sel=12, assign a to out.
// When sel=13, assign b to out.
// When sel=14, assign a to out.
// When sel=15, assign b to out.
// When sel=16, assign a to out.
// When sel
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

always @(*)
begin
  if (sel == 0)
    out[0] = a;
  else if (sel == 1)
    out[1] = b;
  else if (sel == 2)
    out[2] = a;
  else if (sel == 3)
    out[3] = b;
end

// Design a 2-to-1 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3
================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

wire [4:0] a_out, b_out;

mux mux_inst(
a_out, b_out,
sel,
out );

// Multiplexer with a delay.
// Design a 2-to-1 multiplexer with a delay.
module mux_delay( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

wire [4:0] a_out, b_out;

mux_delay mux_delay_inst(
a_out, b_out,
sel,
out );
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel
================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When se
================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
    sel <= !(a[3] && b[3]);
    out <= a[sel];

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0
================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 2-to-2 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 4-to-1 multiplexer.
module mux4( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 
// When
================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

always @(*)
begin
    if (sel == 0)
        out[0] = a;
    else if (sel == 1)
        out[1] = b;
    else
        out[2] = a;
    if (sel == 2)
        out[3] = b;
end

// Multiplexer with a clock.
module mux_clk( 
input [4:0] a, b,
input sel,
output [4:0] out );

always @(*)
begin
    if (sel == 0)
        out[0] = a;
    else if (sel == 1)
        out[1] = b;
    else
        out[2] = a;
    if (sel == 2)
        out[
================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

// Design a 2-to-1 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

// Design a 2-to
================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 buffer.
module buf( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 buffer.
module buf( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] c;

always @(posedge clk)
begin
  if (sel)
    c = a;
  else
    c = b;
  out <= c;
end


================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
// When sel=4, assign a to out. 
// When sel=5, assign b to out. 
// When sel=6, assign a to out. 
// When sel=7, assign b to out. 
// When sel=8, assign a to out. 
// When sel=9, assign b to out. 
// When sel=10, assign a to out. 
// When sel=11, assign b to out. 
// When sel=12, assign a to out. 
// When sel=13, assign b to out. 
// When sel=14, assign a to out. 
// When sel=15, assign b to out. 
// When
================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer with a clock.
module mux_clk( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer with a clock.
module demux_clk( 
input [4:0] a, b,
input sel,
output [4
================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] c;

wire [4:0] d;

mux mux_1(
a, b,
sel,
c,
d
);

mux mux_2(
a, b,
sel,
c,
d
);

mux mux_3(
a, b,
sel,
c,
d
);

mux mux_4(
a, b,
sel,
c,
d
);

mux mux_5(
a, b,
sel,
c,
d
);

mux mux_6(
a, b,
sel,
c,
d
);

mux mux_7(
a, b,
sel,
c,
d
);

mux mux_8(
a,
================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

always @(posedge clk)
  if (sel == 0)
    out = a;
  else if (sel == 1)
    out = b;
  else
    out = a, b;


================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 
// When sel=3, assign a and b to out. 
// When sel=4, assign a and b to out. 
// When sel=5, assign a and b to out. 
// When sel=6, assign a and b to out. 
// When sel=7, assign a and b to out. 
// When sel=8, assign a and b to out. 
// When sel=9, assign a and b to out. 
// When sel=10, assign a and b to out. 
// When sel=11, assign a and b to out. 
// When sel=12, assign a and b to out. 
// When sel=13, assign a and b to out. 
// When sel=14
================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel
================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 4-to-1 multiplexer.
module mux4( 
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When sel=3, assign d to out.

// Design a 2-to-2 multiplexer.
module mux2( 
input [2:0] a, b,
input sel,
output [2:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 4-to-2 multiplexer.
module mux4( 

================================================================
