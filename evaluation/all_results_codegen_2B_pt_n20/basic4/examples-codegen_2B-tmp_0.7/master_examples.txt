example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design a 2-to-2 multiplexer.
module mux2( 
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When sel=3, assign d to out. 

// Design a 2-to-2 demultiplexer.
module
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out[4:0] = (a | b);

module mult( 
input [3:0] a, b,
input sel,
output [3:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out[3:0] = (a & b);

module div( 
input [3:0] a, b,
input sel,
output [3:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out[3:0] = (a / b);

module add( 
input [3:0] a, b,
input sel,
output [3:0] out );
// When sel=0,
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign the result of a xor b to out.

// Design a directly mux.
module dmux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out.
// When sel=1, assign b to out.
// When sel=2, assign the result of a xor b to out.

// Design a 4-to-1 multiplexer.
module mux4(
input [4:0] a[4:0], b[4:0],
input sel[4:0],
output [4:0] out );
// When sel=0, assign a to out[0].
// When sel=1, assign b to out[1].
// When sel=2,
================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign in to out. 
// When sel=3, assign out to out.
signal [4:0] mux_in, mux_out;
signal [4:0] mux_sel;
signal [4:0] mux_val;
// The Mux block has two "inputs".
// The first "input" is a 2-to-1 multiplexer.
// The second "input" is a 4-to-1 multiplexer.
// The output is a 4-to-1 multiplexer.
shared memory [4:0] tx_in_0, tx_in_1, tx_out;
// The multiplexer in the "input" port is a 3-to-1 multiplexer.
// The input port is a 2-to-1 multiplexer.
// The
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a sequence of rotations. 
module seq( 
input [5:0] a, 
input [6:0] b, 
output [5:0] c );

parameter int N=6;

// Rotate a by increments of N.
module rotate( 
input [5:0] a, 
input [5:0] b, 
output [5:0] c,
input [N:0] idx );

// If idx = 0, output becomes b.
// If idx = 1, output becomes a.
// If idx = 2, output becomes c.

module invert( 
input [5:0] a, 
output [5:0] b,
input [5:0] c );

module
always @*
begin
  // Generate a random number.

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk) begin
  if (a==0) out[0] = b;
  else if (a==1)
    out[0] = b;
  else if (a==2)
    out[1] = b;
  else if (a==3)
    out[2] = b;
  else if (a==4)
    out[3] = b;
  else if (a==5)
    out[4] = b;
  else if (a==6)
    out[5] = b;
  else if (a==7)
    out[6] = b;
  else if (a==8)
    out[7] = b;
  else if (a==9)
    out[8] = b;
  else if (a==10)
    out
================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 4-to-1 multiplexer.
module mux4(
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When sel=3, assign d to out. 

// Design a 2-to-2 multiplexer.
module mux2(
input a, b,
input sel1, sel2,
output [2:0] out1, out2 );
// When sel1=0, assign a to out1. 
// When sel1=1, assign b to out
================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
begin
  if (sel)
    out <= b;
  else
    out <= a;
end


================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a and b to out.

always @( posedge clk )
  if ( sel == 0 )
    out[3] = a;
  else if ( sel == 1 )
    out[3] = b;
  else
    out[3] = a, out[2] = b;

================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

always @* begin
    if (sel == 1)
        b <= a;
    if (sel == 2)
        a <= b;
    if (sel == 3)
        a <= b;
end

// Generate a random number between 1 and 3.
always @* begin
//    a <= random(4 downto 0);
    a <= random(1:0) + 1;
end

// This block is the core of the design. It's called from the main.

// Destructive Sin Wave Generator.

module ds( 
        input [4:0] a, 
        output [4:0] b, 
        output [4:0] c, 
        selection [1:0] sel
================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When a=0, assign 1 to out. 
// When a=1, assign b to out. 
// When b=0, assign 1 to out. 
// When b=1, assign a to out.
// ---|>
// design of a multiplexer based on the FPGA at 
// https://github.com/USI-MULT/fpga_design_patterns

`

// Test of a multiplexer.
var mux = NewMux()

// This is a sequentially operating channel.
var c1 = NewChannel(make([]byte, 4), make([]byte, 4))
var c2 = NewChannel(make([]byte, 4), make([]byte, 4))

// Set the input values.
mux.SetInputs<4, 4>([]byte{0x01, 0x02
================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out.

// Finally, output a and b.

reg [4:0] a_out;
reg [4:0] b_out;
assign a_out = a[sel];
assign b_out = b[sel];


================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
//When a=b=0, do nothing.

wire [4:0] c;
wire [4:0] out;

assign out = a[sel];

always @(posedge clk)
begin
  if (a[0] == 0)
  {
    if (sel == 0
        && a[2] == 0)
    {
      out = b[2];
      c = b[2];
    }
    else if (sel == 1
        && a[2] == 0)
    {
      out = b[2];
    }
  }
  else if (a[0] == 0)
  {
    if (sel == 0
        && a[2] == 0)
    {
      out = b[0];
      c = b[0];
    }
    else if (
================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

module counter (
input [3:0] cnt);
// Counter is either 0 or 1.
// When counter=0, count up by 1.
// When counter=1, count down by 1.
// This module is also a multiplexer. 
// When counter=0, assign 1 to out.
// When counter=1, assign 0 to out.

// Counter module
module counter_mux (
input [4:0] a, b,
input sel,
output [4:0] out );
// Counter is either 0 or 1.
// When counter=0, assign a to out.
// When counter=1, assign b to out.
// This module is also a multiplexer. 
// When counter=0, assign 1 to out.
// When counter=1, assign 0 to out.

// The design is to use the
================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
wire [4:0] out;

// Setup of the FSM.
// When a=0, assign b to out.
assign
when a=0
    out[3:0] = b
end

// When a=1, assign a to out.
assign
when a=1
    out[3:0] = a
end

// The FSM starts in state 0.
initial begin
  a = 0;
  b = 0;
  out = 0;
end

// The FSM executes in FSM state.
state state
{
  case 0
    when (sel) = 1
      a = b;
    when (sel) = 0
      b = a;
  end
}
`

const muxMultiplexerMultipleState = `// Design a 2-to-1 multiplexer.
module m
================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a or b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a or b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a or b to out.

// Design a 2-to-1 multiple
================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign either a or b to out.

wire w1, w2, w3;

mux mux2;
mux mux3;
mux mux4;

mux2 a_mux2;
mux2 b_mux2;
mux3 a_mux3;
mux3 b_mux3;
mux4 a_mux4;
mux4 b_mux4;

always @( posedge clk )
{
  if ( sel )
  {
     a_mux2 = mux2( a, w1, w2 );
     b_mux2 = mux2( b, w2, w1 );
     a_mux3 = mux3( a, w3, w1 );
     b_mux3
================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] q;

mux mux_0;
mux mux_1;

always @( posedge clk )
{
  if (sel)
    q=0;
  else
    q=1;
}

// Multiplexer

mux_0 mux_0_0;
mux_0 mux_0_1;

mux_1 mux_1_0;
mux_1 mux_1_1;

// The inputs to the multiplexers must be inputs.
mux_0 mux_0_0_0;
mux_0 mux_0_0_1;

mux_0 mux_0_1_0;
mux_0 mux_0_1_1;

mux_1 mux_1_
================================================================
