example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Design a 64-bit arithmetic shift register, with asynchronous load.
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift_async(input clk,
input [63:0] data,
input ena,
input [1:0] amount,
output reg [63:0] q); 
// when ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Design a 64-bit arithmetic shift register, with asynchronous load.
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// ----------------------
// design the a synchronous shift register
// ----------------------

// A synchronous shift register consists of a register and a clock.
// The shift register can shift both left and right, and by 1 or 8 bit positions, selected by amount.
// The shift register can be set to either high or low.
// The clock is a clock input.
// The clock input is set to low and the shift register is set to high.
// The clock is pulsed when the shift register is set to high.
// The clock is pulsed when the shift register is set to low.
// The clock is pulsed when the shift register is set to high.
// The clock is pulsed when the shift register is set to low.
// The clock is pulsed when the shift register is set to high.
// The clock is pulsed when the shift register is set to low.
// The clock is puls
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(*)
begin
  if (ena)
  {
    if (load)
      q = data;
    else
      q = 0;
  }
  else
  {
    if (load)
      q = 0;
    else
      q = data;
  }
end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;
reg [63:0] reg_data;

always @(posedge clk) begin
  if (ena)
  {
    if (load)
    {
      reg_data = data;
      q = reg_data;
    }
    else
    {
      q = 0;
    }
  }
  else
  {
    q = 0;
  }
end
);

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;
reg [63:0] data;
reg [63:0] shift_reg;
reg [63:0] shift_reg_out;

always @(posedge clk)
  if (ena)
    q = data[63:0]
  else
    q = 0
  if (load)
    shift_reg = data[63:0]
  else
    shift_reg = 0
  if (ena)
    shift_reg_out = shift_reg
else
    shift_reg_out = 0

always @(posedge clk)
  if (ena)
    q = q + shift_reg_out
  else
    q = 0

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
    if (ena)
        q <= data[amount];

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// SYNOPSIS:
// Inputs:
//   clk: Clock
//   load: Load
//   ena: Enable
//   amount: Shift amount
//   data: Data to shift
//   q: Shift register
// Outputs:
//   q: Shift register
// RESULT:
//   q: Shift register

// ATTRIBUTES:
//   readonly
//   writeonly

// INTERNAL VARIABLES:
//   reg [63:0] q
//   reg [63:0] q_old

// INTERNAL FUNCTIONS:
//   void shift()
//   void shift_reg()
//   void load_reg()
//   void write_reg()
//   void load_reg()
//   void write_reg()
//   void write_reg()
//   void write_
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


assign q = data[63:0];

reg [63:0] q_out;

always @(posedge clk)
begin
  if (ena) q_out = q;
  if (load) q_out = data[63:0];
end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// shift left by 1 bit, and set the shift register to the result.
wire [63:0] tmp;
always @(posedge clk)
begin
    if (ena) {
        // shift left by 1 bit.
        tmp[63:0] = data[63:0] << 1;
        q = tmp;
    }
end

// shift left by 8 bits, and set the shift register to the result.
wire [63:0] tmp2;
always @(posedge clk)
begin
    if (ena) {
        // shift left by 8 bits.
        tmp2[63:0] = data[63:0] << 8;
        q = tmp2;
    }
end


// shift right by 1 bit, and set the shift register to the result.
wire [63:0] tmp3;
always @(
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$
// $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$
// $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$
// $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$ $$$$
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This is the data register.
// It is clocked by the clock.
reg [64:0] data;

// This is the shifter.
// It is clocked by the clock.
reg [63:0] q;

always @(posedge clk)
{
  if (ena)
  {
    if (load)
      data = data[amount];
    q = data;
  }
}

always @(posedge clk)
{
  if (ena)
  {
    // Shift the data register.
    q = q[63:0] << amount;
  }
}

// This is the output.
// It is clocked by the clock.
reg [63:0] out;

// This is the clock.
// It is clocked by the clock.
reg clk;


================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] data;
reg [63:0] q;

assign data[63:0] = data[63:0] << amount;

always @(posedge clk)
    if (ena)
    {
        if (load)
        {
            q = data;
        }
    }

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
  if (ena)
  {
    if (load)
    {
      q = (data[63:0] << amount);
    }
    else
    {
      q = data[63:0] >> amount;
    }
  }
  else
  {
    q = 0;
  }

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;
reg [63:0] r;

always @(posedge clk)
  if (ena)
  {
    r = data[63:0];
    if (amount == 2'b00)
      q = r << 1;
    else if (amount == 2'b01)
      q = r << 8;
    else if (amount == 2'b10)
      q = r >> 1;
    else if (amount == 2'b11)
      q = r >> 8;
  }
  else
  {
    if (load)
      q = r;
  }

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


//#include <avr/io.h>
//#include <util/delay.h>
#include <avr/interrupt.h>

#define shift_left 1
#define shift_right 0

//#define shift_left_1 1
//#define shift_left_8 1
//#define shift_right_1 1
//#define shift_right_8 1

void init_shift_register(void){
	// Set up shift register
	//q = 0x00000000;
	//q = 0x00000000;
	q = 0x00000000;

	// Enable shift register
	ena = 1;
	//ena = 1;
	//ena = 1;

	// Enable shift register interrupt
	//sei();

	// Set up shift register interrupt
	//attachInterrupt(1, shift_register_interrupt, CHANGE);
================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
  if (load)
    q <= data[63:0];
  else
    ena <= 1;
  if (ena && (amount == 2'b00 || amount == 2'b01))
    ena <= 0;
  if (ena && (amount == 2'b10 || amount == 2'b11))
    ena <= 1;


================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// I/O Ports

// Clock
reg clk;

// Master clock
reg clk_master;

// Load
reg load;

// Shift register
reg q;

// Shift register
reg q_s;

// Shift register
reg q_s_s;

// Shift register
reg q_s_s_s;

// Shift register
reg q_s_s_s_s;

// Shift register
reg q_s_s_s_s_s;

// Shift register
reg q_s_s_s_s_s_s;

// Shift register
reg q_s_s_s_s_s_s_s;

// Shift register
reg q_s_s_s_s_s_s_s_s;

// Shift register
reg q_s_s
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
    if (load)
        q <= data;
    else
        ena <= 0;


================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [1:0] shiftmode;
reg [63:0] shifter;

always @(posedge clk)
{
  if (ena)
  {
    // Shift register is only loaded if ena is high.
    if (load)
    {
      // Shift register is loaded.
      // Shift is either left or right, depending on amount.
      if (amount == 0)
        q = data[63:0];
      else if (amount == 1)
        q = data[63:32];
      else if (amount == 2)
        q = data[63:32] << 8;
      else if (amount == 3)
        q = data[63:32] >> 8;
      else if (amount == 4)
        q = data[63:32] << 16;
      else if (amount == 5)
        
================================================================
