example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


void main() {
    s = a + b;
    overflow = a > b;
}

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Add two 8-bit 2's complement numbers a and b and store the result in s. 
// Assume all the bits of a and b are 0's. 

// The sign of the result s is the same as the sign of the most significant bit of a and b. 

// The result of this function is only valid if the sign of a and b is the same as the sign of s. 

// s overflow occurs if the most significant bit of a or b is 1 and the most significant bit of s is 0
// The result of this function is only valid if the sign of a and b is the same as the sign of s.



// Driver code

signed_adder a_b_s_o = 
    (
        // a
        {1, 0, 0, 0, 1, 0, 0, 0},

        // b
        {0, 1
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// function adder(a, b, s, overflow)
//     if (a[7:0] > b[7:0])
//         s[7:0] = b[7:0] + a[7:0]
//     else
//         s[7:0] = a[7:0] + b[7:0]
//     if (a[7:0] > b[7:0])
//         overflow[7:0] = 1
//     else
//         overflow[7:0] = 0
// endmodule

// function adder(a, b, s, overflow)
//     if (a[7:0] > b[7:0])
//         s[7:0] = b[7:0] + a[7:0]
//     else
//         s[7:0
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// This is a simple example
// Assume b is the most significant bit of the number
// Assume s is the most significant bit of the output
// a=10
// b=1
// s=11
// overflow = 1

// a = 10 + 1 = 11
// b = 1 + 1 = 2
// s = 11 + 2 = 13
// overflow = 1


// a = 10 + 1 = 11
// b = 1 + 1 = 2
// s = 10 + 2 = 12
// overflow = 0

// a = 10 + 1 = 11
// b = 1 + 1 = 2
// s = 10 + 2 = 12
// overflow = 0

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



architecture adder = (
    // inputs
    input [7:0] a,
    input [7:0] b,
    // outputs
    output [7:0] s,
    output overflow
);

end architecture adder;

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// SOB is the signed overflow bit

// A[7:0] = A[7:0] + B[7:0]
// A[7:0] is an 8-bit binary number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0] is a signed number

// A[7:0] is a signed number
// A[7:0] is a signed number
// A[7:0]
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// function adder(a, b, overflow) {
//     let s = a + b
//     let overflow = false
//     if (a & b & 0x80000000) {
//         s = s | 0x80000000
//         overflow = true
//     }
//     if (a & 0x80000000) {
//         s = s | 0x80000000
//         overflow = true
//     }
//     if (b & 0x80000000) {
//         s = s | 0x80000000
//         overflow = true
//     }
//     return [s, overflow]
// }

// function adder(a, b, overflow) {
//     let s = a + b
//     let overflow = false
//     if (a & b & 0x80000000) {
//         overflow = true
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// inputs
// a[7:0]
// b[7:0]
// s[7:0]
// overflow[1:0]

// outputs
// s[7:0]
// overflow[1:0]

// signals
// a[7:0]
// b[7:0]
// s[7:0]
// overflow[1:0]

// signals
// a[7:0]
// b[7:0]
// s[7:0]
// overflow[1:0]

// signals
// a[7:0]
// b[7:0]
// s[7:0]
// overflow[1:0]

// signals
// a[7:0]
// b[7:0]
// s[7:0]
// overflow[1:0]

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat /tmp/input.txt
// 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xa 0xb 0xc 0xd 0xe 0xf
// 0x0 0x1 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xa 0xb 0xc 0xd 0xe 0xf
// $ cat /tmp/output.txt
// 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xa 0xb 0xc 0xd 0xe 0xf
// 0x0 0x1 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xa 0xb 0xc 0xd 0xe
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// In this case, the output overflow is always set to 1 and the overflow occurs if the most significant bit of a is low and the most significant bit of b is high
// the output overflow is always set to 0 and the overflow occurs if the most significant bit of a is high and the most significant bit of b is low

// if the most significant bits of a and b are equal, the output overflow is always set to 0
// if the most significant bits of a and b are different, the output overflow is always set to 1

s <= (a | b)
s <= (a & b)
s <= (a & ~b)
s <= (~a | b)
s <= (~a & b)
s <= (~a & ~b)
s <= (~a & ~b & ~c)
s <= (~a & ~b & ~c & ~d)
s <= (~a & ~b &
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



//*****************************************************************************
// The following defines are used for the testbench.  These are not provided 
// in the C standard.

#define SIGNED_ADDER_MAX_OUTPUT    0x00FF
#define SIGNED_ADDER_MAX_INPUT     0x00FF
#define SIGNED_ADDER_MAX_OVERFLOW  0x00FF

//*****************************************************************************
// The following defines are used for the testbench.  These are not provided 
// in the C standard.

#define SIGNED_ADDER_MAX_OUTPUT    0x00FF
#define SIGNED_ADDER_MAX_INPUT     0x00FF
#define SIGNED_ADDER_MAX_OVERFLOW  0x00FF

//*****************************************************************************
// The following defines are used for the testbench.  These are
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// DO NOT MODIFY THIS FUNCTION
signed_adder.dsp(a, b, s, overflow);

================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// A more general version of the signed adder is:

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The number a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// A more general version of the signed adder is:

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
);
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// $ cat t1.in t1.out 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 
// $ cat t2.in t2.out 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 
// $ cat t3.in t3.out 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 
// $ cat t4.in t4.out 
// 1001 0111 1101 1011 0011 1001 0000 0000 0000 
// 1001 0111 1101 1011 0011
================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire overflow;

assign overflow = {b[7], a[7]};

assign s = {a[7:0] + b[7:0], overflow[7]};


================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder()
{
  
  // use the following logic to calculate the overflow:
  // if either a or b is negative, then the result is negative
  // if both are positive, then the result is positive
  // if both are zero, then the result is zero
  
  // if a is negative, then the result is negative
  // if b is negative, then the result is negative
  // if a is zero and b is zero, then the result is zero
  
  // if a is zero and b is negative, then the result is negative
  // if a is positive and b is zero, then the result is positive
  // if a is negative and b is positive, then the result is positive
  
  // if a is positive and b is zero, then the result is positive
  // if a is negative and b is zero, then the result is negative
  

================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The numbers a and b are added to the output s. 
// assign the occ
================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


task main() 
{
  
  input [7:0] a, b, s;
  
  a = {000, 001, 002, 003, 004, 005, 006, 007};
  b = {010, 011, 012, 013, 014, 015, 016, 017};
  s = {000, 000, 000, 000, 000, 000, 000, 000};
  
  // assign the occurence of the signed overflow of a and b to the output overflow.
  s overflow = a[7] + b[7];
  
  // assign the most significant bit of a and b to the output a.
  a [7] = a [7] ? b[7] : a[7];
  
  // assign the most significant bit of a and b to the output b.
  
================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
{
  if (a[7] <= b[7]) {
    s[7] = a[7] + b[7];
    overflow[7] = a[7] & b[7];
  }
  else {
    s[7] = b[7] + a[7];
    overflow[7] = a[7] & b[7];
  }
}

================================================================
