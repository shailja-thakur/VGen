example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder S[] = {
    top(0),
    top(1),
    top(2),
    top(3),
    top(4),
    top(5),
    top(6),
    top(7)
};

signed_adder *S[] = {
    new signed_adder(),
    new signed_adder(),
    new signed_adder(),
    new signed_adder(),
    new signed_adder(),
    new signed_adder(),
    new signed_adder(),
    new signed_adder()
};

void ckt_work() 
{ 
    for (uint i = 0; i <= 2; ++i) {
       clockticks S[i] = {0,0,0,0,0,0,0,0};

        for (uint j = 0; j < 8; ++j) {
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  assign s[7:0] = a[7:0] + b[7:0];

  const 4 = 2'000;     
  const uninitialized_high_bit = 1'000'000 and (a[7] == 0) and (b[7] == 0);

  if (s[7] >= 4) { // overflow
    output overflow;
  }
  else if (uninitialized_high_bit) { //  a    not initialized,  b initialized
    if (a[7] and (s[7] == 4)) {
      assign s[7] = 3;   // not initialized
    }
    else {
      s[7] = 4;   // initialized
    }
  }
  else if (b[7] not_eq -1) {
    s[7] = a[7] + b[7
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


s signed_adder ([7:0] a, [7:0] b, [7:0] s0, [7:0] s1, [7:0] overflow) Bus;
{
   //b' = b
//conditional b overflow  
   if (b' > 0x7F && b' < 0x80)
    {
      s1 <- s0 + 1 
      overflow := 1
    } else 
      {
      b' <- b
      s1 <- s0  
      overflow <- 0
    };
  //a' = a + b'
 // conditinal a overflow
   if (a' > 0x7F && a' < 0x80)
    {
      s0 <- s1 + 1
      overflow := 1
    } else 
      {
      a' <- a
      s
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  //@ output_overflow assumes |s| = signed(8) 

  signed_adder.exe([andb, relinqu](parameter bool overflow) {
    unsigned sum, carry = 0;
    
    for (sum = carry = 0; sum < 4; sum += carry, (carry ? 1 :  0)) {
//    bool overflow = a[sum] & noting;
      
//    bool overflow = a[sum] & ((b[sum] ^ 1) | (a[sum] ^ b[sum]));
    
    if (((((a[3] ^ a[2]) | ((a[1] ^ a[2]) & (a[1] ^ a[5]))) | ((a[4] ^ a[5]) & (a[4] ^ a[7]))) | ((a[2] & a[3] & a[4] &
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign overflow = a[0](s); 
    assign s[7:0] = a[7:0]; 
    
    assign overflow = overf(s); 
    assign s[7:0] = b[7:0]; 
    
    assign overflow = overf(s); 
    assign s[7:0] = a[7:0] + b[7:0]; 
   
     
a
a+b
b
overof   
o.of.   
a+bof   
  

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



swire d  ; 
swire p1 ; 
swire p2 ;

void
unsigned_adder(
    input [7:0] a,
    input [7:0] b,
    output [7:0] s);
  
void
signed_adder(
    inout  [7:0] s,
    inout  [7:0] overflow);


if s[0] = 0 and overflow == 1 then
    s[31] = a[31] + b[31] else 
    not overflow ;
end if


if s[1] = 0 and overflow == 1 then
    s[30] = a[30] + b[30] else 
    not overflow ;
end if


if s[2] = 0 and overflow == 1 then
    s[29] = a[29] + b[
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


task signed_adder_list(in j_channel <= (7 downto 0), out q_channel <= (7 downto 0), p_register <= (7 downto 0), q_overflow <= (7 downto 0));

/* vim: set noexpandtab:*/

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder S0;
signed_adder S1;
signed_adder S2;
//signed_adder SCRT = (S0+S1) - S2;
constexpr boolean overflow = false;

signed_adder add([7:0] a, [7:0] b);
signed_adder add([7:0] a2, [7:0] b2) {
    return add(a, b);
}



{
  overflow:SCRT =::add(a, b);

  if ((S0[7:0]+S1[7:0])<S2[7:0]) 
    S0[7:0] = S2[7:0] % (1<<8);
  else 
    S0[7:0] = (S0[7:0]+S1[7:
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


    
    
    
// $Log: signed_adder.v,v $
// Revision 1.3  1998/05/22  00:29:52  killough
// Improve library error reporting (linked-list construction is std::map now)
// (phase 2 - works; at least I think they work)
//
// Revision 1.2  1998/05/22  00:16:52  killough
// clean up library to conform with original number_added
//
// Revision 1.1.1.1  1998/05/09  23:07:11  killough
// move everything into the engine
//
// Revision 1.1.1.1  1998/05/08    23:08:15

//
//      (5)

================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


enum Operation { Add, Subtract };

sign applied;
HLS sign_change[] = {ms_decode, ms_encode};
ops_handler Ops[] = {
 {
    SIGNED_ADD, 
    func::signed_adder(a, b, output_value, unsigned_overflow),
 },

 {
    SIGNED_SUBTRACT, 
    func::signed_adder_subtract(a, b, output_value, unsigned_overflow),
 }};

task main()
{
    prepare {
    a=0b00001111;
    b=0b00000010;
    s = 0;
    unsigned_overflow = false; 
    
    applied = SIGN_TYPE::NONE;
    }

    to_sign::task prepare()
    {
      a=0b00001111;
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


param s[7:0] signeds;

input [7:0] sign_bits;

#7+1.0 trigger +28+21 and +36+24 combination
// mux two high bit (set signal lc2)

#mask high bit
//1 2
#resnumb an additional 1

#ifl6 lc 4, 5, 6, 7 

if el_4 lc2 | el_5 lc2 {
    lbb2 <5>(signeds <= 811);
}

#ifl6 lc 3, 4, 5, 6

#ifl6 lc 6, 7, 4, 6 // ec 05

if el_1 == 15 {
    lbb6 <7>(signeds <= 255);
}

#end if 

#else lc2 
lbd2anl
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[7:0] = a[7:0] + b[7:0];

assign overflow = s[7] < 0?1:0;

================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg a;
reg b;
reg s;
reg overflow;
reg c;

always @ (posedge clk)
    a = a0; 
    b = b0;
    s = s0;
  
    #5
    if (0')
      {
      overflow = (a < b);
      #7
      if( (a & 0x08) == (b & 0x08) )
          #7 if (a & 0x30) == (b & 0x30) then // use this to check overflow
           overflow = 0;
      }
      
    else 
      overflow = " = 0"; 

#29
assign overflow = overflow;
#32 


always @ (posedge clk)
     #    5
     #7 
     if (overflow' == /* !!!
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    LABEL(signed_adder)
    ADD
    SXT
 
    OVF
};

================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signal [7] overflow;
repeat i = 0 to 6
    select
    if (not (a[i] == 0 and b[i] == 0))
        select
    else
    if ((a[i:7] & 0x80) != 0 and (s[i:7] & 0x80) == 0)
        s[i] = a[i] + b[i] + 1
    else
        s[i] = a[i] + b[i]
end repeat

sub_add_signed(s, overflow)


================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire old_overflow;

assign overflow = 1 if (a[7] - b[7]) | (a[6] - b[6]) | (a[5] - b[5]) | (a[4] - b[4]) | (a[3] - b[3]) | (a[2] - b[2]) | (a[1] - b[1]) | (a[0] - b[0]) > 0 else 0;
assign s[7:0] = a[7:0] + b[7:0];

always_comb
{
    overflow -> old_overflow;
    old_overflow;
}

always_comb
{
    old_overflow;
    assign s[7] = (s[7] & 0x80) ? 1 : 0;
    

}

================================================================
