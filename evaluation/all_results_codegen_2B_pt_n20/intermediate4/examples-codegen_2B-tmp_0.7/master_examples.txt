example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
state_transition t0() {
	if (in) {
		if (!present_state) {
			out = 1;
			present_state = 1;
		}
		return state_transition(next_state);
	}
	return state_transition(present_state);
}
state_transition t1() {
	if (in) {
		if (!next_state) {
			out = 0;
			next_state = 0;
		}
		return state_transition(next_state);
	}
	return state_transition(next_state);
}

module simple_fsm_testbench()
{
  wire[2:0] clk_out;
  wire[2:0] reset_in;
  input[2:0] clk_in;
  output[2:0]
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
{
  if (reset == 1)
  {
    next_state = 0;
  }
  else {
    if ((~reset) == 1)
    {
      next_state = 1;
    }
  }
}

initial begin
  out = 1;
  next_state = 0;
  present_state = 0;
end

always @(posedge clk)
{
  if (~reset == 0)
  {
    if ((next_state == 0) && (in == 1))
    {
      present_state = next_state;
    }
  }
  else if (next_state == 0)
  {
    out = 0;
  }
}

// Simplest solution
always @(posedge clk)
{
  if ((~
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    // Clock goes high when clk is low
    if (clk == 1) begin
        out = (in == 1) ? 0 : 1;
        next_state = (present_state == 0) ? 1 : 0;
        present_state = next_state;
    end
    // Clock goes low at reset
    if (reset == 1) begin
        out = 1;
        next_state = 0;
        present_state = next_state;
    end
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset == 1)
    {
        reset <= 1;
        if (reset == 1)
        {
            present_state <= 0;
        }
        next_state <= 1;
    }
    else
    {
        if (in == 1)
        {
            if (present_state == 0)
            {
                out <= 0;
            }
            else
            {
                present_state <= 1;
            }
        }
        else
        {
            if (present_state == 1)
            {
                out <= 1;
            }
            else
            {
                present_state <= 0;
            }
        }
    }
end
);

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
	next_state = (in == 1) ? 0 : 1;
	present_state = next_state;
	if(reset == 1)
	{
		next_state = 0;
	}
	out = (present_state == 0) ? 1 : 0;
}

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Each state has a next state

always @(posedge clk)
{
	// print("clk: " + to_string(clk));
	if (clk == 1)
	{
		if (reset == 1)
		{
			reset = 0;
		}
		else
		{
			next_state = 0;
		}
	}

	if (reset == 1)
	{
		// print("reset: " + to_string(reset));
		next_state = 0;
	}
	
	// print("next_state: " + to_string(next_state));
	out = out & (present_state == next_state);
	present_state = next_state;
}


================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Clk is a pulse rising edge and reset is a pulse falling edge.
reg [2:0] present_state;
reg [1:0] next_state;
reg out;

always @*
begin
    if (clk==1) begin
        next_state = in;
        out = out; // output is what the input was before
    end else
        next_state = present_state;
end

always @*
begin
    if (reset==1) begin
        next_state = 0;
        out = out; // output is what the input was before
    end else
        next_state = present_state;
end


initial begin
    present_state = 0;
    next_state = 0;
end

initial begin
    begin
        if (reset==1) begin
            next_state = 0;
            out
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1) {
    reset = 0;
  }
  present_state = !in;
  if (reset == 0 && in == 1 && present_state == 0) {
    out = 1;
  } else if (reset == 0 && in == 0 && present_state == 1) {
    out = 0;
  }
}

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
state state0() {
  if (in)
    out = 1;
  else
    out = 0;
  present_state = 0;
  next_state = 0;
  return simple_fsm(clk, reset, in, out);
}
state state1() {
  if (in)
    out = 1;
  else
    out = 0;
  present_state = 1;
  next_state = 1;
  return simple_fsm(clk, reset, in, out);
}
// In state 0, if clk=1, go to state 0. In state 0, if clk=0, go to state 1
// In state 1, if clk=1, stay in state 1. In state 1, if clk=0, go to state 0
// out=1 in state 0 and out=0 in state 1
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
    }
    if (reset == 0)
    {
        if (in == 1)
        {
            next_state = 1;
        }
        else
        {
            next_state = 0;
        }
        present_state = next_state;
        out = 1;
    }
}

always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
    }
    if (reset == 0)
    {
        if (in == 1)
        {
            next_state = 0;
        }
        else
        {
            next_state = 1;
        }
        present_state = next_state;
        out = 1;
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
signal transition_to_state_0;
signal transition_to_state_1;
signal transition_from_state_0;
signal transition_from_state_1;
// Initial state 0
wire[] init_fsm = {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
// Transitions
wire[] transition_0 = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
wire[] transition_1 = {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
// State machine
simple_fsm foo(clock, reset, in, out);
void main() {
  init_fsm <= init_fsm;
  // First state
  out <= 0;
  next_
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial state_machine()
{
    out = 1;
    next_state = 0;
}
initial begin
    reset <= 1;
    clk <= 1;
    in <= 1;
    present_state = 0;
end
initial state_machine()
{
    out = in;
    next_state = 2;
}
initial begin
    reset <= 0;
    clk <= 1;
    out <= 1;
    present_state = 0;
end
initial state_machine()
{
    out = 1;
    next_state = 1;
}
initial state_machine()
{
    out = 0;
    next_state = 0;
}
initial begin
    reset <= 1;
    clk <= 1;
    in <= 1;
    present_state = 1;
end
initial state_machine()
{

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
  if (reset)
    next_state = 0;
  else
    next_state = ~in | (in << 1);
  if (in)
    out = 1;
  else
    out = 0;
  present_state = next_state;
  next_state = ~next_state;
  // when present_state=1, out=1, in=1
  // when present_state=0, out=1, in=0

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
while(reset == 0)
{
    if(reset == 1)
    {
        reset = 0;
        next_state = 0;
    }
    else
    {
        if(in == 1)
        {
            present_state = 1;
        }
        else
        {
            present_state = 0;
        }
        next_state = present_state;
    }
    out = next_state;
}

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state=1 if in=1 in state 1, 0 if in=0 in state 1, 1 if in=1 in state 0, 0 if in=0 in state 0
state transition_table[2][3][2] = {{{0, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 0, 1}}, {{0, 0, 1, 1}, {0, 0, 1, 0}, {1, 1, 1, 0}}};

always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
    next_state = 0;
    present_state = 0;
  }
  else if (reset == 0)
  {
    reset = 1;
  }
  else if (clk == 1)
  {
    if (in == 1)
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  present_state = next_state;
  next_state = 0;
  if (reset == 1'b0)
    next_state = 1;
  out = next_state;
}

always @(posedge clk)
{
  if (reset == 1'b1)
    next_state = 0;
  else
    next_state = 1;
}

initial begin
  next_state = 0;
  in = 0;
end

initial begin
  next_state = 1;
  out = 1;
end

initial begin
  next_state = 1;
  if (reset == 1'b0)
    next_state = 0;
  else
    next_state = 1;
end

initial begin
  next_state = 0;
  out
================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
{
  if (reset == 0) {
    out = in;
  }
  else if (reset == 1) {
    next_state = 0;
  }
  else if (out == 1) {
    next_state = 1;
  }
  else {
    next_state = 0;
  }

  if ((present_state == 0) && (in == 1)) {
    present_state = 1;
  }
  else if ((present_state == 1) && (in == 1)) {
    present_state = 2;
  }
  else if ((present_state == 2) && (in == 0)) {
    present_state = 1;
  }
  else if (present_state == 0) {
    present_state = 0;
  }
}

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg[1:0] state_map;

always @(posedge clk)
{
    present_state = state_map;
    if (reset == 1)
    {
        next_state = 0;
    }
    else
    {
        next_state = present_state;
    }
}

always @(posedge in)
{
    out = next_state;
}


================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1'b1)
    next_state = 0;
  else
    next_state = present_state;
  // Output state
  if (next_state == 0 and in == 1'b1)
    out = 1'b1;
  else if (next_state == 1 and in == 1'b0)
    out = 1'b0;
  else
    out = 1'b0;
  // Update state
  present_state = next_state;
}

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
combiner comb(0, 1, 0, 0);

always @(posedge clk)
{
  out = comb.out;
  next_state = comb.next_state;
  present_state = comb.present_state;
  if (reset==0)
    next_state = 0;
  if (reset==1)
    next_state = 1;

  if (present_state == 0 && in==1)
    next_state = 1;
  if (present_state == 0 && in==0)
    next_state = 0;
  if (present_state == 1 && in==1)
    next_state = 0;
  if (present_state == 1 && in==0)
    next_state = 1;
}

always @(posedge clk)
{
  if (present_state==0 &&
================================================================
