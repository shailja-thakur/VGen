example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
  if ((a == 1) && (b == 1) && (cur_state == IDLE))
  {
    cur_state = SAB;
  }
  else if ((a == 1) && (b == 1) && (cur_state == SA))
  {
    cur_state = SAB;
  }
  else if ((a == 1) && (b == 1) && (cur_state == SB))
  {
    cur_state = SAB;
  }
  else if ((a == 1) && (b == 0))
  {
    cur_state = IDLE;
  }
  else
  {
    cur_state = IDLE;
  }
  next_state = cur_state;

always @(posedge clk)
  if ((a == 1) &&
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    // Assign the current state to the variable next_state
    next_state = cur_state;
    // If the next state is IDLE, then assign the output z to low
    if (next_state == IDLE)
    z <= z;
    // If the next state is SA, then assign the output z to high
    if (next_state == SA)
    z <= 1;
    // If the next state is SB, then assign the output z to high
    if (next_state == SB)
    z <= 1;
    // If the next state is SAB, then assign the output z to high
    if (next_state == SAB)
    z <= 1;
end
// The function entry point
// This is a clock driver
// The input clk is the clock that signals whether a transition is
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk, posedge reset)
begin
// If reset is low, we move to idle (note that state changes are taken care of above).
if (reset == 0)
{
    cur_state = IDLE;
    next_state = IDLE;
}
else
{
    // If reset is high and a and b are both high, we move to SAB
    // If reset is high and a is high, we move to SA
    // If reset is high and b is high, we move to SB
    cur_state = (a == 1) & (b == 1) ? SAB :
        (a == 1) & (b == 0) ? SA :
        (a == 0) & (b == 1) ? SB :
        IDLE;
    if (cur_state == IDLE)
        next_state = IDLE;

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero in other states
wire [2:0] in_a, in_b;
always @(posedge clk) begin
  cur_state = (a == z ? IDLE : (b == z ? SA : (a == z ? SAB : SB)));
  next_state = (cur_state == IDLE ? SA :
                cur_state == SA ? SAB :
                cur_state == SB ? SAB :
                IDLE);
  z <= next_state;
end
*/
// The following is a combined FSM with inputs a and b in any order
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// parameter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    if (reset == '0') cur_state = IDLE;
    else if ((a == '1' and b == '1') and (cur_state == IDLE)) cur_state = SAB;
    else if ((a == '1' and b == '0') and (cur_state == IDLE)) cur_state = SA;
    else if ((a == '0' and b == '1') and (cur_state == IDLE)) cur_state = SB;
    else if ((a == '0' and b == '0') and (cur_state == IDLE)) cur_state = IDLE;
    next_state = (cur_state == SAB) ? (SAB) : (next_state);
    next_state = (next_state == SAB) ? (SAB) : (next_state
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        if ((a == 1) && (b == 1))
        {
            cur_state = SAB;
            next_state = IDLE;
        }
        else if ((a == 1) && (b == 0))
        {
            cur_state = SA;
            next_state = IDLE;
        }
        else if ((a == 0) && (b == 1))
        {
            cur_state = SB;
            next_state = IDLE;
        }
    }
    else if (cur_state == SAB)
    {
        if ((a == 1) && (b == 1))
        {
            cur_state = SAB;
            next_state = IDLE;
        }
        else if ((a == 1
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
posedge clk,
begin
    if( reset == '1' )
        cur_state = idle;
    else
        cur_state = (a == '1' ? sa : (b == '1' ? sb : sab));
    next_state = cur_state;
    z <= cur_state;
end
);

architecture rtl of abro
(
    // This is a FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This is an FSM
    // This
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  case(cur_state)
    if (a == 1) {
      next_state = (!b) ? SAB : (b == 1) ? SA : IDLE;
    } else {
      next_state = (!b) ? SAB : (!a) ? IDLE : (b == 1) ? SA : SB;
    }
    z = next_state;
      
endcase
reg [3:0] id;
initial begin
  cur_state = IDLE;
  id = 0;
end
always @(posedge clk)
  case(cur_state)
    if (a == 1) {
      id = id + 1;
      if (id == 4) {
        next_state = SA;
      } else if ((id == 2) && (reset != 1)) {
        next
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when a and b are both low in any order.

always @(posedge clk)
    if (cur_state == IDLE)
        z <= 0;
    cur_state <= a;
    next_state <= a;

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if ( reset == '1' )
    {
        if ( cur_state == IDLE )
        {
            next_state = SA;
        }
        else
        {
            next_state = cur_state;
        }
    }
    else
    {
        next_state = cur_state;
    }
    if ( next_state == SAB )
    {
        z = 1;
    }
    else if ( next_state == SA )
    {
        z = 1;
    }
    else if ( next_state == SB )
    {
        z = 1;
    }
    else
    {
        z = 0;
    }

end

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = IDLE;

    if (a == 1)
        if (b == 1)
            next_state = SAB;
        else
            next_state = SA;
    else
        if (b == 1)
            next_state = SB;
        else
            next_state = IDLE;

    z = next_state;
end

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = cur_state == SAB;

always @(posedge clk)
    if (reset) cur_state = IDLE;
    else
    {
    cur_state = (a == b) ? SA : (a == clk) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE :
        ((cur_state == SA) ? SAB :
        ((cur_state == SB) ? SAB : IDLE));
    }

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state = SAB;
    next_state = SA;
    if ((a == 1) && (b == 1)) {
        if (cur_state == IDLE) {
            z = 1;
            next_state = SA;
        }
    }
    if ((a == 0) && (b == 0)) {
        if (cur_state == IDLE) {
            z = 1;
        }
    }
    if (reset == 1) {
        cur_state = IDLE;
    }
end
end
"""),
    ]
)

================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        next_state = sb;
    }
    if (a == 1) {
        next_state = sb;
    }
    if (b == 1) {
        next_state = sb;
    }
    if (cur_state == sb) {
        if (next_state == sb) {
            next_state = SAB;
            z = 1;
        }
    }
    if (cur_state == SAB) {
        if (next_state == sb) {
            next_state = SA;
            z = 1;
        }
    }
    if (cur_state == SA) {
        if (next_state == sb) {
            next_state = SB;
            z =
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if ( a && b == 1 )
{
    next_state = SAB;
    if ( cur_state == IDLE )
        cur_state = SA;
}

else if ( a && b == 0 )
{
    next_state = IDLE;
}

else if ( cur_state == IDLE )
{
    next_state = SA;
}

else if ( cur_state == SA )
{
    next_state = SB;
}

else if ( cur_state == SB )
{
    next_state = SAB;
}

else if ( cur_state == SAB )
{
    next_state = IDLE;
    z = 1;
}
end
);

================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  next_state = IDLE;
  if (clk == 0) begin
    cur_state = IDLE;
    z = 1;
  end else
    if (reset == 1) begin
      cur_state = IDLE;
      z = 1;
    end else
      if ((a == 1) && (b == 1)) begin
        if (cur_state == IDLE) {
          cur_state = SAB;
          next_state = SAB;
        }
        if ((cur_state == SA) && (b == 1)) {
          cur_state = SB;
          next_state = SB;
        }
        if ((cur_state == SB) && (a == 1)) {
          cur_state = SAB;
          next_state = SAB;
        }
      end
================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (clk, reset, a, b)
begin
    if (reset) begin
        cur_state = IDLE;
        z = 1;
    end else begin
        cur_state = IDLE;
        if ((a == 1) and (b == 0)) begin
            z = 1;
            next_state = SAB;
        end else if ((a == 0) and (b == 1)) begin
            z = 1;
            next_state = SA;
        end else if ((a == 1) and (b == 1)) begin
            z = 1;
            next_state = SB;
        end else begin
            z = 0;
        end
    end
    next_state
end
end
end
`

================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
if (reset) z <= cur_state;
else
if (a) z <= SA;
else if (b) z <= SB;
else z <= cur_state;
cur_state <= next_state;
next_state <= (cur_state == SB? SAB:
  (cur_state == SA? SA:
  (cur_state == IDLE? IDLE:
  (cur_state == SAB? SAB:
  (next_state == IDLE? IDLE: next_state)))));
end
);
""")

################################################################################

# Erlang code for processing input/output signals.
#
# All these messages are sent via Tcp, which means that they should be
# processed by a TcpProcessor.

tcp_proc = erlang.TcpProcessor("127.0
================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire [5:0] triggered;
reg [1:0] state;
// This is the SAB component of the FSM
// The state machine is triggered when z is high
reg [15:0] a,b;
reg [20:0] a_buf,b_buf;
reg [24:0] a_acc,b_acc;
reg [25:0] a_out,b_out;

always @(posedge clk)
// This is the A component of the FSM
// If a is high and cur_state is IDLE, change to SA (1)
// If a is high and cur_state is SA, change to SB (2)
// If a is high and cur_state is SB, change to SAB (3)
begin
if (a == 1 and cur_state == IDLE)
{
    cur_state =
================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(*)
begin
    // If clock is asserted, change state to IDLE
    if (clk == '1')
        cur_state = IDLE;
    // If reset is asserted, change state to IDLE
    else if (reset == '1')
        cur_state = IDLE;
    // If cur_state is IDLE, and a is high, change state to SA
    else
        if (a == '1' && cur_state == IDLE)
            cur_state = SA;
        // If cur_state is IDLE, and b is high, change state to SB
    else
        if (b == '1' && cur_state == IDLE)
            cur_state = SB;
    // If cur_state is SAB, and a is high, change state to SAB
    else
        if (a == '1'
================================================================
