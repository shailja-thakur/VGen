example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
  if (cur_state == IDLE)
  {
    if (a == 1)
    {
      cur_state = SA;
    }
    else if (b == 1)
    {
      cur_state = SB;
    }
    else
    {
      cur_state = SAB;
      next_state = IDLE;
    }
  }
  else if (cur_state == SA)
  {
    if (a == 1)
    {
      next_state = SB;
    }
    else if (b == 1)
    {
      next_state = SAB;
    }
    else
    {
      next_state = IDLE;
    }
  }
  else if (cur_state == SB)
  {
    if (a == 1
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        if (a == 1) {
            if (b == 1) {
                cur_state = SAB;
            } else {
                cur_state = SA;
            }
        } else {
            if (b == 1) {
                cur_state = SB;
            } else {
                cur_state = IDLE;
            }
        }
    } else if (cur_state == SAB) {
        if (a == 1) {
            cur_state = SAB;
        } else {
            cur_state = IDLE;
        }
    } else if (cur_state == SA) {
        if (b == 1) {
            cur_state = SAB;
        } else {
            cur_state = IDLE
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire [1:0] r,r2;
reg [7:0] z;
reg [7:0] z2;
reg [3:0] z3;
reg [3:0] z4;
reg [3:0] z5;
reg [3:0] z6;
reg [3:0] z7;
reg [3:0] z8;
reg [3:0] z9;
reg [3:0] z10;
reg [3:0] z11;
reg [3:0] z12;
reg [3:0] z13;
reg [3:0] z14;
reg [3:0] z15;
reg [3:0] z16;
reg [3:0] z17;
reg [3:0] z18;
reg [3:0] z19;
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) next_state = IDLE;
  else if ((a == 1) && (b == 1)) next_state = SAB;
  else if (a == 1) next_state = SA;
  else if (b == 1) next_state = SB;
  else next_state = IDLE;
  cur_state = next_state;
  z <= next_state;
end
);
// END
`

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    next_state = (a && b) ? SAB :
        ((a || b) ? SA : IDLE);
    if (reset)
        cur_state = IDLE;
    else
        cur_state = next_state;
    z <= cur_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    if (cur_state == IDLE)
    {
        next_state = SAB;
    }
    else if (a == 1 && b == 1)
    {
        next_state = SAB;
    }
    else if (a == 1 && b == 0)
    {
        next_state = SA;
    }
    else if (a == 0 && b == 1)
    {
        next_state = SB;
    }
    else
    {
        next_state = IDLE;
    }
    cur_state = next_state;
end
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == '1') {
        cur_state = IDLE;
        next_state = IDLE;
    }
    else if (a == '1' and b == '1') {
        if (cur_state == IDLE) {
            cur_state = SAB;
            next_state = SA;
        }
        if (cur_state == SAB) {
            cur_state = SAB;
            next_state = SB;
        }
    }
    else if (a == '1') {
        if (cur_state == IDLE) {
            cur_state = SA;
            next_state = SAB;
        }
        if (cur_state == SA) {
            cur_state = SAB;
            next_state = SAB;
        }
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if (reset == 1) {
    cur_state = IDLE;
    next_state = IDLE;
}
else if (a == 1) {
    cur_state = SA;
    next_state = SAB;
}
else if (b == 1) {
    cur_state = SB;
    next_state = SAB;
}
else {
    cur_state = IDLE;
    next_state = IDLE;
}
if (cur_state == next_state) {
    z = 1;
}
else {
    z = 0;
}
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// parameter IDLE = 0,
// SA
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        next_state = IDLE;
        z <= 0;
    }
    else if (cur_state == SA && a == 1 && b == 1) {
        next_state = SAB;
        z <= 1;
    }
    else if (cur_state == SB && a == 1 && b == 1) {
        next_state = SAB;
        z <= 1;
    }
    else if (cur_state == SAB && a == 1 && b == 1) {
        next_state = SAB;
        z <= 1;
    }
    else if (cur_state == SA && a == 1 && b == 0) {
        next_state = SA;
        z <= 1;
    }
    else if (cur_state
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if ( reset )
        next_state = IDLE;
    else if ( a == 1 )
        next_state = SA;
    else if ( b == 1 )
        next_state = SB;
    else
        next_state = SAB;
    if ( cur_state != next_state )
        z = 1;
    cur_state = next_state;

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
    if (cur_state == IDLE)
    {
        cur_state = SAB;
    }
    else if (a == 1 && b == 1 && cur_state == IDLE)
    {
        cur_state = SA;
    }
    else if (a == 1 && b == 0 && cur_state == IDLE)
    {
        cur_state = SB;
    }
    else if (a == 0 && b == 1 && cur_state == IDLE)
    {
        cur_state = SAB;
    }
    else if (a == 0 && b == 0 && cur_state == IDLE)
    {
        cur_state = IDLE;
    }
    else
    {
        cur_state = IDLE;
    }


================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
{
  cur_state = IDLE;

  if (reset == 1 && clk == 1)
  {
    next_state = IDLE;
  }
  else if ((a == 1 && b == 1) || (a == 1 && b == 0) || (a == 0 && b == 1))
  {
    next_state = SAB;
  }
  else if (a == 1 && b == 0)
  {
    next_state = SA;
  }
  else if (a == 0 && b == 1)
  {
    next_state = SB;
  }
  else
  {
    next_state = IDLE;
  }
  z <= next_state;
}
);

// This is a FSM module abro(
// input clk,
//
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire [3:0] z;

always @(posedge clk)
begin
    if (reset)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = cur_state;
    z <= cur_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// parameter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    cur_state = next_state;
    next_state = (cur_state == IDLE) ? SAB : (cur_state == SAB) ? SA : (cur_state == SA) ? SB : IDLE;
    z <= (cur_state == IDLE) ? 1 : (cur_state == SAB) ? 0 : (cur_state == SA) ? 1 : 0;
end
);
// This is an FSM module abro_b(
// input clk,
// input reset,
// input a,
// input b,
// output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
    if (reset) cur_state = IDLE;
    else if (cur_state == IDLE)
        cur_state = SA;
    else if (cur_state == SA && a)
        cur_state = SB;
    else if (cur_state == SB && b)
        cur_state = SAB;
    else if (cur_state == SAB)
        cur_state = IDLE;
    else
        cur_state = IDLE;
    next_state = cur_state;

================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        next_state = IDLE;
    } else {
        if ((a == 1) && (b == 1)) {
            next_state = SAB;
        } else {
            if (a == 1) {
                next_state = SA;
            } else {
                if (b == 1) {
                    next_state = SB;
                } else {
                    next_state = IDLE;
                }
            }
        }
    }
    cur_state = next_state;
    z <= next_state;
end
);

================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if (cur_state == IDLE)
{
    if (a == 1 && b == 1)
    {
        cur_state = SAB;
        next_state = IDLE;
    }
    else if (a == 1 && b == 0)
    {
        cur_state = SB;
        next_state = IDLE;
    }
    else if (a == 0 && b == 1)
    {
        cur_state = SA;
        next_state = IDLE;
    }
    else
    {
        cur_state = IDLE;
        next_state = IDLE;
    }
}
else if (cur_state == SAB)
{
    if (a == 1 && b == 1)
    {
        cur_state = SAB;
        next_
================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    cur_state = next_state;
    next_state = (next_state + 1) % 4;
    if (reset == 1) begin
        next_state = IDLE;
    end
    if ((a == 1) && (b == 1) && (cur_state == IDLE)) begin
        z = 1;
    end
    if ((a == 1) && (b == 0) && (cur_state == IDLE)) begin
        z = 0;
    end
    if ((a == 0) && (b == 1) && (cur_state == IDLE)) begin
        z = 1;
    end
    if ((a == 0) && (b == 0) && (cur_state == IDLE)) begin
        z = 0;
    end
    if ((a == 1) && (b ==
================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (clk, reset, a, b)
begin
    if (a == 1)
    begin
        cur_state = SA;
    end
    else if (b == 1)
    begin
        cur_state = SB;
    end
    else if (reset == 1)
    begin
        cur_state = IDLE;
    end
    else
    begin
        if (cur_state == IDLE)
        begin
            cur_state = SAB;
        end
        if (cur_state == SAB)
        begin
            cur_state = SA;
        end
        if (cur_state == SA)
        begin
            cur_state = SB;
        end
        if (cur_state == SB)
        begin
            cur_state = SAB;
        end
        if (cur_state == SAB)
================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (cur_state == IDLE)
  {
    next_state = IDLE;
  }
  else if (a == 1 && b == 1)
  {
    next_state = SAB;
  }
  else if (a == 1 && b == 0)
  {
    next_state = SA;
  }
  else if (a == 0 && b == 1)
  {
    next_state = SB;
  }
  else
  {
    next_state = IDLE;
  }
  cur_state = next_state;
  z <= cur_state;
end
);

================================================================
