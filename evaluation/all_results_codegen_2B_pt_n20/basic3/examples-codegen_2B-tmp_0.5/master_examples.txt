example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[1] & 1) | ((in[0] & 1) << 1);

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = ( ( ( in[0] << 1 ) | ( in[1] << 0 ) ) >> 2 );
always @( posedge clk )
{
    pos = out;
}
);

// This is a 3-bit priority decoder. If none of the input bits are low, output is zero.
module priority_decoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = ( ( ( in[0] << 1 ) | ( in[1] << 0 ) ) >> 2 );
always @( posedge clk )
{
    pos = out;
}
);

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder_2( 

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign b to in

assign out = (in[1] == 1) ? in[0] : in[1];

reg [3:0] pos;
assign pos = (in[0] == 1) ? pos + 1 : pos;

always @(posedge clk)
{
    if (pos == 3) {
        pos = 0;
        out = in[0];
    }
}


================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = in[2:0] + 1;
// When sel=0, assign b to out
assign pos = in[2:0] + 1 - 16;
// When sel=1, assign b to out
assign pos = in[2:0] + 1 - 32;
// When sel=0, assign b to out
assign pos = in[2:0] + 1 - 48;
// When sel=1, assign b to out
assign pos = in[2:0] + 1 - 64;
// When sel=0, assign b to out
assign pos = in[2:0] + 1 - 80;
// When sel=1, assign b to out
assign pos = in[2:0] + 1 - 96;
// When sel=0, assign b to out
assign pos = in[
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge in)
begin
  pos = (in[0] << 0) + (in[1] << 1);
end
);
*/

void test_priority_encoder() {
  priority_encoder in = (priority_encoder) 0;
  priority_encoder out = (priority_encoder) 0;
  while(1) {
    in = (priority_encoder) (in | (in >> 1) | (in >> 2) | (in >> 3));
    out = (priority_encoder) (out | (out >> 1) | (out >> 2) | (out >> 3));
    if (out == in) {
      cout << "passed" << endl;
    } else {
      cout << "failed" << endl;
    }
  }
}

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[0] << 6) | (in[1]);

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [3:0] in,
output reg [3:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[0] << 7) | (in[1] << 2) | (in[2]);

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [4:0] in,
output reg [4:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[0] << 8) | (in[1] << 4)
================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge in)
begin
  pos = (in[0] | in[1]) & 3;
  out = ~pos;
  pos = pos << 1;
  pos = pos + (in[1] & ~in[0]);
end
);
priority_encoder p;

// This is a 2-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder2( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge in)
begin
  pos = (in[0] | in[1]) & 3;
  out = ~pos;
  pos = pos << 1;
  pos = pos + (in[1] & ~in[0]);
end
);

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = in[1] ? (in[0] >> 5) & 0x1 : 0;
// When sel=0, assign b to out
assign pos = in[1] ? (in[0] >> 4) & 0x1 : 0;
// When sel=1, assign b to out
assign pos = in[1] ? (in[0] >> 3) & 0x1 : 0;
// When sel=0, assign b to out
assign pos = in[1] ? (in[0] >> 2) & 0x1 : 0;
// When sel=1, assign b to out
assign pos = in[1] ? (in[0] >> 1) & 0x1 : 0;
// When sel=0, assign b to out
assign pos = in[1] ? (in[0]) &
================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos[1] = (in[1] && in[0]) ? 1 : 0;
// When sel=2, assign b to out
assign pos[2] = (in[0] && !in[1]) ? 1 : 0;
// When sel=3, assign b to out
assign pos[3] = (!in[0] && !in[1]) ? 1 : 0;
// When sel=4, assign b to out
assign pos[4] = (!in[0] && in[1]) ? 1 : 0;
// When sel=5, assign b to out
assign pos[5] = (in[0] && in[1]) ? 1 : 0;
// When sel=6, assign b to out
assign pos[6] = (in[0] && !in[1]) ? 1 : 0;
================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{ 
  if (in[1] && in[0]) 
    pos = 1; 
  else 
    pos = 0; 
}

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = pos[1];

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder_sel( 
input [2:0] in,
output reg [1:0] pos,
input [1:0] sel ); 

// When sel=1, assign b to out
assign out = pos[1];

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder_sel_in( 
input [2:0] in,
output reg [1:0] pos,
input [1:0] sel,
input [2:0] in_ ); 
// When sel=1, assign b to out
assign out = pos[1];

// This is
================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = bz_to_pos( in[1] );
// When sel=0, assign b to out
assign pos = bz_to_pos( in[0] );

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = in[2:0] ? pos[1:0] + 1 : pos[1:0];

#(0b00)

reg [7:0] b;

always @(posedge clk)
begin
    if((pos[0] == 0) || (pos[1] == 0))
        b = 0b00;
    else
        b = 0b11;
end


================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
begin
    if (in[0] == 0)
        pos = pos - 1;
    else
        pos = pos + 1;
end

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[1] << 2) | (in[0] << 1) | (in[2] >> 1);

================================================================
example-15: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = 
  ( ~(in[1] & in[0]) & 1 ) 
  | ( ~(in[1] & in[0]) & 2 ) 
  | ( ~(in[1] & in[0]) & 4 )
  | ( ~(in[1] & in[0]) & 8 )
  | ( ~(in[1] & in[0]) & 16 )
  | ( ~(in[1] & in[0]) & 32 )
  | ( ~(in[1] & in[0]) & 64 )
  | ( ~(in[1] & in[0]) & 128 );

assign out =
  ( ~(in[1] & in[0]) & 1 ) 
  | ( ~(in[1] & in[0]) & 2 ) 
  | ( ~(in
================================================================
example-16: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = sel;
// When sel=0, assign a to out
assign a = ~in[0] & in[1];
// When sel=1, assign b to out
assign b = ~in[0] | in[1];
// When sel=0, assign a to out
assign a = ~in[0] & ~in[1];
// When sel=1, assign b to out
assign b = ~in[0] | ~in[1];
// When sel=0, assign a to out
assign a = ~in[0] & in[1];
// When sel=1, assign b to out
assign b = ~in[0] | in[1];
// When sel=0, assign a to out
assign a = ~in[0] & ~in[1];

================================================================
example-17: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos[1:0] = pos[1:0] + in[1:0] + 1;
always @( posedge clk )
  if (in[0] == 0)
    pos[1:0] = 0;

================================================================
example-18: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
void assign_pos( 
input [2:0] in, 
output reg [1:0] pos ); 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
void assign_pos( 
input [2:0] in, 
output reg [1:0] pos ); 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
================================================================
example-19: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = (in[0] << 2) | (in[1] << 1) | (pos[1] << 0); 
// When sel=1, assign c to out
assign out = (pos[0] << 1) | (in[0] << 0); 
// When sel=0, assign b to out
assign out = (pos[0] << 2) | (in[1] << 1) | (pos[1] << 0); 
// When sel=0, assign c to out
assign out = (pos[0] << 1) | (in[0] << 0); 
);

// This is a 7-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [7:0] in,
output reg [7:0] out );
================================================================
