// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "assign pos = (in[1] & 1) | ((in[0] & 1) << 1);\n"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "assign out = ( ( ( in[0] << 1 ) | ( in[1] << 0 ) ) >> 2 );\nalways @( posedge clk )\n{\n    pos = out;\n}\n);\n\n// This is a 3-bit priority decoder. If none of the input bits are low, output is zero.\nmodule priority_decoder( \ninput [2:0] in,\noutput reg [1:0] pos ); \n// When sel=1, assign b to out\nassign out = ( ( ( in[0] << 1 ) | ( in[1] << 0 ) ) >> 2 );\nalways @( posedge clk )\n{\n    pos = out;\n}\n);\n\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder_2( \n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "// When sel=0, assign b to in\n\nassign out = (in[1] == 1) ? in[0] : in[1];\n\nreg [3:0] pos;\nassign pos = (in[0] == 1) ? pos + 1 : pos;\n\nalways @(posedge clk)\n{\n    if (pos == 3) {\n        pos = 0;\n        out = in[0];\n    }\n}\n\n"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "assign pos = in[2:0] + 1;\n// When sel=0, assign b to out\nassign pos = in[2:0] + 1 - 16;\n// When sel=1, assign b to out\nassign pos = in[2:0] + 1 - 32;\n// When sel=0, assign b to out\nassign pos = in[2:0] + 1 - 48;\n// When sel=1, assign b to out\nassign pos = in[2:0] + 1 - 64;\n// When sel=0, assign b to out\nassign pos = in[2:0] + 1 - 80;\n// When sel=1, assign b to out\nassign pos = in[2:0] + 1 - 96;\n// When sel=0, assign b to out\nassign pos = in["
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge in)\nbegin\n  pos = (in[0] << 0) + (in[1] << 1);\nend\n);\n*/\n\nvoid test_priority_encoder() {\n  priority_encoder in = (priority_encoder) 0;\n  priority_encoder out = (priority_encoder) 0;\n  while(1) {\n    in = (priority_encoder) (in | (in >> 1) | (in >> 2) | (in >> 3));\n    out = (priority_encoder) (out | (out >> 1) | (out >> 2) | (out >> 3));\n    if (out == in) {\n      cout << \"passed\" << endl;\n    } else {\n      cout << \"failed\" << endl;\n    }\n  }\n}\n"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "assign pos = (in[0] << 6) | (in[1]);\n\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder( \ninput [3:0] in,\noutput reg [3:0] pos ); \n// When sel=1, assign b to out\nassign pos = (in[0] << 7) | (in[1] << 2) | (in[2]);\n\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder( \ninput [4:0] in,\noutput reg [4:0] pos ); \n// When sel=1, assign b to out\nassign pos = (in[0] << 8) | (in[1] << 4)"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge in)\nbegin\n  pos = (in[0] | in[1]) & 3;\n  out = ~pos;\n  pos = pos << 1;\n  pos = pos + (in[1] & ~in[0]);\nend\n);\npriority_encoder p;\n\n// This is a 2-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder2( \ninput [2:0] in,\noutput reg [1:0] pos ); \n// When sel=1, assign b to out\nalways @(posedge in)\nbegin\n  pos = (in[0] | in[1]) & 3;\n  out = ~pos;\n  pos = pos << 1;\n  pos = pos + (in[1] & ~in[0]);\nend\n);\n"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "assign pos = in[1] ? (in[0] >> 5) & 0x1 : 0;\n// When sel=0, assign b to out\nassign pos = in[1] ? (in[0] >> 4) & 0x1 : 0;\n// When sel=1, assign b to out\nassign pos = in[1] ? (in[0] >> 3) & 0x1 : 0;\n// When sel=0, assign b to out\nassign pos = in[1] ? (in[0] >> 2) & 0x1 : 0;\n// When sel=1, assign b to out\nassign pos = in[1] ? (in[0] >> 1) & 0x1 : 0;\n// When sel=0, assign b to out\nassign pos = in[1] ? (in[0]) &"
    },
    {
      "finish_reason": "length",
      "index": 8,
      "logprobs": null,
      "text": "assign pos[1] = (in[1] && in[0]) ? 1 : 0;\n// When sel=2, assign b to out\nassign pos[2] = (in[0] && !in[1]) ? 1 : 0;\n// When sel=3, assign b to out\nassign pos[3] = (!in[0] && !in[1]) ? 1 : 0;\n// When sel=4, assign b to out\nassign pos[4] = (!in[0] && in[1]) ? 1 : 0;\n// When sel=5, assign b to out\nassign pos[5] = (in[0] && in[1]) ? 1 : 0;\n// When sel=6, assign b to out\nassign pos[6] = (in[0] && !in[1]) ? 1 : 0;"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "{ \n  if (in[1] && in[0]) \n    pos = 1; \n  else \n    pos = 0; \n}\n"
    },
    {
      "finish_reason": "length",
      "index": 10,
      "logprobs": null,
      "text": "assign out = pos[1];\n\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder_sel( \ninput [2:0] in,\noutput reg [1:0] pos,\ninput [1:0] sel ); \n\n// When sel=1, assign b to out\nassign out = pos[1];\n\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder_sel_in( \ninput [2:0] in,\noutput reg [1:0] pos,\ninput [1:0] sel,\ninput [2:0] in_ ); \n// When sel=1, assign b to out\nassign out = pos[1];\n\n// This is"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "assign pos = bz_to_pos( in[1] );\n// When sel=0, assign b to out\nassign pos = bz_to_pos( in[0] );\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "assign pos = in[2:0] ? pos[1:0] + 1 : pos[1:0];\n\n#(0b00)\n\nreg [7:0] b;\n\nalways @(posedge clk)\nbegin\n    if((pos[0] == 0) || (pos[1] == 0))\n        b = 0b00;\n    else\n        b = 0b11;\nend\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (in[0] == 0)\n        pos = pos - 1;\n    else\n        pos = pos + 1;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "assign pos = (in[1] << 2) | (in[0] << 1) | (in[2] >> 1);\n"
    },
    {
      "finish_reason": "length",
      "index": 15,
      "logprobs": null,
      "text": "assign pos = \n  ( ~(in[1] & in[0]) & 1 ) \n  | ( ~(in[1] & in[0]) & 2 ) \n  | ( ~(in[1] & in[0]) & 4 )\n  | ( ~(in[1] & in[0]) & 8 )\n  | ( ~(in[1] & in[0]) & 16 )\n  | ( ~(in[1] & in[0]) & 32 )\n  | ( ~(in[1] & in[0]) & 64 )\n  | ( ~(in[1] & in[0]) & 128 );\n\nassign out =\n  ( ~(in[1] & in[0]) & 1 ) \n  | ( ~(in[1] & in[0]) & 2 ) \n  | ( ~(in"
    },
    {
      "finish_reason": "length",
      "index": 16,
      "logprobs": null,
      "text": "assign pos = sel;\n// When sel=0, assign a to out\nassign a = ~in[0] & in[1];\n// When sel=1, assign b to out\nassign b = ~in[0] | in[1];\n// When sel=0, assign a to out\nassign a = ~in[0] & ~in[1];\n// When sel=1, assign b to out\nassign b = ~in[0] | ~in[1];\n// When sel=0, assign a to out\nassign a = ~in[0] & in[1];\n// When sel=1, assign b to out\nassign b = ~in[0] | in[1];\n// When sel=0, assign a to out\nassign a = ~in[0] & ~in[1];\n"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "assign pos[1:0] = pos[1:0] + in[1:0] + 1;\nalways @( posedge clk )\n  if (in[0] == 0)\n    pos[1:0] = 0;\n"
    },
    {
      "finish_reason": "length",
      "index": 18,
      "logprobs": null,
      "text": "always @(*)\nvoid assign_pos( \ninput [2:0] in, \noutput reg [1:0] pos ); \n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder( \ninput [2:0] in,\noutput reg [1:0] pos ); \n// When sel=1, assign b to out\nalways @(*)\nvoid assign_pos( \ninput [2:0] in, \noutput reg [1:0] pos ); \n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder( \ninput [2:0] in,\noutput reg [1:0] pos ); \n// When sel=1, assign b to out\nalways @(*)"
    },
    {
      "finish_reason": "length",
      "index": 19,
      "logprobs": null,
      "text": "assign out = (in[0] << 2) | (in[1] << 1) | (pos[1] << 0); \n// When sel=1, assign c to out\nassign out = (pos[0] << 1) | (in[0] << 0); \n// When sel=0, assign b to out\nassign out = (pos[0] << 2) | (in[1] << 1) | (pos[1] << 0); \n// When sel=0, assign c to out\nassign out = (pos[0] << 1) | (in[0] << 0); \n);\n\n// This is a 7-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder( \ninput [7:0] in,\noutput reg [7:0] out );"
    }
  ],
  "created": 1663537956,
  "id": "cmpl-7tKxEJM4Adlwqp5I2XVtSB7kK6wzn",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 2854,
    "prompt_tokens": 65,
    "total_tokens": 2919
  }
}