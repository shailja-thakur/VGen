// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (load)\n\tout <= data;\nelse begin\n\tcase (amount)\n\t3'b000:\n\tout = out;\n\t3'b001:\n\tout = {out[6:0],out[7]};\n\t3'b010:\n\tout = {out[5:0],out[7:6]};\n\t3'b011:\n\tout = {out[4:0],out[7:5]};\n\t3'b100:\n\tout = {out[3:0],out[7:4]};\n\t3'b101:\n\tout = {out[2:0],out[7:3]};\n\t3'b110:\n\tout = {out[1:0],out[7:2]};\n\t3'b111:\n\t"
    }
  ],
  "created": 1663543496,
  "id": "cmpl-28hb1BskE3uZjNEeKxIsFusX0IJSb",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 200,
    "prompt_tokens": 94,
    "total_tokens": 294
  }
}