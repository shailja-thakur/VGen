example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;


================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out


================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;



================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = ( a && b );


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out 
asser out = a & b; 

================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;


================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

 internally use a dff to flip the signal when necessary
 
 requires there AND gate requires a and b to be 0 or 1, signalling our circuit to output (1 or 0)
 
 assign out = din;
 
 
 clock generate the first D flipflop when we're outputting a 0 from the two input tests
 
 
 dff myDff( out , din , clk , ~reset, q ); // ONESHOT with reset


 
 // start it in a b state at the beginning so that it outputs 0
 
 initial begin
 
clk = 1'b0;
a = 1'b0;
b = 1'b0;
@(posedge clk); // enable the din


a = 1'b1;
@(posedge clk); // enable one CLK cycle and it changes to b

b= 1'b1
================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b;


================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;


================================================================
example-10: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b;

note here we must specify an exact size of data types, 
so we put in the virtul functions, but the 
function only writes 2 bits into the third parameter
(in this case a 4-bit reg), and we must use 'integer' 
to do the parameterized '%b'
or we can use '%x' to get hex output for the
respective 4 bits in a series of hex digits. 
*/

================================================================
example-11: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out


assign out=a&&b;*/

// declaring assign statements as lists 

module add_sub( negative , zero , overflow , two_s_comp_out );

	// declare input and output ports for 4 instances of adder modules 
	input negative , zero , overflow; 
	output two_s_comp_out;

	// instantiate two instances of the adder adder1(a,b,cin,s,cout) and
	// assign the output to two_s_comp_out
	// instantiation of the adder adder1(...);
	assign two_s_comp_out = adder1( );

// function that implements the adder

function adder(input a,b,cin);

	begin
	adder=a+b+cin;
	adder[31]=|adder[30:0];

================================================================
example-12: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
to specify the zero value of out, it is given below
assign out = 0;
 
//when a or b are both 0, then AND is unnecessary
//which can be implemented by 
//assigning 0 to both and and or outputs

//if a or b are both 1, then AND'ed output is equal to a xor b
//so, using xor operator gives same thing
xor gate_1(andoutputa, a, b), gate_2(andoutputb, a, b);
 
// the use of xor gates gives output out, as specified above
xor gate_3(out, andoutputa, andoutputb);
 
 



================================================================
example-13: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;


================================================================
example-14: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;

================================================================
example-15: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-16: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;


================================================================
example-17: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
	
	and(out,a,b);



================================================================
example-18: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out.

assign out = a & b;
	

================================================================
example-19: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-20: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-21: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;


================================================================
example-22: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;


================================================================
example-23: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-24: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
specify
$setuphold (posedge a, negedge b, 1ns, 1ns, notifier);
$width (negedge a, 1ns, 0, notifier);
$width (negedge b, 1ns, 0, notifier);
endspecify

// design implementation
// statement A and B
not (C, a);
and (out, C, b);


================================================================
example-25: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;

================================================================
example-26: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out


================================================================
example-27: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
essonbot creates an AND diagram of an AND gate
 stands in for the "ation" input
// This is the AND gate
output out; 
input a, b; 
assign out = a & b;

module empty_ca(Q, reset, clock1);
input reset, clock1;
output reg Q;

always@(posedge clock1)
begin
	Q=0;
	
	end

================================================================
example-28: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b;
/* specifing constractor for assigning random status to a and b
assign {a, b} = rand;
*/

================================================================
example-29: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out


================================================================
example-30: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;


================================================================
example-31: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b; 


================================================================
example-32: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;
 // instajct ports are in the boutogdertain the status of gahte after elemnt [* is TO)
 assign j = 1'h1;
 assign k = 1'h0;
 e t a t e r e f c e s a l = j & ~k;
 // assign posters as gray code for 
 // accordingly changing the greys to represent the status of the gate being tested, for debug


================================================================
example-33: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b;

// initial 
// always 
if (a == 1 && b == 0) 
begin 
assert( out == 1) 
end 
else if (a == 0 && b == 1)
begin 
assert( out == 0) 
end 
else 
begin 
assert( out == x) 
end 
// initialend 
// onlyfor demo 
 always @ (a, b) 
 begin 
assert ((a == 0 && b == 0) || (a == 1 && b == 1 ))
end 
 // o, e


================================================================
example-34: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b;


================================================================
example-35: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;


================================================================
example-36: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b; 


================================================================
example-37: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out 
assign out = a & b ; 


// if a = 1 and b = 0 
// out = 0 


================================================================
example-38: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out


================================================================
example-39: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b;


================================================================
example-40: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b; 


================================================================
example-41: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
assign out = a & b; 

================================================================
example-42: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-43: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-44: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

always @ ( a, b ) begin
if a == 1'b1 && b == 1'b1 then
out = 1'b1; 
else
out = 1'b0;
end
module add_8_bit_tb();
// declare variables
reg a, b;
wire cin;
wire sum;
wire overflow;

// assign variables to ports that come from the outside
// parameter zero prints out body for a case where value = 0

_8_bit_Adder FA ( 
.A(my_switch),
.B(my_switch),
// Retrieval info: UAX: HAZARD_DETECTION.V: SWITCH_DEFAULT_CHANGING STRING "NO" 
.SUM(sum), 
.OVERFLOW(overflow), 
.CIN(cin)); // use FA's c
================================================================
example-45: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

*//*

	andcomb
out = (a & b);

================================================================
example-46: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;

================================================================
example-47: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-48: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out and 
// write the declaration of a wire
wire out;


assign out = a & b;



================================================================
example-49: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

assign out = a & b;

// always block with output of out asserted

always @ (out)

begin

	clk = 1'b1; // assert clk
	// clk = 0
	
	clk = 1'b0; // deassert clk
	// wait for 4 clock cycles to test design
	
	$finish; // finish simulation
 
end


================================================================
