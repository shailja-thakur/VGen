example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// A calculation of missing functionality is required 
// write for loop for calculating the addition and subtraction numbers that is 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg signed [31:0] sum; 
reg [7:0] ov_reg; 

always @ (posedge previous_1 ) begin 

// Reg addresses and initializations
sum <= 0; 
ov_reg <= 0; 

// Bitwise addition triggered from the previous posedge of the Add_1
// 1. Add the result of the + with - previous_1 result and see if there is overflow and whether the overflow is two bits' complement
sum <= summation; 
if ({overflow, answer[15:8]} == 0) begin
// Here if the addition answer is zero then the sum may be two accumulated digits.

end // end of else-case
else begin
// Here correct addition happened.
overflow <= 0; 
end // end of else
sum1 <= sum;
sum <= 0;
end // end of always



always
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign {1'b1, s[7:1]} = a + b;
assign overflow = {1'b1, ss[7]};


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// For a two bit wire, counts 0, and 1, add the values 
assign s[0] = a[0] ^ b[0];
assign s[1] = a[1] ^ b[1];

assign overflow = ((a[0] ^ b[0]) & ((a[1] ^ b[1]) & ~(&a ^ b))) & (a[0] & b[0]) & ^(&a ^ b);

// As part of this gate design, you need to specify two mutually exclusive AND drivers on a 5-bit four-input truth table
// (5-bit (the remaining drivers, i.e. exccode_s and linectrl_s, do not have to be specified)
// and finally add the NOT mutantsigned out and the two NOTs)
assign se = ((~a[3]) & (~a[2])
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Hidden variables
wire s0,s1,one;
wire [7:0] k,k2k,k4k,k8k,k16k,k32k,k64k,k128k;
wire [8:0] k9;
wire [9:0] k2k9;
// s0 = (b<<7)+(a<<7); s1 = (b<<7)-a;
subtract_full r1(.difference(b<<7), .s_bit(a<<7), .borrow(1'b0), .B(b), .difference(k));
// reduction using leasts first
// the number k receives the rest of the subtract operation

subtract_full r2(.difference(a<<7), .s_bit(k), .borrow(1'b1), .A(
================================================================
