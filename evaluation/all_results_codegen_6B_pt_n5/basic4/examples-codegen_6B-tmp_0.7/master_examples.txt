example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always@(posedge clk or negedge rst) begin
    if (rst) begin
        out <= 0x0;
    end else begin
        out <= sel ? a : b;
    end
end

module mux2( 
input [4:0] a, b,
input sel1, sel2,
output [4:0] out );
// When sel1=0, sel2=1, assign a to out.
// When sel1=1, sel2=0, assign b to out.
always@(posedge clk or negedge rst) begin
    if (rst) begin
        out <= 0x0;
    end else begin
        out <= sel1 ? a : b;
    end
end

module mux3( 
input [4:0]
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk or negedge rst) begin
  if(rst) begin
    out <= -16'd0;
  end
  else begin
    sel <= a[0];
    sel <= b[0];
    out <= sel;
  end
end


================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk or sel) // mux outputs
  out = a;

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk or negedge rst) begin
    if(rst) begin
        out <= 0;
    end
    else if(sel == 0) begin
        out <= a;
    end
    else if(sel == 1) begin
        out <= b;
    end
end

// Do a simulation of the multiplexer with 5 chips.
test_main ()
  next_cycle();
  for (int i=0; i<50; i++) begin
    rst <= 1;
    a <= 0;
    b <= 1;
    sel <= 0;
    #5 clock cycle(s)
    a <= 1;
    b <= 0;
    sel <= 1;
    #5 clock cycle(s)
    a <= 0;
    b <= 1;
    sel <= 0;
    #5 clock cycle
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk)
  if (sel)
    out <= b;
  else 
    out <= a;
// The multiplexer also needs to be able to accept a reset signal.
always @(posedge clk)
  if (sel)
    a <= b;
  else 
    a <= ~b;


================================================================
