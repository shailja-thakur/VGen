example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  begin
    cur_state <= IDLE;
    if (a)
      cur_state <= SA;
    else if (b)
      cur_state <= SB;
    else if (a && b)
      cur_state <= SAB;
    else if (a)
      cur_state <= SA;
    else if (b)
      cur_state <= SB;
    next_state <= cur_state;
    z <= cur_state;
  end
end

// Text-based simulation

begin
  end
end


================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= SAB;
    if( next_state == SAB )
    cur_state <= SA;
    else if( next_state == SA )
    cur_state <= SB;
    else if( next_state == SB )
    cur_state <= SAB;
    else if( next_state == IDLE )
    cur_state <= SA;
    else if( next_state == SAB )
    cur_state <= SB;
    else if( next_state == SA )
    cur_state <= SAB;
    else if( next_state == SB )
    cur_state <= SAB;
    else if( next_state == IDLE )
    cur_state <= SA;
    else if( next_state == SAB )
    cur_state <= SB;
    else
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset) begin
    if (next_state == 0) begin
    	if (a) begin
    	    next_state = SA;
    	    if (b) begin
    	        next_state = SAB;
    	    end
    	end
    else if (next_state == SA) begin
    	if (b) begin
    	    next_state = SAB;
    	end
    else if (next_state == SB) begin
    	if (a) begin
    	    next_state = SAB;
    	end
    else if (next_state == SAB) begin
    	next_state = IDLE;
    end
end

// This is a FSM that simulates a switch.
// The output z is high when 1 is received for signals a and b
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a and b) begin
    next_state <= SAB;
    cur_state <= SAB;
  end
  else if (a) begin
    next_state <= SA;
    cur_state <= SA;
  end
  else if (b) begin
    next_state <= SB;
    cur_state <= SB;
  end
  else begin
    next_state <= IDLE;
    cur_state <= IDLE;
  end
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset) begin
	if (cur_state == IDLE) begin
		switch (a) {
		case 0:
			if (b) next_state = SA;
			else next_state = IDLE;
			break;
		case 1:
			if (b) next_state = SB;
			else next_state = IDLE;
			break;
		case 2:
			if (b) next_state = SAB;
			else next_state = IDLE;
			break;
		case 3:
			next_state = IDLE;
			break;
		default:
			next_state = IDLE;
			break;
		}
	end
	if (cur_state == IDLE) begin
		switch (next_state) {
		case SA:
			z <= 1;
================================================================
