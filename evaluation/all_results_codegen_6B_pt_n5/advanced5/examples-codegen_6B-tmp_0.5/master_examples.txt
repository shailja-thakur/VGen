example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
z <= (a && b) || (a || b && !cur_state);

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= (cur_state == IDLE) ? SAB : (cur_state == SA ? SB : SAB);

always @(posedge clk or negedge reset)
next_state <= (cur_state == IDLE) ? SAB : (cur_state == SB ? SA : SAB);

always @(posedge clk or negedge reset)
next_state <= (cur_state == IDLE) ? SAB : (cur_state == SA ? SB : SAB);

always @(posedge clk or neged
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if(next_state == IDLE)
  begin
    cur_state <= IDLE;
  end
  else if(next_state == SA)
  begin
    cur_state <= SA;
  end
  else if(next_state == SB)
  begin
    cur_state <= SB;
  end
  else if(next_state == SAB)
  begin
    cur_state <= SAB;
  end
  else if(next_state == SAB)
  begin
    cur_state <= SAB;
  end
  else if(next_state == SAB)
  begin
    cur_state <= SAB;
  end
  else if(next_state == SAB)
  begin
    cur_state <= SAB;
  end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	if (cur_state == IDLE and a and b)
	begin
		next_state = SAB;
	end
	else if (cur_state == IDLE and a)
	begin
		next_state = SA;
	end
	else if (cur_state == IDLE and b)
	begin
		next_state = SB;
	end
	else if (cur_state == SA and b)
	begin
		next_state = SAB;
	end
	else if (cur_state == SB and a)
	begin
		next_state = SAB;
	end
	else if (cur_state == SAB)
	begin
		next_state = IDLE;
	end
	else
	begin
		next_state = IDLE;
	end
	z
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
    next_state <= IDLE;
    if (a && b) next_state <= SAB;
    if (a) next_state <= SA;
    if (b) next_state <= SB;
end

================================================================
