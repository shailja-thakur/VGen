example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if(reset)
        cur_state <= IDLE;
    else if(a)
        cur_state <= SA;
    else if(b)
        cur_state <= SB;
    else if(cur_state == SA && b)
        cur_state <= SAB;
    else if(cur_state == SB && a)
        cur_state <= SAB;
    else if(cur_state == SAB)
        cur_state <= IDLE;
    next_state <= cur_state;
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
z <= (a && b);

always @(posedge clk)
cur_state <= IDLE;

always @(posedge clk)
next_state <= (cur_state == IDLE) ? SAB : (cur_state == SA) ? SA : (cur_state == SB) ? SB : IDLE;


================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a == 1)
    cur_state <= SA;
  if (b == 1)
    cur_state <= SB;
  if (a == 1 && b == 1)
    next_state <= SAB;
  if (cur_state == SA && b == 1)
    next_state <= SAB;
  if (cur_state == SB && a == 1)
    next_state <= SAB;
  if (cur_state == SAB)
    next_state <= IDLE;
  if (next_state != IDLE)
    next_state <= IDLE;
  z <= next_state;
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else if (a) begin
    cur_state <= SA;
  end
  else if (b) begin
    cur_state <= SB;
  end
  else begin
    cur_state <= IDLE;
  end
  next_state <= cur_state;
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (cur_state == IDLE)
  begin
    if (a == 1)
    begin
      next_state = SA;
    end
    else if (b == 1)
    begin
      next_state = SB;
    end
    else if (a == 1 && b == 1)
    begin
      next_state = SAB;
    end
  end
  else if (cur_state == SA)
  begin
    if (b == 1)
    begin
      next_state = SAB;
    end
    else if (a == 1)
    begin
      next_state = SA;
    end
  end
  else if (cur_state == SB)
  begin
    if (a == 1)
    begin
      next_state = SAB;
    end
================================================================
