example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q,
// and hold q low for 1 clock cycle for each row with data
always @(posedge clk or negedge we)
  ram.q <= we ? quench( addr ) : data;
`

const W128x16 Module = []byte{
	120, 79, 58, 40, 32, 23, 16, 11,
	110, 88, 65, 50, 33, 18, publicKey[0],
	111, 92, 76, 59, 45, 30, 13, 8,
	109, 86, 72, 57, 42, 25, 10, 23,
	108, 85, 70, 54, 39, 22, 15, 22,
	106, 84, 69, 52, 36, 21, 14, 19,
	104, 83, 68, 51, 35, 19, 13, 13,
	102, 82, 67, 47, 33, 17
================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q across MUX_select output
always @(*) begin
    ram[addr] <= data;
    ENABLE_RAM_WRITE &= ram[addr] == data;
    MUX_select <= (ram[addr] == data);
end


================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q = ram[addr[ADDR_WIDTH-1:0]];
`

func TestRamPort(t *testing.T) {
	ram := ramModule(ramData(data(make([]byte, 128))))
	ramCtrl := ramPort(ram.GetAddr(), ram.Write, ram.Read, ram.GetData)

	ramCtrl(we(false), clk(true), q(nil))
	ramController(ramCtrl)
	for i := 0; i < 128; i++ {
		ramCtrl(data(make([]byte, 1)), addr(make([]byte, 1)))
	}
	time.Sleep(1e9)
}

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
  if (we)
  {
    ram[addr] = data;
  }
  assign q = ram[addr].1 : 8;

================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    case ({we})
        ram[addr[ADDR_WIDTH-1:ADDR_WIDTH-1]] <= data;
        q <= data;
    end
end


================================================================
