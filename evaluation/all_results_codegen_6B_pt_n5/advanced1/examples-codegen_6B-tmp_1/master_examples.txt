example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	always @(posedge clk or negedge rst)
    begin
        if (rst)
		begin
			s <= 0;
		end
        else if (a >= 0 and b >= 0)
		begin
			s <= a + b;
		end 
		else if (a >= 0 and b < 0)
		begin
			s <= a + b - 256;
		end
		else if (a < 0 and b >= 0)
		begin
			s <= a - 256 - b;
		end
		else if (a < 0 and b < 0)
		begin
			s <= a - 256 - b + 256;
		end
    end

  
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



update "s" 
   {s <- (a<<1 | b) & 0xFF;}

update "overflow" 
   {overflow <- ((a & 0x80) == 0x80) | ((b & 0x80) == 0x80) 
                & (((a ^ b) & 0x80) != 0)}



================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


long signed_type = 255;
let signed_one = 128;

always @(posedge clk)

unsigned val_carry = 0;

unsigned test_a_sign = a < signed_one;

// carry is positive if either a is negative or b is negative 

if (test_a_sign == 0) {
    //Standards compliant
    //a completes the 16 bits of s
    //sum of inputs when carry overflows is handled 
}

signed_carry = b >= signed_one;
if (signed_carry) {
    sum = sum + a + b;
    signed_carry <== gt -> s = sum;
}

else {
    sum = sum + a;
    signed_carry <== lt -> s = sum;
}

#ifdef T_v1
    a_overflow <=
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  
if ((a[7] AND b[7]) EQU 0) EQU signed_overflow
  s[7:0] = a[7:0] + b[7:0]
else if ((b[7] AND a[7] SLE signed_overflow) OR ( a[7] AND b[7] EQU 0))
  s[7:0] = unsigned_value(-1) + unsigned_value(0)
  
  
end


instance signed_adder_followup(signed_adder(64, 30, 7, 0) & a, b, overflow & s);

def_signal(dout, s, overflow);

      
println (dout {
  "Hello", s = 7
# length(signed_adder_followup) = 56
});
print(ruleset ((jack()) = s));

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always@(posedge clk or negedge rst) begin
    if (rst == 1) begin
	s <= 0;
	overflow <= 0;
    end else begin
	input a <= a[7:0];
	input b <= b[7:0];
	output s <= a + b;
	if (overflow == 1) begin
	    s <= 0;
	end else begin
	    s <= a + b;
	end
    end
end

================================================================
