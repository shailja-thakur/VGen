example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
  if (active_output)
  {
    s <= a + b + '1';
  }
  else
  {
    s <= '0';
    overflow <= '1';
  }

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk) begin
    if (clk) begin
        s <= a + b;
        if (a > 1073741823 or b > 1073741823 or s > 1073741823) begin
            overflow <= 1'b1;
        end
    end
end


// The signed adder is modelled as a testbench


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    s <= a + b + s;
    if(s[7] == 1)
        overflow <= 1;
end

================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The initial value of s is 0 and the initial value of overflow is 0. 
// The carry in is initialized to 0. 

initial 
  c_temp = 0,
  carry_temp = 0;

always (signed_adder.carry == carry_temp, i_carry, i_carry_temp)
signed_adder.carry = c_temp + carry_temp;

always (signed_adder.i_carry == i_carry, i_carry, i_carry_temp)
signed_adder.i_carry = c_temp + i_carry_temp;

always (signed_adder.s == s)
signed_adder.s = c_temp + s;

always (signed_adder.overflow == overflow)
signed_adder.overflow = c_temp + overflow;

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// For example, if a is a minus number -10 and b is a plus number 5, the output result is -5 and the output overflow is -1. 


// --------------------------------------------------------------------------------
//
  always @(posedge clk or
          posedge clk_rising or
          posedge clk_falling or
          negedge clk_rising_r or
          negedge clk_falling_r)
  begin
    s <= a + b;
  end

  //for example, if a is a minus number -10 and b is a plus number 5, the output result is -5 and the output overflow is -1. 
  always @(posedge clk or
          posedge clk_rising or
          posedge clk_falling or
          negedge clk_rising_r or
          negedge clk_falling_
================================================================
