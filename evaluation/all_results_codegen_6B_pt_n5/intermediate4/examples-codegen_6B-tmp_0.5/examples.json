// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state = 0;\n    present_state = next_state;\n  end\n  else begin\n    if (next_state==0) begin\n      if (in) next_state = 1;\n    end\n    else begin\n      if (in) next_state = 0;\n    end\n    out = present_state;\n  end\nend\n\n// A simple state machine with one state, and one output. In state, out=1, else out=0\nmodule simple_fsm_1(clk, reset, in, out);\ninput clk;\ninput reset;\ninput in;\noutput out;\nreg present_state, next_state;\n// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset) begin\n\t\tnext_state <= 0;\n\tend\n\telse begin\n\t\tif (next_state == 0) begin\n\t\t\tif (in) next_state <= 0;\n\t\t\telse next_state <= 1;\n\t\tend\n\t\telse begin\n\t\t\tif (in) next_state <= 1;\n\t\t\telse next_state <= 0;\n\t\tend\n\tend\nend\n\n// Testbench\n\n#include \"simple_fsm.h\"\n\n#include \"test_simple_fsm.h\"\n\n// clang-format off\n#include \"test_simple_fsm_generated.h\"\n// clang-format on\n\n#include \"test_simple_fsm_verify.h\"\n\n#include \"test_simple_fsm_verify_generated.h\"\n\n#"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  out <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset)\n        present_state <= 0;\n    else if (in)\n        present_state <= 1;\n    else\n        present_state <= present_state + 1;\n    next_state <= present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    }
  ],
  "created": 1663519562,
  "id": "cmpl-XqGXKejqN8XwM9grTQxTLO641ZWRQ",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 621,
    "prompt_tokens": 148,
    "total_tokens": 769
  }
}