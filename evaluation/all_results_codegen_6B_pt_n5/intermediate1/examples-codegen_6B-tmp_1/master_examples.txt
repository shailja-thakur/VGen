example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

functional addr( integer );

always @(posedge clk)
r <= sum + addr( mul( a, clk_mod ) );

always @(posedge clk)
b <= a + addr( mul( b, clk_mod ) );


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
`octonion_half_adder( Signal_I, Signal_B );

art.pure
function half_adder_cout is half_adder.cout;
`octonion_half_adder_cout( c );

func half_adder_sum(
input a, b,
output cout, sum 
);
half_adder_sum_input a, b, c;
`octonion_half_adder_sum( x, y );
a = To_Octonion_Cell(11, 13, 14);
b = To_Octonion_Cell(16, 23, 31);
Carrier C = half_adder_sum(a, b, c.cout, c.sum);
Console.WriteLine( C.C );

agca( 32, 56789 );

Console.WriteLine("Some typed interface works in 68k
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

RunResult half_adder_wrap(
output cout, sum,
output carry_out,
input a, b);
`)

} else if _, ok := VC.importExpr("HalfAdderWrap"); ok {
	var sum int64
	defer ast.Nil(VC.importExpr("Sum"))
	var carry_out int64
	
	tran  := VC.newtrans()
	
	for _, in := range VC.inputs {
		
		tran.setInput(input, in)
		loop( tran, switchCase, conChannel, in )
		
	}
	
	cmdfmt := ` sum =  0; tran.tobegin()
	
	for tran.done==0 {
	  var x, y int64

	  x, cout = tran
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

prev_carry: cin; // The previous carry-out cin.
  
half_adder( a(cin), b, cout, sum(cin);
sum < cout; // Carry-out.
  
sum += a(sum) +b cin; // The sum together with the shifted carry-out cin.
cout(sum);


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
void sum_fcns()
{
  cout = (sum[1] << 4|
         sum[0]);
}

always @(negedge clk)
void out_set_fcns()
{
  sum[2] = (a << 4 | b);
  sum[1] = (sum[1] >> 1);
  sum[0] = (sum[1] >> 1);
}

================================================================
