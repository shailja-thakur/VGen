example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0] out;
always @ (a or b or sel)
begin
    if (sel == 0)
        out = a;
    else
        out = b;
end

================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Each output is sel is not an output.
wire [4:0] mux1;
wire [4:0] mux2;
wire [4:0] mux3;
wire [4:0] mux4;
mux mux1_0(a[0], b[0], sel[0], mux1[0], mux2[0], mux3[0], mux4[0]);
mux mux1_1(a[1], b[1], mux1[1], mux2[1], mux3[1], mux4[1], mux1[1]);
mux mux2_2(a[2], b[2], mux1[2], mux2[2], mux3[2], mux4[2], mux1[2]);
mux m
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0] out;
always @( 
	                                                                                                                                                                  
always @(sel or in0 or in1 or in2 or in3 or sel)

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Each mux is the mux, invert the mux.
wire mux_invert;
assign mux_invert = (a[sel] == 0)? mux_invert : 1'b0;
// Each mux is the mux, invert the mux.
assign out = mux_invert ? mux_in : mux_in;

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0] out;
always @(  or sel)
begin
    case (sel)
        1'b0: out = a;
        1'b1: out = b;
    endcase
end

================================================================
