example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
if (reset) r_reg <= 5'b00000;
else r_reg <= r_next;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[3:0], feedback_value};
assign q = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
if(reset)
	r_reg <= 5'b00000;
else
	r_reg <= r_next;
end
assign q = r_reg;
assign r_next = {r_reg[3:0],feedback_value};
// concatenating bits 2 and 4 of r_reg to create byte 3
// concatenating bits 3 and 5 of r_reg to create byte 4
// concatenating bits 4 and 6 of r_reg to create byte 5
// concatenating bits 5 and 7 of r_reg to create byte 6
// concatenating bits 6 and 7 of r_reg to create byte 7

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk or posedge reset ) begin
 if ( reset ) begin
	r_reg <= 5'b00000;
 end else begin
	r_reg <= r_next;
 end
end
assign q = {r_reg[3],r_reg[2],r_reg[1],r_reg[0],feedback_value};
assign r_next = {r_reg[4],r_reg[3],r_reg[2],r_reg[1]};
assign feedback_value = ( r_reg[0] ^ r_reg[4] );

================================================================
