example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or negedge reset)
begin
if (reset == 1'b1)
q <= 4'b0000;
else if (slowena == 1'b1)
	begin
	if (q == 4'b1010)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end
else
	q <= q;
end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (slowena == 1'b1 && reset == 1'b0)
 q = 4'd4;
 if (slowena == 1'b1 && q == 4'd9)
 q = 4'd4;
 if (reset == 1'b1) // slowena == 1'b0 is default value... if reset comes in after the slowena line, then q is reset to 0.
 q = 4'd0;
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @ (posedge clk) begin
	
	if (slowena == 1 && reset == 1) q <= 0;
	
	else if (slowena & reset == 1 & q < 9)
	 	q <= q + 1;
	 
	 
 end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
 always @(posedge clk or posedge reset)
 if(reset) q <= 4'b0;
 else if(slowena) begin // When slowena is high the always block will keep executing
 if(q == 4'b9) q <= 4'b0;
 else q <= q + 4'b1;
 end else begin // When reset is high
 q <= 4'b0;
 end
 if(reset)
 $display("{%s,%b} is being asserted", "slowena", slowena);
 else
 $display("{%s,%b} is being reset", "slowena", slowena);
 if(reset)
 $display("{%s,%b} is being deasserted", "slowena", slowena);
 else
 $display("{%s,%b} is being asserted", "slowena", slowena);


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// In the latter case, q is incremented by 1.
 reg [3:0]q_error;
 assign q = (~reset ? q'b0 : q'b10)& (~q'b0);
 always @ *
 begin
 q_error = q'b10-1;
 if (~slowena)
 q_error = q'b10;
 end
 always @ (posedge clk) begin
 if (reset is true)
 q <= 'b0;
 else begin
 if (~slowena)
 q <= q_error;
 else
 q <= q'b11;
 end
 end


================================================================
