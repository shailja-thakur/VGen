example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
	q <= ram[addr];


================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (we | clk) begin
        ram[addr] <= data;
        repeat i range [DATA_WIDTH-1:0] :=
            ENCODE_ONLY( ram[ADDR_WIDTH+i-1:1] );
        end;
end;

// Example
// Print 4 bits - hex code of 0..15
reg [15:0] hex4 =
    ram[0] |
    ram[3]<<8 |
    ram[2]<<16 |
    ram[1] << 24;
reg [16:0] word4 =
    ram[0]<<0 |
    ram[3]<<8 |
    ram[2]<<16 |
    ram[1]<<24;
always @(posedge clk, negedge clk2) begin
        if (we) begin
            q
================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or negedge we)
    if (we)
    begin
        ram[addr] <= data;
        q <= ram[addr];
    end

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always(clk.posedge) begin
    if (we) and( addr[ADDR_WIDTH-1:0] ) RAM_WRITE(ram);
    else RAM_READ(ram);
    if( q != ram)
    begin
        q <= ram[7:0];
    end
end

================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk) begin
    if (ack && clk && we) begin
        ram[addr] <= data;
        q <= ram[addr];
    end
end

================================================================
example-5: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q and jack it through we before
always (we && clk.posedge) begin
    #(advance() { ram[addr] <= data; }.Else() {})
end

================================================================
example-6: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
	if(we) begin
		ram[addr] = data;
		assign(q, conv);
	end
end

================================================================
example-7: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) begin
        ram[addr] <= data;
    end
    ram.mem_buf <= ram;
    ram.RST <= 1'b1;
    default:
        q <= ( //fence here to correctly trigger simulation also on edge trigger
            cop}2'h11111
            ffc}.2'h11111 ffs*.2'h11111)+_;
end


================================================================
example-8: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (clk or !we) begin
    ram_latest = ram[addr];
    ram[addr] = data;
    q = ram_latest @ 0xff;
end
`;
const tr = simpleTransmon;
const trNet = tr(1);
cpu = new CPUController({ clk: 1 });
const ram = RAM.fromMemory(seedRom);
const top = new Sysmem({ sam:ram });

describe('seed emulator', function () {
    beforeEach(function () {
        top.reset();
    });

    it('should flash RAM', function () {
        let mem = new SOS({ sam:RAM });
        let algo = new Seed({ mem });
        algo.execute();       
    });
});

================================================================
example-9: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always (we and clk) begin
    ram[2*ADDR_WIDTH-1:0] <= data;
    q <= ram[2*ADDR_WIDTH-1:0][6*ADDR_WIDTH-1:0];
end

================================================================
