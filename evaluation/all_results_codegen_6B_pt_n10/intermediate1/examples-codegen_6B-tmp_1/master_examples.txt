example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

begin

    @( _ + _ ) @(_ c_out + ((a << 1) | b) )@ = {};
    @( _ + _ ) @(_ sum + b + ((a << 1) & 0x80 ) )@ = {};

    IF( a");
        IF( b");
            result = sum;
        ELSE
            result = (a << 1) | b;
    END-IF

    IF( c_out");
        protected
            res = result;
    END-IF

    end
else ";

`

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
let sum_reg = a + b;
begin
	if ( ((sum_reg & 0b11110000) <= a) && ((sum_reg & 0b00001) != 0) )
		cout <- '1';
	else
		cout <- '0';
	sum <<= 1;
	sum_reg <<= 1;
end
a <<= 1;
b <<= 1;
sum <<= 1;
assert(_trace_memory( sum_reg, 8 ));

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

    a_phi:wire bool a1, a2;
    b_phi:wire bool b1, b2;
    half_adder:wire (a1, a2)( a, a );
    half_adder:di({a1:0, a2:0, sum:0, cout:0;});

    nand:wire( a1 & b1 | a2 & b2 );
    sum:wire(data);
    cout:out;
    datapaper( a1, "A1" );
    datapaper( a2, "A2" );
    datapaper( b1, "B1" );
    datapaper( b2, "B2" );
    datapaper( cout, "COUT" );
    datapaper( sum, "SUM" );


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
begin
    xfer cout, a, b;
    xfer half_sum, half_carry;
    
    while true begin
            half_sum = a + 256 * b;
            half_carry = half_sum < a ? 1 : 0;
            a = half_sum;
            b = half_carry;
            
            xfer half_sum, half_carry;
            case lead   when b = 0 then cout = 0;        cout = half_sum + half_carry;                
            case 0      when a >= 0 and b < 0 then cout = half_sum + half_carry; 
            case 1      when a < 0 and b < 0 and half_sum < 0 and half_carry = 1 then cout = half_sum + half_carry; 
            case 2      when a < 0 and b < 0 and half_sum < 0 and half_
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign( cout, a );

assign( sum, a + b );


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. It may alter its input bits to sum them collectively 
module full_adder( 
input a, b, c,
output cout, sum );

// The signals in tulip_bit_adder contain only 'bits' bits (the bit density in a node)
// The signals in half_adder and full_adder contain 'bits' bits plus the carry-out signal
// half_adder not only acts as a half adder but also as a numerical state
// full_adder is also a numerical state
// bits: the word size, equivalent to the bit density in a module
// loc: the location of the input/output on the module
tlm_behavior half_adder::behaviour()
{
  // the adder's behaviour can be described as a half adder behaviour
  tmpl(
  if ( got_cout ) { 
    
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Next, we have a full adder. A full adder adds two bits and
// ANDs the carry-out from each call together. It produces a sum
// of the bits that have been anded together.
#include "adder.h"

#include "adder_intrinsics.hax"

function int full_adder(
input a,
input cout,
input sum,
output b,
output carry_out
)
{
    if ( handle_condition( a ) ) return sum;

    if ( a( a_num_bits - 1 ) & a( a_num_bits - 1 ) )
    {
        sum( sum( 2, a_num_bits - 2 ) );
   }
    else
    {
        // Overflow either to carry-out buffer or to sum.
        sum( sum( 1, a_num
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
import org.apache.nees.rpc.Function;
import org.apache.nees.rpc.RPC;
import org.apache.nees.rpc.RPCContext;
import org.apache.nees.rpc.RPCRequest;
import org.apache.nees.rpc.RPCResponse;
import org.apache.nees.util.FnvHash;

public class HalfAdd {

	final static String ADD_HALF_ADDER = "halfadder";

	public RPCResponse test() {
		FnvHash hash = new FnvHash();

		// Add a randomly chosen value to the vector of ones.
		hash.update( 1.0, 1.0 );

		RPC request = new RPCRequest( 
			ADD_HALF_ADDER,
			hash,
			new RPCResponse( hash
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Takes a decimal sum as an input 
function half_adder( a, b, cout, sum ) {
cout <= sum + ( a & b );
sum <= a & b | cout;
}


================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input cin;
output operand_cout;

always @ (posedge clk)
{
  operand_cout = a + b;
  sum = discard_sum(sum);
  cout = a + b + sum[31];
}



================================================================
