example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
half_adder(0,1,cout,sum);
half_adder(1,0,cout,sum);
half_adder(1,1,sum,cout);

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_gate( 
input a, b ) {
    wait();
    a = a & 1;
    b = b & 1;
    // The carry is the value of the last bit of a + b.
    sum = a + b;
    // Carry is the bit that carries.
    carry = sum & 1;
    if ( a == 1 ) {
        // Carry is 1 if a == 1, 0 otherwise.
        carry = carry + 1;
    }
    else {
        // Carry is 0 if a == 0, 1 otherwise.
        carry = carry - 1;
    }
    // The output is the sum or the carry.
    cout = sum + carry;
}




// The full adder adds two bits and produces a sum and carries the carry out.
module full_adder( 
input a, b,
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

net half_adder_net = {
	.half_adder = half_adder,
	.inputs = 2,
	.outputs = 2
};

function half_adder( 
input a, b,
output cout, sum ) {
	sum = a + b + sum;
	cout = sum;
}

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
function half_adder_half_adder( a_in, b_in, cout_out, sum_out );
function half_adder_half_adder( a_in, b_in, cout_out, sum_out )
  cout_out <= sum_out(0) + a_in + b_in;
end half_adder_half_adder;
end half_adder;
endadder;

================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

#define D_FORMAT "%d:%d\n"

void half_adder(
input a, b,
output cout, sum )
{
    for( int i = 0; i < 8; i++ )
        sum <<= 1;
    
    sum += a + b;
    cout << sum;
    if( sum < 128 )
        cout << " ";
    else
        cout << "\n";
}

int main()
{
    half_adder( 0x01, 0x10, cout, sum );
    half_adder( 0x00, 0x00, cout, sum );
    half_adder( 0x11, 0x00, cout, sum );
    half_adder( 0x00, 0x11, cout, sum );
    half_adder( 0x00, 0x00, cout
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function sum() {
  var a1 = a;
  var b1 = b;
  var sum = 0;
  var carry = 0;
  while(1) {
    // Carry out the half adder adding bits from a1 and b1.
    if( b1 == 0 ) {
      carry = a1;
      break;
    }
    sum = sum + b1;
    // If the sum is complete, stop.
    if( sum == 0x7f ) {
      break;
    }
    // Else, move on to the next bit in b1.
    a1 = ( a1 & 0x00ff ) << 1;
    b1 = ( b1 & 0x00ff ) << 1;
    
    // Compute the next half adder.
    if( b1 & 0x0080 ) {

================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

output_wire cout;

always @(posedge clk)
  sum <= sum + a + b;

always @(posedge clk)
  cout <= sum[31];


================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_out( cout, sum )
    return (a+b + 2*cout) mod 2^12;

half_adder( 
a, b,
cout, sum );

function half_adder_sum( a, b )
    return a+b + 2*cout;
`

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

module half_adder2( input a,
output cout, sum );

// This is a full adder. A full adder adds the two inputs, 
// and produces the sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

module full_adder2( input a, b,
output cout, sum );

// These are the half-adders for each of the 8-bit values.
module half_adder_1( input a, 
output cout, sum );

module half_adder_2( input a, 
output cout, sum );

module half_adder_3( input a, 
output cout, sum );

module half_adder_4( input a, 
output cout, sum );

module half_adder_5( input a, 
output cout, sum );


================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a + b;


================================================================
