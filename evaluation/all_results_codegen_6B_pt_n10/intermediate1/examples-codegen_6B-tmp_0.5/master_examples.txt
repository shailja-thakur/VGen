example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Outputs the sum of inputs.
function sum()
{
    var sum = a + b;
    cout = sum;
}

// Outputs the carry-out of the half adder.
function carryout()
{
    var sum = a + b + carryout;
    cout = sum;
}

// Outputs the carry-out of the half adder, shifted by one.
function carryout_shift()
{
    var sum = a + b + carryout_shift;
    cout = sum;
}

// Outputs the carry-out of the half adder, shifted by two.
function carryout_shift_2()
{
    var sum = a + b + carryout_shift_2;
    cout = sum;
}

// Outputs the carry-out of the half adder, shifted by
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

output half_adder_out;

function half_adder_func( a, b )
    half_adder_out <= (a + b + a + b);
end half_adder_func;

end half_adder;

module half_adder_mod(
input a, b,
output cout, sum, carry_out )

half_adder_out <= (a + b + a + b + carry_out);
end half_adder_mod;

end half_adder_mod;


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always@(posedge clk)
begin
    sum <= (b + a) + carryout;
    carryout <= (b + a) + sum[63];
end

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

// This is a half subtracter. A half subtracter subtracts two bits and produces a sum and carry-out.
module half_subtracter( 
input a, b,
output cout, sum );

// This is a full subtracter. A full subtracter subtracts two bits and produces a sum and carry-out.
module full_subtracter( 
input a, b, c,
output cout, sum );

// This is a bit shifter. A bit shifter shifts a bit to the right and produces a sum and carry-out.
module bit_shifter( 
input a, b,
output cout, sum );

// This
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

(*output cout[0], output cout[1] =

half_adder( a[0], b[0], cout[0], cout[1] ) 

, half_adder( a[1], b[0], cout[0], cout[1] ) 

, half_adder( a[0], b[1], cout[0], cout[1] ) 

, half_adder( a[1], b[1], cout[0], cout[1] ) 

);
*/

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
  sum <= a + b + carry_out;

always @(posedge clk)
  cout <= sum[2];


================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder will carry out the sum of two bits.
function half_adder_carry( a, b, cout );

// The half adder will add two bits.
function half_adder_sum( a, b, cout );

// The half adder will return the sum.
function half_adder_return( a, b, cout );

// This is a full adder. A full adder adds a number of bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// The full adder will carry out the sum of two bits.
function full_adder_carry( a, b, cout );

// The full adder will add two bits.
function full_adder_sum( a, b, cout );

// The full adder will return the sum.
function full
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

var cin, carry_out;

carry_out <= (a + b + carry_out);

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b, 
output cout, sum );

var cin, carry_out;

carry_out <= (a + b + carry_out);

// This is a subtracter. A subtracter subtracts two bits and produces a sum and carry-out.
module subtracter( 
input a, b,
output cout, sum );

var cin, carry_out;

carry_out <= (a + b - carry_out);

// This is a full subtracter. A full subtracter subtracts two bits and produces a sum and carry-out.
module full_subtractor( 
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_add( a, b, cout, sum ) {
  if ( a == 0 ) {
    cout = b;
    sum = b;
  }
  else if ( b == 0 ) {
    cout = a;
    sum = a;
  }
  else {
    sum = (a + b) & 0x7;
    cout = (a + b) >> 3;
  }
}

function half_adder_carry( a, b, cout, sum ) {
  if ( (a + b) >> 3 == 0 ) {
    cout = 0;
    sum = 0;
  }
}

function half_adder_sum( a, b ) {
  return (a + b) & 0x7;
}

function half_adder_carry_sum( a, b )
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

	always_comb
		cout <= sum + a + b;
		sum <= a + b + carry_out;
		carry_out <= b;

================================================================
