example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) scan_register_fsm t next_q;

reg [3:0] q @(posedge clk);
variable int incremented;
always @(negedge clk) begin
    if (reset) begin
      next_q = 1;
    end
    else if (next_q == 12) begin
      next_q = 1;
    end
    else begin
      if (bit_counter == 0) begin
        incremented = 1;
      end
      else begin
        bit_counter = 1;
        bit_counter--;
      end
    end
end

reg [3:0] r @(posedge clk) { next_q; }
`)

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reset <= high;
clk <= high;
watch (q) (reset & reg[3:0] = q);

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always clk or (reset and q = 1);

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always clk rising
assign q = if reset = 1
then 1
elsif q=12 then 1
else q + 1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin 
    if(reset) begin
        q <= 1;
        case counter: begin
            if (q == 12) q <= 1;
            else q <= q + 1;
        end
    end
end
`)

	cout << endl << "It runs the counter" << endl;

	auto script_2 = string("solve-03 v0.1 by Frédéric Salvato\n" \
		"This program port some wikiural routines as IRCSE and SIT CSV stream saying:\n" \
		"Solving the only railroad problem ever solved by camea folks : Sailing a Train by Spacehole's TA-E maroon :\n" \
		"under protest, president had elected by senate, victory, targeting the leading presidential candidate (\"Ziufang Len\"),\n" \
		"
================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or (reset and q != 12)) begin
  if (reset) begin
    q := 0;
  end
  else if (q == 12) begin 
    q := 1;
  end
  else begin
    q := q + 1;
  end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
measure wp4_mcu_counter( 
    input clk, 
    input reset, 
    output reg [3:0] q // << Fake output inserted into the block
); 

//------------------------------------------------------------------------------
#parameters clk = 1'b0,1'b1
#parameters reset = 1'b0,1'b1
module mod_4x4x4(
    input reset,
    input clk,
    output [4:0] out1,
    output [4:0] out2,
    output [4:0] out3,
    output [4:0] out4
);

//------------------------------------------------------------------------------
module mod_4x4x4_Clk(
    input clk,
    output [4:0] out1,
    output [4:0] out2,
    output [4:
================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
	if(reset) begin
        		q <= 1;
        	end
	else if(q > 12) begin
                q <= 1;
        	end
	else, 
		q <= q + 1;
end

localparam int N_WAY = 6;
// This is a counter that counts from 1 to 12 for each 1 bit.
// number of counters depends on N_WAY. 
module mid_source_counter(
    input clk,
    input reset,
    output reg [31:0] q
); 
// clear q by reset, and assign q to 0 on rising @clk. 
// Note propagation edge cannot be triggered by rising @clk, instead propagation is blocked by 
// the timing constraint that the clock must maintain during the low active time. This is done by
//
================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reg [3:0] a = 1;
always @(posedge clk)
enable SELEN#;
  if (reset) begin r <= 1; end
else if (r==12) begin r <= 1; end
else begin
   if (r == 1 || r == 12) begin r <= r+1; end 
   else begin r <= r+1; end
</pre>

Behavior:

* <code>a</code> keeps the current value
*   <var>r</var="" ,1> is the previous value
*   <var>q</var="" ,1> is the current
*   <var>r</var="" ,12> is the future value
* <em>which is a random parameter</em> that does not influence the behavior of the hardware

On reset, this counter's output value is <code>01</code>
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always begin
    if (reset) q = 1'b0;
    else if (q == 12'h - 1) q = 1'b0;
    else q = q + 1;
end

================================================================
