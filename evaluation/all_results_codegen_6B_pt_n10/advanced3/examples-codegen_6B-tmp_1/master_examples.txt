example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


function begin();
begin:
	for (int i = 10; i > 0; i--)
		next_state = IDLE; 
next_state:
	if (next_state == IDLE)
		next_state = IDLE;
	if (next_state == S1)
		next_state = S10;
	if (next_state == S10)
		next_state = S101;
	if (next_state == S101)
		next_state = IDLE; 
	present_state = next_state;
end:
	z = (present_state == S101); 

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


assign next_state = IDLE;
assign t1 = x;
assign t2 = t1;
assign t3 = t1;
begin
	if(reset == 0)
	begin
		next_state = IDLE;
		present_state = IDLE;
	end
else
	begin
		if(next_state == IDLE) // next_state indicates that no other transition was taken 
		begin
			if(x=0) // if RTM detects logic 0 upon input x, in the FSM IDLE state, then 
			then
				// it accepts transition S1 on signal x, the next state 
				// is assigned to S1 in shown code, next_state = S1 
				// next_state reflects the logic of the FSM IDLE 
				set_next_state(S1); // set next_state
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

   always @(posedge clk or negedge reset)
	  if(reset)
		 present_state = 0;
	  else
	    if(x or (next_state = present_state))
		next_state = present_state + 1;
		
	  else{
		 if(next_state == IDLE)
                  //when next_state is IDLE, next_state is assigned S1 
				  if((next_state = S1) or ((next_state = S10) and x))
					 next_state = S101;
				  else
					 next_state = IDLE;

		  else{
			 if(next_state != S10)
                   //when next_state is S10, next_state is assigned S101 
					 if(next_state == S1)
					   if((next_state = S
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk) begin
    present_state <= next_state;
    next_state <= IDLE;
  end

  assign z(x) <= present_state == S101;
"""

testVectorList = [(((1, 0, 1, 0, 0, 0, 1, 0), 7), 0, 0)
    ,, (((0, 0, 1, 0, 0, 0, 1, 0), 7), 0, 0)]

nbTest = len (testVectorList)

for testId in range(nbTest):	 
	s = testVectorList [testId][0]

	print()
	print list(s)

 	prefix = ' ' if ((testId % 3) == 0) else ''
	print '{0}---next_state: ', prefix,
	printList('' ,testVectorList
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// Set z to 1 when present_state is S101
always @(posedge clk or negedge reset)
 begin
   if (reset) next_state = IDLE;
   else next_state = x ? S1 : IDLE;	
 end
 
*/

// Tick function to return time value in ps due to watchdog connection
// precal calculator 
function timeSlice() {
        return 1; 
};

// Tick function to setup PMOD3 and return time value in ps due to watchdog connection
function tickTock() 
{
        integer _oldtimer = currTock;
        clock();
        priorIdle = antidenWake = false;
        deepSleep = inDeepSleep = currTick	= clk_tckDivisor;	
        return(timeSlice() - _oldtimer);
}

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// The following function implements the registers.
begin adv_fsm();
end

begin live_implicit_cycles(clk,reset)
present_state=IDLE;
next_state=IDLE;
// It is required that the interpreter handle thread switching.
// The Live interface (with absolute_time, abs_time_delta... commands) 
// substitutes for the call to interpreter.interp() below. 
while (1) {
  interpret();
  switch(next_state)
    {
    case IDLE:
      if (x==1) next_state = S1;
      break;
    case S1: 
      if (x==0) next_state = S10;
      break;
    case S10: 
      if (x==1) next_state = S101;
      break;
    case S101
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset) begin
    if (reset) next_state <= IDLE;
    else next_state <= present_state;
end
%end
*/
#endif
#endif


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk) 
  begin
    if( x == 1 and not reset ) 
    begin
      next_state = IDLE;
    end
    else if((x != 1) and reset) 
    begin
      next_state = IDLE;
    end
    else if( present_state == S1 )
    begin
      if( x == 1 )
      begin
        next_state = S10;
      end
      else
      begin
        next_state = IDLE;
      end
    end
    else if( present_state == S10 )
    begin
      if( x == 0 and next_state == S101 )
      begin
        next_state = IDLE;
      end
      else
      begin
        next_state = S1;
      end
    end
    else if( present_
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(*) begin
		if in_reset @(posedge clk) begin reset <= 1; next_state <= IDLE; end
		else (assign next_state = (1'b0 & x) ? S10 : IDLE;)
	end

	always @(posedge clk) begin
		if (next_state == IDLE) begin
			// cout << "ADV-FSM : RESET " << ", next_state IDLE (" << next_state << ")";
			z <= 0;
		end
		else begin
			// cout << "ADV-FSM : NEXT STATE " << program_state << 
			 // " FIFO = " << (bool) FIFO[0] << ", z = " << z.read();
			z <= (bool) FIFO[0];

			program_state <= next_state
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @ (posedged clk)
	begin
		if (reset == 1)
		begin
			next_state = IDLE;
			present_state = IDLE;
		end
		else if (next_state != IDLE)
		begin
			present_state <= next_state;
		end
		//assign x to bit 0 
		if (next_state == IDLE) present_state <= S1;
		if (next_state == S1) present_state <= S10;
		if (next_state == S10) present_state <= S101;
		//assign x to bit 1 
		if (next_state == S1) present_state <= S101;
		if (next_state == S10) present_state <= S101;
		if (next_state == S101) present_state <= S101;
================================================================
