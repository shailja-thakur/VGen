example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk) // clock edge
		next_state <= S1; 		// if x is 1, next_state is S1, otherwise it stays at IDLE
	if (reset) next_state <= IDLE; // if input is high, next_state is IDLE
	always @(negedge clk) // clock edge
		next_state <= S101; 	// if x is 0, next_state is S10, otherwise it stays at IDLE
	if (reset) next_state <= IDLE; // if input is high, next_state is IDLE
	always @(posedge clk) // clock edge
		next_state <= S10; 	// if x is 0, next_state is S1, otherwise it stays at IDLE
	if (reset) next_state <= IDLE; // if input is high, next_
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


reg [2:0] next_state_in;
reg [3:0] next_state_out;
reg [4:0] next_state_out_adv;

always @ (posedge clk or negedge reset) begin
    if (next_state_in == S1) begin
        if (x == 1) next_state_out = S10;
        else next_state_out = IDLE;
    end
    if (next_state_in == S10) begin
        if (x == 0) next_state_out_adv = S101;
        else next_state_out_adv = IDLE;
    end
    if (next_state_in == S101) begin
        next_state_out_adv = IDLE;
    end
    if (next_state_in == IDLE) begin
        if
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// This module is the advanced finite state machine
// The input signal x is the input to the adv_fsm
// The output signal z is the output of the adv_fsm
adv_fsm <= clk, reset, next_state, x;

// The output z is the output of the adv_fsm
assign z = next_state;


================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
    z <= (x[0]==1?1:0);
    next_state <= IDLE;
    present_state <= IDLE;
    if( x[0] ) next_state <= S101;
    if( x[0] ) next_state <= S10;
    if( x[0] ) next_state <= S1;
    if( reset )
    {
        present_state <= IDLE;
	next_state <= IDLE;
    }
end

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if(next_state==IDLE)
    begin
        present_state <= next_state;
        next_state <= S1;
    end
    else
    begin
        present_state <= next_state;
        next_state <= IDLE;
    end
end

// The advanced FSM is called by the DecoderFSM for each input bit and then determines if the bit is valid or not.
assign z = (present_state==S101)?1:0;
end


================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk or negedge reset)
  begin
    if (reset) next_state = IDLE;
    else if (next_state != IDLE) next_state = next_state; 
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
  end
end

// This is the behavioral model. It was created by Philip G. Bennett with help from
// Dr. Chris L. Bennett.

module behavior(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
  if(reset) next_state=IDLE;
  else next_state=present_state;
  else if(next_state==IDLE)
  if(.U(x)) next_state=S1;
  else next_state=IDLE;
  else if(next_state==S1)
  if(.U(x)) next_state=S10;
  else next_state=IDLE;
  else if(next_state==S10)
  if(.U(x)) next_state=S101;
  else next_state=IDLE;
  else if(next_state==S101)
  next_state=IDLE;
  else next_state=IDLE;
end


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

   always @(posedge clk or negedge reset) begin
        if (!reset) begin
            next_state <= IDLE;
        end
        else if (next_state <= S1) begin
            next_state <= S1;
            next_state <= S10;
        end
        else if (next_state <= S10) begin
            next_state <= S10;
            next_state <= S101;
        end
        else if (next_state <= S101) begin
            next_state <= S101;
            next_state <= IDLE;
        end
   end
end

//  This is the output code
//  Every time x is asserted, the output goes to 1
//  Every time x is reset, the output goes to 0
//  Every time the clock is asserted, the output goes to 0
//  Every time the clock
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk or negedge reset)
  begin
    if (reset) next_state <= IDLE;
    else if (x) next_state <= S1;
    else next_state <= IDLE;
  end
end

// This is the output of the module. When the output is 1, the module outputs an x on the output pin.
// When the output is 0, the module outputs a 1.
// If the output is 1, the module outputs a 0.
//
// The output signals are initialized to 0.
module output(
input clk,
input reset,
input x,
output z);
  always @(posedge clk or negedge reset)
  begin
    z <= x;
  end
end


// This is the input module to the module.
//
// The module's input signals are x,
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

        begin
        end

        
================================================================
