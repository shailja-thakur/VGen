example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
  output out1 = wire_assign( in.x, in.y );
  output out2 = wire_assign( in.z, in.w );

  input in1_;
  input in2_;

  out1 = wire_assign( in1_, out1 );
  out2 = wire_assign( in2_, out2 );

output out_ = out1;
void main() {
  output APRef_Result_out;
int out_subst_0;

  out_subst_0 = out_[in.x].value;
  assign( out.x, APRef_Result_out );
  APRef_Result_out = wire_assign( in.x, in.y );
  APRef_Result_out = wire_assign( in.y, out1 );
  APRef_
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
function wire_assign( input in, output out ) {
  out = in; // write a message to "out" that mentions "in" (the pointer goes from the argument name to the destination-only variable)
}
 endmodule

================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
for (i=0; i<=30; i++) {
    out = in;   
}

================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
out = in;

================================================================
example-5: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign2( input in, output out );

// Each module must be a validator to determine if it should be
// evaluated.  Only inputs connected to input "wire_in" of the first
// wire_assign should be used.  All modules must be executed in
// parallel.
//
// After the initial wire assignment, train the pipeline and reach Max
// Output Points at end of computation.
module wire_train1( input wire_in, output wire_out_1,
		    output wire_out_2, output wire_out_3, output wire_out_4 );

// Assign the output to a wire on the cpu
module m1( input in ) {
  output wire_out = in;
}

//Train the pipeline by setting some pipelined construct(s) to a specific value.
module m2( input in, output out
================================================================
example-6: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
function _apply( in )
{
	out = in;
};
// Provide an appropriate apply function for named input ports
module wire_template( input in, output out )
{
	// body
	wire( input ); io( io );
	_apply( in := out );
};
// The portion of the code below is copy from rt to mtb module.
#include <iostream>
using namespace std;

output map( map<string, input> in ) { throw; }
void map_elts( map<input, cn<input> > elems ) { }
// A user defined map (strange, no?)
template<map<input,cn< input /> > T>
void mapfunc1( map<input,cn<input>> elems ) { }
// Map a map down and change elems to a map
template< map< input
================================================================
example-7: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
`)
        }
        userOut = fmt.Sprintf(">>>\n%v\n", strings.Join(outputs, "\n"))
    }

    goFmt(\nuserIn, fmt.Sprintf("Then you can use the `%v` function to copy the \ninput to the output without sorting. The example \"csvfoo.csv\" \nis the input and \"csv.csv` is the output. Would you like to copy `csv.csv` to `csvfoo.csv`?", strings.Join(inputs, "\n\t")))

    IT(1).threshold(tstmt)
}

func genCasesFromContrib(contrib *rw.Continuation, fnid int, fn *bh.WrappedFun) {
    if contrib.Continuations.Contains(fnid) {
        contrib.Add(fnid, fn)
================================================================
example-8: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_reverse( output out, input in );

class WireAssign : public bert::Node {

public:

  WireAssign( const std::string& name,
              const bert::id_t& input_data_nel,
              const bert::Stack& candidates,
              const bert::char_vec_t& assign_id );

  virtual void eval();

  virtual WireAssign& assign( const bernoulli_t& p_ );
    
protected:

  std::string name_;  
  const bert::id_t input_data_nel_;
  int candidates_;
  const bert::char_vec_t& assign_id_;
  bert::uses<berntinst::Centroid, mclint::Memory> uses_;
  bert::aspects<berntinst::Centroid
================================================================
example-9: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
a = out;

////// testwire ////

// cningwire( in ) // this will need to wire in to its own in ref before it can target/wire the correct output
+ out
( in );

// defwire( in )
&& out
;

defwire( out when in replaced by out )
&& defined( in ) ;
+ ( in && defined( out ) );
+ ( in && = out );

#if defined( in )
defwire( in when not defined( in ) )
&& defined( out );
when && undefined( in ) && !defined( out )
&& out;
#endif


================================================================
