example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  out <= (~load & load & data & out) << amount;

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge load)
  if (load)
    out = data;
  else
    out = left_rotate(out,amount);

// left shift the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge load)
  if (load)
    out = left_shift(out,amount);

// left shift the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge load)
  if (load)
    out = left_shift(out,amount);

// left shift the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge load)
  if (load)
    out = left_shift(out,amount);

// left shift the out register followed
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  out <= ( (load == 1) ? data << amount : left_rotate(out,amount) << amount );

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  // if (load == 1) then out <= data
  if (load)
    out <= data;
  else
    out <<= amount;
end
// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @(posedge clk or negedge reset)
  // if (load == 1) then out <= data
  if (load)
    out <= data;
  else
    out >>= amount;
end
// BSEL

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  out <= load ? load_out : out << amount;

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
  if(load) out <= data;
  else
  begin
    int64_t t = out << amount;
    out <= t | (t >> (64 - amount));
  end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge load)
  if (load) out <= data;
  else out <<= amount;
end

// right shift and rotate
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @(posedge clk or negedge load)
  if (load) out <= data;
  else out >>= amount;
end

// right shift and rotate to the left
module right_rotate_left(clk,reset,amount,data,load,out);
input clk,reset;
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
  out <= load ? data : left_rotate(out[7:0],out[1:0],amount[2:0],out[7:0]);
end

module left_rotate_reg(clk,reset,data,load,out);
  always @(posedge clk)
    out <= left_rotate(data,load,out,31);
end

module left_rotate_reg_load(clk,reset,data,load,out);
  always @(posedge clk)
    out <= left_rotate(data,load,out,31);
end

module left_rotate_reg_load_shift(clk,reset,data,load,out);
  always @(posedge clk)
    out <= left_rotate(data,load,out,out
================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge load)
  out <= (load ? data : left_rotate(out,amount));

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
  if(load)
    out = data;
  else
    out <<= amount;
end

// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [1:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
always @(posedge clk)
  if(load)
    out = data;
  else
    out >>= amount;
end

// shift and rotate operation
module shift_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [1:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
always
================================================================
