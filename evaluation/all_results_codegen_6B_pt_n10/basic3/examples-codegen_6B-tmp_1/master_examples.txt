example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge enable, "old_state", "old_val")
         begin
           if in == 0b01 then pos <= pos + 1 else disf <= pos + 1;
	   else if in == 0b10 then disf <= pos;
           else disf <= pos + 1;
	   old_state <= in;
           old_val <= in << 2;
         end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
prior s1	s2	s3	pos = in;
begin
	// If we don't have any of the inputs, tristate everything wide and we'll just leave
	// the output level at zero. This is even faster.
	when( in='1')	s1 = '1';
	when( in='0')	s1 = '0';
	when( in=='1' && reg[1]=='0' && reg[0)	s1 = '0';
	when( in=='1' && reg[1]='1')	s1 = '0';
	when( in=='0' && reg[1]=='1' && reg[0)	s1 = '0';
	when( in=='0' && reg[1]=='0')	s1 = '1';
	when( in=='
================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or negedge i)
  if (sel) pos <= cPRESS <= cZERO;
// The inputters don't know which pins are assigned to them.
// We could specify the pins from a dedicated priority encoder,
// but we'll set up the pins to the inputter directly, meaning
// it's simpler to do the following:
always @ (posedge clk or negedge i)
  begin
    input[0] <= a <= input[1];
  end
end
`
	res := computeRoute(grammar, TEST_PIN_1)

	assert.Equal(t,
		[]byte{
			0x00,
			0x00},
		res.Final)

	assert.Equal(t, []byte{0x08, 0x01}, res.Route[len(res.Route)-1].
================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
priority_encoder p( select( out[sel] ), select( in[sel] ) );

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
extern priority_encoder priority_encoder_sel (
input [1:0] lsel,
input logic [2:0] sel,
output reg [2:0] out );
// Mask of sel<4
`

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or negedge rst)
  if (rst == 1)
  begin
  	pos <= 0;
  end
    else if (sel)
    begin
        pos <= b;
    end
;

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
before( reg [2:0] b, sel=1/1 ) { assign reg [b] pos; }

#------------------------------------------------------------------------------
# Hex InCoder.  Encrypts binary signal Fb using 08/04/08 Hi and Lo registers.
#------------------------------------------------------------------------------
module in_coder( in [7:0] p, out [2:0] b, inout reg [3:0] hl );

before( reg [2:0] b )
{
# For the CBMC47 maps, flip some bits to have some reflectance.
# NB: bitstream should be AND-ed with inputs.
#   Do not AND with Clock Out tag.
assign hl = flip_bits( p, {32,48,56,64,72,80,88,96,103,111,119,126,134,
   142,150,158,166
================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or negedge rst)
  if(sel)
    pos <- logic_not(input);
end
''')

def string(out,data):
  if not(isinstance(data,list)):
    data = [ord(char) for char in data]
  out.init = data
  if len(data) > 0 and data[0] != 0:
    data = map(lambda x: x | 128,data)

def main(args):
  # Open the Slave device
  # Slacc.slacc('init')
  
  def encode(function, a, b):
    if libSlave.slave.getReg(interface.SENSOR_REG_FUNCTION,False) != function:
      libSlave.slave.setRegs(interface.SENSOR_REG_FUNCTION
================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or ((sel == 0) && (in == 1))) begin
  if(sel==1) begin
  	sel = 0; 
  	or(pos, in[3]);                 	// Write lowest bit of input to priority encoder position latch.
  	signal priority_hbit;           	// Write Last signal approximated as input with 0-1 bit high.
  	if(~priority_hbit) begin           	// Because data-edge triggering, write latch bit to reg.
    	#5 bit pos;
      	bit_clear reg[1:0];            		// Fill reg with zero, ie priority encoder (missing) is off.
      	#0 to_right 8;
  	end
  endelse begin
  	sel = 1;                       	// Data bit level set as new Input respective high-output.
  	bit
================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst) begin
  if sum(in[0]) < 32'h00 then 
    pos = 0;
  else 
    pos = in[0] < 32'h10 ? in[0] >> 1 : 1;
end

================================================================
