example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  priority_encoder_sel <= in[0] && in[1];

// Priority encoder output
always @(posedge clk)
  pos <= priority_encoder_sel;


================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  if (sel)
  {
    pos <= in[2];
  }

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
  begin
    if (in[0])
      pos <= 1;
    else
      pos <= 0;
  end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  begin
    if (sel)
      pos <= in;
  end

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst)
  if (rst)
    pos <= 0;
  else if (sel)
    pos <= in[2];
  else
    pos <= in[1];

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
    pos <= in[2];
end

module priority_encoder_test(
input [2:0] in,
output reg [1:0] pos,
output reg [1:0] sel );
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
    pos <= in[2];
  else
    sel <= in[2];
end

module priority_encoder_test2(
input [2:0] in,
output reg [1:0] pos,
output reg [1:0] sel );
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
    pos <= in
================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
    pos <= in;

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  if(sel)
  {
    pos <= in[1];
  }

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
  begin
    if (in[0])
      pos = 1;
    else
      pos = 0;
  end
end

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder2( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  if (sel)
  begin
    if (in[0])
      pos = 1;
    else
      pos = 0;
  end
end

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder
================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst)
  if (rst)
    pos <= 0;
  else if (sel)
    pos <= in;

================================================================
