// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset) next_state <= 0;\n    else next_state <= in;\n    present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset) begin\n        next_state <= 0;\n    end\n    else begin\n        if (next_state == 0) begin\n            if (in) next_state <= 1;\n        end\n        else begin\n            next_state <= 0;\n        end\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) next_state <= 0;\n  else next_state <= in;\n  present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state != present_state)\n  begin\n    next_state <= in;\n  end\n  else\n    next_state <= present_state;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\n  begin\n    if (reset)\n      next_state <= 0;\n    else if (next_state == 0)\n      next_state <= in;\n    else if (next_state == 1)\n      next_state <= in;\n    else\n      next_state <= 0;\n    present_state <= next_state;\n  end\nend\n\n// Design a state machine with multiple inputs, multiple outputs,\n// and multiple states. Reset state is 0.\nmodule complex_fsm(clk, reset, in, out);\ninput clk;\ninput reset;\ninput in;\noutput out;\nreg present_state, next_state;\n// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1\n// In state 1, if in=1, stay in state"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n  end\n  else begin\n    present_state <= next_state;\n    next_state <= in;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n  end\n  else if (next_state) begin\n    out <= 1;\n    next_state <= 0;\n  end\n  else begin\n    out <= in;\n    next_state <= 1;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk)\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    }
  ],
  "created": 1663519842,
  "id": "cmpl-0nUAtR5gmmQSFMSG0lja6Y4qF1p0k",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 763,
    "prompt_tokens": 148,
    "total_tokens": 911
  }
}