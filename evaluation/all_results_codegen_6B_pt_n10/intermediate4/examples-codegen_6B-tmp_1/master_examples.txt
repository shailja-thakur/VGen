example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) // always @intuitively reset next_state to 0
next_state <= ((in) ? 1 : 0);

//Form the next bit out to port out
always @(posedge clk)
next out <= present_state;


================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset) in <= 0;
    else         in <= in;
	next_state <= in;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
next_state <= (in ? 0 : 1);
always @(posedge clk)
next_state <= present_state;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @("posedge clk ")
simple_fsm() next_state <= ('0' => out = in & !reset);
always @("negedge clk or reset") begin
  present_state <= next_state;
end

// If another state were tracked:
// next_state <= ('0' => out = in) | ('1' => out = in ^ 1) | 'x';
// then current_state would be a bitmask where bit i set if the local
// state equals the polled state, 0 otherwise
// would output state identical to remote, but logic says default to 0
// would say > than slave had written > local had written, and thereby
// would break mode control between modes that change state.
// to allow this transfer, there would need to be another FSM wired to
// pull off the mode bits.

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
if(reset) begin
    next_state <= 1;
end
else begin
    next_state <= next_state_reg(present_state);
end
always@(posedge in)
if(next_state == 1) begin
    present_state <= 1;
    next_state <= 0;
end
else begin
    present_state <= 0;
    next_state <= 1;
end
`
	sim := bench(textMaker, []string{
		"out",
		"present_state",
		`next_state`,
	})

	for _, input := range []int{0, 1} {
		for i := 0; i < 16; i++ {
			sim.Run(t, input, func(sim *benchresultSim, s *string) error {
				v := sim.eventState
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clock or (~(~reset & in) & in & out == 0) | (~out))
        next_state <= present_state;

always @(posedge clk)
        out <= next_state;

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always // clk connected to an input
begin
	next_state <= clk && reset ||
	next_state <= in && present_state == 0 && out == 0 ||
	next_state <= in && present_state == 1 && out == 1 ||
	present_state = next_state;
end
reg_test() begin
	present_state <= 0;
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset) next_state=0;
    always @(negedge in)
    begin
        present_state <= next_state;
        next_state <= present_state && in == 0 ? 1 : 0;
    end
    out <= ((next_state == 1) ? 1 : 0);
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or negedge reset)
begin
    if (reset)
        next_state <= present_state;
    else if (!reset)
        next_state <= in;
    else if (in)
        present_state <= 1;
    else
        present_state <= 0;
    next_state <= (next_state & in ? 1 : 0);
    out <= next_state;
end

// Function to accumulate outputs
function sum(a) { return a.to_bool(!a) + as_bool(a); }


================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always(clk)
      next_state <= '0' ? 0 : 1;
end

// Register a state-machine event
always(clk)
      if(next_state) {
        present_state <= next_state <= '0' ? "prev_state[3]" : "prev_state[2]";
      } else {
        present_state <= '0' ? "prev_state[1]" : "prev_state[0]";
      }
      if(reset) {
        present_state <= "0";
      }
end

initial begin
      clk <= 0 ? present_state <= "0" : present_state <= "1"; 
      clk <= 0 ? out <= "0" : out <= "1";
end

================================================================
