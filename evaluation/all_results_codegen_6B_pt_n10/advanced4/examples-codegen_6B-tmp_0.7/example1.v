// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This file was automatically generated by the lut-howto utility.
#include "advshift.h"

// the generated file is in the "formatted" output format,
// which is otherwise identical to the "unformatted" output format.
#include "advshift_defs.h"

// generate the table using the lut-howto utility.
// the generated file is in the "unformatted" output format.
#include "advshift_lut.h"

// assign the above to the register, to avoid rewriting the LUT each time.
reg advshift_table advshift_table_asm [] = advshift_lut;

// the following were generated with lut-howto.
#include "advshift_defs.h"
#include "advshift_lut.h"

endmodule
