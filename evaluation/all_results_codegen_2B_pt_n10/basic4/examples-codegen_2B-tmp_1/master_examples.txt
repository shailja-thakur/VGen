example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

always @(*) select sel;

================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign 1 to out. 
// When sel=3, assign 2 to out. 


int
main( int argc, char** argv )
{
  // Alarms here.
  out[2] = j = 
  in[2][0] == 1
    ? 0 : (in[2][2] + in[2][3] + in[1][0] + in[1][1]) & 3;

  wait();

  anOut = a[1] & 2 * a[3];
  b[1] = b[3] - (2 * (out[0]) + out[3]) & 4;
  sel = (1 & 2 ) | (2 & 1);


  out a[sel])
  wait();
} 





================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When mode==0, assign a to out, based on a compute register bit7-4 bits of sel.
assign bout =  or_reg( out, [mode] :=
			and_sel ^ andop_c,
			andop_c <= or_reg( a ^ a_subst,
					   or_reg( a ^ andop_c, andop_c)),
			x =>
					{X(a)<=0 ? Z(x[C1[a]]) :
					 Z(C3[x[C1[a]]]) =>
					{ mux(x, t,#04).  ord=sel^mux(x, t,a);
					 X(ord)<=0 ? Z(x[C1[ord]]) : 
					 X(x[C1[ord]]) }
					}>>1
================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out[4:0] = a & b;
// Input a and b are now multiplexed.

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

mux #rses =
reverse_array_to_stream tmp
merge0 #0 #tmp #b
merge0 #1 #tmp ###
custom merge #0 #tmp #0
</code></pre>

## Sinking design: setup multiplexer.
The design of the phasers should be for flows down the multi-phases
series of clusters. For example, given a 4-phase machine, the phase 2
phase 1 machine could sink and count up 16 devices, but it could not be
halved in half.

## Mechanical physics
The first term is passed through to the decoder, which should encode and
decode the data on the fly. For example:
three-phase machines suffer from mechanical channel problems.
These lost water can be regained when the second stream comes up and
emerges at the third phase machine.
The number of dropped or transmissed
================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=0...2, assign concat(a, b to out); in cases "a="0 and "b="0 are undefined.
main
begin 
mux a, b, sel;
out <= a[0];
out <= b[0];
out <= concat( a, b );
end

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign 1

mux[ 0:1 ] write( a );
mux_sels [1:] write( sel );

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a quanitity to out. 
// When sel=3, assign b quanitity to out. 
assign [4:0] out = width{out};

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire dev[3:0] d;

// Design 3 modulators.
// mod is the input ld bit of the input net, mod[ld_bits-1]=1, and
// mod2 = mod|mod is the 2nd most significant bit of rs[ld_bits-1].
module mux2_mod(
input [3:0] mod2,
input [3:0] mod,
output b,
input rs[15:0],
output d
);
void main() {
  mux2_mod module1(in0, in1, out1, in4, out4 );
  mux2_mod module2(in2, in3, out3, in5, out5 );
  mux2_mod module3(in0, in0, in1, in5, in5 );

  sel1 < posedge cl
================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// In all other cases, assign 0 to out. 
always @( posedge clk )
// Run this strobe every w times cycles.
for ( int w=0; w<w; w++ ) {
  assign a = a &0b0111101;
  assign b = b &0b0111101;
  // h stands for half-width.
  mywire h = a &0b0111111;
  if ( h == 0b101 )
    a = b;
}
//lm_always_comb();

// Design a 1-to-3 multiplexer.
module mux(
input [7:0] a,
output [7:0] out );
// The default procedure is a prepack of all inputs.
// Each destination must finish first.
wire [4:0] merge;
assign merge
================================================================
