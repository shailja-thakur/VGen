example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signal [7:0] carry_in,
signal overflow;

signal [7:0] carry_out;
signal [7:0] a_d,
signal [7:0] b_d;

signal [7:0] a_s,
signal [7:0] b_s;

signal [7:0] s_out;

always @(posedge clk)
    if (a_d == b_d)
    {
        s_out = 0;
        carry_out = 1;
    }
    else
    {
        s_out = a_s + b_s;
        carry_out = (s_out > 0xff);
    }

    if (s_out > 0xff)
        overflow = true;

always @(posedge clk
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


void 
main()
{
  s = a + b;
  overflow = a + b;
}

int
main()
{
  signed_adder a;
  signed_adder b;
  signed_adder c;
  signed_adder d;

  a.in0(0b11100100);
  a.in1(0b11100100);
  a.in2(0b11100100);
  a.in3(0b11100100);
  a.in4(0b11111111);
  a.in5(0b11111111);
  a.in6(0b11111111);
  a.in7(0b11111111);

  b.in0(0b11100100);
  b.in1(0b11111111);
  b.in2(0b11111111);
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



s[7:0] = a[7:0] + b[7:0];
if (a[7] == 0 and b[7] == 0 and s[7] == 1)
    overflow = 1;
else
    overflow = 0;


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


sft #(4) sft_a;
sft #(5) sft_b;

sft_a = a[7:0] << 4;
sft_b = b[7:0] << 5;

sft_a = sft_a | (sft_b & sft_a);

sft_a = sft_a | (sft_b & sft_a);

sft_b = ~(sft_a & sft_b);

sft_a = sft_a | (sft_b & sft_a);

if (sft_a > 0)
{
    sft_a = sft_a - 1;
}

sft_a = sft_a & 0x1F;

sft_b = ~(sft
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder s;

s.s[1:0] = a[6:0] + b[6:0];
s.s[2:0] = a[7:0] + b[7:0] + s.s[1:0];
s.s[3:0] = a[8:0] + b[8:0] + s.s[2:0];

s.overflow = a[7:0] + b[7:0];

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder #0 (input a,
    input b,
    output s,
    output overflow
)
{
    assign s[7:0] = a[7:0] + b[7:0];
    assign overflow = (s[7] & 0x80) == 0x80;
    return {s, overflow};
}

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @ (a[7] && b[7] && overflow)
    s[7:0] = a[7:0] + b[7:0];

always @ (a[7] && b[7] && overflow)
    overflow = a[7] ^ b[7];


//print "s: 0x" + to_bin(s, 8);

reg [7:0] overflow_reg;
always @ (a[7] && b[7])
    overflow_reg = overflow;


//print "overflow: 0x" + to_bin(overflow_reg, 8);

always @ (a[7] && b[7])
    s[7:0] = a[7:0] + b[7:0];

always @ (a[7] && b[7])
    overflow =
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Inputs
// Output
// Output
// Output

// Constraints
// 0 <= a[i] <= 127
// 0 <= b[i] <= 127
// 0 <= s[i] <= 127
// overflow is either 1 or 0
// s = a + b - overflow
// a >= b

// Possible cases
1. overflow = 1, s = a
2. overflow = 0, s = a + b - 1

// Output
// s[7:0] = a[7:0] + b[7:0]

// Assumptions
// A and B are two 8-bit unsigned values
// S is a 8-bit unsigned value

// Sources
// https://github.com/flozan/SATCounterExample/
// https://www.hackerrank.com/challenges/two-pointers/problem

#include <
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// all of the inputs are real 8-bit integers

// design a simple hardware design that adds two real numbers.

// real numbers go to a 32-bit signed integer and overflow is indicated by a single 1-bit signal.
// add the two numbers
 // solution
 // s = a + b
 // overflow = (a is negative)

// the model is:
// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
// 1, 2, 3, 4, 5, 6, 7, 8,
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//$DisplayName: signed_adder.vhd
//$DisplayName: signed_adder
//$DisplayName: signed_adder.vhd
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName: signed_adder
//$DisplayName
================================================================
