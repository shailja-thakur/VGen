example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


fulladder add1(a[0], b[0], s[0], c1, carry[0]);
fulladder add2(a[1], b[1], c1, s[1], carry[1]);
fulladder add3(a[2], b[2], c1, s[2], carry[2]);
fulladder add4(a[3], b[3], c1, s[3], carry[3]);
fulladder add5(a[4], b[4], c1, s[4], carry[4]);
fulladder add6(a[5], b[5], c1, s[5], carry[5]);
fulladder add7(a[6], b[6], c1, s[6], carry[6]);
fulladder add8(a[7], b[7], c1, s[7], carry[7]);
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low






================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b[7:0];

assign b={b,{b[6],b[5],b[4],b[3],b[2],b[1],b[0]}};

// initialisation of all the variables that are required

assign overflow=(a[7] & b[7]) & ~s[7];
//the arithmetic operation is performed according to the status of the three aforementioned signals and the output is stored in s

signed_adder s1(a, b, s, overflow);


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//s=a+b
mux2x1 mux1(a,b,s0);
mux2x1 mux2(s0,special_case,s_special_case);
mux2x1 mux3(s_special_case,press,s);

circuit circuit1(a[3:0],a[7],b[3:0],b[7],s[3:0],s[7]); // circuit to generate interger part of the adder

special_case_adder special_case_adder1(a[7],b[7],s[7],int_a[7],int_b[7],int_s[7],int_carry[7]);// circuit to generate special cases intervals

//((a[3:0]-b[3:0])*div)+2
genvar j; 


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] & b[7] & ~s[7]) | (a[7] & ~b[7] & s[7]) | (~a[7] & b[7] & s[7]);



================================================================
