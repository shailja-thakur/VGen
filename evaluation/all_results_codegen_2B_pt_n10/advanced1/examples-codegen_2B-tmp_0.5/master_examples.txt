example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


output [7:0] n;

initial begin
    n = a;
    s = a;
    overflow = 0;
end

always @(posedge clk)
    if (overflow)
        s = 0;
    else
        s = n;

end

// @author   Jeffrey C. Ondracejak
// @email    jeffrey.ondracejak@gmail.com
// @github   https://github.com/jondracejak
// @bj       jondracejak.github.io
// @twitter  https://twitter.com/jondracejak
// @gravatar https://avatars.githubusercontent.com/u/1395?v=3

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// Add two 8-bit 2's complement numbers a and b, and returns the result in s, 
// and the overflow flag. 
// Assume that a and b are both positive. 
// Assume that the most significant bit of s is the most significant bit of a.

// example:
// a = 01101101
// b = 01101101
// s = 01101101
// overflow = true

// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

// example:
// a = 01101101
// b = 01101101
// s = 01101101
// overflow = false

void add(int a, int b, int s[], bool& overflow)
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat t1.v
//     a: 0x00
//     b: 0x00
//     s: 0x00
//     overflow: false
// $ cat t2.v
//     a: 0x00
//     b: 0x00
//     s: 0x00
//     overflow: false
// $ cat t3.v
//     a: 0x00
//     b: 0x01
//     s: 0x01
//     overflow: true
// $ cat t4.v
//     a: 0x00
//     b: 0x80
//     s: 0x80
//     overflow: true
// $ cat t5.v
//     a: 0x00
//     b: 0x80
//     s: 0x00
//     overflow: false
// $ cat t
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


s = a[7:0] + b[7:0];
overflow = ((a[7:0] & 0x80) != 0) && ((b[7:0] & 0x80) == 0);

// write your code here


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


input [7:0] a;
input [7:0] b;
output [7:0] s;
output overflow;

//@ 
//@ assert (a[7:0] <= b[7:0]);
//@ assert (s[7:0] <= b[7:0]);
//@ assert (s[7:0] <= a[7:0]);
//@ assert ((a[7:0] & 1) == 0);
//@ assert ((b[7:0] & 1) == 0);
//@ assert ((s[7:0] & 1) == 0);
//@ assert ((s[7:0] & ~0x1) == 0);
//@ assert overflow == ((s[7:0] & ~0x1) == 0);
//@ assert overflow == (a[7:0] < b[7
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// This design follows the ideas of the "Signed Adder" example from the lectures.
// The implementation is very similar to that of the "Signed Adder" example, but the implementation is done in a different way. 

// S is the output signal. 
// The overflow signal is assigned to the output overflow. 

// A is the input signal. 
// The overflow signal is assigned to the output overflow. 

// S is the output signal. 
// The overflow signal is assigned to the output overflow. 

// A is the input signal. 
// The overflow signal is assigned to the output overflow. 

// S is the output signal. 
// The overflow signal is assigned to the output overflow. 

// A is the input signal. 
// The overflow signal is assigned to the output overflow. 

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a[7:0], b[7:0], s[7:0], overflow);

//Problem 2
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// A simple implementation of the signed_adder.
// It can be used for testing purposes.

#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

class signed_adder {
public:
    signed_adder(vector<int> a, vector<int> b, vector<int> s, vector<int> overflow);

    void add(int a, int b);
    void add_overflow(int a, int b);

    void print_result();

private:
    vector<int> a;
    vector<int> b;
    vector<int> s;
    vector<int> overflow;
};

signed_adder::signed_adder(vector<int> a, vector<int> b, vector<int> s, vector<int> overflow)

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a[7:0], b[7:0], s[7:0], overflow). 

// This design is not a good design because it does not allow for overflow to be checked.
// To check for overflow, the number a + b needs to be checked for overflow.
// This is done by using the following procedure:
// 1. The number a + b needs to be checked for overflow.
// 2. The most significant bit of a + b is compared with the most significant bit of s.
// 3. If the most significant bit of a + b is low, overflow occurs.
// 4. Otherwise, the most significant bit of a + b is high.
// 5. If the most significant bit of s is low, overflow occurs.
// 6. Otherwise, the most significant bit of s is high.
// 7. If the most significant bit of a + b is high, and
================================================================
