example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


reg [3:0] weights;

initial begin 
  next_state <= IDLE;
  clk_yaw.write(0);
  present_state <= IDs;
end 

always @(*) begin
  if (reset) next_state = IDLE;
  else if (x) 
  {
    
    next_state <= S1;

    //second throw away round of knockouts
    addr_val_match(1, true);
    for (i=0; i<2; i++){
      addr_val_match(2, true);    
    }      
    writesel_with_match(5, false);
    writesel_with_match(6, false);
  }  
  else 
  {
    next_state <= IDLE;
    weights = 41;
    addr_
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


ins reg [1:0] z; 

always @(posedge clk)
  if (rst && reset) 
    {
      if (x) next_state = IDLE;
      else next_state = IDLE;
    } 
else 
  {
    if (z == 2) 
      next_state = IDLE; 
    
    if ( !((x == 0) or (present_state == IDLE and z == 1)) or (z == 2)) 
      next_state = next_state;
  } 

always @(posedge clk)
  z = next_state;


================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(rst)     
begin 
// if reset is pressed, adopt input clk related variable 
 activate present_state[rst] and next_state[rst];
 if ( clk == 1 and reset == 1 )
 begin
 reset next_state[rst];
 next_state = IDLE;
 end
 if ( x == INPUTA_0b )
 begin
 next_state = IDLE;
 end
 if ( x == INPUTA_1b )
 begin
 next_state = S1;
 next_state[rst] = 1;
 end 
 if ( x == INPUTA_0b and ( next_state[rst] == 1 or next_state[rst] == S1 ) )
 begin 
 next_state[rst] = S10;
 next_state[rst] = 1;
 end
 if
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( posedge clk ) 
if ( reset ) 
{ next_state[:] = IDLE; }
else if ( x == 1 ) ;
else if ( x == 0 ) ;
else 
{ if (  present_state <> IDLE )   // when past the line is false process goes to IDLE, reset = 0 
{ next_state[:] = IDLE; }         // in other words, the the previsous state 
{ next_state[:] = present_state; }  
}

always @( posedge clk ) 
if ( reset ) 
{ z[:] = 1; }
else if ( x == 1 )  // if the input to the state machine ASSERTED that feed has been delivered, it continues 
{ z[:] = present_state[0]; // into the next state, but this is different here 
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


adv_fsm #rs_reg = adv_fsm( clk_n, reset_n, x(input),
next_state
);

#macro test_fsm
    carryout  = adv_fsm( clock_n, reset_n, 1,
delayed rst
);
endmacro 

*/

SIM include "my_tsim.h"

tick clk = $f(0)
tick rst = $f(0)

int pos = 0;
reg [1:0] present_state = 0b11;

#macro transition

do {
    // assign next state depending on present state
    switch(pos) {
        case 1:
            // go to IDLE if rst is 1, otherwise go to S1
            cur_state = (rst)?(IDLE):(S
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    always @ (rst, clk)
    begin
        if (!((clk == 1) && (reset == 1))) begin
            next_state <= IDLE;
        end 
        if (x == 1) begin
            next_state <= S1; 
        end 
        else if (x == 0) begin
            next_state <= S10;
        end 
        else if (x == -1) begin
            next_state <= S101; 
        end
    end

always @(present_state, x)
begin
    z <= next_state;
end

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


found_2: decrement_out -> if(next_state==3) z[next_state=IDLE] = 1 (next_state S101) else z[next_state=IDLE] = 0 (IDLE)
found_1: decrement_out -> if(next_state==1) z[next_state=S1] = 1 (next_state S1) else z[next_state=IDLE] = 0 (IDLE)
found_0: decrement_out -> if(next_state==0) z[next_state=S10] = 1 (next_state S10) else z[next_state=IDLE] = 0 (IDLE)

// unassigned state
state_0: if (next_state=3) z[next_state=IDLE] = 1 (next_state S101) else z[next_state
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


note = {OFF, MS, SQUARE, TRIANGLE}; 
reg [6:0] note_period, notes, bpm;
reg [4:2] note_index, note_mask, note_pos;
reg [63:0] ndclks;


reg sf_next; 
reg [39:0] sf_sel;
// loop variables 
parameter mode = 2; 
constant wAmp = 5/7.5;
constant wSFx1000 = 0.275; // Half note 1kHz
constant wSFx400 = 0.558; // Quarter note 4kHZ
constant wSFx1000A = wSFx1000 * 16; // Quarter note 1kSF
constant wSFx400A = wSFx400 * 32; // Quarter note 4kSF
constant ndclks = 25
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


reg [0:2] sabc_counter, fedc_counter;

//counter=0;
// 'case' for unsatisfied request
addressof arm resumed_counter;
initial arm_was_0=0;
initial arm_started_0=0;
initial csync_0=0;
initial tsync_0=0;

cont_inst arm(
addressof id, input f
memory_in 19
memory_out 20
input pending_1
input pending_0
input deep_0
output x, y, s, v
input loff, soff
memory_req a
);

cont_inst arm_locked(
resolved a, input w
input able_while_0
memory_if able_0
memory_req a
);

always_watchl _free [2:0] wakeup;

always_
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


================================================================
