example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
    if (load)
        q = data;
    else
        ena = 1;
end
end
`

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Receive clock and load signal.
sig clk = clock;
sig ena = ena;
sig enb = enb;
sig data = data;
// Left shift the loaded data by amount bits.
reg [63:0] q;
sig [63:0] tmp;

always @(posedge clk)
  if (ena && enb && data[63:0] > 0)
    q[63:0] = data[63:0] << amount;


// Output a constant.
always @(posedge clk)
  if (ena && enb && data[63:0] > 0)
    q[63:0] = q[63:0] << amount;

always @(posedge clk)
  if (ena && enb && data[63:0] > 0)
    
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


initial
  clk <= 1'b1;
  ena <= 1'b1;
  load <= 1'b0;
  amount <= 1'b1;
wait
  ena <= 1'b0;
  clk <= 1'b0;
  wait
  ena <= 1'b1;
  clk <= 1'b0;
  wait
  ena <= 1'b1;
  clk <= 1'b1;


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




// shift register
wire [63:0] q; 
reg [63:0] data; 
reg [63:0] q_out; 
reg [63:0] q_in; 
reg [63:0] ena; 
reg [63:0] load; 

reg [63:0] load_out; 

reg [63:0] load_in; 

reg [3:0] shift_amount; 

reg [63:0] shifter; 

reg [63:0] shifter_out; 

reg [63:0] shifter_get; 

reg [63:0] shifter_in; 

reg [63:0] shifter_out_reg; 

reg [63:0] load_in_reg; 

reg [63:
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


initial begin
    q = data;
    ena <= 1;
    load <= 1;
    clk <= 1;
end

always @(posedge clk) begin
    if (enb) q <= q;
end


================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// synchronous load: 0 = load, 1 = not load.
// clk: 0 = low period, 1 = high period.
// ena: 0 = low pulse, 1 = high pulse.
int main()
{
  unsigned long i;
  unsigned long j;
  unsigned long load_bit = 0;
  unsigned long ena_bit = 0;
  unsigned long shift_bit = 0;
  
  for(i=0; i<64; i++)
  {
    q[i] = 0x00;
  }
  
  for(i=0; i<64; i++)
  {
    if(clk == 1)
    {
      ena_bit = ena_bit == 1 ? 0 : 1;
    }
    else
    {
      ena_bit = ena_bit == 1 ? 1 : 0
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



// Shift is simple.
// 1'b0: shift nothing.
// 1'b1: shift left by 1 bit.
// 2'b00: shift left by 8 bits.
// 2'b01: shift left by 1 bit.
// 2'b10: shift right by 8 bits.
// 2'b11: shift right by 1 bit.

// When ena is asserted, shift the register.

reg shifter;


wire [63:0] data;
wire ena;

reg shifter_out;

// clk is the external clock
assign clk = 0;

// when load is high, q[63:0] = data.
assign q = data;

// When ena is high, shift q.
assign shifter = (ena & q) << amount;

// when ena is high,
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// design a 64-bit arithmatic shift register, with asynchronous load and clock.
// This is the same hardware as shift register, except that the load signal is asynchronous.
module advshift_async(input clk,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

// design a 60-bit microcontroller with 24-bit outputs and 2-bit inputs.
// This is the same hardware as shift register, except that the input is asynchronous.
================================================================
