example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[0] & 1) | (in[1] & 2);
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [3:0] in,
output reg [3:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[0] & 1) | (in[1] & 4) | (in[2] & 8);
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [4:0] in,
output reg [4:0] pos ); 
// When sel=1, assign b to out
assign pos = (in[0] & 1) | (in[1
================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = in[1] ? in[0] : in[1];

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [1:0] b;

always @(posedge clk) 
begin
  if (in == 1) {
    if (pos == 0) {
      b = 2;
    } else if (pos == 1) {
      b = 3;
    } else {
      b = 0;
    }
  }
end

always @(posedge clk) 
begin
  pos = pos + 1;
  if (pos == 0) {
    pos = 1;
  }
end
end


================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = if (in[1]) { 
pos[1] = '1'; 
pos[0] = '0'; 
} else { 
pos[1] = '0'; 
pos[0] = '1'; 
}; 
// When sel=0, assign b to out
assign pos = if (in[0]) { 
pos[1] = '1'; 
pos[0] = '0'; 
} else { 
pos[1] = '0'; 
pos[0] = '1'; 
}; 
// When sel=0, assign b to out
assign out = b; 
// When sel=1, assign b to out
assign out = if (in[0]) { 
out[1] = '1'; 
out[0] = '0'; 
}
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
    pos[1] = sel;
    in[1] = in[1] | in[2] | in[3];
    pos[0] = in[1] >> 3;
end
);
*/
/*
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
    pos[1] = sel;
    in[1] = in[1] | in[2] | in[3];
    pos[0] = in[1] >> 3;
end
);
*/

int main() {
  
  priority_encoder x(a,
================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign  pos = (in[0] ? in[1] : in[0]); 

// This is a 4-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [4:0] in,
output reg [3:0] pos ); 
// When sel=1, assign b to out
assign  pos = (in[0] ? in[1] : in[2] ? in[3] : in[4]); 

// This is a 8-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [8:0] in,
output reg [7:0] pos ); 
// When sel=1, assign b to out
assign  pos = (in[0] ? in[1
================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = in[1];

#5
reg [2:0] x;
#6
#7
always @(*) begin
    pos = pos - 1;
    if (x[pos] == 0)
    begin
        pos = pos + 1;
        x = x + 1;
    end
end

always @(*) begin
    pos = pos - 1;
    if (pos == 0)
    begin
        x = x - 1;
    end
end
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#0
#1
#2

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = 1'b00;
// When sel=0, assign b to out
assign pos = 1'b01;
assign b = out
  {
  // Select low or high
  sel = in
    {
    // Select low
    if (in[0] == 1) {
      out = 1'b00;
    } else {
      out = 1'b01;
    }
    }
  };

);

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( posedge clk ) begins 
  if (in[1])
  {
    pos[1] = 1;
    pos[0] = 0;
  }
  else
  {
    pos[0] = 0;
    pos[1] = 0;
  }


================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign b to in

wire sel;

reg [7:0] xor_key;
reg [7:0] padxor;

always @(posedge in)
  if ( xor_key[7:0] == 0x00 )
    pos = pos + 1;
  else
    pos = pos - 1;

always @(posedge in)
  if ( sel[7:0] == 1 )
    xor_key[7:0] = xor_key[7:0] << 2 | pos;
  else
    xor_key[7:0] = xor_key[7:0] >> 2 | pos;

always @(negedge in)
  pos = pos + ( in ?  xor_key[7:0] & 0x01 : 0
================================================================
