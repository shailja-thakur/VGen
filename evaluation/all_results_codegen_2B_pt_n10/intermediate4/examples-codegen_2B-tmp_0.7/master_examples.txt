example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// TODO: How many states do we need?
initial begin
  present_state = 0;
  next_state = 0;
  out = 0;
end
// TODO: What is a transition?
initial begin
  if (clk == 1 && reset == 1) // TODO: Add a reset for the state machine
    next_state = 1;
  else if (clk == 1 && reset == 0)
  // TODO: Add logic here to continue execution
    next_state = 1;
  else
  // TODO: Add logic here to continue execution
    next_state = 0;
end
// TODO: What is a state transition?
initial begin
  if (clk == 1 && reset == 1)
    present_state = 0;
  else if (clk == 1 && reset == 0)
    present_state = 1;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    case (next_state | present_state) >> 1:
        if (~in & 1)
            out = 0;
        else
            out = 1;
        next_state = next_state + 1;
    default:
        out = 1;
        next_state = 0;
    endcase

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  // If the input is 1, transition to state 1 by setting present_state to 1
  if (in) {
    if (next_state == 0) {
      present_state = 1;
    } else {
      present_state = next_state;
    }
  } else {
    // Transition to state 0, unless it's already 0.
    if (present_state == 0) {
      present_state = 0;
    } else {
      // Output 0 if it's in state 0, else output 1.
      out = (present_state == 0) ? 1 : 0;
    }
  }
  next_state = present_state;
}

always @(posedge clk)
{
  // If reset=
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// In state 0, if out=1, reset and go to state 1. In state 1, if out=1, go to state 1.

// state 0:
//  0      1      0      1      0      1
//  output out
//  in      in      in      in      in
//
// state 1:
//  0      1      0      0      0      0
//  output out
//  in      in
//

initial begin
    next_state = 0;
    present_state = 0;
    in = in;
    out = out;
    out = 1;
    next_state = 0;
end

void main()
{
    forever
    {
        if (in == 1)
        {
            out = out;
            next_state = next_state;
        }
        else
        {
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  // If input is 1, change state to 1
  if(in == 1)
  {
    next_state = 1;
  }
  // If input is 0, change state to 0
  else if(in == 0)
  {
    next_state = 0;
  }

  // If the previous state is 1, change state to 0
  // else change state to 1
  if(present_state == 1)
  {
    out = 0;
    next_state = 0;
  }
  // If the previous state is 0, change state to 1
  else
  {
    out = 1;
    next_state = 1;
  }

  // If the previous state is not in either 0 or 1, change state to 0
  if(present_state != next_state)

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
case(reset)
{
    if (reset == 1)
    {
        next_state = 0;
    }
    else
    {
        next_state = 0;
    }
}

always @(input clk, posedge clk)
{
    if (clk == 1)
    {
        present_state = 0;
        out = !(in);
    }
    else
    {
        if (present_state == 0)
        {
            next_state = 1;
            out = !(in);
        }
        else
        {
            next_state = 0;
            out = !(in);
        }
    }
    present_state = next_state;
}

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg [1:0] transition_table;

always @(posedge clk)
    if (reset == 1)
        reset = 0;
    else if (reset == 0)
        reset = 1;

    if (reset == 1)
    {
        out = 0;
        transition_table = 0b00000;
    } else if (clk == 0)
    {
        out = 0;
        transition_table = 0b00000;
    } else if (in == 1)
    {
        out = 1;
        transition_table = 0b00100;
    } else if (in == 0)
    {
        out = 0;
        transition_table = 0b00011;
    }

always @(posedge clk)
    present_state = transition_table[present_state];

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state = 0;
assign next_state = 0;
always @(posedge clk)
{
    // If clk=1, reset the state machine
    if(reset == '1')
    {
        present_state = 0;
        next_state = 0;
    }
    // If clk=0, move to next_state
    if(clk == 1)
    {
        present_state = next_state;
        out = next_state;
    }
}

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// reset=1   in=1   out=0
// reset=0   in=0   out=0
state machine fsm0_0_fsm0_1(clk, reset, in, out)
{
    if (in == 1)
    {
        next_state = 0;
    }
    else if (reset == 1)
    {
        next_state = 0;
    }
    else if (reset == 0)
    {
        next_state = 1;
    }
    else
    {
        next_state = 0;
    }
    if (reset == 1)
    {
        out = 0;
    }
    else
    {
        out = 1;
    }
    present_state = next_state;
    wait();
}
state machine fsm0_1_fsm0_
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
    if (reset == 1) next_state = 0;
    switch (present_state)
    {
        case 0:
            if (in == 1)
                next_state = 1;
            out = 1;
            break;
        case 1:
            if (in == 0)
                next_state = 0;
            out = 0;
            break;
        default:
            assert_fatal("Unknown state");
            break;
    }
    present_state = next_state;
}

================================================================
