example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
void main()
{
  out = 1;
  present_state = 0;
  next_state = 1;
  wait(clk//+1
    || reset//+1
    || in//+1
    || out//+1
    );
  reg state = present_state = next_state;
  while(current_clock()!=clk)
  {
    if(in==1)
    {
      if(present_state!=0)
      out = (!out) ? 1 : out;
      state = !state;
    }
    if(out==!state)
    {
      write(state==0?1:0,next_state);
      next_state = state;
    }
  }
}

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
bool Transitions_0[state_max][input_max][input_max] = {{0,{0,0},{0,0}
                                                      ,{0,0},1},{1,{0,0},{0,0}
                                                      ,{0,0},0}};
// Same thing for state 1
bool Transitions_1[state_max][input_max][input_max] = {{0,{1,0},{0,0}
                                                      ,{0,1},1},{1,{0,0},{1,0}
                                                      ,{1,0},0}};

void wait2()
{
  if(clk==1){
    //wait not effect
  }
  else{
    clk=1
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Note: out is initially updated in reset.
always @ (reset, clk)
  if (reset.read())
    out.write(0);
  else if (!in.read() && (present_state = ~next_state & 1))
    out.write(1);
  else {
    out.write(0);
    next_state = present_state << 1;
  }

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
str state_var_map[] = { "none", "inactive", "active" };
signal active_state;
reg state, check;
always @ (clk, reset, in, out)
  begin
    active_state <= 0;
    state <= 0;
    in <= 1;
    active_state <= 0;
      
      modify (out) {
        if in = 0, state <= 1, next_state <= 't';
          next_state <= state_var_map[state];
      }
  end
  if !reset, begin
      out <= 1 and active_state = 0;
  end
  if active_state > 0, begin
    check <= 0;
  end
  

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
machine SimpleFSM ()
{
    input aux, aux1, aux2, fsm_next_state;
    clk:in, reset:reset, in:in, out:out;

    always @(posedge clk)
    begin
        // ------- 0 -------
        if (reset == 1)
        {
            aux1:set_state();
            aux1:do();

            if (in)
                out = 0;

            present_state = aux;
            aux1:done();
        }
        // ------- 1 -------
        else
        {
            aux1:set_state();
            aux1:do();

            if (in)
            {
                if (aux1)
                {
                    aux1:done();
                }
                fsm_next_state = 0;
            }
            else
            {
                
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  if (posedge clk) { // Update state transition flag
    // TODO Correct output?
    // TODO Correct input?
    // TODO Demand deadtime
    next_state = (next_state == 0) ? 1 : 0;
  }
  out = next_state;            // Write new state to output signal
  next_state = (next_state == 0) ? 1 : 0; // Update state to new state
always @ (no_posedge clk)    
  #pragma HLS LP parallel

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@if(out != 1) state1=1 state0=1
always@if(in != 1) state1=1 state0=0
always@state1=1
always@if(clk == 1)
mode state
state 0 wait for clk=0
state 0: state0=0, state1=0 
current state 0 output=1, next state 0 is stored in reg next_state
state 1 wait for clk=1
state 1: state0=1, state1=0  
wait for clk=0
state 1 output=0 state0=1, state1=0
current sate 0 output=0, next state1 is stored in reg next_state
out=in, wait for next_state=1
state 0: state0=0, state1=1 
state 1: state0=1, state1=1
current state
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
wire [4:0] mfa;

always @(*) begin
    out = (!in[2] | mfa[3] == 1) ? !in[3] : (!in[2] & mfa[3] == 1);
end;

entity fsm {
    wire out {
        ~illegal out;
        ~0 out;
        0 out;
    }
    begin : b_always @(*imei)
        clk <= clk                    	// Simulating latches on same clock
        reset <= reset || in == 1;
    end;
    end;
end;

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
datay_in mux;
datay_out state_to_datay_in;
datay_in state_to_datay_out;
delegate timestep_clock() {
  return clk;
}
delegate next_state() {
  unsigned x = (next_state == 0) ? (1) : (0);
  unsigned y = (x == 0) ? (1) : (0);
  return mux.read_datay(x,y);
}
delegate present_state() {
  unsigned x = (next_state == 0) ? (1) : (0);
  unsigned y = (x == 0) ? (1) : (0);
  return present_state.read_datay(x,y);
}
sig_wire edge_rising, next_edge, dataset_rising, input_rising
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial state_machine
bias b(in, out);
{
   next_state = reset;
}
// Transitions:
// 0 -> 0/1 -> 1
initial state_machine
fsm_transition
b
{
    c = reset & present_state;
    out = ~reset ^ o_update & (in | c) & (next_state);
}
// 1 -> 0
initial state_machine
fsm_transition
b
{
    c = in & next_state;
    out = ~reset ^ o_update & (in | c) & (b.present_state == 0);
}
// 0 -> 1
initial state_machine
fsm_transition
b
{
    c = ~reset & fiveBitBody & (next_state);
    out = ~reset ^ o_update & (in | c) & (
================================================================
