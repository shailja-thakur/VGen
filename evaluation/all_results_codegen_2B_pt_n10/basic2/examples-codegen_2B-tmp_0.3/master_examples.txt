example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate( 
    input a, 
    input b, 
    output out )
    {
        // assign a and b to out
        out = a & b;
    }

================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate( 
    input a, 
    input b, 
    output out )
    {
    out = a && b;
    }

    // design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out

or_gate( 
    input a, 
    input b, 
    output out )
    {
    out = a || b;
    }

    // design a module that implements an XOR gate

module xor_gate( 
    input a, 
    input b, 
    output out );

    // assign the XOR of a and b to out

xor_gate( 
    input a, 
    input b, 
    output out )
================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate( 
    input a, 
    input b, 
    output out )
    {
    // ...
    }

================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate(
    a,
    b,
    out
);

//------------------------------------------------------------------------------
// Design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out

or_gate(
    a,
    b,
    out
);

//------------------------------------------------------------------------------
// Design a module that implements an NAND gate

module nand_gate( 
    input a, 
    input b, 
    output out );

    // assign the NAND of a and b to out

nand_gate(
    a,
    b,
    out
);

//------------------------------------------------------------------------------
// Design a module that implements an NOR gate

module nor_gate( 
    input a, 
    input b, 
================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( a, b, out );

module and_gate_2( 
    input a, 
    input b, 
    output out );

    // assign the AND of a and b to out
    and_gate_2( a, b, out );

module and_gate_3( 
    input a, 
    input b, 
    input c, 
    output out );

    // assign the AND of a, b and c to out
    and_gate_3( a, b, c, out );

module and_gate_4( 
    input a, 
    input b, 
    input c, 
    input d, 
    output out );

    // assign the AND of a, b, c and d to out
    and_gate_4( a, b, c, d, out
================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = a && b;

*/

#include <iostream>
#include <memory>
#include <vector>

class AndGate {
public:
    AndGate( std::shared_ptr<std::vector<std::shared_ptr<std::vector<bool>>>> inputs, 
             std::shared_ptr<std::vector<bool>> output )
        : _inputs( inputs ), _output( output ) {
    }

    bool operator()( std::shared_ptr<std::vector<bool>> inputs, std::shared_ptr<std::vector<bool>> output ) {
        std::shared_ptr<std::vector<bool>> inputs_copy( new std::vector<bool>( *inputs ) );
        std::shared_ptr<std::vector<bool>> output_copy( new std::vector<bool>( *output )
================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( 
        a, 
        b, 
        out );

//**************************************************************************
//*
//*   main
//*
//**************************************************************************

int
main( int argc, char* argv[] )
{
    and_gate a( 0, 1, 0 );
    and_gate b( 1, 0, 1 );
    and_gate out( 0, 0, 0 );

    a.out = &out;
    b.out = &out;
    
    a.run();
    b.run();

    return 0;
}

================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = (a && b);


================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( a, b, out );

// design the module
and_gate( a, b, out );

================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( 
        input a, 
        input b, 
        output out ) {
        
        // if a is true, then out is true
        if ( a == true ) {
            out = true;
        } else {
            // else, if b is true, then out is true
            if ( b == true ) {
                out = true;
            } else {
                // else, out is false
                out = false;
            }
        }
    }

// end and_gate

// Design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out
    or_gate( 
        input a, 
        input b, 
        output out ) {
        
        
================================================================
