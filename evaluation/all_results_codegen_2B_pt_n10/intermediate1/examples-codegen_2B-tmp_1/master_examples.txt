example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

basic half_adder_basic( 
input a, b,
output cout, sum 
);


/*
  Generates the example circuit.
*/
void generate_example_circuit()
{
  half_adder_basic ader_instance;

  // Initializing the inputs
  input a_port("a", clk, RST_N);
  input b_port("b", clk, RST_N);

  // Initializing the internal outputs
  cout = output("cout", ab_reg[AB_OUT5], RST_N);
  sum = output("sum", ab_reg[AB_OUT4], RST_N);

  /*
    The generator box enables clarity when specifying peripherals.

    Generating the complete half adder using two blocks.
  */
  [sum, sum_pointer] TGUI_AND_
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void maya_print( void )
{
console[a];
console[b];
console[cout];
console[sum];
console( "\\\\\\" );
}

void Adder instruction( void )
{
ConsoleLogger::debug::putLineNZ( &a );
ConsoleLogger::debug::putLineNZ( &b );
ConsoleLogger::debug::putLineNZ( &cout );

//Convert to bit carry-out
unsigned int carryOut = carry_out();
sum = a + b + carryOut;

//ConsoleLogger::debug::putLineNZ( &a );
//ConsoleLogger::debug::putLineNZ( &b );
//ConsoleLogger::debug::putLineNZ( &cout );
//ConsoleLogger::debug::putLineNZ( &a );
//ConsoleLogger::debug::putLineNZ
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [15:0] in[]  = hb16( a );
    wire [8:1] in'[]  = hb8( b );
      wire out[]      = ob16();
      wire sum[]      = os16();
      wire carry[]    = oc16();
     contract halfAdd(
       in[>, <16], in'<[>, <16], out[>, <16], sum<[31:16], [15:0], bool carry[]<>);
         begin
           carry<=true, { sum <= output, carry <= carry} end
     
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void main(void)
{
  cout = a ^ b; // form I[0.31]
  sum = a << 1 | carry_in;
  carry_out = roll_carry( sum, 32 );
}

#endif

"""

================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Global variables for the cache
integer switcher[2] = {0, 0};
integer cache[2] = {0, 0};
integer cache_counter = 0;

// Combined compute cycle
// Swap registers around between two in the cache
// Output the sum output from the second half of the adder
void half_adder_cache() {
  if (cache_counter % 2 == 0) {
    switcher[0] = !!(switcher[0] & 1);
    switcher[1] = !(switcher[1] | 1);  
    cache[0] = a;
    cache[1] = b;
  } else {
    switcher[0] = !!(switcher[0] & 1);
    switcher[1] = !(switcher[1] | 1);  
    cache[0] = b;

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

module adder_end(
input [4:0] adcout, input c);


================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

"""


def main():
    # half_adder function implementation.
    # input:
    #   a = a high register [ 15:0 ]
    #   b = b high register [ 15:0 ]
    #
    # output (1):
    #   cout = congtate [ 15:0 ]
    #
    # output (2):
    #   sum = sumlow [ 14:0 ]
    #
    a = hls.Constant(VAL_ADDER_A * 0.500)     # a >> m
    b = hls.Constant(VAL_ADDER_B * 0.500)     # b >> m
    mult_a = a.mult{a};
    add_in = a.add{0, mult_a}                     # add high from a and mult_a (393)
    16bit_comp
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

{
  
  // ----------------------- First Half ---
  
  // This is the sum line.
  sum := a + b;
  
  // The overflow line.
  if ( sum > 127 )
  {
    sum -= 256;
  }
  
  // Output the result.
  cout
  |= ( sum & 1 );
  
}

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum.
module full_adder(
input a, b,
input cout_a, cout_b,
output sum );

// This is a MUX. This thing selects one bit of a or b depending on a number.
module sign_mux(
input a, b, int c, 
output cout, cc );

// This is a 32-bit multiply. I'm passing output A to the multiply.
module mul32_a(
input A, B, output C );

// The three LUTs. They're registered together.
input rar, eee, cer, tar, total;

module rar_mul(
input A, B, oc, ocand, ocor, ocrc, odivs,
output rcand, prod, prod
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a3  = a[3],  a2 = a[2],  a1 = a[1],  a0  = a[0];
wire b3  = b[3],  b2 = b[2],  b1 = b[1],  b0  = b[0];

always @* begin
  cout = 0;
  sum  = 0;
  cout = cout | ((a3 & b3) == 0 ? 1 : 0);
//  cout = cout | ra[1];
  sum = sum + (a2 << 5) + (a1 << 3) + a0;
  cout = cout | ((b2 & (b3/2)) == 0 ? 1 : 0);
  sum = sum + (b1 << 5) + (b0 << 3) + b1;
end

destination
================================================================
