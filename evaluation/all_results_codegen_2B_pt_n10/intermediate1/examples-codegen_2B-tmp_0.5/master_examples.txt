example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two bits and produces a sum and carry-out.
module full_subtractor( 
input a, b,
output cout, sum );

// This is the carry-out. A carry-out is a sum and carry-out.
module carry_out( 
input a, b,
output cout, sum );

// This is the sum. A sum is a carry-out and a sum
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a simple adder that adds two bits and produces a sum and carry-out.
module simple_adder( 
input a, b,
output cout, sum );


// This is the full adder. This adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a simple adder that adds two bits and produces a sum and carry-out.
module simple_adder( 
input a, b,
input carry,
output cout, sum );

// This is the full adder. This adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
input carry,
output cout, sum );

// This is a simple adder that adds two bits and produces a sum and carry-out.
module simple_
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a[2], b[2];
output cout;
input sum;

`

var halfAdder = func( blocks ) {

	var a = blocks.getInput( "a" );
	var b = blocks.getInput( "b" );
	var cout = blocks.getOutput( "cout" );
	var sum = blocks.getOutput( "sum" );

	var c = blocks.newInstance( "c", "adder", {
		a: a,
		b: b,
		cout: cout,
		sum: sum
	} );

	c.setInput( "a", 0 );
	c.setInput( "b", 1 );

	c.setOutput( "cout", 0 );
	c.setOutput( "sum", 1 );
}

module.exports = halfAdder;
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [4] a_bits;
wire [4] b_bits;

reg [4] sum;
reg [4] carry_out;

always_comb
begin
  a_bits[1:0] <= a[1:0];
  a_bits[3:2] <= a[3:2];
  a_bits[5:4] <= a[5:4];
  a_bits[7:6] <= a[7:6];
  a_bits[9:8] <= a[9:8];
  a_bits[11:10] <= a[11:10];
  a_bits[13:12] <= a[13:12];
  a_bits[15:14] <= a[15:14];
  a_bits[17:16] <= a[17:16];
  a_
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_index, b_index,
output a_out, b_out,
output sum_out, carry_out;

void
main()
{
  // Inputs
  a_out = a_index = 0;
  b_out = b_index = 0;
  sum_out = carry_out = 0;
  
  // Outputs
  cout = sum_out;
  
  // Process
  while( a_index < (sizeof(a) * 8) )
  {
    // Add A to B
    sum_out = a_out + b_out;
    carry_out = sum_out >> 32;
    
    // Add A to B
    a_out = a_index < (sizeof(a) * 8) ? a[a_index] : 0;
    b_out =
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

// This is the carry-out function.
module carry_out( 
input a, b,
output cout, sum );

// This is the carry-in function.
module carry_in( 
input a, b,
output cout, sum );

// This is the carry-out function.
module carry_out( 
input a, b,
output cout, sum );

// This is the carry-in function.
module carry_in( 
input a, b,
output cout, sum );

// This is the carry-out function.
module carry_out( 
input a, b,
output cout, sum );

// This is the carry-out
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum, carry );

// This is a multiplyer. A multiplyer multiplies two bits and produces a sum.
module multiplyer( 
input a, b,
output cout, sum );

// This is a divideer. A divideer divides three bits and produces a carry-out.
module divider( 
input a, b,
output cout, carry );

// This is a modulo. A modulo divides three bits and produces a carry-out.
module modulo( 
input a, b,
output cout, carry );

// This is a and. A and performs an AND operation on three bits.
module and( 
input a, b,
output cout
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts a bit and produces
// a sum and carry-out.
module half_sub( 
input a, b,
output cout, sum );

// This is a half multiplier. A half multiplier multiplies a bit and produces
// a sum and carry-out.
module half_mult( 
input a, b,
output cout, sum );

// This is a half divider. A half divider divides a bit and produces a sum
// and carry-out.
module half_div( 
input a, b,
output cout, sum );

// This is a half modulo. A half modulo divides a bit and produces a sum
// and carry-out.
module half_mod( 
input a, b,
output cout, sum );

// This is a half remainder. A half remainder
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

// This is a half subtracter. A half subtracter subtracts two bits and produces a sum and carry-in.
module half_sub( 
input a, b,
output cout, sum );

// This is a full subtracter. A full subtracter subtracts three bits and produces a sum and carry-in.
module full_sub( 
input a, b, c,
output cout, sum );

// This is a half xor. A half xor xor two bits and produces a sum and carry-out.
module half_xor( 
input a, b,
output cout, sum );

// This is a full xor. A full
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a[3], b[3],
output cout[3], sum[3] );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-in.
module half_sub( 
input a, b,
output cout, diff );

// The full subtractor subtracts two bits and produces a difference and carry-in.
module full_sub( 
input a[3], b[3],
output cout[3], diff[3] );

// This is a half mutator. A half mutator mutates a bit and produces a new output value.
module half_mut( 
input a, b,
output cout, mut );

// The full mutator mutates a bit and produces a new
================================================================
