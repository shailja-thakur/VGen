example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  r_next <= (r_reg & 1) | (r_reg & 2) | (r_reg & 4) | (r_reg & 8) | (r_reg & 16) | (r_reg & 32) | (r_reg & 64) | (r_reg & 128);
  r_reg <= r_next;
  feedback_value <= r_reg;
  q <= feedback_value;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= r_next;
    r_next <= r_reg ^ feedback_value;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 0;
    else
    {
        r_reg = r_reg << 1;
        r_reg = r_reg | (r_reg >> 3);
        r_reg = r_reg | (r_reg >> 2);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 3);
        r_next = r_reg ^ r_reg;
        r_reg = r_next;
        feedback_value = r_reg & 3;
        q = r_reg;
    }

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_reg XOR (reset || (clk AND (feedback_value AND 4'b1111))));
    r_next <= (r_reg XOR (q AND (feedback_value AND 4'b1111)));

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

initial begin
    r_reg = 1;
    r_next = 1;
    feedback_value = 0;
    q = 0;
end

// on clock edge increment r_reg
initial begin
    if (clk == '0') r_reg = r_reg + 1;
end

// on reset decrement r_reg
initial begin
    if (reset == '0') r_reg = r_reg - 1;
end

// on feedback edge increment r_next
initial begin
    if (feedback_value == '1') r_next = r_next + 1;
end

// on reset decrement r_next
initial begin
    if (feedback_value == '0') r_next = r_next - 1;
end

// assign feedback concatenated with 4 most significant bits of r_reg to r_next
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= r_next;
    r_next <= r_reg ^ (clk && reset);
    feedback_value <= r_reg ^ (r_reg >> 2);
    r_reg <= feedback_value;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= r_next;
    r_next <= r_reg ^ (r_reg[2] ? (r_reg[2] ^ r_reg[4]) : r_reg[2]);
    feedback_value <= r_reg[0] ^ r_reg[1];
    q <= feedback_value << 4;

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset == 1) begin
        r_reg = 1;
        r_next = 1;
        feedback_value = 0;
    end
    else begin
        r_reg = r_next;
        r_next = r_reg;
        feedback_value = r_reg ^ (r_reg << 2);
        q = feedback_value;
    end
end
);

// design a 4-bit Galois LFSR with taps at bit positions 4 and 3
module lfsr1( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise
================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_reg << 1) | (r_next << 4) | (r_next << 2) | (r_next << 3);
    r_next <= r_reg;
    feedback_value <= r_reg;
    q <= (r_reg << 4) | feedback_value;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = r_next = 0;
    feedback_value = reset;
    r_reg[4] = reset;
end
// on clock clk set the value of r_reg to r_next
// assign r_next to r_reg
// assign r_reg to the output q
initial begin
    r_reg = r_next;
    r_next = r_reg;
end
// on clock clk set the value of r_reg to r_next
// assign r_next to r_reg
// assign r_reg to the output q
initial begin
    r_reg = r_next;
    r_next = r_reg;
end
// on clock clk set the value of r_reg to r_next
// assign r_next to r_reg
// assign r_reg to the output q
initial begin
================================================================
