example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk ) sim
  r_reg = ( 
    r_reg >> 1 |
    ((int(r_reg) & 1) << 4) |
    r_next 
  );
  r_next = ( 
    ((r_reg >> 3) ^ ((r_reg >> 1) ^ (r_reg >> 5))) & 1
  );
  // feedback
  feedback_value = ( 
    (((feedback_value >> 4) ^ ((r_next << 5) ^ (r_reg & 31))) >> 3) & 1
  );
  
  q(feedback_value);

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @*
begin
    r_reg = rev(res);
repeat(n)
    r_next <= r_reg ^ r_reg << 4 | (rand(6) & 0w40);
end
wire reset_cond;
// with on reset always reset+1, no matter what feedback values exist, as the inputs are valid
if (clk == reset)
    reset_cond <=(1'b0) && r_next != r_next - 1;
else
    reset_cond <=(1'b0) && r_next != r_next - 1 || r_next == r_next - 1;
assign feedback_value = (r_next << 1) ^ rev(r_reg) << 2;
assign r_reg = r_next;
always @+
begin
    if (reset_cond)
        r_next = in_
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin

  r_reg = 0b0101010101;
  r_next = 0;
  feedback_value = r_reg ^ ((r_reg = 0) << 2);
  q = (r_reg >> 2) | (feedback_value >> 4);

end
);

//------------------------------------------------------------------------------
// design @5.2.2 VCD : register {
//
//
//
//------------------------------------------------------------------------------
// register full_j

// Design a (Fast) In-Place CRC with 64-bit input result and 64-bit output
// using a 6-bit, 4-bit poly, a ladder of 8 shift registers, the high clock
// bit, and 1-bit initial starting state.  The output part of the circuit is
// a Least Significant Bit at a Cache Line Boundary which the result in the
// 64-bit access may have shifted left or
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

instance lfsr_clock( 
    clk,
    reset,
    q
); 
wire [301:16] mask {indices_r_reg.w[0] & 0b1111111111111111; indices_r_reg.w[1] & 0b1111111111111111;}
reg [301:16] r_reg;
wire r_out;

instance lfsr_module( 
    clk,
    reset,
    q
); 
wire [3] clk_slavo;
wire [301:16] r_idx_reg {indices_r_idx.w[1] & 0b1111111111111111; indices_r_idx.w[0] & 0b1111111111111111;}
reg [301:16] indices_r_idx;
wire r_idx_link;
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = 1'b0000;
    q = r_reg;
    r_next = r_reg ROR 2;
    r_reg = r_reg ROR 2;
    r_next = r_reg ROR 5;
end
// Every clock cycle write states r_reg to increment by 1 even if all inputs are high
wire [31:0] v_reg;
feedback_index = 0;
// A similar sequence as above for q
initial begin
    r_reg = 1'b0000;
    q = r_reg;
    r_next = r_reg ROR 2;
    r_reg = r_reg ROR 2;
    r_next = r_reg ROR 5;
end;  
always @(posedge clk) begin
    v_reg = r_reg;
    r_reg
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
parameter
loop_counter_ir = 0;
always @(posedge clk)
begin
    loop_counter_ir += 1;
    if (loop_counter_ir == 5)
        reset <==> 1;             
    if (loop_counter_ir == 15) {
        reset <==> 1;
        r_reg    <==> r_next;
        feedback_value == r_reg[3] || r_reg[2];
    } else {
        if (loop_counter_ir % 2 == 0) {

            r_reg[1] <== simd_carry_out or r_reg[0];
            r_reg[2] <== r_reg[1] || r_reg[1];
            r_reg[3] <== r_reg[2] || r_reg[2];
            r_
================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

//replica logic in the the R(reg,r_next) clause as an OR clause

always @(posedge bool_clk)
endcase
endcase

// within the clause r_next toggle if clk == 1
always 
    #4
    r_reg == (r_next != feedback_value)
endcase

// round-robin design pattern
always r_next = r_reg + r_next;

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
  r_reg = 1;
end


// ----------------- Generated LFSR Logic Functions -----------------
initializer
lfsr (
    r_next,
    reset,
    4,
    5,
    clk, 
    q
)
{
    rx<32>(r_reg);
    r_reg = r_reg + 1;
    if (r_reg >= 256)
      r_reg = r_reg - 256;
    rx<8>(r_next);
    q = r_reg;
    rx<5>(feedback_value) = r_next & 0x1f;
    r_next = r_next + 0x10;
    if (r_next >= 256)
      r_next = r_next - 256;
    rx<5>(r_reg) = r_next;

    
================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg <- r_reg << 1;
    r_next(w_1) = r_reg(w_2);
end
end
// if clk is still low
// turn lfsr to the last value of 'r_reg'
wire [4:0] r_old_reg;
wire [4:0] k_reg;
wire [4:0] r_old_b_reg;
wire tmp;
wire mux_in_bit[4:0];
wire k_rem [3:0];
wire r_bit[5:0];
wire is_on;
// for designqualitytesting purposes
initial begin
    r_old_b_reg > 0;
    {r_old_reg}(l_out) <= r_old_b_reg;
    
    k_bit <= 4;
    
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

// soft-rand
wire next_wrp [4:0];
reg [4:0] new_val;

assign new_next = ~b_c.q & (~ b_r.q & (new_wrp [7] ? 1 : 0)) & (~ next_wrp [3]) & (~ 1);
// assign new_val = (z0 + 1)*2^28 // (new_next*2^32 + (new_next ^int(softrand) ^ new_next == new_next));
assign new_val = new_next*2^28; // softrand(new next != new_next)

always @(*) // this tick rate in the firm sanfole app can not be greater than 200ns
{
    clk <= clk; 
    reset <= 1'b0;
    r_reg <= 0; // reset
================================================================
