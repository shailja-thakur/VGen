example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, negedge reset) begin
if(reset == 1'b0)
out <= 8'b0;
else if(load == 1'b1)
out <= data;
else
out <= {out[6:0], out[7] ^ out[0] ^ out[7:1]};
// if load is high, out = data
// if load is low, out = rotating value
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset) begin
	if(reset) begin
	out = 0;
	end
	else begin
	if(load) begin
	out <= data;
	end
	else begin
	out <= out << amount;
	end
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
	always @(posedge clk)
	begin
	if (reset) begin
	out=0;
	end
	else if (load) begin
	out=data;
	end
	else begin
	out=out<<amount;
	out=out>>amount;
	end
	end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
begin
if(reset)
out <= 0;
else if(load)
out <= data;
else
begin
out[7:amount] <= out[6:0];
out[7:amount-1] <= out[7:amount];
end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk)
	begin
	if (reset)
	out = 8'b0;
	else if (load)
	out = data;
	else begin
	out = out << amount;
	out = out >> amount;
	end
	end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or negedge reset)
begin
	if(reset == 1'b0)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load == 1'b1)
	begin
	out <= data;
	end
	else
	begin
	out <= out << amount;
	end
	end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk, posedge reset)
begin
	if(reset)
	begin
	if (load) begin
	 	out <= data;
	 end
	 else begin
	 case(amount)
	 0: out <= out;
	 1: out <= {data[0],data[7:1]};
	 2: out <= {data[1:0],data[7:2]};
	 3: out <= {data[2:0],data[7:3]};
	 4: out <= {data[3:0],data[7:4]};
	 5: out <= {data[4:0],data[7:5]};
	 6: out <= {data[5:0],data[7:6]};
	 7: out <= {data[6:0],data[7]};
	 endcase

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
	if (reset) out <= 8'b0;
	else if (load) out <= data;
	else if (amount==0) out <= out;
	else if (amount>0) out <= out << amount;
	else out <= out >> amount;

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk,negedge reset)
begin
if(!reset)
	out <= 8'h00;
else if(load)
	out <= data;
else begin
	out[7] <= out[0];
	out[6] <= out[7];
	out[5] <= out[6];
	out[4] <= out[5];
	out[3] <= out[4];
	out[2] <= out[3];
	out[1] <= out[2];
	out[0] <= out[1];
	out[amount-1] <= out[8-amount];
	out[8] <= 1'b0;
	end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset) begin
	if (reset) begin
	out <= 8'b0;
	end
	else if (load) begin
	out <= data;
	end
	else begin
	out = out << amount;
	out = out >> amount;
	end
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
// if load is low, then do nothing
always@(posedge clk or negedge reset)
begin
	if(!reset)
	begin
	out = data;
	end
	else if(load)
	begin
	out = data;
	end
	else
	begin
	out = {out[6:0],out[7:7]};
	out = (out << amount);
	out = out | data[7:7];
	end
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk,posedge reset)
begin
	if(reset)
	begin
	// initial state
	out=8'b0;
	end
	else if(load)
	begin
	out=data;// input is stored in output
	end
	else
	begin
	//rotate
	//rotation amount is in the 3 least sig bits
	//shift to the left is determined from the 2 most sig bits
	//00 => left shift
	//01 => nothing
	//10 => right shift
	//11 => load data input to output

	//rotation amount
	case (amount)
	3'b000: out = {out[6:0],out[7]};
	3'b001: out = {out[5:0],out[7]};
	3'b010: out = {out[
================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else begin
out[0] <= out[7];
out[1] <= out[7];
out[2] <= out[7];
out[3] <= out[7];
out[4] <= out[7];
out[5] <= out[7];
out[6] <= out[7];
out[7] <= out[7];
out[7] <= out[7];
end
end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
begin
out <= 8'b0;
end
else if(load)
begin
out <= data;
end
else
begin
out <= {out[6:0], out[7]};
end
end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else
out<=out<<amount;
end

================================================================
