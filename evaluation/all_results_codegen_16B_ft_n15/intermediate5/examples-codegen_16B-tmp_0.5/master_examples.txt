example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
	begin
	if(reset)
	 out <= 8'b0;
	 else if(load)
	 out <= data;
	 else
	 out <= out << amount;
	end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	// reset case
	out <= 8'b0;
	end
	else
	begin
	if (load)
	begin
	// load case
	out <= data;
	end
	else
	begin
	// left shift case
	out <= out << amount;
	end
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
begin
 if(reset)
 begin
 out<=8'b0;
 end
 else if(load)
 begin
 out<=data;
 end
 else
 begin
 case(amount)
 3'b000: out<=out;
 3'b001: out<={out[6:0],out[7]};
 3'b010: out<={{out[6:0],out[7]},out[7:1]};
 3'b011: out<={{out[5:0],out[7]},out[7:1]};
 3'b100: out<={{out[5:0],out[7]},out[7:1]};
 3'b101: out<={{out[4:0],out[7]},out[7:1]
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
begin
if(reset)
 out=0;
else
if(load)
 out=data;
else
 begin
out=data << amount;
out = out | (data >> (8-amount));
end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk)
begin
	if(reset)
	begin
	out = 8'b0;
	end
	else if(load)
	begin
	out = data;
	end
	else
	begin
	out = {out[6:0],out[7]};
	out = out << amount;
	out = out | out >> 8;
	end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
// when reset is high, set output to 0
// when load is high, load data to out
// left shift and rotate the register out by amount bits
// when load is low, output is previous value of out
// when reset is low, output is previous value of out
// if reset and load are both 0, output is unchanged
// if reset and load are both 1, out is set to data
// if reset is high and load is low, output is 0
// if reset is high and load is high, output is previous value of out
	end
	else
	begin
// when reset is low, output is previous value of out
// when load is high, load data to out
// left shift and rotate the register out by amount bits
// when load is low, output is previous value of out
================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk, posedge reset)
begin
	if(reset)
	begin
	// when reset is high, set out to zero
	out = 8'b0;
	end
	else if(load)
	begin
	// when load is high, load data to out
	out = data;
	end
	else
	begin
	// when reset and load are low, left shift and rotate
	case(amount)
	3'd0: out = {out[6:0],out[7]};
	3'd1: out = {out[5:0],out[7:6]};
	3'd2: out = {out[4:0],out[7:6]};
	3'd3: out = {out[3:0],out[7:6]};
	3'd4: out = {out
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk)
begin
if(reset)
begin
out<=0;
end
else if(load)
begin
out<=data;
end
else
begin
out<={out[6:0],out[7]^out[0]^out[1]^out[2]^out[3]^out[4]^out[5]^out[6]};
end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk, negedge reset)
begin
	if(!reset)
	begin
	out <= 8'b00000000;
	end
	else if(load)
	out <= data;
	else begin
	out[7:amount] <= out[0:7-amount];
	out[7-amount:0] <= out[7:8-amount];
	end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= out >> amount;
	out <= out << amount;
	//out <= {out[6:0],out[7]};
	end
	end
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	// reset the register
	out <= 8'b0;
	end
	else
	begin
	if(load)
	begin
	// load data into the register
	out <= data;
	end
	else
	begin
	// left shift and rotate the register
	out <= {out[6:0], out[7]};
	out <= {out[7:1],out[0]};
	end
	end
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk)
begin
	if (reset)
	begin
	out <= 8'b0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= out << amount;
	end
end

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else
out<={out[6:0],out[7]^out[0]^out[1]^out[2]^out[3]^out[4]^out[5]^out[6]^out[7]};
end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
begin
	if(reset)
	begin
	// reset
	out <= 8'b0;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	out[7:1] <= {out[7],out[7:1]};
	end
end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else begin
case (amount)
3'b000: out <= out;
3'b001: out <= {out[6:0],out[7]};
3'b010: out <= {out[5:0],out[7:6]};
3'b011: out <= {out[4:0],out[7:5]};
3'b100: out <= {out[3:0],out[7:4]};
3'b101: out <= {out[2:0],out[7:3]};
3'b110: out <= {out[1:0],out[7:2]};
3'b111: out <= {out[0],out
================================================================
