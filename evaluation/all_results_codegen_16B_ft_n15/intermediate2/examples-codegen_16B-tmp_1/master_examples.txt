example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
 if(reset) 
 q <= 4'b0000;
 else if(q === 12) /* the judgement is done based on the value of q to avoid exceeding the width of a counter*/
 q <= 4'b0000;
 else
 q <= q +1; 
 end 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
 always @(posedge clk) begin
 if (reset == 1) begin:resetcase
 q <= 1;
 end
 else begin:counter
 if (q == 4'd12)
 q <= 1
 else
 q <= q + 1
 end
 end
 endmodulemodule ibuf( 
 input clk, 
 input [15:0] iBus, 
 input stb,
 input we, 
 input [2:0] size, 
 input [2:0] cont,
 input [2:0] nextmode,
 input ibe,
 input ireq, 
 input ack,
 input [15:0] datain,
 input mode,
 output osta0,
 output osta1,
 output osta2,
 output [15:0] dataout,
 output ireq0, 
 output ireq1, 
 output ireq2,

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk )
begin
 if (reset)
 begin
	q <= 4'b0000; // case 0010
 end
 else begin
	if (q == 4'd5)
	begin
	 q <= 4'b0000;
	end
	else
	begin
	 q <= q + 4'b0001;
	end
 end
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk, posedge reset ) begin 
if( reset ) 
q <= #1 1'b0; 
else if( q == 12 ) 
q <= #1 1'b1; 
else begin 
if( ( q == 4'b1111 ) ) 
q <= #1 1'b0; 
else
q <= #1 q + 1'b1; 
end 
end 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
 if( reset == 1'b1 ) begin
 q <= 4'b0000; 
 end 
 else if( q == 4'b1100 ) begin
 q <= 4'b0000; 
 end
 else begin
 q = q + 1; 
 end
 end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
 if (reset == 1'b1) begin
 q=1'd1;
 end
 else if (q == 4'd12) begin
 q=1'd1;
 end
 else begin
 q = q +1'd1;
 end
 end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
	if (reset)
	q <= 4'b0000 ;
	else if (q == 4'd 12)
	q <= 4'b0001 ;
	else
	q <= q + 4'b0001 ;
	end
//output 
assign stream = q[0] * 10000042 + q[1] * 9900041 + q[2] * 9804000 + q[3] * 97000001 ;

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin
 if(reset)
 q <= 4'd1;
 else if(q == 12)
 q <= 1;
 else
 q <= q + 4'd1;
 end
 endmodule
// counter4bit.v
/*
 * Multiplier 
 * Copyright (C) 2009 Eric Naeseth
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
 * GNU General Public License for more
================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
	begin
	if (reset) q = 0;
	else if (q == 6) q=0;
	else q = q + 1;
	end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) 
begin 
if (reset) q <= 4'h1; 
else if (q == 12) q <= 4'h1; 
else q <= q + 4'h1; 
end 

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
 if(reset)
 q <= 4'b1;
 else if(q == 4'b1110)
 q <= 4'b1;
 else
 q <= q + 1;
 end



================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if (reset)
	q <= 4'b0000; 
else if (q == 12)
	q <= 4'b0000; 
else
	q <= q + 1'b1; 
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) 

begin 

if(reset) 

q <= 4'b0000 ; // this makes sure that in the event of a reset the count is reset to 0 



else if(q == 4'd5) 

q <= 4'b0000 ; 



else 

q <= q + 4'b0001; //else increment the reg value 

end 


================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset) 
begin
q <= ( reset) ? 4'b1111 :(( q == 4'b0111) ? 4'b1111 : (q + 1));
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset) begin
q[3:0] = 4'b0000;
end 
else begin
 if (q == 4'b1111) begin
q[3:0] = 4'b0000;
 end
 else begin
 q[3:0] = q[3:0] + 4'b0001;
 end
end

================================================================
