example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
	if(reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if(q == 12)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) 
begin 
if (reset) 
q <= 4'd1; 
else if (q == 4'd12) 
q <= 4'd1; 
else 
q <= q + 4'd1; 
end 

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin 
if(reset) 
q <= 4'b0000; 
else if(q == 4'd12) 
q <= 4'b0000; 
else 
q <= q + 4'b0001; 
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'd1;
	end
	else if (q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset == 1'b1) begin
	q <= 4'd1;
	end
	else if (q == 4'd12) begin
	q <= 4'd1;
	end
	else begin
	q <= q + 4'd1;
	end
	end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if(reset) 
q <= 4'b0000; 
else if(q == 12) 
q <= 4'b0000; 
else 
q <= q + 1; 
end 

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset)
q <= 4'b0000;
else if (q == 12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
 if ( reset == 1 ) begin
 q <= 4'b0000;
 end 
 else begin
 if ( q == 4'b1111 ) begin
 q <= 4'b0000;
 end
 else begin
 q <= q + 4'b0001;
 end
 end
 end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset)
q <= 4'b1;
else begin
if(q == 4'd5)
q <= 4'b1;
else
q <= q + 4'b1;
end
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin
if(reset)
q <= 1;
else begin
if(q == 12)
q <= 1;
else
q <= q + 1;
end
end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if (reset) q <= 4'b0000;
else if (q == 12) q <= 4'b0000;
else q <= q + 1'b1;
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset)
q <= 4'd1;
else begin
if(q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;
end
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if(reset)
 q <= 4'b0000;
 else if(q == 12)
 q <= 4'b0000;
 else
 q <= q + 1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset)
q <= 4'b1;
else begin
if (q == 4'd5)
q <= 4'b1;
else
q <= q + 4'b1;
end
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) 
begin 
if(reset) 
q <= 4'd1; 
else 
begin 
if(q == 12) 
q <= 4'd1; 
else 
q <= q + 4'd1; 
end 
end 

================================================================
