example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load == 1'b1)
	q <= data;
	if(ena == 1'b1)
	begin
	if (amount == 2'b00)
	q <= q << 1'b1; // shift left by 1 bit
	else if (amount == 2'b01)
	q <= q << 8'b1; // shift left by 8 bits
	else if (amount == 2'b10)
	q <= q >> 1'b1; // shift right by 1 bit
	else if (amount == 2'b11)
	q <= q >> 8'b1; // shift right by 8 bits
	end
	end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else
	begin
	if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	if (amount == 2'b01)
	begin
	q[0] <= q[63];
	q[63:8] <= q[62:0];
	end
	if (amount == 2'b10)
	begin
	q[63] <= q[0];
	q[63:1] <= q[62:0];
	end
	if (amount == 2'b11)
	begin
	q[63] <= q[0];
	
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	q <= data;
	else if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= {q[62:0], q[63]};
	end
	else if(amount == 2'b01)
	begin
	q <= {q[55:0], q[63:56]};
	end
	else if(amount == 2'b10)
	begin
	q <= {q[63:1], q[63]};
	end
	else if(amount == 2'b11)
	begin
	q <= {q[63:8], q[63:56]};
	end
	end
end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b11)
	begin
	q[63:8] <= q[56:0];
	end
	end
	end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if(load)
	q <= data;
else if (ena) 
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[63:1] >> 1;
	q[0] <= q[63];
	end
	else if(amount == 2'b11)
	begin
	q[63:1] <= q[63:1] <<
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(load)
	q <= data;
	else if(ena) begin
	q[63:62] <= q[61:60];
	q[61:60] <= q[59:56];
	q[59:56] <= q[55:52];
	q[55:52] <= q[51:48];
	q[51:48] <= q[47:44];
	q[47:44] <= q[43:40];
	q[43:40] <= q[39:36];
	q[39:36] <= q[35:32];
	q[35:32] <= q[31:28];
	q[31:28] <= q[27:24];
	q[27:24] <= q[23:20];
	q[23
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b11)
	begin
	q[63:8] <= q[56:0];
	end
	end
	end
	
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk) begin
	if (load) begin
	q <= data;
	end
	else begin
	if (ena) begin
	case(amount)
	2'b00:	q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end
	end
	
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	
	if (load == 1'b1)
	// load the data input into the register
	begin
	q <= data;
	end
	
	if (ena == 1'b1)
	// enable the shift
	begin
	
	if (amount == 2'b00)
	// left shift by 1 bit
	begin
	q <= q << 1'b1;
	end
	
	else if (amount == 2'b01)
	// left shift by 8 bits
	begin
	q <= q << 8'b1;
	end
	
	else if (amount == 2'b10)
	// right shift by 1 bit
	begin
	q <= q >> 1'b1;
	end
	
	else
	// right shift by 8 bits
	
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load) q <= data;
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end
	end
	
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	if (load)
	 begin
	 q[63:0] <= data[63:0];
	 end
	else if (ena)
	 begin
	 q[63:0] <= q[63:0] >> amount;
	 end
	end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0] << 1;
	end
	else
	begin
	q[63:8] <= q[62:0] << 8;
	end
	end
end

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) begin
	if(load)
	q <= data;
	else if(ena) begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	default: q <= q;
	endcase
	end
	end

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	q <= data;
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end
	end
	
================================================================
