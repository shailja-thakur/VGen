// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(in or sel)\nbegin\n\tcase (sel)\n\t0: pos = 2'd0;\n\t1: pos = 2'd1;\n\t2: pos = 2'd2;\n\t3: pos = 2'd3;\n\tendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(*)\nbegin\nif( in[2]==1'b1 )\n\tpos=2'd2;\t// 0010\nelse if( in[1]==1'b1 )\n\tpos=2'd1;\t// 0100\nelse if( in[0]==1'b1 )\n\tpos=2'd0;\t// 1000\nelse\n\tpos=2'd0;\t// 0000\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(*)\ncase (in)\n3'b000: pos = 2'b00; \n3'b001: pos = 2'b01; \n3'b010: pos = 2'b10;\n3'b011: pos = 2'b11;\ndefault: pos = 2'b00; \nendcase \n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @ (in or sel)\nbegin\nassign pos = sel ? b : '0;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(in or sel)\n\tbegin: output\n\tcase(sel)\n\t0: pos=0;\n\t1: pos=in[0];\n\t2: pos=in[1];\n\t3: pos=in[2];\n\tendcase\n\tend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(*)\ncase (in)\n3'b000: pos = 2'b00;\n3'b001: pos = 2'b01;\n3'b010: pos = 2'b10;\n3'b011: pos = 2'b11;\n3'b100: pos = 2'b10;\n3'b101: pos = 2'b01;\n3'b110: pos = 2'b00;\n3'b111: pos = 2'b11;\ndefault: pos = 2'b00;\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @ (in)\nbegin\n\tif (in[2]==1'b1) pos = 2'b10;\n\telse if (in[1] == 1'b1) pos = 2'b01;\n\telse if (in[0]==1'b1) pos = 2'b00;\n\telse pos = 2'bXX;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(in or sel)\ncase (sel)\n1'b0: pos=2'b00;\n1'b1: pos=2'b11;\ndefault: pos=2'b00;\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(in or sel) begin\n\tcasex({sel,in})\n\t4'b1xxx: pos=2'b00;\t// 00 or 11 - out is zero\n\t4'b01xx: pos=2'b01;\t// 010 or 011 - out is A\n\t4'b001x: pos=2'b10;\t// 010 or 011 - out is B\n\t4'b0001: pos=2'b11;\t// 000 or 111 - out is C\n\tdefault: pos=2'b00;\n\tendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "assign pos[1] = in[2] | in[1];\nassign pos[0] = in[0] | (in[1] & in[2]);\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @ ( in ) \nbegin \n\tcase ( in ) \n\t3'b000: pos = 2'b00; \n\t3'b001: pos = 2'b01; \n\t3'b010: pos = 2'b10; \n\t3'b011: pos = 2'b11; \n\tdefault: pos= 2'b00; \n\tendcase \nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @ (in)\nbegin\ncase (in)\n0 : pos = 2'b00;\n1 : pos = 2'b01;\n2 : pos = 2'b10;\n3 : pos = 2'b11;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(in or negedge in[0])\n\tif (in[0] == 1'b0)\n\tassign pos[1] = 1'b0;\n\telse\n\tassign pos[0] = 1'b1;\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(*)\ncase (in)\n3'b000: pos = 2'b0;\n3'b001: pos = 2'b00;\n3'b010: pos = 2'b01;\n3'b011: pos = 2'b10;\n3'b100: pos = 2'b11;\n3'b101: pos = 2'b01;\ndefault: pos = 2'b0;\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @(in)\nbegin\n\tcase (in)\n\t3'b000: pos = 2'b00;\t// Pass SA\n\t3'b001: pos = 2'b01;\t// Pass SB\n\t3'b010: pos = 2'b10;\t// Pass SA & SB\n\t3'b011: pos = 2'b11;\t// Pass SB & SA\n\tdefault: pos = 2'b00;\t// Pass SA\n\tendcase\nend\n"
    }
  ],
  "created": 1663334555,
  "id": "cmpl-HiLtMIDqUJoaPXJjnhnezXbjFvXml",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1225,
    "prompt_tokens": 65,
    "total_tokens": 1290
  }
}