example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( * )
begin
 // case all inputs sequentially falling
 casex ( in ) 
 // Set output high no matter what input state is
 3'bx_xx : pos = 2'b11 ;
 // Input one bit lower than highest is output low
 3'bx1_x1: pos = 2'b00 ;
 // Input two bits lower than highest is output mid
 3'bx_11 : pos = 2'b01 ;
 // Input three bits lower than highest is output low
 3'bx1_xx: pos = 2'b00 ;
 // Otherwise output is high
 default: pos = 2'b11 ;
 endcase 
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
	case(in)
//	2'b11: pos <= 2'b00;
	3'b010: pos <= 2'b01;
	3'b011: pos <= 2'b00;
//	3'b100: pos <= 2'b10;
	default: pos <= 2'b00; 
	endcase
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( in or din )
begin
	// If any input is high, output is high and all the inputs are assigned 0.
	case ( in ) 
	3'b000: pos = 2'b11;
	3'b001: pos = 2'b10;
	3'b010: pos = 2'b01;
	3'b011: pos = 2'b00;
	endcase
end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or negedge pos)
if (in > 2'b0 && ~pos) //If none inputs are high, position = 0
	pos = 2'b00;
else if (in[0] > 0) //CLAIM WHICH S/B SELECTED // CASE 0:
	pos = 2'b00; 
else if (in[1] > 0) //CASE 1
	pos = 2'b01; 
else if (in[2] > 0) //CASE 2
	pos = 2'b10;

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or negedge pos)
begin
if( ~pos ) // active low
pos = 1'b0; end
else begin
casex (in) // case statement x
3'x0 : pos = 2'b00; 
3'x1 : pos = 2'b01;
3'x1 : pos = 2'b10; 
3'x2 : pos = 2'b10;
default : pos = 2'b10;
endcase
end

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in ) 
begin
case ( in )
3'b0: pos=2'b11;
3'b01: pos=2'b10;
3'b10: pos=2'b01;
3'b11: pos=2'b00;
endcase
end


================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
	begin
	case(in)
	// Using a 3x1 mux to implement the priority encoder in a readable manner
	// Would usually use a case statement for this sort of use and ignore the 
	// flipflop it generates, but what would be created in the flipflop 
	// is actually an AND and an OR, handled in infix logic
	// Priority flags assigned
	 4'b0000: begin pos = 2'b00; end	// Highest priority goes to 0
	 4'b0001: begin pos = 2'b01; end	// Higher than 0
	 4'b0010: begin pos = 2'b10; end	// Higher than 0 and 1
	 4'b0011: begin pos = 2'b11; end	// Higher than all
	// Non-priority flags go to output 0
	 default: begin pos =
================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=1, and b is 0, out is 0
// When sel=0, assign a to out


always @(in) begin
case (in)

[2] : pos = 2'b01;

[1] : pos = 2'b10;

[0] : pos = 2'b00;

default : pos= 0;

endcase
end


================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
 if (in[0]) pos = 2'd0; // 0000
 else if (in[1]) pos = 2'd1; // 0001
 else if (in[2]) pos = 2'd2; // 0010
 else pos = 2'd3; // 0011
end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( in or sel ) 
	begin
	if ( in < 2 ) // 1-3 
	 	pos = 0;
	 else if ( in < 5 ) // 4-6
	 	pos = 1;
	 else // >=7
	 	pos = 2;
	end

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@ (*) begin
if(in[0]) begin
 pos = 2'b11;
end
else if(in[1]) begin
 pos = 2'b10;
end
else if(in[2]) begin
 pos = 2'b01;
end
end

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) 
begin
case (in)
3'b000: pos=2'b00; // lost to floor
3'b001: pos=2'b01;
3'b010: pos=2'b10;
3'b011: pos=2'b11;
3'b100: pos=2'b11;
default: pos=2'b00;
endcase
end

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=x, output the selected A or B 
always @ ( * ) 
begin 
case(in) 
// When none of input is high, output is zero 
3'b000: begin 
sel = 0; 
out = 2'b00; 
pos = 2'b00; 
end 
/* 
3'b001: begin 
sel = 1; 
out = bits_100(A); 
pos = bits_100(B); 
end 
3'b010: begin 
sel = 1; 
out = bits_010(A); 
pos = bits_010(B); 
end 
3'b011: begin 
sel = 1; 
out = bits_001(A); 
pos = bits_001(B); 
end 
3'b100: begin 
================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
case(in)
3'd0: begin pos=2'b00; end
3'd1: begin pos=2'b01; end
3'd2: begin pos=2'b10; end
3'd3: begin pos=2'b11; end
endcase
end

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ * begin
 case(in)
 3'b000: pos = 2'b00;
 3'b001: pos = 2'b01;
 3'b010: pos = 2'b10;
 3'b011: pos = 2'b11;
 default: pos = 2'b00;
 endcase 
end


================================================================
