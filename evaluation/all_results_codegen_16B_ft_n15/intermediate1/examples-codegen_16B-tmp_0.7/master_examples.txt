example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // bitwise xor
assign cout = a & b; // bitwise and

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // Bitwise xor
assign cout = a & b; //Bitwise and

================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// internal signals
reg sum, cout;

always @ (a, b, sum, cout)
begin
	// sum is the sum of two bits added, cout is the carry-out bit
	// when b = 0 then sum = a, and cout = 0
	// when b = 1 then sum = a+b, and cout = 0
	sum = a ^ b;	
	cout = (a & b);
end

================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
	assign sum = a ^ b; //a XOR b
	assign cout = a & b; //a AND b

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; //xor
assign cout = a & b; //and

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b; //xor
assign cout = a & b;


================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; //xor the two inputs
assign cout = a & b; //and the two inputs

================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a not gate. A not gate inverts the bit inputted.
// I also used this as a control gate, which is a gate with no 
// inputs and one output. This is a pretty common structure. 
// It allows you to have a wire (cout) and a wire (sum) with sharing 
// in only one place.
not n1( w1, a );
xor x1( sum, b, w1 );
and a1( cout, a, b );


================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

	// internal signal declarations
	reg sum, cout;
	
	always @ ( a or b ) begin
	
	// sum will be 1 if the inputs are both 1
	// zero (or not true) if the inputs are both zero
	// cout is zero if no carry takes place
	// otherwise, cout is 1
	
	// this is just a description of the state space diagram
	// sum is sum if b=1, otherwise is zero
	// cout is 1 is a and b are not equal
	
	sum = (~a & b) | (a & ~b);
	cout = (a & b);
	end

================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is the body of the half adder.

// The following statement is a half adder.
assign sum = a ^ b;
assign cout = a & b;


================================================================
