example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	//if (reset)
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001)
	q <= q + 1'b1;
	end
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset == 1'b0)
	begin
	//	q <= 4'b0;
	end
	else begin
	if(slowena == 1'b1)
	begin
	if(q == 9)
	begin
	q <= 4'b0;
	end
	else begin
	q <= q + 4'b0001;
	end
	end
	end
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if(reset) q <= 4'd0;
	else begin 
	if(slowena && q <= 9) q <= q + 4'd1;
	end
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk) begin
	if (reset)
	q <= 4'b0;
	else begin
	if (slowena) begin
	if (q != 4'b1001)
	q <= q + 1'b1;
	end
	else
	q <= q;
	end
	end
	// The q output in this case is a 4-bit binary number that represents the
	// amount of time that has passed between the start of the program and the
	// present time.


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'd0;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) 
	begin
	if (reset) q <= 4'b0;
	else
	// if (ena) q <= q + 1'b1;
	if(slowena)
	begin
	if(q==4'd9)
	q=4'd0;
	else q=q+1'b1;
	end
	end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (reset)
 begin
	q[3:0] <= 4'b0000;
 end
 else
 begin
	if(slowena)
	begin
	if (q == 4'd9)
	begin
	q[3:0] <= 4'b0000; 
	end
	else
	begin
	q[3:0] <= q[3:0] + 4'b0001; 
	end
	end
 end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// (Slowly, as the term is used here)

always @ (posedge clk) begin

if (reset) begin
	q <= 4'b0;
end else begin
	if (slowena) begin
	// if (q == 9) begin // This doesn't work
	// 	q <= 4'b0;
	// end else begin
	// 	q <= q + 1;
	// end
	if (q == 9) begin
	// if (slowena) begin
	// 	q <= 4'b0;
	// end else begin
	// 	q <= q + 1;
	// end
	q <= 4'b0;
	end else begin
	q <= q + 1;
	end
	// else begin
	// 	// q <= q;
	// end
	end
end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	//if (slowena)
	//begin
	//	if (q <= 9)
	//	begin
	//	q <= q + 1'b1;
	//	end
	//	else
	//	begin
	//	q <= 1'b0;
	//	end
	//end
	end
	else
	begin
	//if (q == 9)
	//begin
	//	q <= 1'b0;
	//end
	//else
	//begin
	//	q <= q + 1'b1;
	//end
	end
end



================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 




































































































































































================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'd0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'd0;
	end
	else begin
	q <= q + 4'd1;
	end
	end
	end
end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset)
begin
if (~reset)
q = 0;
else if (slowena && q < 9)
q = q + 1;
end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) 
	begin
	q <= 0;
	end
	else begin
	if (slowena && q < 9)
	q <= q + 1;
	end
	end

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if (reset)
q <= 0;

else if (slowena && q < 9)
q <= q + 1;

end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if (reset)
q <= 4'd0;

else if (slowena && q < 9)
q <= q + 1'b1;

end


================================================================
