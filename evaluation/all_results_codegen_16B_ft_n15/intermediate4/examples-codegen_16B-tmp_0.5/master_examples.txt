example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @ (present_state or in)
begin
	case(present_state)
	1'b0:
	begin
	if(in==1'b1)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if(in==1'b1)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	end
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
begin
present_state <= 1'b0;
next_state <= 1'b0;
out <= 1'b0;
end
else
begin
present_state <= next_state;
out <= (present_state == 1'b0 && in == 1'b1) || (present_state == 1'b1 && in == 1'b0);
end
end
always @(present_state or in)
begin
case(present_state)
1'b0: if(in == 1'b1)
begin
next_state <= 1'b0;
end
else
begin
next_state <= 1'b1;
end
1'b1: if(in == 1'b1)
begin
next_state <= 1'b1;
end
else
begin

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state;
always @(posedge clk or posedge reset)
begin
if(reset)
present_state = 0;
else
present_state = next_state;
end
always @(in or present_state)
begin
case(present_state)
0:
begin
if(in)
next_state = 0;
else
next_state = 1;
end
1:
begin
if(in)
next_state = 1;
else
next_state = 0;
end
endcase
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if (reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0:
	begin
	if (in)
	begin
	next_state=0;
	out=0;
	end
	else
	begin
	next_state=1;
	out=0;
	end
	end
1:
	begin
	if (in)
	begin
	next_state=1;
	out=0;
	end
	else
	begin
	next_state=0;
	out=1;
	end
	end
endcase
end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state;
always @(posedge clk)
begin
if(reset)
begin
present_state <= 0;
end
else
begin
case (present_state)
0:
begin
if(in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
end
1:
begin
if(in)
begin
next_state <= 1;
end
else
begin
next_state <= 0;
end
end
endcase
end
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0: begin
next_state = (~in) ? 1'b0 : 1'b1;
out = 1'b0;
end
1'b1: begin
next_state = in ? 1'b1 : 1'b0;
out = 1'b1;
end
endcase
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
	case (present_state)
	1'b0: 
	begin
	next_state = in ? 1'b0 : 1'b1;
	out = 1'b0;
	end
	1'b1: 
	begin
	next_state = in ? 1'b1 : 1'b0;
	out = 1'b1;
	end
	endcase
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @( posedge clk, posedge reset )
begin
if ( reset )
present_state <= 0;
else
present_state <= next_state;
end
always @( present_state, in )
begin
case ( present_state )
0: if ( in )
next_state = 0;
else
next_state = 1;
1: if ( in )
next_state = 1;
else
next_state = 0;
endcase
end
assign out = ( present_state == 0 ) ? 1 : 0;

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if (reset) begin
	present_state <= 1'b0;
	end
	else
	present_state <= next_state;
end
always @(in or present_state) begin
	case (present_state)
	1'b0:
	begin
	next_state <= in ? 1'b0 : 1'b1;
	out <= in ? 1'b0 : 1'b1;
	end
	1'b1:
	begin
	next_state <= in ? 1'b1 : 1'b0;
	out <= in ? 1'b1 : 1'b0;
	end
	endcase
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter S0 = 0, S1 = 1;
always @(posedge clk)
begin
if(reset)
present_state <= S0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
S0:
begin
if(in)
next_state <= S0;
else
next_state <= S1;
end
S1:
begin
if(in)
next_state <= S1;
else
next_state <= S0;
end
endcase
end
assign out = (present_state == S0 && in == 1'b1) ? 1'b1 : 1'b0;

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state = 0;
else
next_state = 1;
end
1:
begin
if(in)
next_state = 1;
else
next_state = 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
begin
present_state <= next_state;
end
end
always@(present_state, in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1: begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1'b0 && next_state == 1'b0) || (present_state == 1'b1 && next_state == 1'b1);
always @(posedge clk)
begin
if(reset)
	present_state <= 1'b0;
else
	present_state <= next_state;
end
always @(in or present_state or reset)
begin
case(present_state)
0:
begin
	if(in == 1'b1)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
end
1:
begin
	if(in == 1'b1)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	
================================================================
