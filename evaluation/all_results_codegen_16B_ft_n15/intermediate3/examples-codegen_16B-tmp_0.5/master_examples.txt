example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ { r_reg[4], r_reg[4] ^ r_reg[2] };
assign q = r_reg;
always @(posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b00000;
else
r_reg <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = q[4] ^ q[3];
assign r_next = r_reg;
assign q = r_reg;
always @ (posedge clk)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset) begin
	if (reset) begin
	r_reg <= 5'b1;
	end
	else begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[3], r_reg[2], r_reg[1], r_reg[0]};

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk, posedge reset) begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
// define the feedback equation
assign feedback_value = ~(r_reg[4] ^ r_reg[2]);
// define the next-state logic
assign r_next = r_reg << 1;
// shift the bits left

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
// always block with clk and reset
always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	// reset r_reg to 1
	r_reg <= 5'b10000;
	end
	else
	begin
	// otherwise assign r_next to r_reg
	r_reg <= r_next;
	end
end
// assign r_next to r_reg concatenated with a 2 bit shift
assign r_next = {r_reg[4], r_reg[3:2] ^ r_reg[4]};
// assign the xor of bit positions 2 and 4 to the feedback value
assign feedback_value = r_reg[2] ^ r_reg[4];
// assign r_next to the output q
assign q = r_reg;

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = ^(r_reg[2:4]);
assign q = r_reg ^ feedback_value;
// always block to update the value of r_reg
always @(posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg[4] <= r_next[4];
r_reg[3:0] <= r_next[3:0];
end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg[4] ^ r_reg[2] ^ r_reg[3] ^ r_reg[0] ^ r_reg[2] ^ r_reg[1] ^ r_reg[2] ^ r_reg[3] ^ r_reg[4] ^ r_reg[0] ^ r_reg[2] ^ r_reg[3];
assign feedback_value = r_reg[2] ^ r_reg[3];
always @ (posedge clk)
begin
if (reset)
begin
r_reg <= 5'b10000;
end
else
begin
r_reg <= r_next;
end
end
assign q = r_reg;

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg ^ {feedback_value, r_reg[4]};
always @(posedge clk) begin
 if(reset) begin
 r_reg <= 5'b1;
 end
 else begin
 r_reg <= r_next;
 end
end
assign q = r_reg;

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {feedback_value, r_reg[4]};
always @(posedge clk)
begin
if(reset)
begin
r_reg <= 5'b10000;
end
else
begin
r_reg <= r_next;
end
end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? (5'b1 << 1) : (r_reg ^ (r_reg >> 1) ^ (r_reg >> 2) ^ (r_reg >> 3) ^ (r_reg >> 4));
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
always @ (posedge clk) 
begin
r_reg <= r_next;
end

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk or posedge reset)
begin
if (reset)
r_reg <= 1;
else
r_reg <= r_next;
end
// compute the next value
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[3]};
// compute the feedback value
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset) begin
// if reset is asserted, set r_reg to 1
if (reset)
r_reg <= {1'b1};
// else, assign r_next to r_reg
else
r_reg <= r_next;
end
// define r_next
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[3]};
// define feedback_value
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset)
begin
if (reset)
begin
r_reg <= 5'b11111;
end
else
begin
r_reg <= r_next;
end
end
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[2]};
assign feedback_value = r_reg[4] ^ r_reg[2];
assign q = r_reg;

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg[4] <= r_reg[0];
r_reg[3] <= r_reg[4];
r_reg[2] <= r_reg[3] ^ r_reg[0];
r_reg[1] <= r_reg[2];
r_reg[0] <= r_reg[1] ^ r_reg[4];
end
end
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign r_next = (r_reg & {5{~(r_reg[4] | r_reg[2])}}) | {5{r_reg[4]}};
assign feedback_value = r_reg[4] ^ r_reg[2];
always @(posedge clk ) begin
if (reset)
r_reg <= 5'b01110;
else
r_reg <= r_next;
end

================================================================
