example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
if (reset) r_reg <= 5'b11111;
else r_reg <= r_next;
end
// define the next state value and the feedback value
assign r_next = {r_reg[3], r_reg[4] ^ r_reg[2]};
assign feedback_value = r_reg[4] ^ r_reg[3];

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? {1'b1,1'b1,1'b1,1'b1,1'b1} : (r_reg ^ {r_reg[2], r_reg[4], r_reg[4] ^ r_reg[0]});
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
// register the feedback value
always @ (posedge clk)
begin
	r_reg <= r_next;
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0] ^ feedback_value};
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	r_reg <= 5'b11111;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	// on reset set the value of r_reg to 1
	// otherwise assign r_next to r_reg
	r_reg <= 5'b10011;
	end
	else 
	begin
	// on reset set the value of r_reg to 1
	// otherwise assign r_next to r_reg
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
//assign feedback_value = r_reg[2] ^ r_reg[4];
//assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {feedback_value, r_reg[
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @ ( posedge clk or posedge reset )
begin
	if (reset) begin
	r_reg <= 5'b0;
	end
	else begin
	r_reg <= r_next;
	end
end
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4],r_reg[4] ^ r_reg[0]};

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk or posedge reset)
if (reset)
r_reg <= 5'b00000;
else
r_reg <= r_next;
// assign feedback_value to xor(r_reg[2],r_reg[4]);
assign r_next = r_reg ^ (feedback_value ^ r_reg);

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset==1) ? 5'h1 : (feedback_value ^ r_reg);
assign q = r_reg;

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @(*) begin
	if (reset) begin
	r_reg = 5'b1;
	end
	else begin
	r_reg = r_next;
	end
end
assign feedback_value = ^{r_reg[2], r_reg[4]};
assign r_next = {r_reg[4], r_reg[3], r_reg[3], r_reg[3], r_reg[4]};
assign q = r_reg;

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
if(reset)
begin
r_reg <= 6'h1;
end
else
begin
r_reg <= r_next;
end
end
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[2]};
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = q[2] ^ q[4];
assign r_next = {r_reg[4], r_reg[3], r_reg[2], r_reg[1], r_reg[0], feedback_value};
always @(posedge clk, posedge reset)
if(reset)
begin
 r_reg <= 0;
end
else
begin
 r_reg <= r_next;
end
assign q = r_reg;

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign r_next = (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ (r_reg ^ r_reg)))))))))))));
// The above is the second implementation with a feedback value of 1
// The above can also be implemented with an initial value of 0x8000
// for the feedback_value. However, this results in a non-pipelined circuit.
// The implementation with the XORs results in a pipelined circuit.
always @(posedge clk)
begin
if (reset)
begin
r_reg <= 5'b10000;
end
else
begin

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	r_reg <= 5'b00000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
// concat r_reg with its 2 MSB to give r_next
assign r_next = {r_reg[4],r_reg[4:1]};

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[3:1] ^ feedback_value};
always @(posedge clk) 
begin
	if (reset)
	begin
	r_reg <= 5'd1;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_next;
always @(posedge clk) 
begin
if(reset) r_reg <= 5'b10000;
else begin
r_reg <= r_next;
end
end
// next_state logic
// logic to generate the next state of the LFSR
// next state is calculated as r_reg + feedback_value
assign r_next = r_reg + feedback_value;

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (clk or reset)
	if (reset)
	begin
// assign r_reg to 1
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	// assign feedback_value to r_reg
	r_reg[2] <= r_reg[4] ^ r_reg[0];
	end

================================================================
