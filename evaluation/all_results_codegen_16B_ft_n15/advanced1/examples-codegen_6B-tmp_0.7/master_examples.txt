example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 

wire signed [7:0] b_s; //stores the 8-bit b in a 2's complement form

//sets the most significant bit of b to 1 if b is negative
assign b_s = (b[7]) ? ~b + 1'b1 : b;

//adds the two numbers a and b
//sets the carry to 1 if a and b are signed and the operation is a subtraction
assign s = (a[7])? (a-b_s)+1'b1 : a+b_s;

assign overflow = ((a[7])&(b[7])&(~s[7]))|((~a[7])&(~b[7])&s[7]);




================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign overflow = (a[7] & b[7]) & (~s[7]);

wire bnot[7:0]; // the wire holding the least significant bits of b

assign bnot[0] = ~b[0];
assign bnot[1] = ~b[1];
assign bnot[2] = ~b[2];
assign bnot[3] = ~b[3];
assign bnot[4] = ~b[4];
assign bnot[5] = ~b[5];
assign bnot[6] = ~b[6];
assign bnot[7] = ~b[7];

assign s[0] = (a[0] & bnot[0]) ^ (a[0] & b[0]) ^ (a[0] & a[0]) ^ (a
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = {b[6:0],b[7]};

// makes b into a 2s complement of b

wire signed_b_signed = ~b_signed +1;

// adds a and b

wire signed [7:0] a_and_b_signed = {a[6:0],a[7]};

// makes a into a 2s complement of a

wire signed_a_and_b_signed = ~a_and_b_signed +1;

assign s = a_and_b_signed + b_signed;

assign overflow = ((a[6:0] & b[6:0]) & ~(a[7] | b[7])) | ((~(a[6:0] | b[6:0])) & (a[7] |
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// Declare inputs and outputs

input [7:0] a;
input [7:0] b;
output [7:0] s;
output overflow;


	assign {overflow,s}=a+b;
	
// If a or b is negative, the sum may or may not be negative, the carry is high (for a+b) or low (for a-b). 
// If the most significant bit of a or b is 1 or 0, the signed value of s is the unsigned sum. 
// Otherwise, s is a signed sum. 
// In summary, if a or b is signed, then the sum is always signed.


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// A signed adder can add two numbers of the same sign and produce a signed result with no overflow.
// If the most significant bit of a and b is high, then the result will be negative.
// If the most significant bit of a and b is low, then the result will be positive.

// If the most significant bit of s is high, then an overflow will occur, because the result is negative.
// If the most significant bit of s is low, then no overflow will occur.

// If a or b is zero, then the signed sum is NaN.
// The sum is NaN if the most significant bit of the sum is high, or if the sum is zero.

// If a or b is infinite, then the sum is NaN.
// The sum is NaN if the most significant bit of the sum is high, or if the sum is zero.

// If a or
================================================================
