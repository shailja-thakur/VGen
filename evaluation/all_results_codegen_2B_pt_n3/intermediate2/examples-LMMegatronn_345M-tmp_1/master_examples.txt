example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
function [11:0] incr;
input incr;
input [3:0] decr;
reg [3:0] q;
begin
	incr = 0;
	q = 0;
	incr = 0;
end
endfunction

reg [11:0] mc [9:0];

integer i;
always @(posedge clk) begin
	if (reset) begin
		for (i = 0; i < 10; i = i + 1) begin
			mc[i] = 0;
		end
	end else if (incr) begin
		for (i = 0; i < 10; i = i + 1) begin
			mc[i] = 0;
		end
	end else begin
		if (!(&ii[3:1]) || &(raw)) begin

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @ ( posedge clk )
  begin
    if(reset == 1'b1)
      q[3:0] <= 4'b0000;
    else
      q[3:0]  <= q[3:0] + 4'b0001;
  end
    

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@( q )
begin 
 q[0]  <= q[0]^q[1]^q[2]^q[3]^q[4]^q[5]^q[6]^q[7]^q[8]^q[9]^q[10+1]^q[11];                                                                                       
q[1]  <= q[1]^q[2]^q[3]^q[4]^q[5]^q[6]^
================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reg incr;
always @( posedge clk or negedge reset )
    begin
	    if( !reset ) begin
		         incr <= 1'd0;
			     q    <= 4'd0;
			end
		    else if( clk ) incr <= incr+1'd1; 
		end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk, negedge reset)
  if(!reset) q <= 4'b0; // clock reset 
	else begin
		if(|q ) q <= q + 1'b1; // increase w/ this will increase clock
	 end


================================================================
