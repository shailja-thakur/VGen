example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void evaluate();
  


int main( char *argv[] )
{

  // print argv
  //pv("Argv: ", argv);

  char* _a = argv[1];
  /* int a = atoi(argv[1]); */ // argv[1] is a string arg
  checkA(_a);
  char* _b = argv[2];
  int b = atoi(argv[2]);
  checkB(_b);

  setupPvs();
  loadKernelCode();

  coordinates, i;
  unsigned n_chi = stripCount(kstart);

  // compute input's length in words, assume chunk size is 2 bits!
  int w_in = eightbit(atof(argv[3]));
  evaluate();
  //printf("w_in: %d\
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

unit half_adder_s( 
input a, b,
output cout );

export interface half_adder_s {

    void half_adder_s_sPrime_i(
    input a, b,
    output cout );

    void half_adder_s_aprime_i(
    input a, b,
    output cout ) ;

};

*/

/* 
The following should be implemented
  sout = 0;
  psumin =
*/
//public interface sout       @ sig( P.out, P.sig )
@SledInterface
public interface sout( P.out, P.sig )
{
    void half_adder_s( 
//    input a, b,
    input a, 
    output cout ); //sout0(
//    input a0, b,

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Initialize
sum.Time = sum.Time|0<<18;
sum.C = 0;
sum.S = 0;

// Destination state
sum.V = sum.C;

// The bundles carry as a sum container operations
sum.sum = Reinterpret_cast_complex64< double >( b&1|a&2  );
sum.sum <<= 1;
sum.C <<= 1;
sum.C |=(b&2?1:0)|(a&2?1:0);
sum.carry <<= 1;

while ( sum.S ) {
// for ( int i=8; i>=0; i-- ) {
	if ( sum.sum  >= sum.V ) {// sumpath
		sum.V <<= 1;
		sum.sum <<= 1;
 		sum.carry <<
================================================================
