example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
wire [3:0] b; 
// When sel=0, assign s to out
wire [3:0] s; 
    
      // Build the component
primitive adder implementation
( 
input [2:0] in, 
output reg [1:0] out);

// Implement the reg function
reg r, r2=r+1;
reg [3:0] out;
reg shift; // For accurate compare

trigger 1w
always @*
begin 
    b=0;
    s=0;
    
    for (b=0;b<125;b++)
    @ b[4:0] != offset_reg[4:0];
	bool result = select (b[3]=b[2:0]) != b[1]; -- if(!result)b=b+1;
	result = select
================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
wrising_up_n   [in, 6:0] r = sel ? b[1] : 0b111
wrising_up_n   [in, 0:6] w = sel ? b[0] : 0b10111

wbpri_low       [pos, 6:1]  = w[12:12]
wbpri_low       [pos, 1:0]  = w[10:9]
wbpri_high      [pos, 6:1]  = p[19:15]
wbpri_high      [pos, 0:0]  = p[11:8]
wbstate_low     [pos, 9:5]  = w[0:0]
wbstate_low     [pos, 4:3]  = w[5:4]
wbstate_high    [pos, 9:5]  = p[
================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in[2:0] || ~in[5:0]) begin
  lcd_pos = pos < 8 ? pos : pos - 16;
  pos = pos < 8 ? pos + 1 : pos;
end

// Write the position to LCD display
always @ (lcd_pos) begin
  h_const = h_const_value;
  h_stack = h_stack << 3 & ~(H_CLEAR_BUSY | (H_STACK_LOAD));
  h_stack = h_stack ^ pos & 0xf;
  lcd_intseq.high = ((h_stack & 0x10) == 0);
  lcd_intseq.low = lcd_clear_busy_high ? 1 : 0;
end

================================================================
