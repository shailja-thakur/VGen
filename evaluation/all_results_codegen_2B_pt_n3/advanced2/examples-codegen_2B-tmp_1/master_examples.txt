example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    void count_slow_edge_clk()
        begin
            if (reset != 0)
            begin
                if (slowena != 0)
                begin
                    q <= 0;
                end else
                begin
                    q <= count10;
                end
            end else
            begin
                if (slowena == 0)
                begin
                    q <= 0;              //adder: clk0
                end
            end
        end
end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
task main()
{
   if (slowena != 1'b0)
       q[1:0] <= q[0];             // Increment output q if reset is low & unsigned input q is low
    else
       q[1:0] <= 63'b0000_1000;    // Set output to bit[2:0] = 0 or null value
    delaya(clk^reset);
    clk <= clk;
}

// Notes:
// - We don't include a delay cycle needed to make sure the output is updated. 
//   Instead, we make sure the next clock cycle is the rising edge.
// - Holding the reset line low more than once causes a blackhole.

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the other edge of the clock:
// if ena is high, increment the output q regardless of if q is 9
//         else, do nothing

always @(posedge clk)
    if (reset)
        q = 0;

    // "-2" because we're stepping through the register more than once.
    if (slowena)
        q[-2] = (q[-2] + 1) % 10;
show_count_slow("after reset");

if ((slowena) and (q != 9)) 
    q = q[-2];  // Increment the output.
else
    q = 0;
show_count_slow("after ena");


================================================================
