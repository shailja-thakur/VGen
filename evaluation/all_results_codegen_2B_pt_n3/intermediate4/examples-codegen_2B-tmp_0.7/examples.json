// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "wire in_state;\nwire next_state_0;\nwire next_state_1;\n\nalways @*\nbegin\n    // do nothing if reset=0\n    if (reset == 0) begin\n        reset <= 1;\n    end\n\n    // do nothing if clk=0\n    if (clk == 0) begin\n        clk <= 1;\n    end\n\n    // if reset=0, and clk=0, and in=0, transition to state 0\n    if ((reset == 0) and (clk == 0) and (in == 0)) begin\n        // if next_state_0=0, then set next_state_0 to 1;\n        if (next_state_0 == 0) begin\n            next_state_0 <= 1;\n        end\n        // if next_state_1=0, then set next_state_1 to 1;"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\nalways @(posedge clk)\n{\n  // In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1\n  // In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0\n\n  if (reset == 1)\n    {\n      next_state = 0;\n      out = 0;\n      present_state = 0;\n      return;\n    }\n\n  if (in == 1)\n    {\n      if (present_state == 0)\n        {\n          next_state = 1;\n          out = 1;\n        }\n      else\n        {\n          next_state = 0;\n          out = 0;\n        }\n      present_state = next_state;\n    }\n  else\n    {\n      if (present_"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk, reset)\n    case(reset):\n        if (reset) {\n            present_state = 0;\n            next_state = 0;\n        } else {\n            present_state = next_state;\n        }\n    default:\n        if (in == 1) {\n            if (present_state == 0) {\n                next_state = 1;\n            }\n        } else {\n            if (present_state == 0) {\n                next_state = 0;\n            }\n        }\n        out = next_state;\n    endcase\n"
    }
  ],
  "created": 1663536928,
  "id": "cmpl-m5UrP4P5uZMdJh9tewiaMyELcd2A5",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 537,
    "prompt_tokens": 148,
    "total_tokens": 685
  }
}