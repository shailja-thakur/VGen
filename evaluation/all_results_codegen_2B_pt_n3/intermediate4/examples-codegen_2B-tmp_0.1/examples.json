// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        reset = 0;\n    else\n        reset = 1;\n    if (reset == 1)\n        next_state = 0;\n    else\n        next_state = 1;\n    if (in == 1)\n        present_state = next_state;\n    else\n        present_state = 0;\n    out = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n  {\n    reset = 0;\n  }\n  if (reset == 0)\n  {\n    present_state = 0;\n    next_state = 0;\n  }\n  else\n  {\n    present_state = in;\n    next_state = (present_state == 1) ? 0 : 1;\n  }\n  out = next_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n  {\n    reset = 0;\n  }\n  if (reset == 0)\n  {\n    present_state = 0;\n    next_state = 0;\n  }\n  else\n  {\n    present_state = in;\n    next_state = (present_state == 1) ? 0 : 1;\n  }\n  out = next_state;\n}\n"
    }
  ],
  "created": 1663536923,
  "id": "cmpl-AtAERp7K7PCk1u3gO6GvnO0PVxDvR",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 314,
    "prompt_tokens": 148,
    "total_tokens": 462
  }
}