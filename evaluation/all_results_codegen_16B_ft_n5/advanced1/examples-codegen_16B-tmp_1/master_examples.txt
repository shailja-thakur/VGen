example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low




// Code for CMP	

module cmp #(parameter W = 8)	// the W parameter determines the size of the width of the two 8 bit inputs
(
	input wire signed [W-1:0] in1,
	input wire signed [W-1:0] in2,
	output wire signed [W-1:0] out
);

	assign out = in1 > in2 ? in1 : in2;



================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b; 
assign overflow = a[7]&b[7]&~s[7] | a[7]&~b[7]&s[7]; 


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(a, b)
begin
	if (a[7] == 1 && b[7] == 0 && b[0] == 1 && s[0] == 0)
	//verifies if s starts as a negative number
	begin
//begining of exception statement
	//processes if b is negative and n is any value (should check if b is -ve number)
	
	end
	else if (a[7] == 0 && b[7] == 1 && s[0] == 0)
	begin
//begining of exception statement
	//processes if b is positive
	
	end
	else 
	begin	
	s <= a + b;
	
	end
end

assign overflow = (s[7] == 1 && a[7] == 0 && b[7] == 0 && s[0] == 1
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Subtracts b from a to get the updated 7 bit answer
assign s=(a-b);

// above operation is a positive or zero value
assign overflow=((a[7]&b[7])==(~a[7]&~b[7])) ?
((a[7]==1'b1) ? (~s[7]) : (~s[7]))
: ((a[7]==1'b1) ? (1'b1) : (1'b0));
 

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s 	= (b[7] == 0) ? a + b 
	:	(((a[7] == 0) & (b[7] == 1)) | ((a[7] == 1) & (b[7] == 0))) ? ((a[7:0] << 1)'s x) : 8'b11111111; //add one to the magnitude of the largest negative number
	assign overflow 	= ( (a[7] == 1) ^ (b[7] == 1)) ? ((a[7] == 0) & (b[7] == 1)) : ((a[7] == 1) & (b[7] == 0)) & (a[7:0] >> 7);	
	

================================================================
