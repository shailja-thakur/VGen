example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = q[2] ^ q[4];
assign r_next = r_reg
// The feedback_value can be determined by the following truth table
// (expressed as a truth table):
//	feedback_value
//	1 0
//	0 1
//	0 0
//	1 1
always @ (posedge clk or posedge reset)
if(reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end
assign q = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {r_reg[0],feedback_value};
// define the initial state as all 1's
initial begin
r_reg <= 5'b11111;
end
// define the output state
assign q = r_reg;
// define the clock
always @ (posedge clk)
begin
if (reset)
begin
// upon reset set the output back to all 1's
r_reg <= 5'b11111;
// upon reset set the counter to all 1's
end
else
begin
// otherwise assign the next state
r_reg <= r_next;
// alternatively, assign the current state to the next state
// r_reg <= r_next;
end
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
// define the next state of the FSM
assign r_next = r_reg ^ ((r_reg & 7'b0110000) >> 3);
// define the output of the FSM
assign q = r_reg;
// register r_reg
always @(posedge clk or negedge reset)
begin
if ~reset // if not reset
	begin
	r_reg <= 5'b0; // set register to 0
	end
else // if reset
	begin
	r_reg <= r_next; // assign next value to register
	end
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
if (reset) begin
q <= 5'b00000;
r_reg <= 5'b00000;
end
else begin
q <= r_next;
r_reg <= r_next;
end
end
// define the feedback operation
assign feedback_value = ^(r_reg[4:2]);
// define the feedback
assign r_next = r_reg ^ {r_reg[4], r_reg[4:1] ^ feedback_value};

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = (r_reg[2] & r_reg[4]) | (r_reg[2] & r_reg[3]) | (r_reg[4] & r_reg[5]);
assign r_next = {r_reg[4], r_reg[3], r_reg[2], r_reg[1], r_reg[0], feedback_value};
always @ (posedge clk) 
begin
	if(reset) r_reg <= 5'b01101;
	else r_reg <= r_next;
end
assign q = r_reg;

================================================================
