example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @( posedge clk, negedge reset )
	if(!reset)	begin	// when reset is low, all the	operations stop.
	out<= 0;	end
	else begin 
	case ({load})
	0: out <= out;
	1: begin 
	case(amount)
	0: out <= out;
	1: out <= {data[7:1],data[0]};
	2: out <= {data[7:2],data[1:0],data[7:3]};
	3: out <= {data[7:3],data[2:0],data[7:4]};
	4: out <= {data[7:4],data[3:0],data[7:5]};
	5: out <= {data[7:5],data[4:0],data
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
out<=0;
	end
	else
	begin
	if(load==1)
	begin
	out<=data;
	end
	else
	begin
	out<=((out << amount) | (out >> (7-amount)));
	end
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
if(!reset)
out=8'b0000_0000;
else if(load)
out=data;
else begin
out=data;
out=out<<amount;
out=out>>amount;
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset, posedge load)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	 out <= {out[6:0],out[7]};
	 // orawi aya
	 out <= out << amount ;
	 //oris
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or negedge reset)
begin
	if(!reset)
	begin
	out	<= 8'h00;
	end
	// rotate or shift the data as needed
	else if(load)
	// rotate by amount
	begin
	out	<= {data[7:amount], data[7:8]};
	end
	else
	// shift left by amount
	begin
	out	<= {data[7:1], data[7:1], data[7:1], data[7:1], data[7:1], data[7:1], data[7:1], data[7:1]};
	end
end

================================================================
