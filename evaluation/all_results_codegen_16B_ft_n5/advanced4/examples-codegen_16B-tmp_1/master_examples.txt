example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if(ena && load)
	// load shift register with initial value when the ena signal is high.
	q <= data;
	else if (ena && amount != 2'b0)
	// shift the register when ena is high, otherwise don't change it.
	begin
	case (amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	default: q <= q;
	endcase
	end
	else
	// Properly shutdown all ports on reset.
	begin
	q <= 64'h00000000;
	end
end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	q <= data;
	else 
	if(ena)
	begin
	if(amount == 0)
	begin
	q <= q << 1; //L shift by 1
	end
	else if(amount == 2)
	begin
	q <= q << 8; //L shift by 8
	end
	else 
	if(amount == 1)
	begin
	q <= q >> 1; //R shift by 1
	end
	else
	if(amount == 3)
	begin
	q <= q >> 8; //R shift by 8
	end	
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 	always @ (posedge clk) begin 
 	if (load) q <= data; 
 	if (ena) begin 
 	case(amount) 
 	2'd0: q <= q << 1; 
 	2'd1: q <= q << 8; 
 	2'd2: q <= q >> 1; 
 	2'd3: q <= q >> 8; 
 	endcase
 	end end


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) 
	if (ena)	
	
	begin
	// amount = 2'b00: First assign the comparison signals
	// amount = 2'b01: First assign the comparison signals
	// amount = 2'b10: First assign the comparison signals
	// amount = 2'b11: First assign the comparison signals

	case (amount)
	// 2'b00: do nothing
	2'b01: q <= {{q[62:1]}, q[0]}; //selects first block of bits to have q shifted left by 1 bit.
	2'b10: q <= { q[63], q[63:1]}; //selects second block of bits to have q shifted left by 1 bit.
	2'b11: q <= {{q[q[63:1]], q[63:0]}, q
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	 if(load) q <= data; 
	 else 
	 begin 
	 // case statement to identify shift amount
	 case(amount) 
	 2'b00: q <= q << 1; 
	 2'b01: q <= q <= {1'b0, q[63:1]}; 
	 2'b10: q <= q[0];
	 2'b11: q <= q <= {7'b0, q[63:7]}; 
	 endcase
	 end
 end

================================================================
