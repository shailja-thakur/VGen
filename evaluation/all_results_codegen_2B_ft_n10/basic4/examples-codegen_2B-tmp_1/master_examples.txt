example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
wire [4:0] sel_b;
assign sel_b = ( sel ) ? b : 4'b1111;
mux2to1 mux_inst0 (
// Output, input1
.out(out[0]),
.in0(a[0]), 
// Input, input2
.in1(sel_b[0]),
.sel(sel)); 
mux2to1 mux_inst1 (
// Output, input1
.out(out[1]),
.in0(a[1]), 
// Input, input2
.in1(sel_b[1]),
.sel(sel)); 
mux2to1 mux_inst2 (
// Output, input1
.out(out[2]),
.in0(a[2]), 
// Input, input2
.in1(sel
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
not #(5) n (sel,w);
and g1(w[0], a[0], sel);
and g2(w[2], a[1], sel);
and g3(w[4], b[1], w[0]);
and g4(w[5], b[2], w[2]);
and g5(w[1], b[3], sel);
or g6(out[0], w[1], w[4]);
or g7(out[1], w[2], w[5]);
or g8(out[2], w[1], w[2]); 
or g9(out[3], w[5], w[3]);
or g10(out[4], w[4], w[3]);

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// mux can be used with an arbitrary number of i/pairs, not just 2.
assign out = sel?b:a;

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out=( sel==1'b1)? b : a;

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out=(~sel&a[0])|(sel&b[0]);
// if sel=0 then assign from a else from b.
// if sel=1 then assign from b else from a.

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel ? b : a;

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0] out_min;
always @( sel or a or b )
case( sel )
	0: out = a;
	1: out = b;
endcase
always @( sel or out )
case( sel )
	0: out_min = out;
	1: out_min = {~out[4], out[3:0]};
endcase

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out[0]=sel&a[0]|~(sel&a[0])&b[0];
assign out[1]=sel&a[1]|~(sel&a[1])&b[1];
assign out[2]=sel&a[2]|~(sel&a[2])&b[2];
assign out[3]=sel&a[3]|~(sel&a[3])&b[3];
assign out[4]=sel&a[4]|~(sel&a[4])&b[4];

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out=(sel)? b:a;

================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. In this case, a and b have the same width.
// Notice out is 5 bits
mux_4to1 UUT( .inA(a), .inB(b), .sel(sel), .out(out)) ;

================================================================
