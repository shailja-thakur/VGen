example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
if(reset)
q=4'b0001;
else if(q==4'b12)
q=1;
else
q=q+1;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
 if(reset) q <= 1; else if(q==12) q <= 1; else q <= q + 1;

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if (reset) 
 q<=1;
 else if (q==12)
 q<=1;
 else
 q<=q+1;
 end
 endmodule 
 module counter(clk, reset, q);
	input clk;
	input reset;
	output [3:0] q;
	reg [3:0] q;
	always @(posedge clk)
	begin
	if (reset) 
	begin
	q<=1;
	end
	else if (q==12)
	begin
	q<=1;
	end
	else
	q<=q+1;
	end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// this module can also be used to generate a pulse signal, reset on posedge clk
always @(posedge clk or posedge reset)
 if (reset) q=4'b1;
 else if (q==4'b12) q=4'b1;
 else q=q+1;

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if (reset)
	q <= 4'b1;
else if (q == 4'd12)
	q <= 4'b1;
else
	q <= q + 1;

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
	if (reset)	
	begin
	q <= 4'b0001;
	end
	else
	if (q == 4'b12)
	q <= 4'b0001;
	else
	q <= q + 1'b1;
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 case ({reset,q})
 2'b00: q <= 1;
 2'b01: q <= 12;
 2'b10: if (q == 4'h12) q <= 1;
 else q <= q + 1;
 endcase
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
	begin
	if(reset)
q<=1;
	else if (q == 12)
q<=1;
	else
q<=q+1;
	end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 1'b1;//reset to 1
else if (q == 4'b12000)
q <= 1'b1;
else if (q == 4'b11111)
q <= 1'b1;
else
q <= q + 1'b1;
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset) begin
if (reset) q <= 1; 
else if (q == 12) q <= 1;
else q <= q + 1;
end 

================================================================
