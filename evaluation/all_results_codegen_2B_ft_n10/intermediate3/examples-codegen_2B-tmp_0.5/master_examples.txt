example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
 if (!reset)
 r_reg <= 5'b00000;
 else
 r_reg <= r_next;
end
assign r_next = {~r_reg[1], r_reg[4:2] ^ {~r_reg[4], r_reg[4] ^ {~r_reg[3], r_reg[3] ^ {~r_reg[2], r_reg[2] ^ {~r_reg[1], r_reg[1]}}}};
assign feedback_value = r_reg[0] ^ r_reg[1]; //xor of bit positions 0 and 1
assign q = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
if(reset)
r_reg <= 5'b00001;
else
r_reg <= r_next;
end
assign r_next = {r_reg[1], r_reg[4], r_reg[5], r_reg[3], r_reg[0]};
assign feedback_value = r_reg[2] ^ r_reg[4] ^ r_reg[5] ^ r_reg[0];

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
if (reset)
begin
	r_reg <= 1;
end
else
begin
	r_reg <= r_next;
end
end
assign r_next = {r_reg[3:0], feedback_value};
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
	if (reset)
	begin
	r_reg <= 5'b00001;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;
assign feedback_value = r_reg[4]^r_reg[3]^r_reg[2];
assign r_next = {r_reg[3:0],feedback_value};

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign r_next to the output q
always @ (posedge clk)
begin
	if (reset)
	begin
	r_reg <= 5'b11001;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign r_next = (feedback_value) ? (r_reg ^ {r_reg[4:1], {3{1'b0}}}) : (r_reg);

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign q to the output q
always @(posedge clk)
begin
	if (reset)
	begin
	r_reg <= 5'b00000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign r_next = {~r_reg[0], r_reg[1], r_reg[2], r_reg[3], r_reg[4] ^ feedback_value};
assign q = r_reg;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset)? 5'b00000 : (q == 5'b11111) ? r_reg : (q == 5'b11110) ? 5'b11111 : (q == 5'b11101) ? 5'b11111 : (q == 5'b11100) ? 5'b11111 : (q == 5'b11011) ? 5'b11111 : (q == 5'b11010) ? 5'b11111 : (q == 5'b11001) ? 5'b11111 : (q == 5'b11000) ? 5'b11111 : (q == 5'b10111) ? 5'b11111 : (q == 5'b10110) ? 5'b11111 : (q == 5'b10101) ? 5'b11111 : (q == 5'b10100) ? 5'
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	r_reg <= 5'b10001;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign r_next = r_reg;
assign feedback_value = r_reg[1];
assign r_next[4] = feedback_value ^ r_reg[2];
assign r_next[3] = feedback_value ^ r_reg[4];
assign r_next[2] = feedback_value ^ r_reg[4];
assign r_next[1] = feedback_value ^ r_reg[4];
assign r_next[0] = feedback_value ^ r_reg[4];
assign q = r_reg;

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
	
assign q = r_reg;
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	end
end

assign feedback_value = (r_reg[2] ^ r_reg[4]) ^ (r_reg[2] ^ r_reg[3]) ^ (r_reg[4] ^ r_reg[3]);
	
	
assign r_next = {feedback_value, r_reg[3:0]};

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset)
begin
if (reset)
r_reg <= 5'b00001;
else
r_reg <= r_next;
end
assign r_next = (feedback_value) ? (r_reg ^ {1'b0, {4{q[4]}}}) : (q);
assign feedback_value = (r_reg[2] ^ r_reg[4]);

================================================================
