example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] carryout; // carryout of the final stage
wire [7:0] finalresult;

wire signedadd_overflow;

assign carryout[7] = carryout[7] + (a[7] ^ b[7]);
assign carryout[6] = carryout[7] + (a[7] & b[7]);
assign carryout[5] = carryout[6] + (a[6] & b[6]);
assign carryout[4] = carryout[5] + (a[5] & b[5]);
assign carryout[3] = carryout[4] + (a[4] & b[4]);
assign carryout[2] = carryout[3] + (a[3] & b[3]);
assign carryout[1] = carryout[2
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = (a[7]&b[7]&~s[7]&~s[0]) | (b[7]&~a[7]&~s[7]&s[0]) | (a[7]&~b[7]&s[0]) ;

assign s = a + b;


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] sum;
wire [7:0] carrysum;

assign carrysum[7:0] = a[7:0] ^ b[7:0];

assign sum[7:0] = carrysum[7:0] ^ {1'b0, a[7:0]};

assign overflow = (a[7:0] & ~b[7:0]) | (~a[7:0] & b[7:0]);

assign s[7:0] = overflow ? sum[7:0] : {1'b0, sum[7:0]};


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// s is the sum of the two inputs.
// overflow is the sign of the result.

assign overflow = ((~s[7]) & a[7] & b[7]) | ((~s[7]) & (~a[7]) & (~b[7]) & (~(~s[7]) & (a[7] | b[7])));


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = (~a[7] & b[7] & ~s[7]) | (a[7] & ~b[7] & s[7]) | (a[7] & b[7] & s[7]);

// Add the complement of the b to the a. This results in a negative s.
assign yes = ~b[7] & a[7];
assign no = ~b[7] | a[7];

// There is no overflow if the complement of the b is added to the complement of the a.
assign overflow_complement = (~yes[7] & ~no[7]);



// The carry bit is equal to the complement of the negative of b.
assign carry = ~b[7] & ~a[7];

// Add the carry and complement of the b to the complement of the a. This gives the
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Initialize the output s
// Initialize the output overflow
// Use two half adders
// Use three full adders

wire [5:0] intermediate_carry;
wire signed [7:0] intermediate_add1;
wire signed [7:0] intermediate_add2;
wire signed [7:0] final_add;
wire [7:0] final_sum;
wire overflow;

// Intermediate carry
// Intermediate adder 1
// Intermediate adder 2
// Final adder
// Final sum

half_adder u0(a[0], b[0], intermediate_add1[0], intermediate_carry[0]);
half_adder u1(a[1], b[1], intermediate_add1[1], intermediate_carry[1]);
half_adder u2(a[2], b[2], intermediate_add1[2], intermediate_
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// A positive overflow occures when the most significant bits of a and b are high and the most significant bit of s is low
// A negative overflow occures when the most significant bits of a and b are low and the most significant bit of s is high
//if the abituses are equal then no overflow will occur.
 
assign overflow = ((a[7] & b[7]) & ~s[7]) | (~a[7] & ~b[7] & s[7]);

// There can be only one positive or negative overflow.

// The following code adds two 8-bit numbers and returns the number with the most significant overflow bit set

always @(*)
begin

case ({a[7],b[7]})

2'b00: s[7:0] = a[7:0] + b[7:0];

2'b01
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign {overflow,s} = a+b;


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign {overflow, s} = {(a[7] & b[7]) | (a[7] & ~b[7] & ~a[7]), a + b};


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// if both a and b are negative, then the sum s and overflow will be negative as well. 
// this is because the most significant bit of the sum s will be the sign of the most significant bit of a or b. 

// the general formula for the addition of two numbers of any size is:

// sum ( a + b )

// where a and b are of the same size. 

// the general formula for the subtraction of ( a - b ) is:

// sum ( a - b )
// where a and b are of the same size.

// if only one of the inputs is a negative number, then the result will be a positive number and the overflow will be a negative number.

// the formula for the addition of two numbers of any size is:

// sum ( a + b )

// where a and b are of the same size.

================================================================
