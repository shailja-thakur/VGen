example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// assign out=present_state&(~next_state)&(in)

always_ff @ (posedge clk)
 if(reset==1'b1)
 present_state <= 1'b0; else
 present_state <= in;

always_comb 
 // if(reset==1'b1)
 // next_state <= 1'b0; 
 // else if (in ==1) 
 // next_state <= 1'b0; 
 // else next_state <= 1'b1;
 always_comb 
 // if(reset==1'b1)
 // out <= 1'b0; 
 // else 
 // out <= (~present_state)&(next_state);

always_comb
 // if(reset==1'b1)
 // assign next_state = 1'b0; 
 // else if(
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0=0, state1=1;

always @ (posedge reset or posedge clk)
if (reset)
present_state<=0;
else
present_state<=next_state;

always@( present_state or in )
case( present_state )
0 : begin
if(in) next_state=state1;
else next_state=state0;
end
1 : begin
if(in) next_state=state0;
else next_state=state1;
end
endcase

always @ (present_state or in )
case ( present_state )
state0 : out=1;
state1 : out=0;
endcase

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset == 0) 
present_state = 2'b00;
else
present_state = next_state;
end
//next state
always @(present_state or in)
begin
case (present_state)
2'b00: next_state = (in) ? 2'b01 : (present_state);
2'b01: next_state = (in) ? 2'b01 : (present_state);
default:next_state = 2'b00;
endcase
end
//output
always @(posedge clk or posedge reset)
begin
if (reset) out <= 0;
else
out <= (present_state == 2'b01) && (present_state != next_state);
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always@(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end

//change next state according to in signals
always@(posedge in)
case(present_state)
0: begin
next_state <= in ? 0 : 1;
out <= 0;end
1: begin
next_state <= in ? 0 : 1;
out <= 0;end

endcase 

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
 if (reset) begin
 present_state <= 0;
 next_state <= 0;
 end
 else begin
 present_state <= next_state;
 end
 if (reset)
 out <= 1'b0;
 else if (next_state == 0) begin
 out <= 1'b1;
 end
end
always @(present_state, in) begin
 case (present_state)
 0: begin
 if (in)
 next_state <= 0;
 else
 next_state <= 1;
 end
 1: begin
 if (in)
 next_state <= 1;
 else
 next_state <= 0;
 end
 endcase
 end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk, reset)
 if(reset == 1)
 present_state <= 0;
 else
 present_state <= next_state;

 always @(*)
 begin
 case(present_state)
 0: begin
 next_state=1;
 out=0;
 end
 1: begin
 next_state=0;
 out=1;
 end
 endcase
 end


================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state; 
end
always@(present_state) 
case(present_state)
0: if(in)
next_state <= 1;
else
next_state <= 0;//present state 0 is obtuse
1: if(in)
next_state <= 1;
else
next_state <= 0;//state 1 is obtuse
default: next_state <= 0;
endcase
always@(present_state or in)
case(present_state)
0: out <= 0;
1: out <= 1; 
endcase

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk or negedge reset) begin
	if(!reset) begin
	present_state <= 0;
	next_state <= 0;
	end
	else begin
	case(present_state)
	0: if(in) 
	next_state <= 1;
	else 
	next_state <= 0;
	1: if(in) 
	next_state <= 0;
	else 
	next_state <= 1;	
	endcase
	end
usb_tl __USB_TL__
reg [7:0] __USB_TL__

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state = 0; // Current state in first parameter
assign next_state = ({in, present_state}+1) % 4; // {in, present_state} + 1
	// Counter for the {in, present_state}
	// XORing them gives the next state
reg [1:0]current_state;
	// Current state
assign out = (present_state==1);
	// Output
always @(posedge clk or change of reset)
	begin
//	Always block for current_state
	if(reset==1) begin
	present_state <= 0;
	current_state <= 0;
	end
	else begin
	current_state <= next_state;
	present_state = next_state;
	end //end $display in current_state
	end // end always

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or reset or in) begin
	if (reset == 1) begin
	// Reset the present state.
	present_state <= 1'b0;
	end else begin
	// Update the present state when a time-varying input value arrives.
	present_state <= next_state;
	end
end
// Moore FSM next_state by in
always @(present_state or in) begin
	case (present_state)
	case (1'b1)
	//00
	begin
	// in supposed to reset state 0
	next_state <= in;
	end
	//01
	begin
	// in supposed to go back to state 0
	next_state <= in;
	end
	endcase
end

================================================================
