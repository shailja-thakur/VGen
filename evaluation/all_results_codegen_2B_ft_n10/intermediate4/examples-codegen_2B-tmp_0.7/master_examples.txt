example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk or posedge reset)
if (reset)
present_state <= 0;
else
present_state <= next_state;

// Next state logic
always@(present_state or in)
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= 0;
endcase

// Output logic
assign out = (present_state == 1) ? 1 : 0;


================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
if(reset | present_state==next_state)
present_state <= 0;
else
present_state <= next_state;
//
//always @(posedge clk)
//if(reset)
//	present_state <= 0;
//else
//	present_state <= next_state;
//
//always @(posedge clk)
//	if(reset)
//	next_state <= 0;
//	else if(present_state == next_state)
//	next_state <= 0;
//	else
//	next_state <= next_state;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @*
begin
case(present_state)
0: next_state <= (~in) ? 0 : 1;
1: next_state <= (~in) ? 1 : 0;
default: next_state <= 0;
endcase
end
// out=1 in state 0 and out=0 in state 1
assign out = present_state == 2'b01;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state = present_state & ~in
assign next_state = present_state & ~in;
// present_state = in in state 0 ? 0 : 1
assign present_state = in & reset ? 0 : 1;
// out = 0 in state 0 ? 0 : 1
assign out = present_state & in;
always @(posedge clk or negedge reset)
begin
if(reset == 1'b0)
present_state <= 0;
else
present_state <= next_state;
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (*)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= present_state;
endcase
end
always @ (*)
case (present_state)
0: out <= 0;
1: out <= 0;
default: out <= 1;
endcase

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=0;
else
present_state<=next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
if(in)
next_state<=1;
else
next_state<=0;
1:
if(in)
next_state<=1;
else
next_state<=0;
endcase
end
always @(present_state)
begin
case(present_state)
0:out<=0;
1:out<=1;
endcase
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else 
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0 : next_state <= in ? 0 : 1;
1 : next_state <= in ? 1 : 0;
endcase
end
assign out = (present_state == 1) & (next_state == 0);

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// State 0 is reset state
always @(posedge clk, posedge reset)
begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
end
// Moore FSM
always @(present_state, in)
begin
	case (present_state)
	0: next_state <= (in) ? 0 : 1;
	1: next_state <= (in) ? 0 : 1;
	default: next_state <= present_state;
	endcase
end
assign out = (present_state == 1);

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state=out in state 0 and next_state=out in state 1
always @(posedge clk)
if (reset) 
present_state<=0;
else 
present_state<=next_state;
always @(present_state,in)
case (present_state)
0: next_state=in?0:1;
1: next_state=in?0:0;
endcase
assign out=present_state;

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else 
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: begin
	if(in)
	next_state <= 0;
	else
	next_state <= 1;
	end
1: begin
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
	end
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 1;
endcase
end

================================================================
