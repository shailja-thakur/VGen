example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1];
always @(posedge clk) 
	if(reset) // if state 0 in the current state, go to state 1
	begin
	next_state = present_state ^ present_state;
	present_state = next_state; // equal to present_state = next_state
	end
	else if (present_state[1] == 0 & in == 1) // stay in state 1
	begin
	next_state = present_state ^ present_state;
	present_state = next_state;
	end
	else if (present_state[1] == 1 & in == 0) // stay in state 1
	begin
	next_state = present_state ^ present_state;
	present_state = next_state;
	end
	// else, stay in state 1

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// When making a transition in the Moore state machine, the next state is set to the next
// input asserted on the zeroth cycle. If the next input is asserted on the next positive clock edge, 
// the next_state is set to 1. If the input is deasserted on the next positive clock edge, next_state
// is set to 0. Over and over again, the contents of next_state are checked to see if the program is 
// still in State 1. If so, then FALSE is returned. If FALSE, TRUE is returned.
always @(posedge clk)
begin : FSM 
	if (reset) // if the fsm is reset, or the input is changed
	begin 
	next_state <= in;	 // Register the input on the next positive clock edge
	present_state <= next_state; // Register the next state on rising edges of the clock

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[in]; // Because this is a 1 bit output it will have only 1 or 0 output
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	present_state<= 2'b01; 
	end 
	else 
	// you can also use the procedural timescale in place of the assign
	// * this is a combinational process so you will want a combinational always block to keep everything away from the edge of the clock
	(present_state or in) == (next_state); // See https://www.geeksforgeeks.org/correspondence-of-clock-edge-in-the-simulation-of-a-fsm/
always @(*)
	case(present_state)
	2'b00: next_state = in ? 2'b00 : 2'
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in);
always @(posedge clk or posedge reset) 
	begin 
	if (reset) // if this is a reset, state goes to initial state
	 present_state <= 1'b1;
	else 
	 present_state <= next_state;
	end
always @(present_state or in) // the next state is set asynchronously
	case(present_state)
	1'b0: next_state = (in)? 1'b1 : 1'b0;
	1'b1: next_state = ((in)?1'b0 : 1'b1);
	endcase

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ (present_state[0] & in);
//present state block
always @(posedge clk or posedge reset) begin	
	if(reset)
	 
	 
	else
	 
	 
	else
	 
	 
	//next state block

assign next_state[1] = present_state[1] & (~in);
assign next_state[0] = present_state[0] & (~in);

always @ (posedge clk ) begin
	
	//Or reduction operator
	present_state <= next_state;

end


================================================================
