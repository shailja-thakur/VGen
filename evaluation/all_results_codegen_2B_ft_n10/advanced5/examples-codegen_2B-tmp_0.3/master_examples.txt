example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case (cur_state)
IDLE:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (a == 1'b1)
next_state <= SB;
else if (b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SAB;
else if (
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// combinational logic of output z:
assign z = (cur_state == SAB);
// sequential state transition:
always @(*)
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SAB;
else
next_state <= SA;
SB:
if(b)
next_state <= SAB;
else
next_state <= SB;
default:
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= IDLE;
SB:
if(b)
next_state <= SB;
else
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
end
assign z = (cur_state == SAB);

================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a or b are both low, state changes to SA. 
// if input a or b are both high, state changes to SB. 
always @(posedge clk or posedge reset)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
always @(*)
case (cur_state)
IDLE: begin
	if (a&b) next_state <= SA;
	else if (a|b) next_state <= SB;
	else next_state <= IDLE;
	end
SA: begin
	if (a&b) next_state <= SAB;
	else next_state <= SA;
	end
SB: begin
	if (a&b) next_state <= SAB;
	else next_state <= SB;
	end
SAB: begin
	if (a|
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA. 
// if input b is high, state changes to SB. 
always @(posedge clk or posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// Output logic:
assign z = (cur_state == SAB);
// State transitions:
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= IDLE;
SB:
if (b)
next_state <= SB;
else
next_state <= IDLE;
default:
next_state <= IDLE;

================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk or posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case (cur_state)
IDLE: begin
if (a==1'b1 && b==1'b1)
next_state = SA;
else if (a==1'b1 && b==1'b0)
next_state = SB;
else if (a==1'b0 && b==1'b1)
next_state = SAB;
else
next_state = IDLE;
end
SA: begin
if (a==1'b1 && b==1'b1
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// Output logic:
always @(*)
case (cur_state)
IDLE:
z <= 1'b0;
SA:
z <= 1'b0;
SB:
z <= 1'b0;
SAB:
z <= 1'b1;
default:
z <= 1'b0;
endcase
// State transition logic:
always @(*)
case (cur_state)
IDLE:
begin
if (a && b)
next_state <= SAB;
else if (a)
next_state <= SA
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
SAB:
begin
if
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case (cur_state)
IDLE:
if (a & b)
next_state <= SA;
else if (a)
next_state <= SB;
else if (b)
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end
// Output logic:
assign z = (cur_state == SAB);

================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high but b is low, state changes to SA.
// if input a and b are low, state changes to SB.
always @(posedge clk or posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next state generation logic:
always @(cur_state or a or b)
begin
case (cur_state)
IDLE:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (a == 1'b1 && b == 1'b0)
next_state <= SB;
else if (a == 1'b0 && b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if (a == 1
================================================================
