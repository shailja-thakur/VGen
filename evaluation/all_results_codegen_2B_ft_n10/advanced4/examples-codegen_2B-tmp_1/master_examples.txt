example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk) begin
	if (load)
	begin
	q<=data;
	end
	else
	if (ena == 'b1)
	begin
	if (amount == 2'b00)
	begin
	q<={q[62:0],q[63]};
	end
	else if (amount == 2'b01)
	begin
	q<={q[63],q[63:1]};
	end
	else if (amount == 2'b10)
	begin
	q<={q[63:1],q[63:2]};
	end
	else if (amount == 2'b11)
	begin
	q<=q>>8;
	end
	q<=q&{64{ena}};
	end









end
end
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	
	if (load)
	begin
	q = data;
	end
	
	else if (ena)
	begin

	if (amount == 2'b00)
	begin
	q[63:0] <= {q[62:0], 1'b0};
	end
	
	else if (amount == 2'b01)
	begin
	q[63:0] <= {8{q[63]}};
	end
	
	else if (amount == 2'b10)
	begin
	q[63:0] <= q >> 1;
	end
	
	else if (amount == 2'b11)
	begin
	q[63:0] <= q << 1;
	end

	end
	
end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



always @ (posedge clk)
if (load)
q <= data;

always @(ena or load or amount)
if (ena) begin
case (amount)
2'b00:	case (load)
1'b0, 1'b1: begin
q <= {q[62:0], q[63]};	// A delay is required before loading the final position.
end
1'b1: q <= q >> 1;
default:;
endcase
end
else;
///////////////////////////////////

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 reg [63:0] shifter_right;
 reg [63:0] shifter_right_data_temp;
 reg [63:0] shifter_left;
 reg [63:0] shifter_left_data_temp;
 
 initial begin
 
 shifter_right = 64'b0; // initially done -- here always 0
 shifter_left = 64'b0;
 q = 64'b0;

end

always @ (posedge clk)
 begin
 case(amount) // Decide which part of data to shift.
 2'b00:begin // left shift
 shifter_left_data_temp = data; // copy data to temp
 #(shift_bits-1) shifter_left = shifter_left_data_temp << 1; // concatenate temp with shifted 8 bit data
 q = q >> 1;
 shift
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	q <= data;
	else if(ena)
	q <= q << amount;
	end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) 
	begin
	if (load)
	begin
	q <= data;
	end 
	else if (ena)
	begin
	if (amount == 2'b01)
	begin
	q <= {q[62:0], 1'b0};
	end
	else if (amount == 2'b01)
	begin
	q <= {q[59:0], 2'b0};
	end
	else if (amount == 2'b10)
	begin
	q <= {q[55:0], 4'b0};
	end
	else 
	begin
	q <= {q[51:0], 8'b0};
	end
	end 
	end

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
begin
if (load) 
	q<=data;
else if (ena)
	{q[63:8],q[7:0]}<={q[39:4],q[3:0]}+{amount,q[19:10]};
else
	q <={q[63:0],q[63:0]};
end


================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) 
	begin
// shift right by 8bits
	if (ena) begin
	if (amount != 2'b11) begin
case (amount)
2'b00 : begin q <= {q[62:0], q[63], q[0]};
	end
2'b01 : begin q <= {q[63], q[63:1], q[0]};
	end
2'b10 : begin q <= q >> 8;
	end
2'b11 : begin q <= q >>> 8;
	end
endcase
	end
// when load is high, append q onto the end of data in each clock cycle.
// when ena is high, ack any load.
// transfer back to the requester as q.
	if (load) begin
	if (ena) begin
	q <= data
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk) begin
if(load) 
	q <= data;
	
	else if (ena) begin
	
	if(amount == 2'b00) 
	q <= {1'b0,q[63:1]};
	
	if(amount == 2'b01) 
	q <= {q[60:0],1'b0};
	
	if(amount == 2'b10) 
	q <= {1'b1,q[63:2]};
	
	if(amount == 2'b11) 
	q <= {q[62:0],2'b0};
	end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// state machine
reg [1:0] shift;
reg shiftleft;

always @ (posedge clk)
	case(shift)
	2'b00:	shiftleft <= 0;
	2'b01: 	shiftleft <= 1;
	2'b10: 	shiftleft <= 0;
	2'b11: 	shiftleft <= 1;
	endcase
always @ (posedge clk or negedge ena)
	if(ena) shift <= amount;
	else if(load) shift <= 2'b00;
	else shift <= shiftleft;

always @ (*)
	case(shift)
	2'b00: q <= ((data << <amount> << >> amount) & {64{ena}});
	2'b11: q <= ((data << ~amount) & {64{ena}});
================================================================
