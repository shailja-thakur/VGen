example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) 
begin
	if (load)
	begin
	q <= data;
	end
	else
	begin
	if (ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	endcase
	end
	end
end


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Define the internal signal names used in the shift register implementation.
reg [63:0] sreg_shift_in;
reg [63:0] sreg_shift_out;
always @(posedge clk)
begin
	if (load)
	begin
	// if load is high, shift register is cleared.
	sreg_shift_in <= data;
	end
	else
	begin
	// if load is low, load new data.
	sreg_shift_out <= sreg_shift_in << amount;
	end
end

always @(posedge clk)
begin
	if (ena)
	begin
	// if ena is high, shift register is updated.
	q <= sreg_shift_out;
	end
end


================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load) 
	begin
	q <= data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {1'b0, q[63:1]};
	end
	2'b01:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b10:
	begin
	q <= {1'b0, q[63:0]};
	end
	2'b11:
	begin
	q <= {q[62:0], 1'b0};
	end
	endcase
	end
	else
	begin
	q <= 64'b0;
	end
end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if(load)
q <= data;
else begin
if(ena) begin
case(amount)
2'b00: begin
 q[63:0] <= q[63:1];
 q[63-1:0] <= q[62:63];
 end
2'b01: begin
 q[63:0] <= q[62:0];
 q[63-1:0] <= q[63:63];
 end
2'b10: begin
 q[63:0] <= q[63:8];
 q[63-1:0] <= q[63:7];
 end
2'b11: begin
 q[63:0] <= q[63:56];
 q[63-1:0] <= q[63:55];
 end
endcase
end
end
end
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
if (load)
q <= data;
else 
if (ena)
begin
case(amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {q[60:0], 2'b00};
2'b10: q <= {q[58:0], 3'b000};
2'b11: q <= {q[56:0], 4'b0000};
default: q <= q;
endcase
end
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
if(load)
q <= data;
else if(ena)
case(amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {q[62:0], 8'b0};
2'b10: q <= {1'b0, q[63:1]};
2'b11: q <= {8'b0, q[63:8]};
endcase
end


================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load)
	q <= data;
	else if(ena)
	
	case(amount)
	2'b00:
	q <= {q[62:0],1'b0};
	2'b01:
	q <= {q[62:0],1'b0,q[63]};
	2'b10:
	q <= {q[63],q[63:1]};
	2'b11:
	q <= {q[63],q[63:1]};
	endcase
	end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if(load)
	q <= data;
else
begin
if(ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[0], q[63:1]};
	endcase
	end
end

end


================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load == 1)
	begin
	if (ena == 1)
	begin
	case (amount)
	2'b00:
	begin
	q <= q << 1;
	q[63] <= q[63];
	end
	2'b01:
	begin
	q <= q << 8;
	q[63] <= q[63];
	end
	2'b10:
	begin
	q <= q >> 1;
	q[63] <= q[63];
	end
	2'b11:
	begin
	q <= q >> 8;
	q[63] <= q[63];
	end
	endcase
	end
	else
	begin
	q <= 0;
	end
	end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) 
if (load) q <= data; // Load data into q when load is high.
else if (ena) begin // Shifting is active.
if (amount == 2'b00) q <= {q[62:0], 1'b0}; // Shift left by 1 bit.
else if (amount == 2'b01) q <= {q[63], q[63:1]}; // Shift left by 8 bits.
else if (amount == 2'b10) q <= {q[63], q[63:8]}; // Shift right by 1 bit.
else q <= {q[63], {8{q[63]}}}; // Shift right by 8 bits.
end

================================================================
