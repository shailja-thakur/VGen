example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg [8:0] sum;
reg sign;
reg of1,of2;

always @(a or b) begin

if (a[7]==b[7])
begin
of1 = a[7];
sum = a[7]?a[6:0]:~a[6:0] + b[6:0];
end
else
begin
of1 = a[7];
sum = a[7]?8'b0 - b[6:0]:b[6:0] - 8'b0;
end


if (sum[8]==1) begin
of2 = 1;
sum = sum[7:0];
end
else begin
of2 = 0;
sum = sum[7:0];
end

end
assign s = sum;
assign overflow = of1 || of2;

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = (((a[7] == 0) && (b[7] == 0) && (s[7] == 1)) || (((a[7] == 1) && (b[7] == 1) && (s[7] == 0))));

assign s[0] = a[0] ^ b[0] ^ ((a[0] == b[0]) ? s[7] : 0);
assign s[1] = a[1] ^ b[1] ^ ((a[1] == b[1]) ? s[0] : 0);
assign s[2] = a[2] ^ b[2] ^ ((a[2] == b[2]) ? s[1] : 0);
assign s[3] = a[3] ^ b[3] ^ ((a[3] == b[3]) ? s
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 //assign overflow = (a[7] == b[7] && a[7] != s[7]) || ((a[7] == 1'b0 || a[7] == 1'b1) && s[7] == 1'b0);
assign overflow = ((a[7] == 1'b0 || a[7] == 1'b1) && (b[7] == 1'b0 || b[7] == 1'b1)) ? ((a[7] == 1'b1 && b[7] == 1'b0) || (a[7] == 1'b0 && b[7] == 1'b1)) : a[7] ^ b[7];

assign s[0] = a[0] ^ b[0] ^ overflow;
assign s[1] = a[1] ^ b[1] ^ overflow
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


	assign s = a + b;
	assign overflow = (a[7] == b[7] && a[7] != s[7]) || (a[7] != b[7] && s[7] != 0);


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s = a + b;
	assign overflow = (a[7] == b[7] && a[7] != s[7]) ? 1'b1 : 1'b0;
	

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a[7] == b[7]) ? (a + b) : (((a[7] == 0) && (b[7] == 1)) || ((a[7] == 1) && (b[7] == 0)) ? {1'b1, a + b} : {1'b0, a + b});
assign overflow = ((a[7] == 0) && (b[7] == 0) && (s[7] == 1)) || ((a[7] == 1) && (b[7] == 1) && (s[7] == 0));


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s = a + b;
	assign overflow = a[7] + b[7] + s[7];
	

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0];
assign s[1] = a[1] ^ b[1];
assign s[2] = a[2] ^ b[2];
assign s[3] = a[3] ^ b[3];
assign s[4] = a[4] ^ b[4];
assign s[5] = a[5] ^ b[5];
assign s[6] = a[6] ^ b[6];
assign s[7] = a[7] ^ b[7];
assign overflow = (a[7] & b[7]) ^ (a[7] & s[7]) ^ (b[7] & s[7]);


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] == b[7] && a[7] != s[7]) ? 1'b1 : 1'b0;
//assign overflow = ( a[7] == b[7] && a[7] == s[7] ) ? 1'b1 : 1'b0;


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	// assign the most significant bit of a to a_most_sig_bit_of_a
	// assign the most significant bit of b to b_most_sig_bit_of_b

	// assign the sum of a and b to s
	// assign the most significant bit of s to s_most_sig_bit_of_s

	// check if the bits of a and b are negative
	// if the bits of a and b are negative, then the bits of s should be negative
	// assign the most significant bit of s to s_most_sig_bit_of_s_negative
	// assign the overflow to overflow

assign a_most_sig_bit_of_a = a[7];
assign b_most_sig_bit_of_b = b[7];
assign s_most_sig_bit_
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = a[7] ^ b[7] ^ s[7];


================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0] ^ (a[0] & b[0]);
assign s[1] = a[1] ^ b[1] ^ (a[1] & b[1] & (s[0] & a[0]));
assign s[2] = a[2] ^ b[2] ^ (a[2] & b[2] & (s[1] & a[1]));
assign s[3] = a[3] ^ b[3] ^ (a[3] & b[3] & (s[2] & a[2]));
assign s[4] = a[4] ^ b[4] ^ (a[4] & b[4] & (s[3] & a[3]));
assign s[5] = a[5]
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b; // add two numbers
assign overflow = a[7] ^ b[7] && ~s[7] || a[7] && b[7] && ~s[7]; // determine if there is an overflow


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s = a + b;
	assign overflow = (a[7] == b[7] && a[7] != s[7]) || (a[7] != b[7] && s[7] == 1);


================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// You may need to use a different data type for the output overflow. 
// ufix8 is one way to go. You may need to use a larger data type to hold the overflow. 
// You may need to use a different method to check for an overflow. 

// R-Type adder

// add and subtract are designed to add or subtract two values. 
// You can't add or subtract two signed values so use an unsigned adder for that. 

// R-Type Adder/Subtractor 

// Design a 4-bit adder/subtractor using the previous adder design. 
// It should have two modes: add and subtract. 
// When the mode is add, the output is the sum of two inputs. 
// When the mode is subtract, the output is the difference of two inputs. 
// For the 4-bit adder, there
================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg [7:0] s;
reg overflow;

always @(a or b)
begin
	if (a[7] == 1'b0 && b[7] == 1'b0 && s[7] == 1'b1)
	begin
	overflow <= 1'b1; 
	s[7:0] <= 8'b00000000; 
	end
	else if (a[7] == 1'b0 && b[7] == 1'b0 && s[7] == 1'b0)
	begin
	overflow <= 1'b0; 
	s[7:0] <= 8'bxxxxxxx0; 
	end
	else if (a[7] == 1'b0 && b[7] == 1'b1 && s[7] == 1'b0)
	begin
	over
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] == b[7] && a[7]==~s[7]);


================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (^a & ^b & s[7]) | (^a & b[7] & ~s[7]) | (a[7] & ^b & s[7]) | (a[7] & b[7] & ~s[7]);


================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

















================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0];
assign s[1] = a[1] ^ b[1];
assign s[2] = a[2] ^ b[2];
assign s[3] = a[3] ^ b[3];
assign s[4] = a[4] ^ b[4];
assign s[5] = a[5] ^ b[5];
assign s[6] = a[6] ^ b[6];
assign s[7] = a[7] ^ b[7];

assign overflow = a[7] ^ b[7] & ~ s[7] | (~a[7] & b[7]) & s[7];


================================================================
