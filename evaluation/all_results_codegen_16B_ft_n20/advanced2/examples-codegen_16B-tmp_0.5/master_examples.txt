example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	
	if (reset) begin
	
	q <= 4'b0;
	
	end
	
	else begin
	
	if (slowena) begin
	
	if (q == 4'd9) begin
	
	q <= 4'd0;
	
	end
	
	else begin
	
	q <= q + 4'd1;
	
	end
	
	end
	
	end
	

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Notice how this is an edge sensitive always block. 

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena && q < 9) begin
	q <= q + 1;
	end
	end
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if(reset) begin
	//	q <= 4'b0;
	end
	else begin
	//	if(slowena && q < 9) q <= q + 1'b1;
	end
end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset) begin
 q <= 4'b0000;
 end
 else begin
 if (slowena) begin
 if (q != 9) begin
 q <= q + 1;
 end
 else begin
 q <= 0;
 end
 end
 end
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
 if (~reset) begin
 q <= 4'b0;
 end else begin
 if (slowena) begin
 if (q < 4'b1001) begin
 q <= q + 1;
 end else begin
 q <= 4'b0;
 end
 end
 end
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	//if (reset) begin
	// On the positive edge of the clock:
	// if reset is high, reset the output q to 0. 
	// Otherwise, only increment the output q if the ena input is high and q is not 9.
	q <= 4'b0000;
	end
	else begin
	//if (!reset) begin
	// On the positive edge of the clock:
	// if reset is low, reset the output q to 0. 
	// Otherwise, only increment the output q if the ena input is high and q is not 9.
	if (slowena && (q < 4'b1001)) q <= q + 1;
	end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	// when reset is high, set output to 0. 
	q <= 4'd0;
	end
	else
	begin
	if (slowena && q < 4'd9)
	begin
	// when ena is high and q is less than 9, increment the output.
	q <= q + 4'd1;
	end
	else
	begin
	// when ena is low or q is 9, hold output at 9.
	q <= 4'd9;
	end
	end
end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'd0;
	end
	else begin
	if (slowena && (q < 9)) begin
	q <= q + 1;
	end
	end
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	// if reset is high, reset the output q to 0. 
	q <= 4'b0;
	end
	else
	begin
	// if reset is low, only increment the output q if the ena input is high and q is not 9.
	if (slowena)
	begin
	if (q != 4'd9)
	begin
	q <= q + 1;
	end
	end
	end
end

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	// 	q <= 4'b0;
	end
	else
	begin
	// 	if (ena)
	// 	begin
	// 	q <= q + 4'b1;
	// 	end
	end
end

// On the negeative edge of the clock:
// if reset is high, do nothing.
// Otherwise, set the output q to 0.

always @(negedge clk)
begin
	if (reset)
	begin
	// 	q <= 4'b0;
	end
	else
	begin
	// 	q <= 4'b0;
	end
end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk) begin
	if (reset) begin
	q <= 4'd0;
	end else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'd0;
	end else begin
	q <= q + 4'd1;
	end
	end
	end
end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
if (reset)
q <= 4'b0;
else begin
if (slowena) begin
if (q == 4'd9)
q <= 4'b0;
else
q <= q + 1;
end
end
end

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset) begin
	if (reset == 1'b0) begin
	// when reset is low, set q to 0
	q <= 4'd0;
	end
	else begin
	// when reset is high, increment the count only if slowena is high
	if (slowena == 1'b1) begin
	if (q == 4'd9) begin
	// when q is 9, reset q to 0
	q <= 4'd0;
	end
	else begin
	// otherwise increment q
	q <= q + 4'd1;
	end
	end
	end

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	// if (reset) begin
	q <= 4'd0;
	end else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'd0;
	end else begin
	q <= q + 4'd1;
	end
	end
	end
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if (reset) begin
q <= 0;
end

else begin
if (slowena) begin
if(q < 9) begin
q <= q + 1;
end else begin
q <= 0;
end
end
end
end
// Design a decade counter that counts from 0 through 9, inclusive.
// (Note: The question says to use a 4-bit counter, but the design only uses 3 bits.)
// When the counter reaches 9, it should reset back to 0.
// When ena is true and the counter reaches 9, it should increment the counter by 1
// and keep counting.

// Note: You may assume that the clock is running at least at the frequency
// of the slow clock.

// Note: The question says to use a 4-bit counter, but the design only uses 3 bits.
// (The
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end

================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	//	q <= 4'b0000;
	end
	else
	begin
	//	if (slowena)
	//	begin
	//	if (q < 9)
	//	begin
	//	q <= q + 1;
	//	end
	//	else
	//	begin
	//	q <= 0;
	//	end
	//	end
	end
end


================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) q <= 0;
	else if (slowena && q != 9) q <= q + 1;
	else q <= q;
end


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset)
q <= 4'b0;

else begin
if (slowena) begin
if (q < 4'b1001)
q <= q + 1;
else
q <= 4'b0;
end
end
end


================================================================
