example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin 
	if (reset) 
	begin 
	q <= 4'b0000; 
	end 
	else if (q == 12) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 1; 
	end
end 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if (reset)
q <= 4'b1;
else if (q == 12)
q <= 4'b1;
else
q <= q + 4'b1;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
	if (reset) 
	begin 
	// case statement to assign the counter to the reset value 
	// when reset is high 
	q <= 4'b0000; 
	end 
	else if(q == 4'd12) 
	// if the counter value is 12, reset the counter 
	// to 1 
	begin 
	q <= 4'b0000; 
	end 
	else 
	// else, increment the counter value 
	begin 
	q <= q + 4'b0001; 
	end 
	end 


================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	if (reset) q <= 4'b1;
	else if (q == 12) q <= 4'b1;
	else q <= q + 4'b1;

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset) 
begin 
if(reset) 
q <= 4'b0000; 
else 
case(q) 
4'd11: q <= 4'd1;
4'd12: q <= 4'd1; 
default: q <= q + 1'b1; 
endcase 
end 

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset)
q <= 4'b0001;
else if(q == 12)
q <= 4'b0001;
else 
q <= q + 4'b0001;
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
if(reset) 
q <= 1; 
else 
begin 
case (q) 
4'd12: q <= 1; 
default: q <= q + 1; 
endcase // case (q) 
end // else
end // always

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else if (q == 4'b1111) begin
	q <= 4'b0000;
	end
	else begin
	q <= q + 4'b0001;
	end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset)
begin
	if (reset)
	begin
//assign q = 0;
q <= 4'b0000;
	end
	else
	begin
	case (q)
	4'b0000:
//assign q = 1;
q <= 4'b0001;
	4'b0001:
//assign q = 2;
q <= 4'b0010;
	4'b0010:
//assign q = 3;
q <= 4'b0011;
	4'b0011:
//assign q = 4;
q <= 4'b0100;
	4'b0100:
//assign q = 5;
q <= 4'b0101;
	4'b0101:
//assign q = 6;
q <= 4'b0110;
	4
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if (reset) 
	begin
	q <= 4'b0000;
	end
	else if (q == 12)
	begin
	q <= 0;
	end
	else
	begin
	q <= q + 4'b00001;
	end
	end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
if (reset)
q <= 4'd1;
else if (q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;
end 

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin
if (reset)
q <= 4'b1;
else begin
if (q == 4'd12)
q <= 4'b1;
else
q <= q + 4'b1;
end
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or reset)
	begin
	if (reset)
	q <= #1 4'h1;
	else if (q == 12)
	q <= #1 4'h1;
	else
	q <= #1 q + 4'h1;
	end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else if (q == 4'd12)
	q <= 4'b0000;
	else
	q <= q + 4'b0001;
	end 

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin
if (reset) 
q <= 4 'b0000;
else 
case (q)
4 'b0000: q <= 4 'b0001;
4 'b0001: q <= 4 'b0010;
4 'b0010: q <= 4 'b0011;
4 'b0011: q <= 4 'b0100;
4 'b0100: q <= 4 'b0101;
4 'b0101: q <= 4 'b0110;
4 'b0110: q <= 4 'b0111;
4 'b0111: q <= 4 'b1000;
4 'b1000: q <= 4 'b1001;
4 'b1001: q <= 4 'b0000;
default: q <= q + 1;
endcase
end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset)
	 q <= 4'b0000;
	// if the q is 12, increment it by 1
	else if (q == 12)
	 q <= 4'b0001;
	// otherwise increment by 1
	else
	 q <= q + 4'b0001;
	end

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(negedge clk) begin
	if (~reset)
	begin
	q <= 4'd1;
	end
	else if (q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset) begin
	q <= 4'b0000;
	end
	else if (q == 4'd5) begin
	q <= 4'b0000;
	end
	else begin
	q <= q + 1;
	end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, negedge reset) begin
if(reset)
	q <= 1;
else if (q == 12)
	q <= 1;
else
	q <= q + 1;
end

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset) begin 
 q <= 4'd1;
 end else if (q == 4'd12) begin
 q <= 4'd1;
 end else begin
 q <= q + 4'd1;
 end
end

================================================================
