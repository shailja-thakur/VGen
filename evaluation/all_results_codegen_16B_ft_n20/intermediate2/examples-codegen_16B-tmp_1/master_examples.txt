example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk ) begin
 case ( reset )
 1 'b0); // On reset
 // assign q to 0
 9'b110000100) // If q is 9
 begin // then increment q one
 q = q + 1'b1;
 end
endcase
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset)
begin
if(reset) 
	q <= 4'h1;
else
case(q)
4'h0: q <= 4'h1;
4'h1: q <= 4'h2;
4'h2: q <= 4'h3;
4'h3: q <= 4'h4;
4'h4: q <= 4'h5;
4'h5: q <= 4'h6; 
4'h6: q <= 4'h7;
4'h7: q <= 4'h8;
4'h8: q <= 4'h9;
4'h9: q <= 4'ha;
4'ha: q <= 4'hb; 
4'hb: q <= 4'hc;
4'hc: q <=
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk ) begin 
if(reset) begin 
q <= 4'd1; 
end 
else begin 
if(q = 4'd12)begin 
q<= 4'd1; 
end 
else begin 
q<= q + 4'd1; 
end 
end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk or posedge reset ) 
if ( reset )
	q <= 4'b0000;
else if(q == 12)
	q <= 4'b0000;
else
	q <= q + 4'b0001;

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin
if(reset)
q = 0; 
else if(q == 12) 
q = 1; 
else begin 
q = q + 1; 
end 
end 
//output are assigned according to the following display statements
// ieq($q) displays 1, 3, 5, ... 
// q == 3 displays 3 ... 

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
if (reset)
q <= 1'd1; 
else begin 
if(q == 4'd12) 
q <= 1'd1; 
else 
q <= q + 1'd1; 
end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, negedge reset)
begin
	if(reset == 1'b0)
	begin
	q <= 4'b0000;
	end
	else
	begin
	case(q)
	4'b0000: q <= 4'b1111;
	4'b1111: q <= 4'b0000;
	default: q <= q + 4'b0001;
	endcase
	end
end 

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if(reset)
	begin
	 	q <= 4'd1;
	end
	else 
	begin
	 	if(q is 12)
	 	begin
	 	
	 	q <= 4'd1;
	end
	else
	begin
	 	q <= q + 4'd1;
	end
	end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
 if (reset)
 q = 4'b1;
 else if (q > 3)
 q = 4'b1;
 else 
 q = q + 1;
end 

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) 
begin 
if (reset) 
q <= 4'b1; 
else if (q == 12) 
q <= 4'b1; 
else 
q <= q + 4'b1; 
end 

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) begin
reset = 0; // deactivate the active-low reset
case({reset,q})
2'b11:q<=4'h1;
2'b10:q<=4'h1;
2'b01:q<=4'h2;
default: q <= q + 4'h1;
endcase

end //don't count for the moment

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin 
if (reset == 1'b1) 
q = 1'b0; 
else if(q == 4'd12) 
q = 1'b0;
else 
q = q + 1'b1; 
end 

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset) begin
q <= 4'b0000;
end
else if (q == 12) begin
q <= 4'b0000;
end
else begin
q <= q + 4'b0001;
end
end 

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@( posedge clk, posedge reset ) 
begin 
	if (reset) 
	begin 
	// reset assigns q to 1
	q <= 4'b0001;
	// the above equation can be simplified as shown below
	// i.e., on the posedge of a clock, if it is reset,
	// set q to 1
	end 
	else if ( q == 4'd12 ) 
	begin
	// violation; something on the posedge is always wrong, 
	// hence it is reset
	q <= 4'b0001; 
	// make sure q seems to be counting the else loop rounds
	end 
	else 
	begin
	// violation
	q <= q + 4'b0001; 
	// seems to count 4 bits of violation
	end 
end 

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk )begin 
 case ( q )
 4'b0000: if ( reset ) q= 4'b0001;
 4'b0001: q= 4'b0001; 
 4'b0010: q= 4'b0001;
 4'b0011: q= 4'b0010;
 4'b0100: q= 4'b0001;
 4'b0101: q= 4'b0100;
 4'b0110: q= 4'b0011;
 4'b0111: q= 4'b0100;
 4'b1000: q= 4'b0111;
 4'b1001: q= 4'b0110;
 4'b1010: q= 4'b0111;
 4'b1011: q= 4'b1110;
 4'b1100: q= 4'b0111
================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if(reset) 
 q <= 4'd1; // assume the user will easily change this back to 0 once the circuit has stabilized
 else if(q == 12) 
 q <= 4'd1; // prevent overflow
 else 
 q <= q + 4'd1;
end

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset) q<= 4'b0001;
else q <= (q == 4'b1200)? 4'b0001 : q +4'b0001;
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// always block with clk
always @ ( posedge clk ) begin
 	if ( reset) q <= 1;
	else if(q == 4'd12) q <= 1;
	else begin
	q <= q + 1;
 	end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q[3:0] = 4'd1;
	end
	else
	begin
	if (q[3:0] == 4'd8)
	begin
	q[3:0] = 4'd1;
	end
	else
	begin
	q[3:0] = q[3:0] + 4'd1;
	end
	end
end

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(q or posedge clk) 
begin 
// if Reset, q = 0. If q = 12, q = 0. If not, q = q + 1
case(q) 
1'b0: q = 1'b1 ; 
1'b1: if(q == 4'b1110) q = 1'b0; 
else q = q + 1;
endcase
end

================================================================
