example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset) begin
q <= 4'b0000;
end
else if (q == 12) begin
q <= 4'b0001;
end
else begin
q <= q + 4'b00001;
end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset) begin
q <= 4'b0000;
end
else if(q == 12) begin
q <= 4'b0000;
end
else begin
q <= q + 1;
end
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
if (reset)
q <= 4'b0000;
else if (q == 12)
q <= 4'b0000;
else
q <= q + 1;
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if (reset) q <= 4'b0000;
else case (q)
 4'b1201: q <= 4'b0000;
default: q <= q + 4'b0001;
endcase

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
if(reset)
q <= 4'b0001;
else begin
if(q == 12)
q <= 4'b0001;
else
q <= q + 4'b0001;
end
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if (reset)
	begin
	q <= 4'd1;
	end
	else
	begin
	if (q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if(reset)
q <= 4'b0000;
else 
begin
if(q == 4'd12)
q <= 4'b0000;
else 
q <= q + 4'b0001;
end
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'd1;
	end
	else
	begin
	case(q)
	4'd12:
	begin
	q <= 4'd1;
	end
	default:
	begin
	q <= q + 4'd1;
	end
	endcase
	end
	end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin 
if(reset)
q <= 4'd1;
else
begin
if(q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;
end
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin 
	if(reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	case(q)
	4'b0000:
	begin
	q <= 4'b0001;
	end
	4'b0001:
	begin
	q <= 4'b0010;
	end
	4'b0010:
	begin
	q <= 4'b0011;
	end
	4'b0011:
	begin
	q <= 4'b0100;
	end
	4'b0100:
	begin
	q <= 4'b0101;
	end
	4'b0101:
	begin
	q <= 4'b0110;
	end
	4'b0110:
	begin
	q <= 4'b
================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
if (reset) begin
q <= 4'b0001;
end
else begin
if (q == 12) begin
q <= 4'b0001;
end
else begin
q <= q + 4'b0001;
end
end
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) begin
	q <= 4'd1;
	end
	else if (q == 4'd12) begin
	q <= 4'd1;
	end
	else begin
	q <= q + 4'd1;
	end
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
if(reset)
q <= 4'd1;
else if(q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin
if (reset) 
q <= 1; 
else if (q == 12) 
q <= 1; 
else 
q <= q + 1; 
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else if(q == 12)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if(reset)
	q <= 4'b0000;
else if(q == 12)
	q <= 4'b0000;
else
	q <= q + 1'b1;
end

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
if(reset)
q <= 4'b0000;
else
case(q)
4'd12: q <= 4'b0000;
4'd7,4'd8,4'd9: q <= q + 1'b1;
default: q <= q + 1'b1;
endcase
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if(reset) 
q <= 4'b0000;
else 
begin
if(q == 12) 
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) begin
	// reset
	// assign q to 1
	q <= 4'b0000;
	end
	else if (q == 4'b1101) begin
	// overflow
	// assign q to 1
	q <= 4'b0000;
	end
	else begin
	// normal increment
	q <= q + 1;
	end
end

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 1;
	end
	else
	begin
	if(q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
	end
end

================================================================
