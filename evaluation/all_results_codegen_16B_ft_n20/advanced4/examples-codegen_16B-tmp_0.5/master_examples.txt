example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	q[63:1] <= q[62:0];
	else if(amount == 2'b01)
	q[63:8] <= q[55:0];
	else if(amount == 2'b10)
	q[63:1] <= q[62:0];
	else if(amount == 2'b11)
	q[63:8] <= q[55:0];
	end
	end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	begin
	if(amount==2'b00)
	begin
	q <= {q[62:0],1'b0};
	end
	if(amount==2'b01)
	begin
	q <= {q[55:0],8'b0};
	end
	if(amount==2'b10)
	begin
	q <= {1'b0,q[63:1]};
	end
	if(amount==2'b11)
	begin
	q <= {8'b0,q[63:8]};
	end
	end
	end
end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load == 1'b1)
	begin
	q <= data;
	end
	if (ena == 1'b1)
	begin
	case(amount)
	2'b00:
	begin
	q <= q << 1'b1;
	end
	2'b01:
	begin
	q <= q << 8'b1;
	end
	2'b10:
	begin
	q <= q >> 1'b1;
	end
	2'b11:
	begin
	q <= q >> 8'b1;
	end
	endcase
	end
	end
	
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load == 1'b1)
	begin
	q <= data; //assign shift register
	end
	else if (ena == 1'b1)
	begin
	if (amount == 2'b00 || amount == 2'b11) //no shift
	begin
	q <= q; //no change
	end
	else if (amount == 2'b01) //left shift
	begin
	q <= {q[62:0], 1'b0};
	end
	else if (amount == 2'b10) //right shift
	begin
	q <= {1'b0, q[63:1]};
	end
	end
	else
	q <= q; //no change
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	q <= data;
	else if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b10)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else
	begin
	q[0] <= q[63];
	q[
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always@(posedge clk)
 begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	//if(amount == 2'b00)
	//begin
	//q <= {q[62:0], 1'b0};
	//end
	//if(amount == 2'b01)
	//begin
	//q <= {q[55:0], 1'b0, q[63]};
	//end
	//if(amount == 2'b10)
	//begin
	//q <= {q[63:1]};
	//end
	//if(amount == 2'b11)
	//begin
	//q <= {q[63:8]};
	//end
	if(amount == 2'b00)
	begin
	q
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= {q[62:0], q[63]};
	end
	else if(amount == 2'b01)
	begin
	q <= {q[55:0], q[63:56]};
	end
	else if(amount == 2'b10)
	begin
	q <= {q[63:1], q[63]};
	end
	else
	begin
	q <= {q[63:8], q[63:56]};
	end
	
	end
 end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b01)
	begin
	q[63:8] <= q[55:0];
	end
	else if (amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b11)
	begin
	q[63:8] <= q[55:0];
	end
	end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else if (amount == 2'b10)
	begin
	q[63] <= q[0];
	q[63:1] <= q[63:1] >> 1;
	end
	else if (amount == 2'b11)
	begin
	q[0] <= q[0
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if (ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= 1'b0;
	end
	else if(amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[7];
	q[7] <= q[6];
	q[6] <= q[5];
	q[5] <= q[4];
	q[4] <= q[3];
	q[3] <= q[2];
	q[2] <= q[1];

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	if (ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= q << 1'b1;
	end
	2'b01:
	begin
	q <= q << 8'b1;
	end
	2'b10:
	begin
	q <= q >> 1'b1;
	end
	2'b11:
	begin
	q <= q >> 8'b1;
	end
	endcase
	end
 end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q_temp;

always@(posedge clk)
begin
	if(load)
	begin
	//	q_temp <= data;
	//q <= q_temp;
	q <= {q_temp[62:0],q_temp[63]};
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q_temp <= q_temp << 1;
	q_temp[63] <= q_temp[0];
	q <= q_temp[63:1];
	end
	else if(amount == 2'b01)
	begin
	q_temp <= q_temp << 8;
	q_temp[63] <= q_temp[0];
	q <= q_temp[63:8];
	end
	else
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if (load) begin
	q <= data;
	end
	else begin
	if (ena) begin
	if (amount == 2'b00) begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b01) begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b10) begin
	q[63] <= q[0];
	q[63:1] <= q[63:1];
	end
	else begin
	q[63] <= q[0];
	q[63:1] <= q[63:1];
	end
	end
	
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if (amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if (amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else if (amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	//	q <= data;
	end
	else
	begin
	if(ena)
	begin
	//	q <= q << amount | q >> (64 - amount);
	end
	end
end

================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	// if ena is high, shift data[63:0] to the right by 1 bit or 8 bits.
	// otherwise keep the previous value of q.
	if (ena)
	begin
	q <= {q[62:0], 1'b0};
	end
	else
	begin
	q <= q;
	end
	end
end

================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:0] <= q[63:0] << 1;
	end
	else if(amount == 2'b01)
	begin
	q[63:0] <= q[63:0] << 8;
	end
	else if(amount == 2'b10)
	begin
	q[63:0] <= q[63:0] >> 1;
	end
	else if(amount == 2'b11)
	begin
	q[63:0] <= q[63:0] >> 8;
	end
	end
	
================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if(load == 1'b1) begin
	q <= data;
	end
	else begin
	if(ena == 1'b1) begin
	case(amount)
	2'b00:
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	2'b01:
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[63];
	end
	2'b10:
	begin
	q[63] <= q[62];
	q[0] <= q[63:1];
	end
	2'b11:
	begin
	q[0] <= q[63];
	q[63:8] <= q[
================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	q <= data;
	else if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
