example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: if(in)
begin
next_state <= present_state;
out <= 0;
end
else
begin
next_state <= 1;
out <= 0;
end
1: if(in)
begin
next_state <= 0;
out <= 1;
end
else
begin
next_state <= present_state;
out <= 0;
end
endcase
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter s0=0, s1=1;
always @ (posedge clk)
begin
case (present_state)
s0: if (in)
	begin
	next_state <= s0;
	present_state <= s1;
	end
	else
	begin
	next_state <= s1;
	present_state <= s1;
	end
s1: if (in)
	begin
	next_state <= s0;
	present_state <= s1;
	end
	else
	begin
	next_state <= s1;
	present_state <= s1;
	end
endcase
end
assign out = (present_state == s1);

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 0 && in == 1) || (present_state == 1 && in == 0);
always @ (posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (posedge clk)
begin
if (reset)
next_state <= 0;
else
case (present_state)
0: if (in)
next_state <= 0;
else
next_state <= 1;
1: if (in)
next_state <= 1;
else
next_state <= 0;
endcase
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Go to state 0 on reset
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(*)
begin
case(present_state)
0:begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = present_state;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Remember to initialize state and next_state
initial 
begin
	present_state <= 0;
	next_state <= 0;
end
always @(posedge clk)
begin
	if (reset)
	begin
	// When reset is high, set state to 0
	present_state <= 0;
	end
	else
	begin
	// Always check the state and next state
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	0:
	begin
	// If in=1, stay in state 0
	if(in)
	begin
	next_state <= 0;
	end
	// If in=0, go to state 1
	else
	begin
	next_state <= 1;
	end
	end
	1
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	present_state <= 1'd0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
	case(present_state)
	1'd0:
	begin
	next_state = in ? 1'd0 : 1'd1;
	out = in ? 1'd0 : 1'd1;
	end
	1'd1:
	begin
	next_state = in ? 1'd1 : 1'd0;
	out = in ? 1'd1 : 1'd0;
	end
	endcase
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0:
begin
next_state = in ? 1'b0 : 1'b1;
out = in ? 1'b0 : 1'b1;
end
1'b1:
begin
next_state = in ? 1'b1 : 1'b0;
out = in ? 1'b1 : 1'b0;
end
endcase
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(in, present_state)
begin
case(present_state)
0 : if(in)
next_state <= 0;
else
next_state <= 1;
1 : if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
case (present_state)
0: begin
if(in == 1'b1)
begin
next_state <= 0;
out <= 1;
end
else
begin
next_state <= 1;
out <= 0;
end
end
1: begin
if(in == 1'b1)
begin
next_state <= 1;
out <= 0;
end
else
begin
next_state <= 0;
out <= 1;
end
end
endcase
end
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1) ? 1 : 0;
// The next_state logic
always @(posedge clk)
begin
if(reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
1: if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
endcase
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(*)
begin
	case (present_state)
	0:
	begin
	if (in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if (in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 1'd0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'd0:
begin
if(in)
next_state <= 1'd0;
else
next_state <= 1'd1;
end
1'd1:
begin
if(in)
next_state <= 1'd1;
else
next_state <= 1'd0;
end
endcase
end
assign out = (present_state == 1'd1) ? 1'd1 : 1'd0;

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// resetting the machine
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: if(in)
begin
next_state <= 0;
out <= 0;
end
else
begin
next_state <= 1;
out <= 0;
end
1: if(in)
begin
next_state <= 1;
out <= 0;
end
else
begin
next_state <= 0;
out <= 1;
end
endcase
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 0) ? (in) : (~in);
// Define state transition
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
// Define state transition
always @(present_state)
begin
case(present_state)
0:begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (present_state or in)
begin
case(present_state)
0:begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case (present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = present_state;

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
	case(present_state)
	0:
	begin
	if(in==1)
	begin
	next_state = 0;
	out = 0;
	end
	else
	begin
	next_state = 1;
	out = 0;
	end
	end
	1:
	begin
	if(in==1)
	begin
	next_state = 1;
	out = 0;
	end
	else
	begin
	next_state = 0;
	out = 0;
	end
	end
	default:
	begin
================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
	0:
	begin
	if (in)
	begin
	next_state <= 0;
	out <= 0;
	end
	else
	begin
	next_state <= 1;
	out <= 0;
	end
	end
	1:
	begin
	if (in)
	begin
	next_state <= 1;
	out <= 1;
	end
	else
	begin
	next_state <= 0;
	out <= 0;
	end
	end
endcase
end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state = 0;
	next_state = 0;
	end
	else
	begin
	present_state = next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state = 0;
	end
	else
	begin
	next_state = 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state = 1;
	end
	else
	begin
	next_state = 0;
	end
	end
	endcase
end

================================================================
