example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state = (a == 1) ? SB : (b == 1) ? SA : IDLE;
    next_state = cur_state;
    if (cur_state == IDLE) {
      if (a == 1 && b == 1) {
        next_state = SAB;
      }
    }
    if ((a == 1 && b == 1) && (cur_state == SAB)) {
      next_state = IDLE;
    }
    if (reset == 1) {
      next_state = IDLE;
    }
    z <= next_state;
end
);

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE

always @(posedge clk)
    if (reset)
    {
        cur_state = IDLE;
        next_state = IDLE;
    }
    else
    {
        if (a == 1)
        {
            if (b == 1)
            {
                next_state = SAB;
            }
            else
            {
                next_state = SA;
            }
        }
        else
        {
            if (b == 1)
            {
                next_state = SB;
            }
            else
            {
                next_state = IDLE;
            }
        }
    }
    z = !cur_state;

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
// This is an FSM
wire [1:0] cur_state;
// This is an FSM
wire [1:0] next_state;
always @(posedge clk)
// This is an FSM
reg [1:0] next_state;
always @(posedge clk)
// This is an FSM
reg [1:0] next_state;
always @(posedge clk)
// This is an FSM
reg [1:0] next_state;
always @(posedge clk)
// This is an FSM
reg [1:0] next_state;
always @(posedge clk)
// This is an FSM
reg [1:0] next_state;
always @(posedge clk)
// This is an FSM
reg [1:
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    next_state = (a == 1) ? (b == 1) ? SAB : (a == 1) ? SA : IDLE : (b == 1) ? SB : IDLE;
    cur_state = next_state;
    z <= cur_state;
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    next_state = (cur_state == IDLE) ? SAB : (cur_state == SA) ? SA : (cur_state == SB) ? SB : IDLE;
    if (cur_state == IDLE && (a == 1)) {
        cur_state = SAB;
    }
    if (cur_state == SAB && (b == 1)) {
        cur_state = SAB;
    }
    if (cur_state == SA && (b == 1)) {
        cur_state = SA;
    }
    if (cur_state == SB && (a == 1)) {
        cur_state = SB;
    }
    z <= cur_state;
end
);

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        cur_state = SAB;
        z <= 1;
    }
    else if (a == 1 && b == 1)
    {
        cur_state = SAB;
    }
    else if (a == 0 && b == 0)
    {
        cur_state = IDLE;
    }
    else if (a == 1 && b == 0)
    {
        cur_state = SA;
    }
    else if (a == 0 && b == 1)
    {
        cur_state = SB;
    }
    else
    {
        cur_state = IDLE;
    }
    next_state = cur_state;

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 0) {
        next_state = IDLE;
    } else {
        next_state = cur_state;
    }
    if ((a == 1) && (b == 1)) {
        next_state = SAB;
        z = 1;
    } else if ((a == 1) && (b == 0)) {
        next_state = SA;
        z = 1;
    } else if ((a == 0) && (b == 1)) {
        next_state = SB;
        z = 1;
    } else {
        next_state = IDLE;
    }
end
always @(posedge clk)
begin
    if (reset == 1) {
        cur_state = IDLE;
    } else {
        cur_state = next_state
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
initial begin
cur_state = IDLE;
next_state = IDLE;
end

always @(posedge clk)
begin
if (reset == 1)
cur_state = IDLE;
else
if (clk == 1)
{
if ((a == 1) && (b == 1))
{
cur_state = SAB;
}
else
{
if ((a == 1) && (b == 0))
{
cur_state = SA;
}
else
{
if ((a == 0) && (b == 1))
{
cur_state = SB;
}
else
{
if ((a == 0) && (b == 0))
{
cur_state = IDLE;
}
}
}
}
}
next_state = cur_state;
end

always @(posedge clk)
begin
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (reset) cur_state = IDLE;
    else if ((a == 1) && (b == 1)) cur_state = SAB;
    else if ((a == 1) && (b == 0)) cur_state = SA;
    else if ((a == 0) && (b == 1)) cur_state = SB;
    else cur_state = IDLE;
    next_state = cur_state;

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SA) ? SAB : (cur_state == SB) ? SAB : IDLE;
    z = (cur_state == SAB) ? 1 : 0;
end
// This is a FSM module with a single state
module FSM(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
    if (cur_state == IDLE)
        z <= 1;
    else
    {
        if (a == 1 and b == 0)
            cur_state <= SAB;
        else
        if (a == 0 and b == 1)
            cur_state <= SB;
        else
            cur_state <= IDLE;
    }
    cur_state <= next_state;

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
begin
always @(posedge clk)
    if (reset) cur_state = SB;
    else if (a == 1 && b == 1) cur_state = SAB;
    else if (a == 1) cur_state = SA;
    else if (b == 1) cur_state = SB;
    else cur_state = IDLE;
    next_state = cur_state;
end

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (cur_state == IDLE) {
    next_state = SAB;
  } else if ((a == 1) && (b == 1)) {
    next_state = SAB;
  } else if ((a == 1) && (b == 0)) {
    next_state = SA;
  } else if ((a == 0) && (b == 1)) {
    next_state = SB;
  } else {
    next_state = IDLE;
  }
  z <= next_state;
  cur_state = next_state;
end

================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        if (a == 1 && b == 1)
        {
            cur_state = SAB;
            next_state = IDLE;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else if (cur_state == SAB)
    {
        if (a == 1 && b == 1)
        {
            cur_state = SAB;
            next_state = IDLE;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else if (cur_state == SA)
    {
        if (a == 1)
        {
            cur_state = SA;
            next_state = IDLE;
        }
        else

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state != next_state) {
        next_state = cur_state;
        z <= next_state;
    }
end

================================================================
