example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign out = (load && (data[0]>>amount)) | (data[1]<<(32-amount));
// operation:
// if load is high:
//   out = data[0] >> amount
//   out = data[0] << (32-amount)
// if load is low:
//   out = data[1] >> amount
//   out = data[1] << (32-amount)
// operation:
//   out = data[0] >> amount
//   out = data[1] << (32-amount)
// operation:
//   if data[0] is the MSb and amount is the LSB,
//   out = 0
//   else
//   out = data[0] >> (amount)
//   out = data[0] << (32-amount)
//   out = data[1] >> (amount
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(load)
begin
    if (load)
        out = data;
    else
        out = out >> amount;
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign load = (out[7] & 1) == 1;
always @ (posedge clk)
begin
    if (reset == 1'b0) begin
        out[7] = out[7] << 1;
        out[7] = out[7] | (data[7] << 0);
    end else
        if (out[7] == 0x00) begin
            out[7] = out[7] << amount;
        end
end
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (clk, reset, load)
begin
if (load)
  out <= data;
else
  out <= left_shift(out, amount);
end
);

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
    if (not load) begin
        out = data;
    end else begin
        out = data;
        // if load is high, load data to out
        // otherwise rotate the out register followed by left shift the out register by amount bits
        out = (out<<amount) | (data>>(32-(32-amount)));
    end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
    if (load) {
        out = data;
    } else {
        out = (out << amount) | (out >> (32-amount));
        out = out << amount;
    }
end



================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (clk,reset,load)
begin
    if (load) {
        out = data;
    } else {
        out <<= amount;
        out = out << 24;
        out = out >> 24;
    }
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
wire [7:0] a;
reg [7:0] out;
assign out = data;
assign a = out[7:0];
assign out[7:0] = out[7-amount:0];
assign a[7-amount:0] = a[7:0];
always @(posedge clk)
    if (clk == reset) begin
        out = data;
        a = data[7:0];
    end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
    if (reset) out[0] = 0; 
    else {
      out[0] = load;
      for (int i=0; i<amount; i++) {
        out[0] <<= 1;
        out[0] |= data[0];
      }
    }

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(ec_clk, ec_reset)
void logic ()
{
  if (load == '1')
  {
    data_out = data;
  }
  else
  {
    out = data_out << amount;
  }
}

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign out = ((load == 1) ? data : (out << (amount & 0x3F)) | ((out >> (64 - (amount & 0x3F))) & 0x1));

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign load = (out & 0x80) != 0;
assign out = out << amount;
assign out = out >> (32 - amount);

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
  case (load):
    out = data;
    break;
    
// rotate the in register by amount bits
always @(posedge reset)
  case (reset):
    out = rotate(data, amount);
    break;
    
// rotate the in register by amount bits
always @(posedge clk)
  case (amount):
    out = rotate(data, amount);
    break;
    
// when operation is load then load data from in register
always @(posedge clk)
  case (load):
    data = in;
    break;
    
// when operation is not load then rotate the in register by amount bits
reg [7:0] rotation;
always @(posedge reset)
  case (reset):
    out = rotate(data, amount);
    break;
    
//
================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
    if (load)
    {
        out = data;
    }
    else
    {
        out = left_shift(out << amount, data);
    }

================================================================
