example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg = r_reg << 1;
    if (reset) r_reg = 1;
    else
    {
        r_next = r_reg;
        r_reg = r_reg << 1;
        r_reg = r_reg ^ (r_reg >> 4);
        r_reg = r_reg ^ (r_reg >> 2);
        r_reg = r_reg ^ (r_reg >> 1);
        r_reg = r_reg ^ (r_reg >> 5);
        r_next = r_reg;
        r_reg = r_next;
    }
    feedback_value = r_reg;
    q = r_next;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = 1;
    r_next = r_reg;
    feedback_value = (reset << 4) | (clk << 5) | (clk << 3) | (clk << 2);
    q = r_reg;
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = 1'b1;
    r_next = 0'b1;
    feedback_value = 0'b0;
    q = 0'b0;
    clk = 1'b0;
    r_reg = 1'b1;
    r_next = 0'b1;
    feedback_value = 0'b0;
    q = 0'b0;
    clk = 1'b0;
    r_reg = 1'b1;
    r_next = 0'b1;
    feedback_value = 0'b0;
    q = 0'b0;
    clk = 1'b0;
    r_reg = 1'b1;
    r_next = 0'b1;
    feedback_value = 0'b0;
    q = 0
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

initial begin
    r_reg = 1;
    r_next = 1;
    feedback_value = r_reg[4] ^ r_reg[3];
    q = r_reg[4];
end

// on clock clock the feedback_value will be changed
// and the r_reg will be updated

initial begin
    r_reg = r_next;
    r_next = r_reg[4];
    feedback_value = r_reg[4] ^ r_reg[3];
end

// on reset the feedback_value will be reset to 1
// and the r_reg will be updated

initial begin
    r_reg = 1;
    r_next = 1;
    feedback_value = r_reg[4] ^ r_reg[3];
end

// on clock clock the feedback_value will be
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    r_reg <= r_reg + 1;
    if (reset == 0)
    {
        r_next <= 1'b1;
        feedback_value <= 0;
    }
    else
    {
        r_next <= r_reg;
        feedback_value <= r_reg[3] ? r_reg[2] : r_reg[3];
    }
end
);

// design a 4-bit Galois LFSR with taps at bit positions 5 and 4
// with feedback at bit position 3
module lfsr_f( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_next & 0x1) | (r_next & 0x2) | (r_next & 0x4) | (r_next & 0x8) | (r_next & 0x10) | (r_next & 0x20) | (r_next & 0x40) | (r_next & 0x80) | (r_next & 0x100) | (r_next & 0x200) | (r_next & 0x400) | (r_next & 0x800) | (r_next & 0x1000) | (r_next & 0x2000) | (r_next & 0x4000) | (r_next & 0x8000) | (r_next & 0x10000) | (r_next & 0x20000) | (r_next &
================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset) r_reg = 0b11111111;
    else r_reg = r_next;
    r_next = r_reg << 4 | r_reg >> 5;
    q = r_reg;

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  if (reset)
    r_reg = 1;
  else
  {
    r_reg = r_reg << 1;
    r_reg = r_reg | (r_reg >> 5);
    r_reg = r_reg ^ (r_reg >> 3);
    r_next = r_reg;
    feedback_value = r_reg;
    r_reg = r_reg << 1;
    r_reg = r_reg | (r_reg >> 5);
    r_reg = r_reg ^ (r_reg >> 3);
    r_next = r_reg;
    r_reg = r_reg << 1;
    r_reg = r_reg | (r_reg >> 5);
    r_reg = r_reg ^ (r_reg >> 3);
    r
================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 1'b1;
    else
        r_reg = r_next;
    r_next = r_reg << 4;
    feedback_value = r_reg ^ (r_reg >> 2);
    q = r_reg;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_reg << 1) | (r_reg >> 3) | (r_reg >> 2);
    r_next <= r_reg;
    feedback_value <= r_next ^ (r_reg & 4);
    q <= r_next;

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    r_reg = r_next;
    r_next = r_reg xor (r_reg [4] ? 1 : 0) xor (r_reg [3] ? 2 : 0);
    feedback_value = r_reg xor (r_reg [4] ? 4 : 0) xor (r_reg [3] ? 8 : 0);
    q = r_reg;
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset) r_reg = 1'b1;
    else r_reg = r_next;
    r_next = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value = r_reg ^ (r_reg >> 2) ^ (r_reg >> 3);
    q = r_next;

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset) 
        r_reg = 1'b0;
    else
        r_reg = r_next;
    // feedback_value = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4)
    r_next = (r_reg << 1) ^ (r_reg >> 3);
    q = r_reg;

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_next = r_reg << 1 | r_reg >> 3) ^ (r_reg >> 4);
    feedback_value <= r_reg[5];
    r_next <= r_reg[3];
    r_reg <= r_reg & r_next;
    q <= r_reg[4];

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    r_reg = reset ? 0b00 : r_reg + 1;
    r_next = r_reg * 2 + r_reg * 4 + r_reg;
    feedback_value = r_next ^ (r_reg >> 3);
    q = r_reg;
end

================================================================
