example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(
    clk,
    reset
)
begin
    r_reg <= '10';
    r_next <= r_reg;
    feedback_value <= '1' & r_reg & reset & clk;
    q <= r_next;
end;

// design a 10-bit Galois LFSR with taps at bit positions 5 and 3
module lfsr_10( 
    input clk,
    input reset,
    output [7:0] q
); 
reg [7:0] r_reg;
wire [7:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 7 most significant bits of r
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// bussed bits (4:0) are clocked in the same way as the inputs
always @(posedge clk)
    r_reg <= r_next;
    r_next <= r_reg << 4;
    feedback_value <= (r_reg & 4) ^ (r_reg & 3);
    q <= feedback_value;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = reset;
    r_next = 0;
    feedback_value = (r_reg^2)^4;
    q[5:0] = r_reg;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// update r_next to the next output value
always @(posedge clk) begin
    r_reg = r_reg << 1;
    r_next = r_reg;
    r_reg = (r_reg << 1) | (r_reg.bit(2) ^ r_reg.bit(4));
    r_next = r_next | (r_reg.bit(0) ^ r_reg.bit(1));
    if (reset) r_reg = 0b11;
    feedback_value = r_reg ^ r_next;
    q = r_next;
end
end
)

// Design a 4-bit Galois LFSR with taps at bit positions 3 and 1
module lfsr_sat( 
    input clk,
    input reset,
    output [4:0] q
); 
reg
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    begin
    if (reset) r_reg = 1'b1;
    else r_reg = r_next;
    r_next = r_reg << 2;
    r_next = r_next >> 2;
    r_next = r_next << 4;
    r_next = r_next >> 3;
    r_next = r_next << 4;
    r_next = r_next >> 2;
    r_next = r_next << 2;
    r_next = r_next >> 2;
    r_next = r_next << 3;
    r_next = r_next >> 3;
    r_next = r_next << 1;
    r_next = r_next >> 3;
    r_next = r_next << 4;
    r_next = r
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = 1;
    r_next = r_reg;
    feedback_value = (r_reg & 1) << 3;
    r_reg = r_reg >> 1 | (r_reg & 1) << 4;
    q = r_next ^ (r_reg & 1);
    r_reg = r_reg >> 1 | (r_reg & 1) << 4;
    r_next = r_reg >> 1;
end
end

// design a 32-bit Galois LFSR with taps at bit positions 5, 3, 1 and 0
module galois_lfsr( 
    input clk,
    input reset,
    output [31:0] q
); 
reg [31:0] q_reg;
wire [31:0] q_next;
wire [31:0] q
================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset or posedge r_next) begin
    r_reg <= r_reg + r_next;
    feedback_value = r_reg ^ (r_reg & 4);
    r_next = r_reg;
    q <= feedback_value;
end
)

// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module m_lfsr_2( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg = r_next;
    r_next = r_reg ^ (r_reg >> 1) ^ (r_reg >> 2);
    feedback_value = ((r_reg >> 2) & 1) ^ (r_reg >> 5);
    q = r_reg;

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk )
  if (r_reg == 0)
    r_next = 0;
  else
    r_next = r_reg ? r_reg ^ (r_reg & 0b11010) : r_reg;
  q = r_next;
  r_reg = r_next ^ (clk ? r_reg ^ (r_reg & 0b11010) : r_reg);
  r_reg = r_reg & 0b1111;
// on reset a period of 30000 clock cycles with r_reg = 1, the feedback value is 0
  feedback_value = r_reg == 0 ? 1 : 0;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset) r_reg = 0b11111111;
    else r_next = r_reg;
    feedback_value = r_reg & 3;
    r_reg = r_reg >> 2;
    q = r_next ^ r_reg & 0b11010000;

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    r_reg = reset;
    r_next = (r_reg & 0b1101) | (~r_reg & 0b1100);
    r_reg = r_reg >> 1;
    r_reg = r_reg ^ (r_reg & 0b1101) | (~r_reg & 0b1100);
    feedback_value = r_reg;
    r_reg = r_reg >> 1;
    r_reg = r_reg ^ (r_reg & 0b1101) | (~r_reg & 0b1100);
    r_next = r_next >> 1;
    q = r_next;
end
end
''')

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

initial begin
    r_reg = 1'b0;
    r_next = r_reg;

    feedback_value = (clk ^ reset) & 0x1;
end

// XOR the value of r_next with the feedback_value
// assign r_reg to the output q

always @(posedge clk) begin
    if (clk == 1)
    begin
        r_reg = r_next ^ feedback_value;
        q = r_reg;
    end
end

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_next & 4) ? 1'b1 : 1'b0;
    r_next <= r_reg;
    feedback_value <= r_reg;
    q <= (r_reg ^ (r_reg >> 3));

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
  
always @(posedge clk) map(
    r_reg = r_reg ^ (clk << 1),
    r_next = r_next & (~1) | r_reg & 1
)
  
// the max length of a Galois LFSR is 11 bits
always @(posedge reset) map(
    feedback_value = r_reg ^ (r_next << 1) ^ (r_next << 2) ^ (r_next << 3) ^ (r_next << 4) ^ (r_next << 5) ^ (r_next << 6) ^ (r_next << 7)
)
  
wire [6:0] feedback;
wire [5:0] feedback_next;
wire [5:0] r_reg_next;
wire [6:0] feedback_value_next;
wire [4:0] q
================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    r_reg <= r_next;
    r_next <= r_reg << 4;
    feedback_value <= r_reg ^ r_reg << 2;
    r_reg <= r_reg << 2;
    r_next <= r_reg << 3;
    q <= r_next;
    if (reset) r_reg <= 1'b1;
end
""")

================================================================
