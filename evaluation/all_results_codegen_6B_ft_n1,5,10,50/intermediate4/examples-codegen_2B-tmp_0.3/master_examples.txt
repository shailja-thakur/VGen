example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Out state 0 is a transition to state 1 when clk=1
// Out state 1 is a transition to state 0 when clk=0
// In state 0, if reset=1, reset state.
// In state 1, if reset=1, reset state.
// In state 1, if reset=0, go to state 0.
initial begin
    out = 0;
    next_state = 0;
    present_state = 0;
    if (reset = 1) begin
        reset = 0;
    end
    if (clk == 1) begin
        if (in == 1) begin
            out = 1;
            next_state = 1;
        end
        if (in == 0) begin
            if (reset == 1) begin
                reset = 0;
            end
            next_state = 0;
        end
    end
end
// Design
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg [2] transition_table;

always @(posedge clk)
{
  if (reset)
  {
    next_state = 0;
    present_state = 0;
  }
  else
  {
    if (in)
    {
      if (present_state == 0)
      {
        next_state = 1;
      }
      else
      {
        next_state = 0;
      }
    }
    else
    {
      if (present_state == 1)
      {
        next_state = 0;
      }
      else
      {
        next_state = 1;
      }
    }
  }
  out = next_state;
  present_state = next_state;
}

always @(posedge clk)
{
  if (reset)
  
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset)
  {
    out = 0;
    present_state = 0;
    next_state = 0;
  }
  else
  {
    if (in)
    {
      if (present_state == 0)
      {
        out = 0;
        present_state = 1;
      }
      else
      {
        out = 1;
        present_state = 0;
      }
    }
    else
    {
      if (present_state == 1)
      {
        out = 1;
        present_state = 0;
      }
      else
      {
        out = 0;
        present_state = 1;
      }
    }
  }
}

// In state 0, if in=1, stay in state 0. In
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
    out = 0;
  else
  {
    out = (in == 1) ? 1 : 0;
    next_state = (present_state == 0) ? 1 : 0;
    present_state = next_state;
  }
}

always @(posedge clk)
{
  if (reset == 1)
    out = 0;
  else
  {
    out = (in == 1) ? 1 : 0;
    next_state = (present_state == 0) ? 1 : 0;
    present_state = next_state;
  }
}

always @(posedge clk)
{
  if (reset == 1)
    out = 0;
  else
  {
    out = (in == 1) ? 1 :
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
    }
    if (reset == 0)
    {
        present_state = 0;
        next_state = 0;
    }
    else
    {
        present_state = in;
        next_state = 0;
    }
    out = ~present_state;
}

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
{
  if (reset == 1)
  {
    out = 0;
    next_state = 0;
  }
  else if (reset == 0)
  {
    out = 0;
    next_state = 0;
  }
  else
  {
    if (in == 1)
    {
      out = 1;
      next_state = 0;
    }
    else
    {
      out = 0;
      next_state = 1;
    }
  }
  present_state = next_state;
}

always @(posedge clk)
{
  if (reset == 1)
  {
    out = 0;
    next_state = 0;
  }
  else if (reset == 0)
  {
    out = 0;
    
================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        next_state = 0;
    else
        next_state = present_state;
    if (in == 1)
        out = 1;
    else
        out = 0;
    present_state = next_state;

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
    {
        reset = 0;
    }
    else if (reset == 0)
    {
        reset = 1;
    }
    else if (in == 1)
    {
        if (present_state == 0)
        {
            out = 1;
            next_state = 1;
        }
        else if (present_state == 1)
        {
            out = 0;
            next_state = 0;
        }
        else
        {
            out = 0;
            next_state = 0;
        }
        present_state = next_state;
    }
    else
    {
        if (present_state == 0)
        {
            out = 0;
            next_state = 0;
        }
        else if (present
================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        next_state = 0;
    else if (reset == 0)
        next_state = 1;
    else if (in == 1)
        next_state = 0;
    else
        next_state = 1;
    if (next_state != present_state)
    {
        out = next_state;
        present_state = next_state;
    }

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    if (in == 1)
    {
      if (present_state == 0)
      {
        out = 1;
        next_state = 1;
      }
      else
      {
        out = 0;
        next_state = 0;
      }
    }
    else
    {
      if (present_state == 0)
      {
        out = 0;
        next_state = 1;
      }
      else
      {
        out = 1;
        next_state = 0;
      }
    }
  }
  
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
    reset = 0;
  if (reset == 0)
  {
    if (in == 1)
      present_state = 0;
    else
      present_state = 1;
  }
  else
  {
    if (in == 1)
      next_state = 0;
    else
      next_state = 1;
    out = next_state;
  }
}

always @(posedge clk)
{
  if (reset == 1)
    reset = 0;
  if (reset == 0)
  {
    if (in == 1)
      present_state = 1;
    else
      present_state = 0;
  }
  else
  {
    if (in == 1)
      next_state = 1;
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
    out = 0;
  }
  else
  {
    present_state = next_state;
    out = 1;
  }
}
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    if (in == 1)
    {
      if (present_state == 0)
      {
        next_state = 1;
      }
      else
      {
        next_state = 0;
      }
    }
    else
    {
      if (
================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
    {
        reset = 0;
        out = 1;
        next_state = 0;
        present_state = 0;
    }
    else if (reset == 0)
    {
        reset = 1;
        out = 1;
        next_state = 0;
        present_state = 0;
    }
    else if (in == 1)
    {
        if (present_state == 0)
        {
            out = 1;
            next_state = 1;
        }
        else
        {
            out = 0;
            next_state = 0;
        }
        present_state = next_state;
    }
    else
    {
        if (present_state == 1)
        {
            out = 1;
            next_
================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
    if (reset == 1)
    {
        next_state = 0;
        present_state = 0;
    }
    else
    {
        next_state = (in == 1) ? 0 : 1;
        present_state = next_state;
    }
    out = (present_state == 0) ? 1 : 0;
}

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    out = 0;
    next_state = 0;
    present_state = 0;
    clk = 0;
    reset = 1;
end

always @(posedge clk)
    if (reset == 1)
        out = 0;
    else
        out = present_state;
    next_state = (present_state == 0) ? 1 : 0;
    present_state = next_state;
end

initial begin
    next_state = 0;
    out = 0;
    reset = 1;
end

always @(posedge clk)
    if (reset == 1)
        out = 0;
    else
        out = present_state;
    next_state = (present_state == 0) ? 1 : 0;
    present_state = next_state;
end

initial begin

================================================================
