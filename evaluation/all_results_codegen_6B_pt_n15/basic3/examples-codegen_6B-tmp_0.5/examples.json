// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk or posedge rst)\n  if (sel)\n  begin\n    if (in[0] == 1)\n      pos = 1;\n    else\n    if (in[1] == 1)\n      pos = 2;\n    else\n    if (in[2] == 1)\n      pos = 3;\n    else\n    if (in[3] == 1)\n      pos = 4;\n    else\n    if (in[4] == 1)\n      pos = 5;\n    else\n    if (in[5] == 1)\n      pos = 6;\n    else\n    if (in[6] == 1)\n      pos = 7;\n    else\n    if (in[7] == 1)\n      pos = 0;\n    else\n    if (in[8] == 1)\n      pos = 1;\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\n  if (sel)\n    b = in;\n  else\n    b = 0;\n\nalways @(posedge clk)\n  if (sel)\n    pos = b;\n  else\n    pos = 0;\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk or negedge rst)\n  if (rst)\n  {\n    pos = 0;\n  }\n  else if (sel)\n  {\n    pos = in;\n  }\n  else\n  {\n    pos = 0;\n  }\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always@(posedge clk or negedge rst) begin\n\tif (rst) or (sel) begin\n\t\tpos <= 0;\n\tend\n\telse begin\n\t\tif (in[1]) begin\n\t\t\tpos <= 1;\n\t\tend\n\t\telse begin\n\t\t\tpos <= 0;\n\t\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @ (posedge clk or negedge rst)\n  if (rst)\n  begin\n    pos <= 0;\n  end\n  else if (sel)\n  begin\n    pos <= (in[0]?1:0);\n  end\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @ (posedge clk or negedge rst)\n  if(rst)\n    pos <= 0;\n  else if(sel)\n    pos <= in;\nend\n\n"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk or posedge rst)\n  if (sel)\n  begin\n    if (in[1] == 1)\n      pos = 1;\n    else if (in[0] == 1)\n      pos = 2;\n    else\n      pos = 0;\n    sel = 0;\n  end\nend\n\nmodule priority_encoder_top(\ninput [2:0] in,\noutput reg [1:0] pos );\n  priority_encoder(in, pos);\nend\n\nmodule priority_encoder_middle(\ninput [2:0] in,\noutput reg [1:0] pos );\n  priority_encoder_top(in, pos);\nend\n\nmodule priority_encoder_bottom(\ninput [2:0] in,\noutput reg [1:0] pos );\n  priority_encoder_middle"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk or posedge rst)\n  if (sel)\n  begin\n    pos <= in[0];\n  end\n  else\n    pos <= 0;\nend\n\nmodule priority_encoder_test()\n\t#pragma pipeloop(0)\n\t#pragma pipeloop(1)\n\t#pragma pipeloop(2)\n\t#pragma pipeloop(3)\n\t#pragma pipeloop(4)\n\t#pragma pipeloop(5)\n\t#pragma pipeloop(6)\n\t#pragma pipeloop(7)\n\t#pragma pipeloop(8)\n\t#pragma pipeloop(9)\n\t#pragma pipeloop(10)\n\t#pragma pipeloop(11)\n\t"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk or negedge rst)\n  if (sel)\n  begin\n    pos <= in;\n  end\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk or posedge rst)\n  if (sel)\n  begin\n    pos <= 0;\n  end\nelse\n  begin\n    pos <= in;\n  end\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk or posedge rst) begin\n  if(sel) begin\n    pos <= in[0];\n  end\n  else begin\n    pos <= in[1];\n  end\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk)\n  if(sel)\n  begin\n    if(in[1]=='1' || in[0]=='1')\n      pos[0] = '1';\n    else\n      pos[0] = '0';\n  end\nend\n\n// This is a 2-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder_2( \ninput [3:0] in,\noutput reg [1:0] pos ); \n// When sel=1, assign b to out\nalways @(posedge clk)\n  if(sel)\n  begin\n    if(in[1]=='1' || in[0]=='1')\n      pos[0] = '1';\n    else\n      pos[0] = '0';\n  end\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk or negedge rst)\n  if (rst) \n  {\n    pos = 0;\n  }\n  else if (sel)\n  {\n    pos = in;\n  }\n  else\n  {\n    pos = 0;\n  }\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk or negedge rst)\n  if(sel)\n  {\n    pos = in[2];\n  }\n  else\n  {\n    pos = 0;\n  }\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @(posedge clk or negedge rst)\n  if(rst == 1)\n  begin\n    pos <= 0;\n  end\n  else if(sel)\n  begin\n    if(in[2] == 1)\n      pos <= 1;\n  end\n  else\n  begin\n    pos <= 0;\n  end\n"
    }
  ],
  "created": 1663520378,
  "id": "cmpl-E0RfmHvYeNOqzPtEZXB4zddZ7UJPz",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1463,
    "prompt_tokens": 65,
    "total_tokens": 1528
  }
}