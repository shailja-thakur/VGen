example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
  begin
    pos <= ~in[1];
  end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
    if (sel)
        priority_encoder_output <= b;

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  if(sel)
  {
    pos <= in[2];
  }

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst) // or posedge clk 
  if (rst) pos <= 0;   // when reset, high-to-low
  else if (sel && !(in[0] && in[1])) // when in reset, low-to-high
    pos <= 1;
else if (sel && in[0]) // when in reset, low-to-high
  pos <= 4;

// output the bits
reg [1:0] a;
always @(posedge clk or negedge rst) // or posedge clk 
  if (rst) a <= 0;   // when reset, high-to-low
  else if (sel && !(in[1])) // when in reset, low-to-high
    a <= 1;
else if (sel && in[1
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst)
  if(sel)
    pos <= in[2];

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst) 
if (sel) 
  pos <= 1'b0 << in[1] & in[0];

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or negedge rst) begin
  if (rst) begin
    pos <= 0;
  end
  else begin
    if (in[0] && in[1]) begin
      if (sel) begin
        pos <= 1;
      end
      else begin
        pos <= 2;
      end
    end else if (!in[0] && !in[1]) begin
      pos <= 0;
    end
  end
end

// The priority encoder is wired such that the inputs must be
// active to be considered valid. This is not required, but
// provides a simple way to track the number of input
// transitions.
always @ (posedge clk or negedge rst) begin
  if (rst) begin
    count <= 0;
  end
  else begin
    if (sel) begin

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or %clk)
  priority_encoder_out <= pos ? b : 0;

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or (sel <= 1 && in[0])) begin
  if (sel <= 1) begin
    pos <= 1;
  end
  else begin
    if (in[0] || in[1]) begin
      pos <= in[1] << 1 | in[0];
    end
  end
end
"""
    )

    tb.verify(check_not_sel)

    tb.run()
    tb.assertEqual(0, tb.read(pos))

    tb.run()
    tb.assertEqual(0, tb.read(pos))

    tb.run()
    tb.assertEqual(1, tb.read(pos))

    tb.run()
    tb.assertEqual(1, tb.read(pos))

    t
================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
begin
  if (sel)
    pos <= in;
end

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst) begin
  if (rst) begin
    pos <= 0;
  end else begin
    if (in[0]) pos <= 1;
  end
end

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or negedge rst)
  if (rst) {
    pos <= 0;
  }
  else if (sel) 
    pos <= in[2] ? in[1] : 0;
else 
  pos <= in[1] ? in[0] : 0;

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
  pos <= (
	  (sel && in[0] == 1) ?
		in[1]
	:
		0
    );

  
================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) {
	if (sel) {
		pos = in;
	} else {
		pos = 0;
	}
}

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or ~sel)
  if (sel) 
  begin
    pos <= 1'b0;
  end
  else
    pos <= in;
end

// This is a 4-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [2:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or ~sel)
  if (sel) 
  begin
    pos <= 2'b0;
  end
  else
    pos <= in;
end

module priority_encoder( 
input [2:0] in,
output reg [3:0] pos ); 
// When sel=1, assign b to out
always @(
================================================================
