example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are unsigned. 
// The output s is signed. 
// The output overflow is unsigned. 

always @(posedge clk)
begin
  s <= a + b + 'b10';
  if (s[7] == 1)
  {
    overflow <= 1;
  }
end
end


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Input:
// a = [-2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648]
// b = [-2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648]
// Output:
// s = [-2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -214748364
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always @(posedge clk)
    s <= a + b + (s > 0 ? 1 : 0);
  

================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Design a signed subtractor that subtracts two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_subtractor(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are subtracted from the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Design an unsigned adder that adds two unsigned 8-bit values, a[7:0] and b[7:0]. 

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Specification:
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
// The inputs a and b are 32-bit unsigned integers. 
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Input:
// a = 00001010
// b = 00000111
// Output:
// s = 00011010
// overflow = 00001110
module add(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

module add_with_carry(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
);

module add_with_carry_add(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
);

module add_with_carry_add_carry(input [7:0] a,
    input [7:0] b,
    output [7
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The sum of a and b is stored in s. 
// The sum of a and b is the two's complement of the sum of the two's complement of a and b. 
// For example, given a = 1 and b = 2, the sum is 3. 
// The sum of a and b is the two's complement of the sum of the two's complement of a and b. 
// For example, given a = 1 and b = 2, the sum is 3. 
// The sum of a and b is the two's complement of the sum of the two's complement of a and b. 
// For example, given a = 1 and b = 2, the sum is 3. 
// The sum of a and b is the two's complement of the sum of the two's complement of a and b. 
// For example, given a = 1 and b = 2, the sum is 3
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output s is sign extended to 32 bits. 
// If overflow occurs, the least significant bits of s are set to 0. 
// The output s is stored in the least significant bits of the output register. 

always @(posedge clk)
  if (clk)
  begin
    s <= a + b;
  end
end



module signed_adder_test(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if(rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        if(a[7:0] > 127) begin
            s <= b[7:0] + 128;
            overflow <= 1;
        end else begin
            s <= b[7:0] + a[7:0];
            overflow <= 0;
        end
    end
end


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (clk)
    begin
    begin
        s <= a + b;
        if (signed_overflow)
        begin
            overflow <= a + b;
        end
    end
end

================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Test Cases
// Input: 
// a = 0x80
// b = 0x80
// s = 0x80
// overflow = 1
// 
// Input: 
// a = 0x80
// b = 0x81
// s = 0x81
// overflow = 0

// Input: 
// a = 0x81
// b = 0x80
// s = 0x81
// overflow = 1

// Input: 
// a = 0x7f
// b = 0x7f
// s = 0x7f
// overflow = 0

// Input: 
// a = 0x7f
// b = 0x80
// s = 0x7f
// overflow = 1

// Input: 
// a = 0x00
// b = 0x00
// s = 0x00
// overflow
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Note: The overflow flag should be initialized to 1 before the module is called. 

always @(posedge clk or negedge rst)
begin
    s <= a + b + (overflow ? 1'b1 : 0);
end


================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    s <= a + b;
    if (s[7] == b[7] && a[7] == b[7]) {
        overflow <= 1;
    } else {
        overflow <= 0;
    }
end


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder should be implemented as a state machine. 
// The state machine should be initialized with the first number a and the second number b. 
// The states should be: 
// 0: a and b are zero. 
// 1: a is zero. 
// 2: b is zero. 
// 3: a and b are negative. 
// 4: b is negative. 
// 5: a is positive. 
// 6: b is positive. 
// The state machine should set the output overflow to false if no signed overflow occurs. 
// The state machine should set the output s to be a + b. 
// The state machine should set the output overflow to true if the signed overflow occurs. 
// The state machine should set the output s to be the sum of a and b. 

// The states should be encoded in the following way: 

================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
  if(clk)
  begin
    s <= a + b;
    if(a[7] == b[7] && a[6] == b[6] && a[5] == b[5] && a[4] == b[4] && a[3] == b[3] && a[2] == b[2] && a[1] == b[1] && a[0] == b[0])
      overflow <= 1;
  end
end


================================================================
