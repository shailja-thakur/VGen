example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


  always @(posedge clk)
  begin
    if (clk)
      s <= a + b;
    else
      s <= b + a;
  end
;


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



//  input [7:0] a,
//  input [7:0] b,
//  output [7:0] s,
//  output overflow

always @(posedge clk)
{
    s <= (a + b);
}


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Function: signed_adder
// Return: s
// Input: a = 00000000101, b = 00001110011
// Output: s = 0101101001
// Output: overflow = 1

signal error_signal;

function error_handler()
{
    // Reset the error signal 
    error_signal = 0;

    // Terminate the program
    stop;
}

function assert_overflow()
{
    // Only assert the overflow signal if the most significant bit of s is high
    if (s[7] == 1) {
        // Assert the overflow signal
        overflow = 1;

        // Terminate the program
        stop;
    }
}

function assert_error()
{
    // Only assert the error signal if the most significant bit of s is low
    if (s[7] == 0) {
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

		    a_msb = a[7]
		    b_msb = b[7]
		    s_msb = s[7]

// Determine whether or not a signed overflow occurred by checking the sign bit of s
	    overflow = (s_msb == 1)

// Combine the two inputs and the result to determine the most significant bit of the result
		    a_add_b = (a_msb & b_msb) | (a_msb + b_msb)

// Shift the result left to put the sign bit of the result in the least significant bit.
// This process uses the signed shift right instruction
		    s = (s_msb << 1) | a_add_b


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always @(posedge clk) begin

    s <= a + b;
    if (a < 0 and b < 0) overflow <= 1;
    if (a < 0 and b >= 0) overflow <= 1;
    if (a >= 0 and b < 0) overflow <= 1;
    if (a >= 0 and b >= 0) overflow <= 1;
  end


================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    always @(posedge clk)
        s <= a + b + {
        	overflow = a[7:0] + b[7:0] + int( (a[7:0] > 127) | (b[7:0] > 127) );
        }


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end else if (a <= -32'768  or b <= -32'768) begin
        s <= 0;
        overflow <= 1;
    end
    else begin
        s <= a + b;
    end
end

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Some notes on how the output is formed:
// the least significant bit of the output is always the least significant bit of the sum of the inputs
// the most significant bit of the output is the most significant bit of the sum of the inputs
// the sign bit of the sum of the inputs is the sign bit of the sum of the inputs

================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


  always @(posedge clk)
  begin
    if (overflow)
    begin
      s <= a + b;
      if (a < 0x80 && b < 0x80)
        s <= b + a;
    end
  end


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always @(posedge clk or negedge rst) begin
      if (rst) begin
          s <= 0;
          overflow <= 0;
      end else begin
          a <= a + b + 0x8000;
          if ((a + b) > 0x8000) begin
              s <= a + b - 0x8000;
              overflow <= 1;
          end else begin
              s <= a + b;
          end;
      end;
  end


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// add a to b in signed binary

  // add a to b in binary
  // carry through the most significant bit of a
  // carry through the most significant bit of b
  // add bits of a and b in binary
  // if bit at the most significant bit of a is high
    // carry bit of a to bit at most significant bit of b
  // if bit at the most significant bit of b is high
    // carry bit of b to bit at most significant bit of a
  // if bit at the most significant bit of b is high
    // carry bit of b to bit at most significant bit of a
  // if bit at the most significant bit of a is low
    // carry bit of a to bit at most significant bit of b
  // if bit at the most significant bit of b is low
    // carry bit of b to bit at most significant bit of a
  // if
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



#define _SIGNED_ADD(a, b, s) \
    s = a + b; \
    if((a>0?1:-1) != (b>0?1:-1) && (s>0x80?1:-1) != (s&0x80?1:-1)) { \
        overflow = 1; \
    }

always @(posedge clk or negedge rst)
    if(rst)
    {
        a = 0;
        b = 0;
        s = 0;
        overflow = 0;
    }
    else if (a <= 127 and b <= 127)
    {
        _SIGNED_ADD(a, b, s);
    }
    else if (a >= -128 and b >= -128)
    {
        _SIGNED_ADD(a,
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// Initialize a 3-bit register with the value of the most significant bit of the result
  always @(posedge clk)
  begin
    s <= b;
  end

// Add two inputs and store the result in a 3-bit register
  always @(posedge clk)
  begin
    if (a == b)
      s <= a;
    else
      s <= ~a;
  end


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


#define Signed_add(a, b, s) \
	(s) = (a) + (b); \
	(overflow) = (((a) ^ (b)) & 0x80) | (((a) ^ (s)) & 0x80) | (((s) < 0) != ((a) < 0)) | (((s) < 0) != ((b) < 0));

always @ (posedge clk or negedge rst) begin
    if (negedge rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        Signed_add(a[7:0], b[7:0], s[7:0]);
        if (s[0] == 0x80) begin
            s <= 0x7f;
            overflow <= 1;
        end
    end

================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The code below uses bit instructions that may result in a 
// signed overflow. It is not guaranteed to generate a correct result.

always @(posedge clk)
  begin
    s <= a + b;
  end

================================================================
