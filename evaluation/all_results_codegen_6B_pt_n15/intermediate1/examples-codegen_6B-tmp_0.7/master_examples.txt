example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always@(posedge clk)
begin
  sum <= (a << 1) + b + (cout == 1'b1 ? 1 : 0);
end

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

begin:
  // false accepts no inputs.
  in := false;
end:
  if out<cout then goto begin;
  if out<sum then goto add_b;
  if out<sum+carryout then goto half_adder;
  if out<sum+carryout+1 then goto add_b;
  if out<sum+carryout+2 then goto half_adder;
  if out<sum+carryout+3 then goto add_b;
  if out<sum+carryout+4 then goto half_adder;
  if out<sum+carryout+5 then goto add_b;
  if out<sum+carryout+6 then goto half_adder;
  if out<sum+carryout+7 then goto add_b;
  if out<sum+carryout+8 then goto half_adder;
  if out<
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
	always @ (posedge clk)
	begin
		sum <= a + b;
		cout <= sum[15:0];
	end

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

begin
    sum = a + b + 128;
    cout = sum;
end


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_r1( a, b, cout, sum )
  sum <= (a + b) & (a + b);
endfunction

function half_adder_r2( a, b, cout, sum )
  sum <= a + b;
endfunction

behavior half_adder_bb( a, b, cout, sum )
  if a > b then 
      output a;
      output cout;
      output b;
      output sum;
  else
      output b;
      output cout;
      output a;
      output sum;
endbehavior

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_inst( a, b )
{
  var carry = 0;
  var sum = 0;
  var i = 0;

  // Compute the sum while maintaining the carry-out.
  while( i < 16 )
    {
      sum = (sum + a) + b + carry;
      carry = sum >> 16;
      a = sum & 0xffff;  
      b = i + 1;
      i = b;
    }

  // Compute the carry and the sum.
  carry = a + b + carry;
  sum = (carry & 0xffff) + (sum << 16);
  carry = sum >> 16;

  // Output the results.
  cout = sum & 0xffff;
  return carry;
}

// Test the half adder.
def half_adder_test( a
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_inst() {
    #include "half_adder.verilog"
}


================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

signal carryout;
signal rdout;

begin
carryout <= rdout;

sum <= a + b + carryout;

end


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
// Outputs cout = a + b + sum, carry-out = a + b + sum & 0x1
// Inputs a, b, sum should be 0 to 15.

// The value of a, b, or sum will be in the range 0 to 15.
task main()
{
	half_adder( a, b, cout, sum );
}

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign cout = ( sum + a + b );


================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

def hhalf_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half_adder( a, b, cout, sum );

def half
================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign( cout );
assign( sum );

reg i, j;

// Carry-out is in bit 7
assign( sum_carry_out( sum ) );

// Sum is in bits 0-6
assign( sum_and_carry( sum, sum_carry_out ) );

always_comb
begin
    sum_carry_out <= sum_carry_in;
end


================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Function: half_adder
double half_adder( 
input a, b,
output cout, sum,
output carry_out );

// Function: sum
double sum( 
input a, b,
output cout, sum,
output carry_out );

// Function: half_adder
double half_adder( 
input a, b,
output cout, sum,
output carry_out );

// Function: half_adder
double half_adder( 
input a, b,
output cout, sum,
output carry_out );

// Function: half_adder
double half_adder( 
input a, b,
output cout, sum,
output carry_out );

// Function: sum
double sum( 
input a, b,
output cout, sum,
output carry_out );

// Function: half_adder
double
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

half_adder( 0, 0, cout, sum );

sum:
    if ( sum > 0x7 ) {
        sum = 0x8 | ( sum & 0x7 );
    } else {
        sum <<= 1;
    }
    sum += a;
    sum += b;
    sum >>= 1;
    sum &= 0x7;
    if ( sum > 0x7 ) {
        sum = 0x8 | ( sum & 0x7 );
    }
    cout = sum;
endhalf_adder

// This is a full adder. A full adder adds two bits and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

full_adder( 0, 0, cout, sum );

sum:
    sum += a;
    sum += b;

================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

================================================================
