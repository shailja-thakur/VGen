example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
    if (reset) begin
        q <= 0;
    end
    else if (slowena) begin
        if (q < 9) begin
            q <= q + 1;
        end
    end
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
    if (reset) begin
        q <= 0;
    end
    else if (slowena) begin
        if (q < 9) begin
            q <= q + 1;
        end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
def clock_positive():
    if (reset == 1'b1):
        q[3:0] <= 0;
    else if (slowena == 1'b1 and q[3:0] < 9):
        q[3:0] <= q[3:0] + 1;

// On the negative edge of the clock:
// if reset is high, set the output q to 0.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
def clock_negative():
    if (reset == 1'b1):
        q[3:0] <= 0;
    else if (slowena == 1'b1 and q[3:0] > 0):
        q[3:0] <= q[3:0] - 1;

// The counter clockwise from 9 to 0, inclusive.
// The
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (reset) q <= 0;
    else if (slowena)
        if (q < 9) q <= q + 1;


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (reset) q <= 0;
    else if (slowena) q <= 1;
    else q <= 2;

// On the negative edge of the clock:
// if the slowena input is high, output q to 0.
// Otherwise, output q to 9.
always @(negedge clk)
    if (slowena) q <= 0;
    else q <= 9;


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The output of q is clocked through the clock input.

always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    if (q < 9)
      q <= q + 1;


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena)
    if (q < 9) q <= q + 1;
  end
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena)
    if (q < 9) q <= q + 1;
  end
end

module count_fast_dec(
    input clk,
    input slowena,
    input reset,
================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The counter will wrap around to 0 when the counter reaches 9.

always @(posedge clk)
  if (reset == 1)
    q <= 0;
  else if (slowena == 1 and q != 9)
    q <= q + 1;


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena && q < 9)
    q <= q + 1;

// On the negative edge of the clock:
// if the ena input is high and q is not 0, decrement q.
always @(negedge clk)
  if (slowena && q > 0)
    q <= q - 1;


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    q <== (slowena && q < 9);


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The output q is clocked out on the positive edge of the clock.

always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    q <= q + 1;
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The output q is clocked out on the positive edge of the clock.

always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    q <= q + 1;
end

module count
================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena and q != 9) q <= q + 1;


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The counter will wrap around to 0 at the same time.

always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena)
    if (q < 9) q <= q + 1;


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q <= 9;
always clk <= slowena & q
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    if (q < 9)
      q <= q + 1;

// On the negative edge of the clock:
// if the ena input is high, decrement the output q by 1.
always @(negedge clk)
  if (slowena)
    q <= q - 1;


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena and q < 9)
    q <= q + 1;


================================================================
