example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    q <= 1;
  else
    q <= 0;


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge slowena)
if (slowena) begin
    if (reset) begin
        q <= 0;
    end
    else if (q <= 9) begin
        q <= q + 1;
    end
end

// On the negative edge of the clock:
// if the ena input is high, reset the output q to 0.
// Otherwise, if q is 9, set q to 10, and if q is not 9, decrement q by 1.
always @(negedge clk or negedge slowena)
if (slowena) begin
    if (slowena) begin
        q <= 0;
    end
    else if (q <= 9) begin
        q <= 10;
    end
end

// On the positive edge of the clock:
// if q is 9, set q to 0, otherwise
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge slowena)
  q <= (reset ? 0 : reg[3] ? reg[2] ? reg[1] ? 1 : 2 : 3);

// On the negative edge of the clock:
// If slowena is high, then the output q should be incremented by one.
// Otherwise, if q is not the maximum, increment q by 1.
always @(negedge slowena or negedge clk)
  if (slowena) q++;
  else if (reg[3] && q < 9) q++;

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset != 1) begin
        q <= 0;
    end else begin
        if (slowena != 1) begin 
            if (q != 9) begin
                q <= q + 1;
            end else begin
                q <= 0;
            end
        end
    end
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset != 1) begin
        q <= 0;
    end else begin
        if (slowena != 1
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
behavior count_slow_mcu(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
behavior count_slow_block(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// The counter counts from 0 through 9, inclusive.
// The counter resets on the negative edge of the clock.
behavior count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// The counter counts from 0 through 9, inclusive.
// The counter resets
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If slowena is high, also increment the output q by 10 (bypassing the counter).

always @(posedge clk or negedge slowena)
    if (slowena == 1)
        q[1] <= q[0];
    else if (slowena == 0)
        if (q[0] != 9)
            q[1] <= q[0] + 1;

// On the negative edge of the clock:
// if slowena is high, decrement the output q by 10 (bypassing the counter).
// Otherwise, only decrement the output q if the reset input is high and q is not 0.

always @(negedge clk or (slowena == 1))
    if (slowena == 1)
        q[0] <= q[1] - 10;
    else if (reset == 1)
        q[
================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset <= 0) begin
    q <= 0;
    end
    else if (!slowena && q < 9) begin
    q <= q + 1;
    end
end

// On the negative edge of the clock:
// if the reset input is low, reset the output q to 0.
// Otherwise, only decrement the output q if the ena input is low and q > 0.
always @(negedge clk) begin
    if (slowena && q > 0) begin
    q <= q - 1;
    end
    else if (!slowena && q > 0) begin
    q <= 0;
    end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if ena is high, then set q = 0. 
// Otherwise, decrement q if q is not 0.

always @(posedge clk)
begin
    if (reset) begin
        q <= 0;
    end
    else if (slowena == 1 && q != 9) begin
        q <= 1;
    end
    else if (slowena == 0 && q != 0) begin
        q <= -1;
    end
end

// Create a module to count a number in a decade from 0 through 99, inclusive.

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk) begin
		if (reset) begin
			q <= 0;
		end
		else if (slowena) begin
			if (q < 9) begin
				q <= q + 1;
			end
		end
	end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (reset)
        q = 0;
    else if (slowena && q < 9)
        q++;

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
entity slow_decade_counter0 = make_decade_counter(
    clk, slowena, reset, q[0], slow_decade_counter0_slowena, slow_decade_counter0_reset);

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
entity slow_decade_counter1 = make_decade_counter(
    clk, slowena, reset, q[1], slow_decade_counter1_slowena, slow_decade_counter1_reset);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 8.
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  begin
    if (slowena && reset) q <= 0;
    else if (slowena && !(slowena && q == 9)) q <= q + 1;
  end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always clk_rising.next = clk;
always clk_rising.posedge =
    slowena && !reset;
always clk_rising.falling = !slowena && !reset;
always clk_rising.falling = !slowena && !reset && q == 9;

reg [3:0] q = 0;

always @(posedge clk) {
  if (slowena) q = q + 1;
}


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge slowena)
  if (reset) q <= 0;
  else if (slowena)
    if (q < 9) q <= q + 1;
// The counter is reset to zero on the negative edge of the clock.
// See Programming the PIC for details of the negative edge / reset.
  else if (slowena) q <= 0;

reg [3:0] count;

always @(posedge clk or negedge slowena)
  count <= count_slow(slowena, reset, q);


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge slowena)
if (slowena == 1) begin
    if (reset == 1) q[0] = 0;
    else if (q[0] < 9) q[0] += 1;
end

// On the negative edge of the clock:
// if ena is high, increment the output q.
// Otherwise, only decrement the output q if q is not 0.
always @(negedge clk or negedge slowena)
if (slowena == 1) begin
    if (slowena == 1) q[0] += 1;
    else if (q[0] > 0) q[0] -= 1;
end


================================================================
