example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (clock) begin
    if (reset) begin
        q <= 0;
    end
    else begin
        if (slowena && !q[2]) begin
            q <= q[0] + 1;
        end
        else begin
            q <= q[0];
        end
    end
end

// On the negative edge of the clock:
// when E is valid and Q <= 9, reset the output Q back to 0.
// Just before the positive edge of the clock, if the enable signal is high,
// and the previous value of Q is not 9, then 160 + value(Q) is incremented.
always @ (clock ~slow) begin
    if (!slowena && q[2]) begin
        q <= 0;
    end
    else begin
        if (q <= 9) begin 
            q <= 160 + value(q[0]);
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or p0)
    if (reset) q := 0;
    else if (slowena && 9 !<= q) q := q + 1;


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If y is low, do not increment q.
always @(posedge clk) begin
    case({
        1,
        0,
        slowena
        } ) q <= (slowena ? q + 1 : 8);
end

/* This comes about from the "for" loop: 2000000x4=6000000.  By
 * initializing y, we can purge it and get rid of the implicit
 * for loop.  
 */
reg [3:0] q;
always @(posedge clk) begin
    q <= 0;
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if(reset)
    q <= 0;
  else if (slowena)
    q <= q + 1;
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clk:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if(reset)
    q <= 0;
  else if (slowena)
    q >= q + 1;
end

module cnt{{range (.0+1.2,2.999)}
  +clk(clock);
  always @(posedge clk)
    if
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
assign reg = idle;
reg [1] = slowena;
always @(posedge clk)
    if(reset)
        reg = low;
    else
        begin
            if(q < 9" and slowena) q++; 
            else begin
                if(q == 9")q = 0;
            end
        end
end

module count_fast_or(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock: 
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
assign reg = idle;
reg [1] = slowena;
always @(posedge clk)
    if(reset)
        
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
timed fast_mem8 Decadecounter1 === "countSlowDecadeBy1.vhd";

(* total_cycle += "\nDecadecounter\n";* end *)

begin fast_decadecounting(Decadecounter1);

end

// ## Expander_vhd
/*
I'LITERATE_EXPANSION += O.DMA(
    phase_next,
    default implicit_phase ,
    unitBoundL = "fast_decadecounting"
 );
*/

// ----------------------------------------------------------------------------
// | BY PORT 133, EXPANSION PARAMS EXPANSION PARAMS EXPANSION PARAMS |
// ----------------------------------------------------------------------------

// KEEP THIS SIMPLE, DRILL ON TO THE SMALLGATE2 computation OR LOOK FOR 
// '** Program Small Gate <tt><> >.vhd **'

// # ***** TRAFO
================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin

  if (reset) begin
    q <= 0;
  end
 else if (q < 9 and slowena) begin
    q <= 1;
  end

end
`

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
RESET: ena <= clk & reset => q <= 0;
ENABLE: slowena <= clk & ena & q <= 9;

// On the negative edge of the clock:
// if ena is high & q = 9, decrement q by 1; 
// if ena is low, q < 0, then simply increment q by 1.
// or: if res is high and q = 9, q <= 0, set to 0; 
// otherwise, do nothing and the counters remain unchanged.
disable: clk & ~ena & ~q <= slowena;
enable:  clk & ena & slowena & ~q <= 9;

// Time constraints (tBV): 
// input to register instantiation: < 1 nsec
// register constant folding: < 1 nsec
// register communication: < 5 nsec
// clock low time: < 20 nsec
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if(reset) begin
        q[3:0] <= 0;
    end
    else if(slowena) begin
        if(q[3:0] < 9) begin
            q[3:0] <= q[3:0] + 1;
	end
    end
    end
end

module count{
    
    input clk;
    input slowena;
    input reset;
    reg [3:0] q;
    
    always @(posedge clk) begin
        if(reset) q <= 0;
        else if(slowena) begin
            if(q >= 9) begin
                q <= 0;
            end
            else begin
                q <= q + 1;
            end
        end
    end
}

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always (posedge clock)
    if (reset) q = 0;
    else if (slowena)
        if (q != 9) q = q + 1;
        else q = 0;
/* Synchronization signals:
 * slowena (input): high value indicates i/o is slave
 * clk (input): indicates decrementing operation
 * reset (input):  high value indicates counter is reset
 */

reg [2:1] last_ena;

function reset_count(input clk, input slowena, output reg [3:0] q);($timeparam slowena, clock, reset)
    accept_last_ena: fast release last_ena;
    accept_ena: fast dual enable fast always;
    accept_reset: fast release reset;
    wait_ena:     begin    loop
        if (slowena == 0) then 
            exit
================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
VARICOUNTRESET: ena <= 1 ;
VARICOUNTCLAUSE: q <= input clk & ena & slowena & _vreset;
ENASLOW: q <= (q + 1) & slowena & _vreset;

reg [3:0] countq;

countq <= 0 | < 9;

ENACTCLK: when{ counterq = slowq; } => countq <= slowq;
ENACTCLK: when{ countq = slowq; } => countq <= (slowq + 1);

reset <= inputs[6];
slowena <= input inputs[7];
_vreset <= slowena;


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
behavior count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);
endbehavior

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// bool clock_busy indicates the clock is high and it is active.
// Note: slot $4 inserted to enable fast clock. $4 indicates CLS signal.
method clock_busy();
signal cls:clk'clock_busy;
endmethod

// After bufram logical signals:
// bufram:CLS_OQ_BITS times port() to get the bit of the new latch value. 
// bufram:LSW_OQ_BITS times port() to get the new low-bit for the next LSW of hla.
================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena || reset) q[0] <= 0;
    else if (slowena && q[0] == 9) q[0] <= 0;
    else q[0] <= 1 + (~slowena && q[0] < 9);

// On the negative edge of the clock:
// if reset is high and the output q is 0, it is set to 9.
// Otherwise, the output q is clamped to 0 if it is not 9.
always @(negedge clk)
    if (slowena && q[0] == 0) q[0] <= 9;
    else q[0] <= ~slowena && q[0] != 9;

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    begin
        if (reset == 1'b0) 
                q[0] <= 0;
        else if (slowena == 1'b1 && q[3:0] != 9)
			q[0] <= q[3:0] + 1;
    end

// It is okay (efficiently) for clock to floor to 0 when resetting since we do not
// count the 6 least significant bits.
always @(negedge clk)
    begin
        if (slowena == 1'b1)
			q[0] <= q[2:0] - 1;
    end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always@(posedge clk)
  if (reset)
  begin
    q <= 0;
    more_data == 1'b0;
    carry == 1'b0;
  end
else
begin
  if (slowena and q <= 9)
    carry <= 1'b0;
  if(slowena == 1'b1 and carry == 1'b1)
    q <= q + 1;
  else
    q <= q;
end


================================================================
