example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign2( input in, output out ) {
  out <= in;
}

// Different types of wire assignments
module wire_assign_int_out_int_in( input in, output out ) {
  out <= in;
}

module wire_assign_string_out_string_in( input in, output out ) {
  out <= in;
}

// Use wire assign with a function
module wire_assign_mem_int_out_int_in( input in, output out ) {
  out <= wire_assign(in, x);
}

module wire_assign_int_out_int_in( input in, output out ) {
  out <= out;
}

module wire_assign_int_out_int_in( input in, output out ) {
  out <= in;

================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
void wire_assign_module() {
out = in;
}

// Design a module that prints the input
module print_input( input in );
// print the input
void print_input_module() {
cout << in << endl;
}

// Design a module that prints the input
module print_output( output out );
// print the output
void print_output_module() {
cout << out << endl;
}

// Design a module that prints both the input and the output
module print_both( input in, output out );
// print both
void print_both_module() {
cout << in << " " << out << endl;
}

// Design a module that consumes the input
module consume( input in );
// consume the input
void consume_module() {
cin >> in;
}

// Design a
================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// module wire_assign( out, in );
// assign out to out
module wire_assign( output out, input in );
// assign out to out
// module wire_assign( out, out );

================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_out_to_in( input in, output out );
`

func TestCompilerWireAssign(t *testing.T) {
	c := NewCompiler()
	var m Module
	m.Compile([]byte(testModule))
	if m.Err() != nil {
		t.Fatalf("failed to compile module: %v", m.Err())
	}
	if len(m.Wires) != 9 {
		t.Fatalf("module has wrong number of wires: %d", len(m.Wires))
	}
	if !reflect.DeepEqual(m.Wires[0], Wire{
		Src: 0, Dst: 0, WireType: "output", WireDir: "in",
	}) {
		t.Fatalf("bad wire: %#v", m.
================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// wire_assign( in, out )
// wire_assign( in  , out  )
// wire_assign( in.a , out.a )
// wire_assign( in.a, out.a )

================================================================
example-5: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign( output out, input in ) {
  out <= in;
}

module test_assign( input i_in, output o_out, output o_in )
  input o_in;
  output o_out;
  input i_out;

  assign( o_out, i_in );
  assign( o_in, i_out );
  assign( i_in, i_out );
  assign( i_out, i_in );
  assign( o_out, i_out );
  assign( o_out, i_in );
  assign( i_out, i_in );
  assign( i_out, i_in );
  assign( i_out, i_in );
  assign( o_out, i_out );



// Design
================================================================
example-6: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
void assign(input in, output out) {
  out = in;
}

// Design a module that prints the contents of the input to the stdout.
module print_io( input in, output out ) {
  out = in;
  dout << in;
}

// Start the program.
void main_program() {
  // Instantiate the modules.
  output out = print_io( in, "out" );

  // run the modules
  assign( in, out );
}

================================================================
example-7: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
assign out = in;
// wire_assign is given an input value to assign to an output value
// and returns the output value
module wire_assign2( input in );
assign out2 = in;
// wire_assign2 is given an input value to assign to an output value
// and returns the output value
//
// wire_assign2 can also be used as a function
//
function wire_assign2( in ) return out2;
// wire_assign2 can also be a procedure
function wire_assign3( in ) return out2;
// wire_assign3 can also be a procedure
//
// wire_assign2 can also be used as a module
//
module wire_assign3( in ) return out2;

================================================================
example-8: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// Module 'wire_assign'

// Define the inputs of the module

int in;

// Define the outputs of the module

int out;

// Implement the module

wire_assign( in, out )
{
  out = in;
  return out;
}

================================================================
example-9: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
out.a = in.a;
// assign in to out
out.b = in.b;

module wire_assign_id( input in, output out, input id );
// assign out to in
out.a = in.a;
// assign in to out
out.b = in.b;

================================================================
example-10: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign( in, out );
`

func TestWire_assign(t *testing.T) {
	verifyTest(t, sink, "{input=1, output=1}")
}

const wire_assign_1 = `
module wire_assign_1( input in, output out );
// assign out to in
wire_assign_1( in, out );
`

func TestWire_assign_1(t *testing.T) {
	verifyTest(t, sink, "{input=1, output=1}")
}

const wire_assign_2 = `
module wire_assign_2( input in, output out );
// assign out to in
wire_assign_2( in, out );
`

func TestWire_assign_2(t *testing.T) {

================================================================
example-11: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_2( input in, output out );

//------------------------------------------------------------------------------
// wire_assign
//------------------------------------------------------------------------------

// function wire_assign_module( input in, output out )
//  wire_assign( input in, output out )
//  end

//------------------------------------------------------------------------------
// wire_assign_2
//------------------------------------------------------------------------------

// function wire_assign_module( input in, output out )
//  wire_assign_2( input in, output out )
//  end

//------------------------------------------------------------------------------
// end of wiring_assign.v
//------------------------------------------------------------------------------

================================================================
example-12: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// module wire_assign( input in, output out ) {}
// Wire the blocks together using the wire_assign module
wire_assign( input in, output out ) {
	out = in + 2;
}
// The module wire_assign is only a module. It does not need to be
// included in the program.

================================================================
example-13: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign( input in, output out ) {
	assign( out, in );
}

/*
 * Functions with ports
 */
// A module that reads from input and outputs to output
module input_output( input in, output out ) {
	assign( out, in );
}

// A module that reads from input1 and outputs to output1
module input_output1( input in1, output out1 ) {
	assign( out1, in1 );
}

// A module that reads from input1 and inputs to output1
module input_input1( input in1, input in2 ) {
	assign( in2, in1 );
}

// A module that reads from input1 and outputs to output1 and output2
module input_output2( input in1, output out1, output out2 ) {
	assign
================================================================
example-14: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module assign_out( input in ) {
  out <= in;
}

// The input module takes non-equally spaced values from 0 to N-1, and outputs
// the sum of the input values.
// Note: The output of the sum module is assigned to the output of the input
// module, which is a wire.
module add( input in, output out, int N ) {
  out <= sum( in );
  output_list[0] <= in(N-1);
  output_list[1] <= in(N-2);
  output_list[2] <= in(N-3);
  output_list[3] <= in(N-4);
  output_list[4] <= in(N-5);
  output_list[5] <= in(N-6);
  output_list[6] <= in(N
================================================================
