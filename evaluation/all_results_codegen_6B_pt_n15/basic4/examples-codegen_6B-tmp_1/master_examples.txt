example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk or negedge rst) combo_sel, combo_sel = sel or insel;

reg [4:0] out = combioportsel(reg(4:0), default(combo_sel),
   {a, b, combo_sel, insel, unassigned});


================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk)
  out <= (sel == 0 ? a : b);

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @ (posedge clk or negedge rst) begin
  if (rst) begin
    // activation
    out <= 0;
  end
  instance(X) : instance_sel <= sel;
  instance(N) : instance_sel <= 1'b0;
  instance(M) : instance_sel <= 1'b1;
  assign out = (a[4:0] & a('x')) | (b(4:0) & b('x') & ~a('x'));
end


================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk)
  out <= select(sel, a, b);

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @( posedge clk )
  out <= sel ? a : b;


begin
end
"""


def scenario_test_temporal_equal_multiplexer():
    """
    Create a model pass that checks that multiplexers have the same
    temporal behavior when multiple inputs are assigned to the
    same output.
    """

    model = MiniModel( model_text="""
// MODEL: 1-to-4 min/max signals a multiplexer
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @( posedge clk )
  out <= sel ? a : b;
end
""")

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always@(*) sel : 0;
always@(*) sel <= 2;
assign out[4:0] = a[4:0] when {sel=0};
assign out[4:0] = b[4:0] when {sel=1};

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk or negedge rst) begin
  if ( rst ) begin
    out <= 0;
  end else
    out <= sel ? a : b;
end

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk)
  out <= a || b 
           || (sel && out);

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always@(posedge clk or negedge clk)
out <= ~sel ? a : b;

================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk)
out <= (sel == 0) ? a : b;
//
================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk)
sel <= switch (sel) {
	1'b0 : out <= a[4#];
	1'b1 : out <= b[4#];
};

// Module for the original digital multiplexer. 
module mux((tx_en, tx, t1, t2, t3, t4) , out) { 
  state query[5]; 
  always @(*) tx_en <= switch(sel) {
    0'b0 : out <= a[4#]; 
    0'b1 : out <= b[4#]; 
  }; 
}; 

================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(*)
out <= select_logic(sel, a, b);

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk or negedge rst)
  if ( rst )
   out[3:0] <= 0;
  else if(sel == 0)
    out[3:0] <= a[3:0];
  else
    out[3:0] <= b[3:0];

================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always@(posedge clk or negedge rst) begin
  if(rst)
    out <= 0;
  else if(sel == 0)
    out <= a;
  else // if(sel == 1)
    out <= b;
end

================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @ (posedge clk.u)
  if (sel == 0)
  out = a;
  else
  out = b;

================================================================
