example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE)
    begin
        if (a == 1)
        begin
            next_state = SA;
        end
        else if (b == 1)
        begin
            next_state = SB;
        end
        else if (a == 1 && b == 1)
        begin
            next_state = SAB;
        end
    end
    else if (cur_state == SA)
    begin
        if (b == 1)
        begin
            next_state = SAB;
        end
    end
    else if (cur_state == SB)
    begin
        if (a == 1)
        begin
            next_state = SAB;
        end
    end
    else if (cur_state == SAB)
    begin
        next_state
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (next_state == IDLE)
    begin
        // If both a and b are high, output z is high
        if (a == 1 && b == 1)
        begin
            next_state = SAB;
            z = 1;
        end
        // If a is high, output z is high
        else if (a == 1)
        begin
            next_state = SA;
            z = 1;
        end
        // If b is high, output z is high
        else if (b == 1)
        begin
            next_state = SB;
            z = 1;
        end
        // If both a and b are low, output z is low
        else
        begin
            next_state = IDLE;
            z = 0;
        end
    end
end


================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else if (a && b) begin
    cur_state <= SAB;
    next_state <= SAB;
  end
  else if (a) begin
    cur_state <= SA;
    next_state <= SA;
  end
  else if (b) begin
    cur_state <= SB;
    next_state <= SB;
  end
  else begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
end

// This is an FSM
module abro_fsm(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= SA;
  if (cur_state == IDLE && a && b) next_state <= SAB;
  if (cur_state == IDLE && a) next_state <= SA;
  if (cur_state == IDLE && b) next_state <= SB;
  if (cur_state == SA && b) next_state <= SAB;
  if (cur_state == SB && a) next_state <= SAB;
  if (cur_state == SAB) next_state <= IDLE;
  if (cur_state == IDLE) next_state <= IDLE;
  z <= next_state;
end
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE && a == 1 && b == 1)
    begin
        next_state = SAB;
    end
    else if (cur_state == IDLE && a == 1)
    begin
        next_state = SA;
    end
    else if (cur_state == IDLE && b == 1)
    begin
        next_state = SB;
    end
    else if (cur_state == SA && b == 1)
    begin
        next_state = SAB;
    end
    else if (cur_state == SB && a == 1)
    begin
        next_state = SAB;
    end
    else if (cur_state == SAB)
    begin
        next_state = IDLE;
    end
end


================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
        begin
        cur_state <= next_state;
        next_state <= cur_state;
        if (cur_state == IDLE)
                if (a && b)
                        next_state <= SAB;
                else if (a)
                        next_state <= SA;
                else if (b)
                        next_state <= SB;
        end
end

// This is an FSM
module abro_fsm(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE && a == 1 && b == 1) next_state = SAB;
    else if (cur_state == IDLE && a == 1) next_state = SA;
    else if (cur_state == IDLE && b == 1) next_state = SB;
    else if (cur_state == SA && b == 1) next_state = SAB;
    else if (cur_state == SB && a == 1) next_state = SAB;
    else if (cur_state == SAB) next_state = IDLE;
    else next_state = cur_state;
    cur_state = next_state;
    z = cur_state;
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= IDLE;
  if (a == 1) {
    if (b == 1) next_state <= SAB;
    else next_state <= SA;
  }
  else if (b == 1) next_state <= SB;
  else next_state <= IDLE;
end

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (cur_state == IDLE)
    if (a == 1)
      cur_state = SA;
    else if (b == 1)
      cur_state = SB;
    else cur_state = IDLE;
  else if (cur_state == SA)
    if (b == 1)
      next_state = SAB;
    else cur_state = IDLE;
  else if (cur_state == SB)
    if (a == 1)
      next_state = SAB;
    else cur_state = IDLE;
  else if (cur_state == SAB)
    next_state = IDLE;
  else cur_state = IDLE;
  if (next_state == IDLE)
    z = 0;
  else z = 1;
end

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
    next_state <= cur_state;
    next_state <= (a == 1 && b == 1) ? SAB : (a == 1 ? SA : SB);
    if (cur_state == IDLE && a == 1 && b == 1) z <= 1;
end

// This is an FSM module
module abro_fsm(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a == 1)
  {
    cur_state <= SA;
  }
  else if (b == 1)
  {
    cur_state <= SB;
  }
  else if (a == 1 && b == 1)
  {
    cur_state <= SAB;
  }
  else if (a == 1)
  {
    next_state <= SA;
  }
  else if (b == 1)
  {
    next_state <= SB;
  }
  else if (a == 1 && b == 0)
  {
    next_state <= SAB;
  }
  else if (a == 0 && b == 1)
  {
    next_state <= SAB;
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    if (cur_state == IDLE) begin
        next_state = IDLE;
    end
    else begin
        if (a) begin
            next_state = SA;
        end
        else if (b) begin
            next_state = SB;
        end
        else begin
            next_state = SAB;
        end
    end
    if (next_state != cur_state) begin
        cur_state = next_state;
        z = 1;
    end
end

// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (a) begin
      cur_state <= SA;
    end
    else if (b) begin
      cur_state <= SB;
    end
    else begin
      cur_state <= SAB;
    end
  end
end

================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
    end
    else if (a) begin
        cur_state <= SA;
    end
    else if (b) begin
        cur_state <= SB;
    end
    else begin
        cur_state <= SAB;
    end
    next_state <= cur_state;
end

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (a) begin
      cur_state <= SA;
    end
    else if (b) begin
      cur_state <= SB;
    end
    else begin
      cur_state <= SAB;
    end
  end
end


================================================================
