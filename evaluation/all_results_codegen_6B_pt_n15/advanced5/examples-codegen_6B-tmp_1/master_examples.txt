example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
cout << "y[" << a << "][" << b << "] " << int(z) << endl;


================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
  always @(posedge clk)
  begin
    next_state = cur_state == IDLE ? next_state : a + b + next_state;
    cur_state <= SA ? next_state <= SAB : next_state <= SB ;
    next_state <= SA ? cur_state <= SB : cur_state < next_state || next_state == IDLE;
    next_state <= SA ? z <= 1 : next_state <= SB || next_state == IDLE;
  end

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// If not, z is set to 0
always @(posedge clk)
begin
	cur_state <= reset ? IDLE :
		cur_state <= SA ? SA :
		cur_state <= SB ? SB :
		cur_state <= SAB ? SAB :
		IDLE;
end

// THIS IS KEY
// The program requires the following generator technique.
// Initialize cur_state to IDLE and interconnect one's timers such that:
// 1) when previously interval was two, now interval is three
// 2) now up, we check if second and third are both high or if third is low
// 3) If cur_state is IDLE and order of the ones addresses is T3-T2-T1
// (where T1 and T2 are sequential numbers in the next list, and T3 is the time interval)
// change to SAB then for loop
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(*)
z <= b & a & ((cur_state == IDLE) | (cur_state == 0 & a | b));
always @(*)
cur_state == IDLE & clock <= 1;

// abro(clk,reset,a,b) always @(*)
//  wire a,b;
prev_state <= SA; -> cur_state:=prev_state & clk & ~a & ~b;
next_state <= next_state << prev_state & clk & !a & !b;


================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
PROCESS( abro,

	A=>
  {
    clk <= 1 && reset <= 1;
    if(!clk && !reset) cur_state <- SA;
    else if(!clk && reset) cur_state <- next_state;
    else cur_state <- IDLE;
  },
P_i>=a,P_j>=b 
	meq [0] <= a; //only if ready_a = 1

  B=>
  {
    clk <= 1 && reset <= 1;
    if(!clk && !reset) cur_state <- SB;
    else if(!clk && reset) cur_state <- next_state;
    else cur_state <- IDLE;
  }
);


ENDMODULE

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (
	clock .posedge -
	a <= 1 or b <= 1
)
next_state = unsigned((cur_state >> 1) | next_state); // shift use starts each cycle so we don't get negative state
assign z = (cur_state == SAB); // stop cycle when state changes


================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
read1zb (a, b, z);
end

card_counter++;


================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
{
  next_state = cur_state;
  if (cur_state == IDLE)
  {
    if ( a > 0 && b > 0 ){ next_state = SAB;}
    if ( a > 0 && b < 0 ){ next_state = SA;}
    if ( a < 0 && b > 0 ){ next_state = SB;}
  }
  else
  {
    if ( z == 1 ){ next_state = IDLE;}
  }
  switch(next_state)
  {
    case SA:
    // Expect 1 on both A and B when all 4s are low
    z = z && a && b;
    if (z){ next_state = IDLE;}
    break;
    case SB:
    // Expect 1 on both A and B when all 4s are low
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// Upon receiving signal a, state changes to SA
// Upon receiving signal b, state changes to SB

 assert(reset == 1'b0); // Assert reset line of NAND gate
 assert(clk == 1'b0); // Assert clock to FSM
 open fsm/toolset.v reg_types.v FSM;
 open fsm/toolset.v axi/toolset.vAXI;
 open fsm/toolset.v axi/toolset.vAXI __StringBuf("ns_payload.v");
 open fsm/toolset.v axi/toolset.vAXI __StringBuf("ns_params.v");

 db"hdr_rw" next_state;//
 db "step_one#00" cur_state;

 followed by steps corresponding to the current state ):

 --------
   0. 1 when received, next
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
state machine begin
		switch( cur_state )
			case IDLE:
				if (a) {
					#ifdef SA
					next_state = SA;
					#endif
				}
				if (b) {
					#ifdef SB
					next_state = SB;
					#endif
				}
				break;
			case SA:
				if (b) {
					#ifdef SAB
					next_state = SAB;
					#endif
				}
				break;
			case SB:
				if (a) {
					#ifdef SAB
					next_state = SAB;
					#endif
				}
				break;
			case SAB:
				next_state = IDLE;
				break;
		end

end


================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk) begin
if (pulse_count != 0 ) 
next_state = cur_state <= IDLE ? SAB : SA;
else
next_state = cur_state == SAB ? IDLE : SB;
z <= next_state;
end
*/

STRING to_string(inout int& current_state, inout int& next, in int pulse_count, int order) // = _to_string(current_state, next, pulse_count, order)
{
  func_name = "strange";
  fout << "fsm name ";
    if (pulse_count == 0)
    {
      fout << "strange(" << string("order: ") << order << string(" ") << current_state << ". 0)\n";
    }
    else
      fout << "str
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always@(posedge clk)
        begin
            case cur_state,next_state:
      	      	      	      	      	      	      	   if cur_state = IDLE and geq(a, b) then begin next_state = SAB; break;
      	      	      	      	      	      		    case SAB,SA,SB:      	      	      	      	       	      	   if cur_state = IDLE and geq(a, b) then begin next_state = SA; break;
      	      	      	      	      	      		    case SA,SB,SAB:      	      	      	       	      	   if cur_state = IDLE and geq(a, b) then begin next_state = SB; break;
      	      	      	      	      	      		    case SB:      
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
        if (cur_state == IDLE) {
                if (!a && !b) cur_state = SA;
                if (a && !b) cur_state = SA;
                if (b && !a) cur_state = SB;
                if (a && b) cur_state = SAB;
        } else {
                next_state = cur_state;
                if (cur_state == SA && a && !b) next_state = SAB;
                if (cur_state == SB && a && b) next_state = SAB;
                if (cur_state == SAB && b && !a) next_state = SA;
                if (cur_state == SA && b && a) next_state = SAB;
                next_state = IDLE;// ends algorithm
        }
        
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
   cur_state <= next_state;

always @(OPEN_ITER dLOOP)
   next_state <= BIT(clk) & BIT(a) | (BIT(clk) & BIT(b) & BIT(a) & BIT(b))
   & BIT(z);


================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  case cur_state is
    IDLE:
      if( a == 1 and b == 1 )
      begin
        next_state = SAB; // Transition to SAB
      end
      else next_state = IDLE;  // transition to IDLE (0)
    case SAB:
      if( a == 1 )
      begin
        z = 1; // transition to 0
      end
      if( b == 1 )
      begin
        z = 0; // transition to 1
      end
      end
      else next_state = IDLE; // stay at IDLE
    case SA:
      if( b == 1 )
      begin
        z = 1; // transition to 0
      end
      next_state = SB; // IDLE
    case SB:
      if( a
================================================================
