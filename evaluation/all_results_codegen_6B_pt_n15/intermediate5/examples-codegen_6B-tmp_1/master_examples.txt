example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
	out <= load & load | sample(data, 65535, 31);
end
// left shift operation
module left_shift(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [4:0] data;
input load;
output reg [4:0] out;
always @(posedge clk or negedge reset) begin
	out <= load & load | sample(data, 224, 31) | sample(data, 128, 31) | sample(data, 64, 31) |
			sample(data, 32, 31) | sample(data, 16, 31) | sample(data, 8, 31);
end

/* 5 . 16bit - data to left shift and right shift operation
 // multiplexed for D-
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge load) out <= (data[3] ? data << (7-amount.offset) : out << amount);


module main(input [7:0] data);
input [7:0] data;
output reg [7:0] out;
always @();

//-------------------------------------------------------------------------------
// sum1 module
//-------------------------------------------------------------------------------
// main saturating adder for tvm.ADC
//@always-comb
tweak interp(tvm.ISR);

module sum1(clk,reset,data,load,out);
input clk,reset;
input [7:0] data;
input load;
output [6:0] out;
// 'data' will contain the result of a saturated addition
always @(posedge load) out <= add1((data[3]?data[3]:0), (data[1]?data
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg out<2:0> ;
regout INTLOGIC clk,reset;
always @(posedge clk)
  if (load) OUTPUT (index) = load & data;
  else out <<= amount;
end

// This specifies the number of registers of 'out' in the pipeline
#define nr_registers 5

// For comutation clusters
#define combo(...) \
  out__'combo_T1Eout' <= out & load; // lnk high, shift out as they arrive

// For grouping them at the delay line to reuse the dictionaries
#define group(...) \
  out0 <= out & clk; // lnk low, shift out as they arrive

module rx(clk,reset,amount,sw,din,rst,out);
  reg out<7:0> out0;
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always output reset;
assign out = (load == 1? data << (amount - 1) | data >> amount : left_rotate(out,load,amount,data));

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
module load_l(clk,reset,load,out);
input clk,reset;
input load;
output reg load_out;
/**********************************************************/
// rotate the carries J1k++;
module carry_rotate(clk,reset,carry,e,f,j1k_carry,c);
input clk,reset;
output carry;
input e,f,j1k_carry;
reg [2:0] carryz;
// short sum carry of J1k and add + j1k_carry + round up to 3 bits on binary carry
reg carry2,carry2_add,carry_add;
reg carry_align;
always @ (posedge clk or negedge reset)
    carry_align <= j1k_carry();
always @ (posedge clk or negedge reset)
    carry2 <= (carry
================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always(clk or reset)
begin
  if(load)
  begin
    if(data[0]) out = data;
    else out = out << amount;
    if(data[1]) out = out | data[1];
    else out = out << 8;
    if(data[2]) out = out | data[2];
    else out = out << 8;
    if(data[3]) out = out | data[3];
    else out = out << 8;
    if(data[4]) out = out | data[4];
    else out = out << 8;
    if(data[5]) out = out | data[5];
    else out = out << 8;
    if(data[6]) out = out | data[6];
    else out = out << 8;
  end
  out = out << amount;
================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
  out <= amount <<  (load == 1?data:((2 << (bitacc_tmp_out[bitacc_out_sel])) | out));
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
  if (load) out <= data; else out <<= amount;
end

// left shift operation with zero saturation for registers like RAM counters or roll-overs
// this one uses data source accumulator (A) as input, generates a carry,
// left shifts the input by one bit and returns the shifted register and accumulator.
module lshift(clk,reset,out);
input clk,reset;
input accumulator;
input output [7:0] out;
output reg [7:0] reg_data;
// outputs are generated in the EIF system - out sinks are input only
// this three module instances are needed to ensure the signals are passed
always @(posedge clk or negedge reset) begin
  if (accumulator) reg_data = out; else reg_data <<= 1;
================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] out_reg = "000000";
always @(posedge clk or negedge reset)
  out_reg = left_rotate(out_reg[6:0], load, out_reg[6:0] & amount[0] != 0, data[6:1] & load, out_reg[6:0] >>> amount[0]);

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  if(load)
    out = data;
  else
    out = left_rotate(data,amount,out);


================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
  out <= load ?
	  out << (data & 7) | (out >> amount)
	:
	out << amount << shift_left(out,amount) ;
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
if (load) out = data;
else out = out << amount | load << (amount-1);

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
	out <= left_rotate(load,data[7:0],out >> amount[0],data[7:0] >> amount[1],data[7:0] >> amount[2],data[7:0] >> amount[3],data[7:0] >> amount[4],data[7:0] >> amount[5],data[7:0] >> amount[6]);	
end

// ----------------------------------------------------------
// Rotate in register right shift operation

module right_shift(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output       int     out_odd;
output       int     out_even;
output       bool    out_carry;

// when
================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
begin
    if (load == 1'b1) begin
        out <= vreg(data,amount);    
	end
	if (reset == 1'b0) begin
		out <= vreg(0b0,0b11001'b1011); 
	end
end

@states { in_load,  one,  two,  out_one, out_two, out_three};

always @(posedge clk or posedge reset) begin
    if (reset == 1'b0) begin
        in_load <= 1',load;
    end
    else if (load == 1'b1) begin
        out_three <= in_load;
    else if (one == 1'b1) begin
        if (in_load != 1'b0) begin
		  out_two <= in_load;
        // else timing
================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
regout ISR(load_w) {
	if(load==HIGH) {
		out = data;
	}
	else {
		out <<= amount;
		out = out | (out >> subtract);
	}
}
// rotate the out register followed by right shift the out register by subtract from amount bits
regout ISR(rotate_in) {
	out = out << subtract;
	out = out | (out >> amount);
}
// last else, result is stored in out register

//************************************************************************
// ******************************          Interface           ***************************
//************************************************************************
// Shift radix 2 LFSR Galois LFSR in with poly m. Addition of Galois LFSR is done
// on falling edge of clock HI_LOW load. Poly is right-shifted by amount bits and
// then shifted by subtract
================================================================
