example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



module advshift_load(input clk,
input load,
input ena,
input [1:0] load_sel,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// load_sel: Controls whether the load is used for left or right shift,
//    and the amount to shift.
// 1'b0: Left shift.
// 1'b1: Right shift.


module advshift_load_ena(input clk,
input load,
input ena,
input [1:0] load_sel,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


                        // Example:
                        //                1
                        //             ___|___
                        //            |          |
                        //            |          |
                        //            V          V
                        //    1'b1         1'b1
                        //   ___|___       ___|___
                        //  |     |       |     |
                        //  |     |       |     |
                        //  V     V       V     V
                        //  1'b0  1'b0   1'b0  1'b0


//
// //The following code is commented out because the example above
// //was provided as an example of how to implement the shift register
// //behaviour.
//    if (load) {
//        dout << "load";
//        // load the shift register with data[63:0]
//        reg = data;
//    }
//
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(posedge clk) begin
    if (ena) begin
      if (load) begin
        q <= data;
      end
      else begin
        if (amount == 0) begin
          q <= data;
        end
        else begin
          if (amount == 1) begin
            q <= data << 1;
          end
          else begin
            if (amount == 8) begin
              q <= data << 8;
            end
            else begin
              q <= data << amount;
            end
          end
        end
      end
    end
  end


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module cwork(input clk,
output reg salida);
// salida: when clk is high, assign salida = data.
// if clk is low, do nothing.


module mux_load(
	input clk1,
	input clk2,
	input ena,
	input [7:0] s1,
	input [7:0] s2,
	output reg salida);
// salida: when clk1 or clk2 is high, assign salida = s1 or s2.
// If ena is high, assign salida = s2, else salida = s1.


module mux_ena(
	input clk1,
	input clk2,
	input ena,
	input [7:0] s1,
	input [7:0] s2,
	
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This is a part of experimental work, which might not be fully functional
// The purpose is to do some performance measurement of the hardware.
//
// Hardware configuration.
// Inputs:
// - clk: the clock signal.
// - load: the control signal for the shift register.
// - ena: the control signal for the shift register.
// - amount: an 8-bit control signal for the amount of shift.
// - data: an 8-bit control signal for the input of the shift register.
//
// Outputs:
// - q: the shifted output.

// The following hardware configuration is hard-coded into this module.
// The hardware is described here in an NDA.
// https://www.synopsys.com/docs/support/assembly/embedded/embedded_guide/embedded_guide_vct/embedded_guide_vct_
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


  always @(posedge clk)
  begin
    if (load)
      q <= data;
    else
      q <= shift(1'b0, amount, q);
  end

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift2(input clk,
input load,
input ena,
input [7:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift3(input clk,
input load,
input ena,
input [7:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high,
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// function [q] = advshift(clk, load, ena, amount, data);
function advshift(clk, load, ena, amount, data) {
   if (load == 1) {
      if (ena == 1) {
         if (amount == 0) {
            reg = data;
         }
         else {
            if (amount == 1) {
               reg[63:0] = data[63:0]; 
            }
            else if (amount == 8) {
               reg[63:0] = data[63:0];
            }
            else {
               temp = reg[63:0];
               reg[63:0] = data[63:0];
               data[63:0] = temp;
            }
         }
      }
   }
   else {
      if (ena == 1)
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// module advshift(input clk,
// input load,
// input ena,
// input [1:0] amount,
// input [63:0] data,
// output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


//module advshift(input clk,
// input load,
// input ena,
// input amount,
// input [63:0] data,
// output reg [63:0] q); 
//
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module main()
{ 
  int i;
  reg [63:0] q = 0;
  reg [63:0] r = 0;
  wire [63:0] d = 0;
  reg [63:0] x = 0;
  
  d += x;
  d[63] = 1;
  x |= d[63];
  d += x;
  d[63] = 1;
  x |= d[63];
  d += x;
  d[63] = 1;
  x |= d[63];
  q = advshift(clk, load, ena, amount, x, r);
  while (r != q)
  {
    if (ena)
    {
      if (amount == 2'b00)
      {
        x = r[63:0];

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


  var clk = 0;
  var load = 0;
  var ena = 0;
  var amount = 0;
  var shift_out = 0;
  var shift_in = 0;

  var q = 0;

  function main()
  begin
    clk <= 1;
    load <= 1;
    ena <= 1;
    amount <= 2'b00;
    if (amount == 2'b00)
    begin
      shift_out <= shift_in << amount;
      q <= shift_out;
    end else
    begin
      shift_out <= data << amount;
      q <= shift_out;
    end
  end

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Include the module basics
module top(
input clk,
input load,
input ena,
input [63:0] data,
output reg [1:0] load_bit,
output reg [63:0] data_bit);

// Simple register and MUX.
// In a register, this will be a 32-bit integer.
// In a MUX, this will be a 32-bit integer.
// A register can be combined with a MUX using "AND" and "OR"
// The MUX input is the register data, the MUX output is the MUX_INPUT.
// This could be used to control a LED using a register.
module reg_mux(input load,
input ena,
input [63:0] data,
output MUX_INPUT);

// Simple register and MUX.
// In a register,
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
		if (load)
			q <= data;
		else if (ena)
			q <= shift_reg(data, amount);
	end

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// reg_a: 8 bit data
// reg_b: 8 bit data
// reg_c: 8 bit data
// reg_d: 8 bit data
// reg_e: 8 bit data
// reg_f: 8 bit data
// reg_g: 8 bit data
// reg_h: 8 bit data
// reg_i: 8 bit data
// reg_j: 8 bit data
// reg_k: 8 bit data
// reg_l: 8 bit data
// reg_m: 8 bit data
// reg_n: 8 bit data
// reg_o: 8 bit data
// reg_p: 8 bit data
// reg_q: 8 bit data
// reg_r: 8 bit data
// reg_s: 8 bit data
// reg_t: 8 bit data
// reg_u: 8 bit data
// reg_v: 8 bit data
//
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(posedge clk)
  begin
    if (ena) q <= shift_load_reg(load, amount, data);
    else q <= shift_reg(data);
  end

================================================================
