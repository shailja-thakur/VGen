example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_sig(input clk,
input load,
input ena,
input amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_synced(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// shift_reg: 64-bit register to shift into and load from.
// shift_ena: register to shift into.
// shift_amount: bit position to shift left or right.
// shift_data: bits to shift into shift_reg.
// shift_out: register to shift out.

always @(posedge clk) begin
  if(ena) begin
    if(amount == 0) begin
      reg[63:0] = shift_data;
    end
    else if(amount == 1) begin
      reg[63:0] = shift_data >> 1;
    end
    else if(amount == 8) begin
      reg[63:0] = shift_data << 7;
    end
    else if(amount == 9) begin
      reg[63:0] = shift_data << 8;
    end
  end
  else
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This test verifies the shift operation.
// It compares the result of the shift operation with the expected value.
// The test is executed for every possible amount of shift.
testbench stimulus parallel_generated begin
	if (load) begin
		q <= data;
	end
	if (ena) begin
		if (amount == 0) begin
			q <= (data[63:0] & 0b00000) | (q[63:0] & 0b10000000);
		end
		else if (amount == 1) begin
			q <= (data[63:0] & 0b000001) | (q[63:0] & 0b10000000);
		end
		else if (amount == 2) begin
			q <= (data[63:0] & 0b000010) | (q[63:0] & 0b10000000);
		end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_reg(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_reg_v(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module clk2(input clk, output reg clk_out);
module clk3(input clk, output reg clk_out);
module clk4(input clk, output reg clk_out);
module clk5(input clk, output reg clk_out);
module clk6(input clk, output reg clk_out);
module clk7(input clk, output reg clk_out);
module clk8(input clk, output reg clk_out);
module clk9(input clk, output reg clk_out);
module clk10(input clk, output reg clk_out);
module clk11(input clk, output reg clk_out);
module clk12(input clk, output reg clk_out);
module clk13(input clk, output reg cl
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module shift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// When load is high, assign data[63:0] to shift register q.
// If ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module r_shift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module adv_shift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high,
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_in_clk(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_out_clk(input clk,
input load,
input ena,
input amount,
input [63:0] q,
output reg [63:0] data); 
// when load
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Synchronous load.
// This is the most common shift register design.
// It is a single register that holds the shifted value.
// The load signal is used to initiate the shift.
// The shift register is loaded with the value of the load signal.
//
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register is loaded with the value of the load signal.
// The shift register
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 
// The shift register is implemented as a register, with the data in the shift register being
// used to determine the next shift register.
reg [63:0] q = 0;

always @(posedge clk)
  if (load == 1)
    q = data;
  else if (ena == 1)
    q = shift_reg(q, amount, data);


================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The following example shows how to use the shift register in a loop.
// The shift register is loaded with the data provided as an argument.
// The shift register is shifted with the data provided as an argument.
// The result is then provided as an argument.
// The shift register is reset to the same value as the data.
module loop(input clk,
input load,
input ena,
input [63:0] data,
output reg [63:0] q);
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// The result is provided as an argument.
// The shift register is reset to the same value as the data.

// The following example shows how to use the shift register in a loop.
// The shift register is loaded with the data provided as an argument.
// The shift register
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The following is an example of how to use this module.
// The example is for a 64-bit shift register.
// This example is for a shift register with synchronous load.
// The shift register is 64 bits wide.
// The shift register is loaded with data.
// The shift register is shifted left or right.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
// The shift register is shifted by 1 bit or 8 bits.
//
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


#include "sys/std_types.h"
#include "sys/tasks.h"
#include "sys/task_create.h"
#include "sys/task_priority.h"
#include "sys/task_wait.h"
#include "sys/task_mode.h"
#include "sys/task_period.h"
#include "sys/task_wakeup.h"
#include "sys/task_wait_all.h"
#include "sys/task_wait_event.h"
#include "sys/task_wait_timeout.h"
#include "sys/task_set_event.h"
#include "sys/task_clear_event.h"
#include "sys/task_wait_all_clear.h"
#include "sys/task_wait_event_clear.h"
#
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module
  (
    input [1:0] load,
    input ena,
    input [63:0] data,
    output reg [63:0] q
  );
  
  // ----------------------------------------------------------

  always @(posedge clk)
  begin
    if (load)
      q <= data;
    else
      q <= data << amount;
  end
  
  // ----------------------------------------------------------
  
  
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// 64-bit arithmetic shift register.
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
// The shift register can be loaded with any value, and the shift register can be written to any
// of the outputs.
//
// The shift register is 64 bits wide.
//
// The 32-bit shift register is also known as the "rotate register".
//
// The shift register is implemented as two 32-bit registers, and the load and write bit is
// implemented as a 3-bit register.
//
// The shift register is implemented using a "rotating register" technique.
//
// The register can shift left or right, with or without carry.
//
// The register can shift by 1 or 8 bit positions, with or without carry.
//
// If the amount is 0, the shift register is loaded with the value of the
================================================================
