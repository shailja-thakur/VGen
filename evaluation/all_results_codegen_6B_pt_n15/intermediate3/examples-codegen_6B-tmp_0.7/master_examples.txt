example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
    r_reg <= 1;
    r_next <= r_reg ^ feedback_value;
    q <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
always @(posedge clk)
begin
    if (reset)
    begin
        r_reg <= 1;
    end
    else
    begin
        if (r_reg[0] == 0)
        begin
            r_next[0] <= r_reg[1];
            r_next[1] <= r_reg[2];
            r_next[2] <= r_reg[3];
            r_next[3] <= r_reg[4];
        end
        r_reg <= r_next;
    end
end

// Local parameters (these are not matched to the hardware)
parameter H = 4;
parameter W = 32;

// Local signals
input [H:0] clock;
input [W - 1:0] reset;

// Output signals
output [
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset)
    begin
        r_reg <= 1;
        q <= 0;
    end
    else
    begin
        r_reg <= r_reg | (1 << 4);
        feedback_value <= r_reg[5];
        q <= (r_reg << 5) | ((r_reg[3] & 0x7) << 2) | (feedback_value << 1) | (r_next[3] & 0x1);
    end
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset == 0) begin
        r_reg <= 1;
    end
    else begin
        r_next <= (r_reg[4:0] ^ (r_reg[3] << 2) ^ (r_reg[2] << 4)) & 0x1F;
        if (r_reg[4] == 0) feedback_value <= r_reg[3];
        else feedback_value <= r_next;
        q <= r_reg[4:0];
    end
end
`

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
begin
    r_reg <= ( r_next XOR ( ( (r_next XOR r_reg) >> 5 ) & 1 ) );
    if ( r_reg ) r_next <= ( r_reg >> 4 );
    else r_next <= ( r_reg << 4 );
    q <= r_next;
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_next[2:0] ^ r_next[4:0] ^ feedback_value;
        r_next <= r_reg[5:0];
        feedback_value <= r_next[4:0];
    end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg ^ ((r_reg >> 3) & 0b10);
    feedback_value <= r_next[1];
    q <= r_reg;
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(*)
start
begin
    r_next = (r_reg >> 4) | (r_reg << 4);
    r_reg = r_next;
    case (r_next)
        0100:
            feedback_value = 0x05;
        case (feedback_value):
            q <= (r_next ^ ((r_next >> 5) ^ (1 << 3)));
    end
end


================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
begin
    if( reset == 1 ) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_next;
        if( r_reg[4] == 0 ) begin
            r_reg <= ( r_reg[0] xor 0x04 );
        end
        feedback_value <= ( r_reg[4] xor 0x02 );
    end
end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = ((r_reg[5] ^ r_reg[3]) xor r_reg[4:0]) xor (r_reg[3] << 4);

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
begin
    r_reg <= 0;
    r_next <= r_reg;
    if ( reset )
        r_reg <= 0;
    else
        r_next <= r_reg << 5;
    feedback_value <= r_next[5] ^ r_next[3];
    q <= r_next << 3;
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (
    clk,
    reset
)
begin
    if (reset) 
    begin
        r_reg <= 0;
        r_next <= 0;
        feedback_value <= 0;
    end
    else begin
        r_reg <= r_next[4:0] ^ (r_next[4:0] << 1) ^ (r_next[3:1] << 2) ^ (r_next[2:0] << 3);
        r_next <= r_reg[4:0];
        feedback_value <= (r_reg[3:0] & 0b0011_1111) << 4;
    end
end

// input and output signals
signal clk_i;
signal reset_i;
signal q_i;

// module for tracing signals
// module aclk_in
================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset)
    begin
        r_reg <= 0b00000111;
    end
    else
        r_reg <= r_next ^ feedback_value;
end

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    r_reg = 1;
    r_next = r_reg ^ feedback_value;
    q <= r_next;
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always( clk or reset) r_reg <= r_next;

//
// Bit reverse LFSR with taps at bit positions 3 and 4
module lfsr_br(
    input clk,
    input reset,
    output [5:0] q
); 
reg [5:0] r_reg;
wire [5:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 3 and 4 of r_reg to feedback_value
// assign feedback concatenated with 5 least significant bits of r_reg to r_next
// assign r_reg to the output q
always( clk or reset) r_reg <= r_next;

//
// Additive LFSR with taps at bit positions 3 and 4
================================================================
