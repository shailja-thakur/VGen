example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    always @(posedge clk) 
    begin
        // Case 2'b00(RC)
        if (load) begin
           // Case 3'b001(RC)
             q <= {data[103:96], data[111:104], data[119:112], data[127:120], data[71:64], data[79:72], data[87:80]};  //xor |xori ^ xori
        end
        else
        begin
          // Case 3'b010(RC)
            q <= {data[103
================================================================
