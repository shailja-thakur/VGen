// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "// Set to state 1 to state 0.\nalways @(posedge clk)\nbegin\n  if (reset == 1'b1)\n  begin\n    state <= 1'b0;\n    next_state <= 1'b0;\n  end\n  else\n  begin\n    state <= next_state;\n    if (in == 1'b1)\n      next_state <= 1'b0;\n    else if (state == 1'b0)\n      next_state <= 1'b1;\n    else if (state == 1'b1)\n      next_state <= 1'b0;\n  end\nend\n\nassign out = (present_state == 1'b1) ? 1'b1 : 1'b0;\n\n"
    }
  ],
  "created": 1663299169,
  "id": "cmpl-rbUdUJO0KA8xJIIlx1wPgIK7XJySP",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 199,
    "prompt_tokens": 148,
    "total_tokens": 347
  }
}