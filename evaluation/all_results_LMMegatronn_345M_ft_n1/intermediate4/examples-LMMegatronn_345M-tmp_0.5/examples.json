// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "// Set next_state to 0 in state 0.\nalways @(posedge clk)\nbegin\n  if (reset)\n    present_state <= 0;\n  else\n    present_state <= next_state;\nend\n// A Moore state machine for outputs.\nalways @(present_state, in, out)\nbegin\n  case (present_state)\n    0 : begin\n      if (in==0)\n        next_state = 1;\n      else if (in==1)\n        next_state = 2;\n      else if (in==2)\n        next_state = 3;\n      else if (in==3)\n        next_state = 4;"
    }
  ],
  "created": 1663299170,
  "id": "cmpl-svu0e6SAbVGM48SD08rFpugADfKGU",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 200,
    "prompt_tokens": 148,
    "total_tokens": 348
  }
}