example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module main(input clk,
input [63:0] data,
output reg [63:0] q);
// input clk is high, output q is the same as input data.
// input clk is low, output q is the same as the last shifted value.

module shift_reg_test(input clk,
input [63:0] data,
output reg [63:0] q);
// input clk is high, output q is the same as input data.
// input clk is low, output q is the same as the last shifted value.

module shift_reg_test2(input clk,
input [63:0] data,
output reg [63:0] q);
// input clk is high, output q is the same as input data.
// input clk is low, output q is the same as the last shifted value.
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


//---------------------------------------------------------
//  Avalon7-specific code
//---------------------------------------------------------

// The Avalon7 shift register is a 32-bit register that can be used to
// implement various shift functions.
//
// The register is implemented as a register of 32-bit words.
// The register is initialized to all 1's.
// The register can be loaded with a 32-bit value.
// The register can be shifted left or right.
// The register can be shifted by 1 or 8 bits.
//
// The register is clocked by the rising edge of the clock input.
// The register is cleared by the falling edge of the clock input.
//
// The register can be configured to be output or input.
// The register can be configured to be reset or not.
// The register can be configured to be synchronous or asynchronous.
//
// The register can be configured to be a register or a
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// module advshift(input clk,
// input load,
// input ena,
// input [1:0] amount,
// input [63:0] data,
// output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// #define ADVSHIFT_LOAD 0
// #define ADVSHIFT_LOAD 1
// #define ADVSHIFT_LOAD 0
// #define ADVSHIFT_LOAD 1
// #define ADVSHIFT_LOAD 0
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module main(input clk,
input [63:0] data,
output reg [63:0] q);
// input data: 64 bit register.
// output q: 64 bit register.
// The register q is the result of shifting data by amount.

module int_to_bool(input [63:0] data,
output reg [1:0] q);
// input data: 64 bit register.
// output q: 1 bit register.
// The register q is the result of shifting data by 1.

module bool_to_int(input reg [1:0] q,
output reg [63:0] data);
// input q: 1 bit register.
// output data: 64 bit register.
// The register data is the result of shifting q by 1.

module int_to_bool_dummy(input [63:0] data,
output
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The shift register is loaded with data[63:0] when load is high.
// The shifter is enabled when ena is high.
// The shifter shifts q by amount bits, either left or right.

always @(posedge clk)
  if (load)
  begin
    q <= data[63:0];
  end
  else if (ena)
  begin
    if (amount == 0)
      q <= data[63:0];
    else if (amount == 1)
      q <<= 1;
    else if (amount == 8)
      q >>= 1;
    else if (amount == 9)
      q += data[63:0];
    else if (amount == 10)
      q -= data[63:0];
  end
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The shift register is implemented with a queue of bits.
// The first bit in the queue is the least significant bit.
// The last bit in the queue is the most significant bit.
// The queue contains bits shifted out to the left, then shifted in to the right.
// The queue 'shift' operation is done by discarding the least significant bit,
// then adding the next bit in the queue.
// The register 'shift' operation is done by discarding the least significant bit,
// then adding the next bit in the queue.

// The register 'shift' operation is done by discarding the least significant bit,
// then adding the next bit in the queue.
// The register 'shift' operation is done by discarding the least significant bit,
// then adding the next bit in the queue.

// The register 'shift' operation is done by discarding the least significant bit,
// then adding
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Testbench

#include "sys/delay.h"

//! @brief Выводит состояние магического маршрута, на новое время
//! события запуска программы или ожидания программы завершения.
//! @param clk - общая флаг запуска программы
//! @param load - фл
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Synchronous load register
reg [63:0] load_reg;

// Shift register register
reg [63:0] shift_reg;

// Enable signal
reg enable;

always @(posedge clk)
begin
    if (ena)
    begin
        if (load)
        begin
            load_reg <= data;
        end
    end
    if (amount == 1'b0)
    begin
        shift_reg <= load_reg;
    end
    if (amount == 1'b1)
    begin
        shift_reg <= shift_reg << 8;
    end
end


================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// example:
// clk = 1'b1
// load = 1'b1
// ena = 1'b1
// amount = 1'b0
// data = 0x00000001
// q = 0x00000001

always @ (posedge clk)
    if (ena)
    begin
        if (load)
            q <= data;
        else
            q <= 0xff;
    end


================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



module advshift_load(input clk,
input load,
input ena,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



module advshift_load_ena(input clk,
input load,
input ena,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module shift_reg(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The following modules are used to implement the shift register.
// They are all implemented with the same clock and logic.
module shift_reg_bit(input clk,
input load,
input ena,
input [1:0] bit
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module test_advshift(input clk,
input ena,
input [1:0] load,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// load: The load signal controls whether the shift register is loaded or not.
//       When high, the shift register is loaded with data.
//       When low, the shift register is not loaded.
//       The load signal is also used to load the shift register with the next value.
//       If load is high when the next value arrives, then the shift register is
//       shifted to the next value.
//       If load is low when the next value arrives, then the shift register is
//       not shifted to the next value and the shift register is loaded with
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This module can be used as a shift register.
// The shift register can be loaded from any source.
// The shift register can be shifted left or right by any amount.
// The shift register can be loaded from any source.
// The shift register can be shifted left or right by any amount.

// There are two ways to implement this module.
// 1. Use a state variable.
// 2. Use a register.
//
// In the first way, the register is used as a state variable.
// The register can be loaded from any source.
// The register can be shifted left or right by any amount.
// The register can be loaded from any source.
// The register can be shifted left or right by any amount.

// The second way uses a register.
// The register is used as a state variable.
// The register can be loaded from any source.
// The register can
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The following implementation is a bit more verbose than the above.
// It uses a state machine to shift by a number of bits, requiring a
// bit of state to remember which direction we're in.
// The state machine is implemented as a FSM, using a state transition
// function to move between states.
// The state transition function takes a new state and an old state,
// and returns the new state.
// The state transition function also takes a shift amount, and the
// current state, and returns the new state.
// The state transition function also takes a bit of the shift
// register, and the current state, and returns the new state.
// The state transition function is used to implement the shifter.
// The shifter is implemented as a state machine, using the state
// transition function to move between states.
// The state transition function is also used to implement the load
// signal.
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



module main(input [63:0] data,
input [1:0] load,
input ena,
input [63:0] shift_data,
output reg [63:0] q);

//assign data to shift_data
assign shift_data = data;

//assign load to ena
assign ena = load;

//assign shift_data to q
assign q = shift_data;

//always enable shifter
always @(posedge clk)
begin
   if (ena)
   begin
      if (load)
      begin
         if (amount == 0)
         begin
            shift_data = shift_data << 1;
         end
         if (amount == 1)
         begin
            shift_data = shift_data << 8;
         end
         if (amount == 2)

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// #include "systemc.h"

#include "advshift.h"

SC_MODULE(shift) {
    advshift(clk, load, ena, amount, data, q);
}

================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_clk(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

module advshift_load(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module 
  (
    input [63:0] data,
    output reg [63:0] q
  );

// The shift register is in the state q.
// The shift register has the input data.
// The shift register is ready to be shifted.
// The shift register is shifted by the amount.
// The shift register is ready to be shifted again.
// The shift register has the output data.
// The shift register is ready to be shifted again.

// The shift register is shifted by the amount.
always @(posedge clk)
  if (load)
    q <= data;
  else
    if (ena)
      q <= shift_reg(data, amount);


================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This is a test bench for the advshift module.


================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Testbench
module testbench()
  (
    input clk,
    input [63:0] data,
    output reg [63:0] q,
    output reg [63:0] data_out
  );
  (
    clk <= 1;
    data <= data_out;
  );

================================================================
