example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
out <= and(a, b);

module and_gate_alt( 
    input a, 
    input b, 
    output out );

    // assign the AND of a and b to out
    // but this is a bad idea
out <= and(a, b);

// ----------------------------------------------------------------------------

================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    
out = and( a, b );

and_gate(
    a, b, out );

// The module and_gate is implemented as a function.

function and_gate( 
    input a, 
    input b, 
    output out ) {
    out = and( a, b );
}

// Design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assing the OR of a and b to out
    
out = or( a, b );

or_gate(
    a, b, out );

// The module or_gate is implemented as a function.

function or_gate( 
    input a, 
    input b, 
    output out ) {
    out = or( a, b
================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = a & b;


================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = and ( a, b );


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    void logic_and( 
        out, 
        a, 
        b );


================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    
out <= and( a, b );


================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = a & b;

================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk)
    begin
        out <= a & b;
    end

================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    wire out = and(a, b);


================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk or negedge rst)
    out <= a & b;

module and_gate2( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk or negedge rst)
    out <= a & b;

module and_gate3( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk or negedge rst)
    out <= a & b;

module and_gate4( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk or ne
================================================================
example-10: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    
filter: procedure( 
    input a, 
    input b, 
    output out 
    );

    // call and_gate or not and_gate
    
filter: procedure( 
    input a, 
    input b, 
    output out 
    );

    // implement the gate
    
output: procedure( 
    input a, 
    input b, 
    output out 
    );

    // define a procedure that uses and_gate
    
output: procedure( 
    input a, 
    input b, 
    output out 
    );

    // use the AND gate to combine two numbers
    
output: procedure( 
    input a, 
    input b, 
    output out 
    );

================================================================
example-11: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = and(a,b); 


================================================================
example-12: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @ (posedge clk)
    out <= and(a, b);

    // never


================================================================
example-13: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    
out <= a & b;


================================================================
example-14: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out.
    assign out = and( a, b );


================================================================
example-15: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

output and_out(
    input a,
    input b);

module and_gate_and_assign( 
    input a, 
    input b, 
    output out);

// Declare an AND gate that outputs its inputs

module and_gate_declaration( 
    input a, 
    input b, 
    output out);

module and_gate_declaration_extend( 
    input a, 
    input b, 
    output out, 
    output out2);

module and_gate_declaration_extend_2( 
    input a, 
    input b, 
    output out, 
    output out2);

module and_gate_declaration_extend_3( 
    input a, 
    input b, 
    output out, 

================================================================
example-16: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out 
out <= and(a, b);

================================================================
example-17: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

output and_gate(input a, 
    input b) {
    return a & b;
}


================================================================
example-18: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = a & b;



================================================================
example-19: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    output logic and_gate( 
        input a, 
        input b, 
        output out ) {
        out = and( a, b );
    }

// The AND gate has two output pins

module or_gate( 
    input a, 
    input b, 
    output out1, 
    output out2 );

// We can connect the OR gate to one of the AND gates

module and_gate_or( 
    input a, 
    input b, 
    output out1, 
    output out2 );

// OR gate connects the output of an AND gate to a single output pin

module and_gate_or( 
    input a, 
    input b, 
    output out );

// We can connect the OR gate to one of the AND gates

module and_gate_or
================================================================
