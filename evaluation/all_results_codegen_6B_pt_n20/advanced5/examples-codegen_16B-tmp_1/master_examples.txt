example-0: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//Note that once one of the signals is low, it will remain low.
property outputs = {
	z <= S1 | a <- S2 | b <- S1;
	z <= S1 | a <- S2 | b <- S3;
	z <= S1 | a <- S2 | b <- S1;
	z <= S1 | a <- S2 | b <- S3;
	z <= S2 | a <- S3 | b <- S1;
	z <= S2 | a <- S3 | b <- S1;
	z <= S2 | a <- S3 | b <- S2;
	z <= S2 | a <- S3 | b <- S3;
};

//All the transitions of this FSM are enabled at the same time.
behavior bzro =
{
	//ignore_step transactition <- a <- 1 | b <- 0
================================================================
example-1: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
function input_state(){
if (( (z == 1) && (a != 0) ) || ( (z == 1) && (b != 0) )) {next_state = S1;}
else if ( ( (z == 0) && (a != 0) ) || ( (z == 0) && (b != 0) )) {next_state = S2;}
else if (( (z == 5) && (a != 0) ) || ( (z == 5) && (b != 0) )) {next_state = S3;}
else {next_state = IDLE;}
}


A:  
enable port a;
 decode undefined;
if (port_{a} == 1) GOTO A;
  fork s_a b;
expect in_ff or_ss (1,0,0,0, &next_state);
next_state = IDLE;


================================================================
example-2: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
always @(posedge clk) begin
    if (cur_state == IDLE) begin
        	cur_state == next_state;	
			
			flag = s == a?'a':b?'a':'b';
			z == 1'?next_state = S3:'next_state = S2';
		
		end
	end
	
notch: always begin
	if(s == a) begin
		next_state = S1;
	end
	if(s == b) begin
		next_state = S2;
	end
end

notch_reset: always begin
reset <= '1';
end

line1: always begin
	if(p == a) begin
		next_state = S1;
	end
	if(p == b) begin
		next_state = S2;
	end
	
================================================================
example-3: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_prev(
input clk, reset, 
input a, b, z,  output monitor, 
input A, B, C, D, E, f, g, H, I, J, k, L, M, N, o, p, q, r, s, S, t, U);//, X, Y);
parameter IDLE = 0,
S1 = 1,
S2 = 2;
reg state;
module abro_fsm (
input clk, reset, 
input a, b, monitor, 
input A, B, C, D, E, f, g, H, I, J, k, L, M, N, o, p, q, r, s, S, t, U, Z);//, X, Y);
parameter IDLE = 0,
S1 = 1,
S2 =
================================================================
example-4: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
begin mod_z;
var double iq1, iq2; //This will get the states' outputs with each order.
if (a = 1) {
  iq1 = 1;
  iq2 = 0;
} else if (b = 1) {
  iq1 = 0;
  iq2 = 1;
} else {
  iq1 = 0;
  iq2 = 0;
}
if(cur_state == IDLE) {
  if((iq2 && iq1)) {
    if(next_state == 1) next_state = 2;
    if(next_state == S1) next_state = S2;
    else next_state = IDLE;
  }
}
if(cur_state == S1) {
  if((iq1 && iq2)) {
    if(next_state == 2) next
================================================================
example-5: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
begin
  cur_state = IDLE;
    z <= IDLE;
  end
begin
  switch (cur_state)
  begin
    case IDLE:
    begin
      if (clk == S1 || clk == S2 || clk==S3)
      begin
        if a == S3 || b == S3 ||  a == b
        begin
          z <= S3;
          cur_state = S3;
        end
      end;
      if a == S2 || b == S2 ||  a == b
      begin
        z <= S2;
        cur_state = S2;
      end;
      if a == S1 || b == S1 ||  a == b
      begin
        z <= S1;
        cur_state = S1;
      end;
    end
  end
end
end
================================================================
example-6: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
always @(posedge clk)
if(next_state == IDLE)
{
  switch(cur_state){
    case IDLE :
      next_state = S1;
      break;
    case S1 :
      if(a) next_state = S1; else next_state = S2;
      break;
    case S2 :
      if(~b){ next_state = S1; }else next_state = S3;
      break;
    case S3 :
      next_state = IDLE;
      break;
  }
}

always @(posedge clk)
//This model assumes that there is only one level of hierarchy.  Tree designs caused errors.
//Following is how to convert one level hierarchy into another (use any level of hierarchy)
// by squaring the hierarchy.
reg [3:0] row
================================================================
example-7: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The input signals are routed through the RB registers 
//if they are Led usundecar, make them high for a asituation of 0, otherwise low as it
//is the case ie, you can have max 3 bases 
mmcpr_FFMMC1_A_input;
  `

wire claser_b;



for( base_addr=1;base_addr<3;base_addr++ )
	
{
	for( claser=0; claser<8; claser++ )
		for( vclaser=0; vclaser<1; vclaser++ )
#pragma HLS interface segments=CLASSEVER
			task automatic "output, full,"
	{
		//constimnulate the outputs from MMC1, based in A that are connected to the riffle 
		full:if( L
================================================================
example-8: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//Furthermore this class defines signal state change to be performed on low to high transition
#pragma NOISE_START(a,1) //  a passive no範の磁位決フィルタ
#pragma NOISE_START(b,1)  // bの磁位決フィルタ
#pragma NOISE_START(clk,1)   // 割込みのカリー操作ラジオのフィルタ
#pragma NOISE_START(reset,1)   // 引き分けラジオのフィルタ
reg [3:0] ordered_idx,in_idx; //indexの仮想関数，複数のケージに対し
================================================================
example-9: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//It may come in a parrallel high. However upon reset you are put into the idle FSM.
module osc_processor( clk, adr, a_high, a_low, b_high, b_low, RESET, ADR, A_MUX, CLS);
  instantiation
//    UNDEFINED : (&RESET, &ADR, &A_MUX, &CLS);
    portmap(&RESET, 2);
    portmap(&CLS, 1);
    ports( (*clk, 1), (*adr, 0), (*a_high, 0), (*a_low, 0), (*b_high, 0), (*b_low, 0));
    outputb -Z((*cur_state),(*next_state));
    always@(posedge clk) begin
        next_state <= (*ADR==4)?
================================================================
example-10: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.

always @() begin
    if (1'b00==a)
        next_state = IDLE;
    else if (1'b00==b)
        next_state = S2;
    else if (reset)
        next_state = IDLE;
    else if (cur_state == IDLE)
        begin
	// Move to S1 when a goes low.
        if (1'b1==a)
            next_state = S1;
        // Move to S3 when b goes low.
        else if (1'b1==b)
            next_state = S3;
        end
    else if (cur_state == S1)
        begin
	// Move to S2 when b goes low.
        if (1'b1==b)
            next_state = S2;
        // Move to S1 when
================================================================
example-11: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This can be implemented using either the C++-style double buffered shift register with the Q&D implementation of the FSM.
CSR gsbl(
IDLE,
S1, !a | b, 
S2, b,
S3, !b);

//This is an FSM that invert the logic output to write.
module invert( input i );
	input z;
	output out;
	number i_val, bit_num, mask;

	reg [1:0] bit_num_r, bit_num_w;
retrieve
	bit_num_r <= bit_num,
	bit_num_w <= bit_num + 1,
	out(this.out);
enumeration <bit_num+1> act;
reg [bit_num + 1:0] bit_value;
reg [1:
================================================================
example-12: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The input signals a or b may never repeat their respective states, in the case where this FSM does not run.
//Note that minimum and maximum deltas are specified by the unit and not by the FSM
// Note also that the implementation often generates "unused and unspecified regions" as the actual behaviour may not be clear.
always @(posedge clk)
	cur_state <= next_state;
	next_state <= (((a == HIGH && (b == HIGH || cur_state == IDLE)) ? S1 : IDLE));
	next_state <= (((a == LOW  && (b == HIGH || cur_state == IDLE)) ? S3 : IDLE));
	next_state <= (((a == HIGH && (b == LOW  || cur_state == IDLE)) ? S2 : IDLE));
	next_state <= (((a == LOW  && (b
================================================================
example-13: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//a should come as 0 or 1 depending on the order or reverse according to the graph
module gavro(
input clk, reset, a, b,   //Permutation of the pin signal order is irrelevant based upon the value of this parameter.
output z,  //Permutation of the pin signal order is irrelevant based upon the value of this parameter.
output out_three); 

reg [1:0]        flagHoldCRC;
reg[(a + (b ? 1 : 0) ):0]  hold_register;

reg byte last_byte;

always clk_m=~clk;
always clk_n=~clk;
always clk_u=~clk;                                          // According to s1 r1 we know one of the clock edges is high high enough to make state 
always clk_v=~clk;                                          
================================================================
example-14: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
FSM_Z rules;
assign  cur_state = next_state   = IDLE;
wire z_one = ( cur_state == S2 || cur_state == S3 );
AFN
check( a );
execute_rule( A );
rules();
AFN
check( b );
execute_rule( B );
rules();
AFN
check( clk  || z_one );
execute_rule( C );
rules();
//Simulation always ends with vf({105 ,105 ,105 ,105 ,105 ,105 },{105})
assign next_state = S1;
rules();
assign next_state = S2;
rules();
assign next_state = S1;
rules();
assign next_state = S3;
rules();


//This is a couple of counter for how many transitions were generated.
//Whenever clock
================================================================
example-15: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
FSM abro_out(
input clk,
input [1:0] c0, input [1:0] c1,
output z,
input a, input b
SUPPORT (true, true, true, true) = PERMINTEXT , PERMINTEXT , PERMINTEXT , PERMINTEXT ; 
CONST int sz  = 5;
//CONST int fsk = S1;
reg int i;
always @(posedge clk)
begin
    if (c0 == fsk && c1 == fsk)
        a ? next_state = S1 : next_state = fsk;  
    else if (c0 == fsk) 
        b ? next_state = S2 : next_state = fsk; 
    else if (c1 == fsk) 
        a ? next_state = S3
================================================================
example-16: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_head(
output z,
input a, b);
// This is an FSM with the output of TBC and TOO high when reset is high, and LOW when else.
module abro_tail(
 input clk,
#if 1==1
a_tbc, b_tbc,
#elif 1==0
a_too, b_too,
#else
a_fs1, b_fs1, a_fs2, b_fs2, a_fs3, b_fs3,
#endif
 r_reset,
 output z,
 output f_sleep);

// This module can be entered only trough Suspend sleep
module abro_suspend(
input clk,
input iack,
input cki,
input cko,
input auto1,
input S1_in,
input S2_in,
================================================================
example-17: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
clk <= 1'b0;
//Associate a or b to each FSM state
always @(posedge clk) begin
  cur_state <= a; next_state <= b;
   if( next_state == S1 ) begin
	next_state <= S2;
	end
   else if( next_state == S2 ) begin
	next_state <= S3;
	end
   else if( next_state == S3 ) begin
	next_state <= 0;
	end

//-------------- Circuit Init ---------------
/************  Idle Case ***********
next_state <= IDLE;
cur_state <= IDLE;

/***************** Connect code4in1 ********
delay (3.1e-9);
BGL signal1 <= '0';
BGL signal2 <= '0';
delay (cc_10ns);

================================================================
example-18: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//Assume a' and b' both are high when sign'=1 and low when sign'=0.
//The output shifts between two random states only when the state moves to a state where a' and b' are at a different threshold
with clk,a,b,cur_state,next_state;
begin
	if(a = 1 and b' = 0 and sign' = 1) next_state = S1;
	else if (a' = 1 and b = 0 and sign' = 0) next_state = S3;
	else if (a' = 1 and b' = 0 and sign' = 1) next_state = S2;
	else next_state = IDLE;
end
end abro;

================================================================
example-19: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//Accesses to this fsm are all read in the tranversal function abrotranversal.
module abro2(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when the input signals a are in the given order.
//Accesses to this fsm are all read in the tranversal function abrotranversal.
module abro3(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_
================================================================
