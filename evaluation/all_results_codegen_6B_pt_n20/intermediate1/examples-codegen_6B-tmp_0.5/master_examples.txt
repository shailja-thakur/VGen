example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_inst( 
input a, b,
output cout, sum,
input carry_in );

always @(posedge clk)
  cout <= sum;

always @(posedge clk)
  sum <= a + b + carry_in;


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_rst( a, b, cout, sum );

function half_adder_dut( a, b, cout, sum );

function half_adder_stim( a, b, cout, sum );

function half_adder_clk( a, b, cout, sum );

function half_adder_load( a, b, cout, sum );

function half_adder_store( a, b, cout, sum );

function half_adder_in( a, b, cout, sum );


// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

function full_adder_rst( a, b, cout, sum );

function full_adder_dut( a, b, cout
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
sum <= a + b + (cout & 0x8000);

always @(posedge clk)
cout <= (a & 0x8000) + (b & 0x8000) + (sum & 0x8000);

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_dut( 
input a, b,
output cout, sum );

half_adder( 1, 0, 1, 1 );
half_adder( 1, 1, 1, 0 );
half_adder( 0, 1, 0, 1 );
half_adder( 1, 1, 1, 1 );
half_adder( 1, 1, 0, 1 );
half_adder( 1, 1, 0, 0 );
half_adder( 0, 1, 1, 1 );
half_adder( 0, 1, 1, 0 );
half_adder( 0, 1, 0, 1 );
half_adder( 1, 1, 1, 1 );
half_adder( 1, 1, 0, 1 );
half_adder( 1, 1, 0, 0 );
half_adder( 0, 1, 1, 1 );
half_adder( 0,
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

def half_adder( a, b, cout, sum ):
    sum = add( a, b, cout, sum )
    cout = shift_left( cout )
    return cout, sum


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_module( a, b )
endfunction

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

function full_adder_module( a, b )
endfunction

// This is a carry-out only adder. A carry-out only adder adds two bits and produces a sum.
module carry_out_adder( 
input a, b,
output cout, sum );

function carry_out_adder_module( a, b )
endfunction

// This is a carry-out only half adder. A carry-out only half adder adds two bits and produces a sum.
module half_carry_out_adder( 
input a, b,
output cout, sum );

function
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected to the 16-bit input and output ports.
// The half adder must be connected
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum, carry-out and carry-in.
module full_adder( 
input a, b,
output cout, sum, carry_in );

// This is a carry-in adder. A carry-in adder adds two bits and produces a sum and carry-in.
module carry_in_adder( 
input a, b,
output cout, sum, carry_in );

// This is a carry-out adder. A carry-out adder adds two bits and produces a sum, carry-out and carry-in.
module carry_out_adder( 
input a, b,
output cout, sum, carry_out );

// This is a carry-both adder. A carry-both adder adds two bits and produces a sum, carry-out and carry-in
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder consists of two inputs, two outputs and a carry-out.
// The carry-out is used to add two bits together.
// The sum is the sum of the two inputs.
function half_adder_process( 
input a, b, 
output cout, sum );

// The half adder is a module. The inputs are two bits, a carry-out and a sum,
// and the outputs are two bits.
module half_adder_module( 
input a, b, 
output cout, sum );

// The half adder is a submodule. The inputs are two bits, a carry-out and a sum,
// and the outputs are two bits.
submodule half_adder_submodule( 
input a, b, 
output cout, sum );

// The half adder is a submodule. The inputs are two bits
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

//#define add( a, b ) a = a + b + carry_out
#define add( a, b ) a = a + b

//#define mult( a, b ) a = a * b
#define mult( a, b ) a = a * b + carry_out

//#define add_carry_out( a ) a += carry_out
#define add_carry_out( a ) a = a + 1

#define carry_out (1)

//#define sum( a ) a
#define sum( a ) a

//#define carry_out (0)
#define carry_out (0)

//#define sum( a ) a
#define sum( a ) a

//#define carry_out (0)
#define carry_out (0)

//#define sum( a ) a
#
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_output() {
    if( sum == a || sum == b ) {
        cout = sum;
    } else {
        cout = sum + a + b;
    }
}

function half_adder_sum() {
    if( a == b ) {
        sum = a;
    } else {
        sum = a + b;
    }
}

function half_adder_carryout() {
    if( sum == a + b ) {
        sum = sum;
    } else {
        sum = sum + a + b;
    }
}


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The output is the sum.
output sum( cout, sum );

// The output is the carry-out.
output carry_out( cout, sum );

// The sum is the carry-out.
input sum( cout, sum );

// The carry-out is the sum.
output carry_out( sum, cout );


// The half adder adds two bits to produce a sum.
function half_adder( 
input a, b,
output cout, sum );

// The half adder adds two bits to produce a sum.
// The output is the sum.
output half_adder( 
input a, b,
output cout, sum );

// The half adder adds two bits to produce a sum.
// The output is the sum.
output half_adder( 
input a, b,
output cout, sum );

// The
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

half_adder( a, b, cout, sum )
{
    int sum = a + b;
    cout = sum;
    sum = sum & 0x7;
    sum = sum << 1;
    sum = sum + b;
    sum = sum & 0x7;
    sum = sum << 1;
    sum = sum + a;
    sum = sum & 0x7;
    sum = sum << 1;
    sum = sum + b;
    sum = sum & 0x7;
    sum = sum << 1;
    sum = sum + a;
    sum = sum & 0x7;
    sum = sum << 1;
    sum = sum + b;
    sum = sum & 0x7;
    sum = sum << 1;
    sum = sum + a;
    sum = sum & 0x7;
    
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a;
input b;

output cout;
output sum;

// This is a full adder. A full adder adds two bits and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

input a;
input b;

output cout;
output sum;

// This is a carry-out adder. A carry-out adder adds two bits and produces a sum.
module carry_out_adder( 
input a, b,
output cout, sum );

input a;
input b;

output cout;
output sum;

// This is a carry-out carry-out adder. A carry-out carry-out adder adds two bits and produces a sum.
module carry_out_carry_out_adder( 
input a, b,
output cout, sum );

================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two bits and produces a sum and carry-out.
module full_subtractor( 
input a, b,
output cout, sum );

// This is a half multiplier. A half multiplier multiplies two bits and produces a sum and carry-out.
module half_multiplier( 
input a, b,
output cout, sum );

// This is a full multiplier. A full multiplier multiplies
================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The input pins are the two bits to be added.
assign cout = half_adder.sum;

// The output pins are the sum and the carry-out.
assign half_adder.sum = a + b;
assign half_adder.carry = a + b > 9;


================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder will be instantiated with the following ports.
// The cout port will be used to output the sum.
// The sum port will be used to output the sum.

// The ports are instantiated in the following way.
// The first port is instantiated with the name, a.
// The second port is instantiated with the name, b.
// The third port is instantiated with the name, cout.
// The fourth port is instantiated with the name, sum.

// The half adder will be instantiated with the following ports.
// The cout port will be used to output the sum.
// The sum port will be used to output the sum.

// The ports are instantiated in the following way.
// The first port is instantiated with the name, a.
// The second port is instantiated with the name, b.
// The third port is
================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder outputs the sum and the carry-out.
always @(posedge clk)
  cout <= sum + a + b;


================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtracter. A half subtracter subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtracter. A full subtracter subtracts two bits and produces a sum and carry-out.
module full_subtractor( 
input a, b,
output cout, sum, carry );

// This is a carry-out generator. A carry-out generator produces a carry-out.
module carry_out_generator( 
output cout, sum, carry );

// This is a carry-out generator. A carry-out
================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_impl();

function half_adder_impl( a, b )
{
  sum = a + b;
  cout = sum & 0x1;
  sum = sum >> 1;
}


================================================================
