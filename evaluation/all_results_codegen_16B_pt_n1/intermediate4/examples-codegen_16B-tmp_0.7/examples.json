// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "initial begin\n   present_state=0;\n   next_state=0;\n   out=1;\nend\nalways @(posedge clk) begin\n\tif(reset) begin\n\t\tpresent_state=0;\n\t\tnext_state=0;\n\t\tout=1;\n\tend else if(present_state==0 and in==1) begin\n\t\tnext_state=0;\n\tend else if(present_state==0 and in==0) begin\n\t\tnext_state=1;\n\tend else if(present_state==1 and in==1) begin\n\t\tnext_state=1;\n\tend else if(present_state==1 and in==0) begin\n\t\tnext_state=0;\n\tend else begin\n\t\tnext_state=0;\n\tend\n\tpresent_state=next_state;\n\tout=present_state;\n"
    }
  ],
  "created": 1663533634,
  "id": "cmpl-qJ6GnwHBjMfrswWiwTvUTKO9nMu6L",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 200,
    "prompt_tokens": 148,
    "total_tokens": 348
  }
}