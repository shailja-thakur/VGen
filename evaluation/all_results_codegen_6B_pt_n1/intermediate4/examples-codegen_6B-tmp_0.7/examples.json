// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(*) begin\n  if (reset) begin\n    next_state <= 0;\n    next_state <= 1;\n    present_state <= 0;\n  end else begin\n    present_state <= in;\n    if (present_state && next_state) begin\n      out <= 1;\n      next_state <= 0;\n    end else begin\n      out <= 0;\n    end\n  end\nend\n\n// A more complex state machine that implements the state machine shown above.\n// It uses the 'case' construct to dispatch control to the proper state.\n// The first state is 0, the default state.\n// If the current state is 0 and in is 1, then the state becomes 1.\n// If the current state is 1 and in is 1, then the state becomes 2.\n// If the current state is 2 and in is 1, then the state becomes 3.\n// If"
    }
  ],
  "created": 1663519177,
  "id": "cmpl-PJt4PcMO4lw9wQrbPj0blzWTxQloX",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 200,
    "prompt_tokens": 148,
    "total_tokens": 348
  }
}