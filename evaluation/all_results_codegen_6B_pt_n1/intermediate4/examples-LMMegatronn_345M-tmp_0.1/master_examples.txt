example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1, and then state 0 in state 0.
always@(posedge clk)
begin
  if(reset)
    present_state <= 0;
  else
    present_state <= next_state;
end
// One-Hot state machine to transition 1.
always@(present_state or in)
begin
  case(present_state)
    0 : begin
      if(in)
        next_state = 1;
      else if(present_state == 0)
        next_state = 2;
      else if(present_state == 1)
        next_state = 3;
      else if(present_state == 2)
    
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1, if in=1, then go to state 1.
reg [1:0] next_state;
// 0 in 10 in=0, else, means in=0, else, means in=1.
// 1 in=0, else, means in=1, else, means in=0.
// 2 in=0, else, means in=1, else, means in=0.
// 3 in=0, else, means in=1, else, means in=0.
// 4 in=0, else, means in=0, else, means in=1.
// 5 in=0, else, means in=1, else, means in=0.
// 6 in=0, else, means in=1, else, means in=0.
// 7 in=0, else, means in=1, else, means in=0.
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to state 1 to state 0.
always @(posedge clk)
begin
  if (reset == 1'b1)
  begin
    state <= 1'b0;
    next_state <= 1'b0;
  end
  else
  begin
    state <= next_state;
    if (in == 1'b1)
      next_state <= 1'b1;
    else if (state == 1'b0)
      next_state <= 1'b0;
    else if (state == 1'b1)
      next_state <= 1'b0;
  end
end

assign out = (present_state == 1'b1) ? 1'b1 : 1'b0;


================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1.
reg [1:0] next_state;
// Logica de estados
always@(posedge clk, posedge reset)
begin
	if(reset)
		state = 0;
	else
		state = next_state;
end

// Logica de salida
always@*
begin
	present_state = 0;
	next_state = 0;
	case(present_state)
		0:
		begin
			if(in)
				next_state = 1;
			else
			begin
				if(present_state == 0)
					next_state = 2;
				else
				begin
					if(present_state == 1)
				
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1, and then state 0 in state 0.
always@(posedge clk)
begin
  if(reset)
    present_state <= 0;
  else
    present_state <= next_state;
end
// A Moore state machine to transition 1, to transition 0.
always@(*)
begin
  case(present_state)
    0 : begin
      if(in)
        begin
          if(present_state == 0)
            begin
              next_state <= 1;
            end
          else
         
================================================================
