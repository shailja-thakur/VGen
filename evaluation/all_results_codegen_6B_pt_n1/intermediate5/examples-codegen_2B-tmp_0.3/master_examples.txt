example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else
begin
case(amount)
3'b000: out <= {data[0],data[7:1]};
3'b001: out <= {data[1],data[7:2]};
3'b010: out <= {data[2],data[7:3]};
3'b011: out <= {data[3],data[7:4]};
3'b100: out <= {data[4],data[7:5]};
3'b101: out <= {data[5],data[7:6]};
3'b110: out <= {data[6],data[7]};
3'b111: out <= data;
default: out <=
================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
begin
if (reset)
out <= 0;
else if (load)
out <= data;
else if (amount == 3'b000)
out <= {data[0],data[7:1]};
else if (amount == 3'b001)
out <= {data[1],data[7:2]};
else if (amount == 3'b010)
out <= {data[2],data[7:3]};
else if (amount == 3'b011)
out <= {data[3],data[7:4]};
else if (amount == 3'b100)
out <= {data[4],data[7:5]};
else if (amount == 3'b101)
out <= {data[5],data[7:6]};
else if (amount == 3'b110)
out
================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	out <= data;
	else
	begin
	case(amount)
	3'b000:
	out <= {data[0],data[7:1]};
	3'b001:
	out <= {data[1],data[7:2]};
	3'b010:
	out <= {data[2],data[7:3]};
	3'b011:
	out <= {data[3],data[7:4]};
	3'b100:
	out <= {data[4],data[7:5]};
	3'b101:
	out <= {data[5],data[7:
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else if (amount != 0)
out <= {out[6:0],out[7]};
end

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @ (posedge clk, posedge reset)
begin
if (reset)
out <= 0;
else if (load)
out <= data;
else if (amount == 3'b000)
out <= {data[0],data[7:1]};
else if (amount == 3'b001)
out <= {data[1],data[7:2]};
else if (amount == 3'b010)
out <= {data[2],data[7:3]};
else if (amount == 3'b011)
out <= {data[3],data[7:4]};
else if (amount == 3'b100)
out <= {data[4],data[7:5]};
else if (amount == 3'b101)
out <= {data[5],data[7:6]};
else if (amount == 3'b
================================================================
