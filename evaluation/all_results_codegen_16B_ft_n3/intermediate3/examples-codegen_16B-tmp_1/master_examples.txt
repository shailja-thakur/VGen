example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset)?1'b1:(feedback_value)?r_reg ^ (r_reg >> 1):r_reg;
assign feedback_value = (r_reg[2] ^ r_reg[4]);
assign q = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = decOut[{~r_reg[4], ~r_reg[2]};
assign q = r_reg;
always @(posedge clk)
begin
	if(reset)
	begin
	r_reg <= 5'b01111;
	end
	else
	begin
	r_reg <= r_next;
	end
end
// Find the next value for the value of r_reg
assign r_next =
decOut[1] ? 
	5'b00011 : 
	5'b00111 : 
	5'b01111 ;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? r_reg[4:3] : {feedback_valueb_4, r_reg[4]};
assign q = r_reg;
always @(posedge clk)
begin
r_reg = r_next;
end

================================================================
