example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or posedge rst) begin
    if (we) begin
        ram[addr] <= data;
        q <= ram[addr];
    end
end

================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
    if(we)
    ram[addr] <= data;
end

// The RAM responder
module responder #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input rdy, clk
);
reg [DATA_WIDTH-1:0] resp;
wire [7:0] resp_data;
always @(posedge clk)
begin
    if(rdy) // read data from ram associated with addr
    resp <= ram[addr];
    else // if the ready input is low, return data from last write
    resp_data <= resp;
end

ass
================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if(we)
        ram[addr] = data;
    if(we)
        q = ram[addr];
end

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
    if (we) ram[addr] <= data;
    q <= ram[addr];

// Correctly instantiate a RAM model
ram_inst: ram address_width=6, data_width=8 > PORT("CLK", clk);

initial begin
    ram[0] :== $10;
    ram[1] :== $C2;
    ram[2] :== $11;
    ram[3] :== $D4;
    ram[4] :== $00;
    ram[5] :== $10;
    ram[6] :== $C2;
    ram[7] :== $11;
end

================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we)
        ram[addr] <= data;
    q <= ram[addr];
end

// the value read back by the leader is obtained by prefixing the value of q
// with a 0 bit, with a one on the q lead indice
reg [ADDR_WIDTH-1:0] ram_out;
always @(posedge clk) begin
    ram_out[0:ADDR_WIDTH-1] <= q;
end

================================================================
example-5: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk, we) begin
    if (we) begin
        q <= ram[addr];
    end
end

================================================================
example-6: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or posedge rst) begin
    if (we) case (addr[2:0])
        1: ram[addr] <= data;
    end
    q <= ram[addr];
end

================================================================
example-7: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
    if (we) q <= ram[addr];
    else q <= data;

================================================================
example-8: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
    ram[addr] <= ram[addr] 
        || (data && we) 
            ? ram[addr] 
            : (data && we) 
                ? data 
                : 0;
    if (we) q <= ram[addr];
// $display(q);


================================================================
example-9: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
task ram_write;
    if (we) {
        ram[addr] = data;
    }
    q = ram[addr];
endtask

#(parameter LUT_WIDTH=4)
reg [DATA_WIDTH-1:0] ram_lut[LUT_WIDTH-1:0];
// assignment
task ram_cb;
    ram_lut = ram_write.ram[addr];
    ram[addr] = ram_write.ram[addr];
endtask

module top;
    // always clock a clock domain

    // some wires, maybe an address bus
    RAM ram(.DATA_WIDTH(DATA_WIDTH), .ADDR_WIDTH(ADDR_WIDTH));

    // using RAM as LUT, 4:1 LUT2

    lut1 lut
================================================================
example-10: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q in when waitGood is high by clk.rising
wire [3:0] debug;
reg [3:0] wait_goodbit;
always @(posedge clk)
    case(wait_goodbit)
        case(wait_goodbit == 1)
            if (!we) wait_goodbit = 0;
//            else q = ram[addr];
            q = ram[addr];
            case(debug)
            /****************************
             * ATTENTION: 32-bit variables will be truncated to
             * 16 bits. It's ok here, as we are not doing
             * calculations with these bits.
             ****************************/
//            case(debug == 0x10)
//                ram[addr] = 0xAD;
//                case(debug == 0x11)
//                ram[addr] = 0xF0;
            default:
                
================================================================
example-11: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
    if(we)
        ram[addr] <= data;


// do the table lookup for 2 address width, it's pretty clever
reg [ADDR_WIDTH*2-1:0] entries;
tmp_1: flop {
    ram: entity ram [({2**(ADDR_WIDTH-1)+addr})-1:0] ;
    ram_reg: flop ram ;
    assign #3:0 {ram_reg} ;
    assign q = entries[addr*2];
}
// This is a Pipeline module with 2 stages which are pipelined
// as the result is splitted in two variables.
pipeline pipe A(ADDR_WIDTH = ADDR_WIDTH, DATA_WIDTH = DATA_WIDTH);
// The first one is the read
================================================================
example-12: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) begin
        if (addr <= 31) ram[addr] <= data;
        q <= ram[addr];
    end
end

================================================================
example-13: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
    if (we)
    begin
        // write the q's to ram at address addr
        ram[addr] <= q;

        // log changes to ram
        ramcflen(addr) <= RAMCFLEN;
    end
end

always @(posedge clk) reset_ram() 
begin
    // Roadc is clear
    ramcflen[0] <= 1'b0;
    ram[0]      <= 16'b0;
end


================================================================
example-14: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk) begin
    if (we)
    q <= ram[addr];
end

================================================================
example-15: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q:
always @(posedge clk or we) begin
    if(we) ram[addr] <=data;
    q <= ram[addr];
end

================================================================
example-16: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we == 1)
        ram[addr]<= data;
    q<=ram[addr];
end

================================================================
example-17: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or posedge rst) begin
    if (we)
	ram[addr] <= data;
    q <= ram[addr];
end

================================================================
example-18: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we)
    q <= ram[addr];
end

// use a 16 x 16 mirrored palette to convert the input colors
reg["PALETTE"]=16'd5100;
reg["Q"]=16'd2152;
reg["R"]=16'd0202;
reg["S"]=16'd1515;
reg["S-PALETTE"]=16'd5108;
reg["S-Q"]=16'd5016;
reg["S-R"]=16'd1616;
reg["T"]=16'd4654;
reg["T-PALETTE"]=16'd2156;
reg["T-Q"]=16'd5118;
reg["T-R"]=16'd0528;
reg["S0"]=16'd0619;
reg["S0
================================================================
example-19: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
    if(we)
        ram[addr] <= data;
    else
        q <= ram[addr];
// assign the result q to address
// chanage the MAX value of width to 6
assign addr[31:0] = {6'd0, 0'd1, 0'd0, 0'd1};




"""


#open the output terminal for the user, if no command line argument was passed
if len (sys.argv) < 2:
    term = raw_input ('Select a terminal, $ for std :  ')
else:
    term = sys.argv[1]

#module searching loop
print "\nTrying all modules on bus now..."
bus = hdl_io.bus()
for module in enum ('w7i', 'i2c', 'iobrig', 'uart'):
================================================================
