example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(in)
begin
	case(in)
		3'b000:	pos = 0;
		3'b001:	pos = 1;
		3'b010:	pos = 2;
		3'b011:	pos = 3;
		3'b100:	pos = 4;
		3'b101:	pos = 5;
		3'b110:	pos = 6;
		3'b111:	pos = 7;
	endcase
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in)
begin
	case (in)
		0: pos <= 3'b010;
		1: pos <= 3'b100;
		2: pos <= 3'b000;
		3: pos <= 3'b001;
		default: pos <= 3'b111;
	endcase
end


================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// We assume that they are in the "1" case. 
always @ ( in )
    case ( in )
        3'b001: pos = 0;
        3'b010: pos = 1;
        3'b100: pos = 2;
        3'b000: pos = 3;
        3'b001: pos = 4;
        default: pos = 0;
    endcase

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@( in )
	case( in )
		3'b001: 
			pos = 2'b11;
		3'b010:
			pos = 2'b10;
		3'b011:
			pos = 2'b01;
		3'b100:
			pos = 2'b00;
		default: 
			pos = 2'b11;
	endcase

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// This is a 4 bit comparator, then in is zero.
always @ (in )
begin
	case({in})
		3'b010: pos <= 2'b10;
		3'b100: pos <= 2'b10;
		default: pos <= 2'b00;
	endcase
end
//assign b to out
assign out = pos[3] ? (in[1] ? in :
										in[0]) : 1'b0;

================================================================
