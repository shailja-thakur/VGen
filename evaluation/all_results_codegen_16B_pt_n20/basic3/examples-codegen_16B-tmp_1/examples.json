// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "module RS_OR( input [7:0] in, output [7:0] b );   // OUT = input | in\n//When sel=2, assign low or high to out\nmodule HIGH_OR_LOW( input [3:0] in, output [3:0] b ); \n//when sel = 3, assign low to out\n//when sel = 4 assign high to out\n//when sel = 5 assign in to out\n//when sel = 6 assign low or high to out\nmodule AND( input [7:0] in, input [7:0] b, output [7:0]  out );\n\n// Input is bit[n], Output is bit[n + 2]\n// With high(x) -> low(1-x)\nmodule B_2BIT( input [1:0] in, output [3:0] b );\n\n"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "reg [1:0] sel;\nreg [1:0] b;\nalways @(posedge clr ) begin\n\n\tif (sel==0) begin\n\t// CS = 1 and CE = 1\n\t// Output one if in = 0, 0 otherwise.\n\tb <= in;\n\tend else if (sel==1) begin\n\t// CS = 1 and CE = 0\n\t// Output zero if in = 0, 1 otherwise.\n\tb <= in;\n\tend else if (sel==2) begin\n\t// CE = 1, CS=0\n\t// Output 1 if in = 1, 0 otherwise.\n\tb <= in;\n\tend else if ((sel==3)&&(in==3)) begin\n\t// Output 0.\n\tb <= 0;\n\tend else begin\n\t// CS = 0\n\t// Output 0.\n\tb <= 0;\n\t"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\n{\n  case( a[2:0] | b[2:0] ) \n    pos = 0;\n    else:\n      case( ( a[0:0] & b[0:0] ) | b[1:0] )\n        pos = 1;\n        else\n\t  case( b[0:0] & a[0:0] )\n   \t\t  pos = 2;\n      else\n\t  case( a[1:0] | b[1:0] )\n     \t  pos = 1;\n  endcase\n}\nprocess ( pos )\n\tbegin\n \t\tassert( true = '1' )\n \t\tif ( pos == 3 )\n \t\t{\n\t\t\t// assert( true = 1'b0 )\n\t\t\t// assert( false = 1'b1 )\n\t\t}"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "// When sel=2, assign z to out\n// Sel can only be 1 or 2 at time.\nalways @(posedge IN, posedge P, posedge OUT)\nbegin\n  pos <= (sel==2)?1: ((sel==1)?(in&1):0);\nend\n\n"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "axi_mux( pos  => author@zll.mit.edu reply[0:0], in[0], in[1], in[2] );\naxi_mux( pos<1> => pos[1], input [0] );\naxi_mux( pos<2> => pos[2], in[0] );\n\n// each time address changes we want to check inputs again, because we may have reset some seqls\naxi_mux((address in, address valid) => {reset}, author@zll.mit.edu address[11:0]);\naxi_mux((address in, address valid) => {ready}, xil_clraddr); // Get next instruction.\naxi_mux((address in, address valid) => {done}, xil_clraddr); // Go back.\n\nalways @(posedge l1) begin\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "// When sel=0, assign r to out\nalways @( posedge in or negedge in ) begin\n    case( in )\n      pos <= {sel, sel to b, b};\n      default:\n      pos <= 0;\n    endcase\nend\n  "
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways @ (posedge in) begin\n   if(in[1])\n   {\n      pos <= b; \n   }\n   else\n   {\n      pos <= a;\n   }\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "#define PRIORITY_SELECT logical = in[0]^in[1];\n#define WRITE_OR_ZERO priority_encoder.pos = sel ? in[1] : 0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "function priority_encoder_sel()\n{\n    pos <= in & in[1:0]';\n} \n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "FullCounter ff(0); // Forwarding decoder\nMyTimer  time( tcnt_rst );\n\n//Every rising edge calls tim->period\nsetup: begin\n\ttime.period( 1 );\n\tff.count_start();\nend  \n\nalways begin\n\tpos <= ff;\n\tif( ff.count_wrap() ) // Decoder done, priority encoder is enabled in next cycle\n\t\ttime.period( in[2 : 0] );\n\telse if( ff.decided() && (time.t == 1) ) // Decoder done, and decoded a 0 in the critical cycle, start\n\t\ttime.reset( 1 );\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 10,
      "logprobs": null,
      "text": "always_ff @$display( pos ); end\n\nenum addr_mode {\n    mode_IDD = 2'b11,\n    mode_IA  = 2'b10,\n    mode_DA  = 2'b01,\n    mode_AA  = 2'b00\n};\n\nenum addr_ce {\n\tce_IDD = 1'b1,\n\tce_DA  = end\n};\n\nenum width {\n\twidth_1 = 1'b0,\n\twidth_4 = 1'b1\n};\n\naddrs #( .WIDTH( width_1 ), .MODE( addr_mode ), .CE( addr_ce ) ) addrs_m, \naddr_i #( .MODE( addr_mode ), .IDD( 1'b1 ) ) addr_i_m; \nopts #( .WIDTH( width"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk) begin\nif (in==1 && sel==1) begin\nif (pre( in )) { pos=b; } \nend\nend\n// When sel=0, assign both a and b to out\nalways @(posedge clk) begin\nif (in!=1 || sel!=1) begin\nif (pre( in )) begin\npos=(a | b); \nend\nend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 12,
      "logprobs": null,
      "text": "assign out = reg[0];\n// When sel=1, assign a to pos\nassign pos = bool(reg[1] | reg[2]);\n\n//Truth table for input A\n// T:input A\n//  F  a=Y\n//  F  a=X\n//  T  a=X\n//  T  a=0\n\n// F : reg[1]=1\n// F : reg[2]=1\n// F : reg[0]=1\n\n// T : reg[1]=1\n// T : reg[2]=0\n// T : reg[0]=0\n\npriority_encoder: process( A, B ) {\n\tA = A || B;\n\tif (A == 1 && (B == 1 || B == 0)) pos = 1;\n\telse if (A == 0 && (B == 0"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "// When sel=0, assign (sel&in) to out \nalways @ (posedge CLK) begin\n      if(PRM_SELECT)\n        pos <= int(in);\n      else\n        pos <= int((sel&in));\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "module logic [1:0] #3[3:0] ( sel, in, pos );\n// cp_out is defined and usable by your design. It susceptible to be the only one you use externally!\nmodule logic [1:0] cp_out [3:0];\nassign #3[3:0] = sel ? pos : cp_out;\n"
    },
    {
      "finish_reason": "length",
      "index": 15,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\n\n(* positions = \"01\" *) static parameter [2:0] b = 0;\n\n(* positions = \"11\" *) static parameter [2:0] a = 1;\n\n// [29-28 bits are one's]\n// When hl=1, output = b;\n// When hl=0, output = a\nalways inline void high_bit_decoder( int sel, int hl ) \n\n{\n  if ( sel)\n  \toutput = b;\n  else\n  \toutput = a;\n}\n\n// Check bits (18-17 are zero)\nalways inline int HI_18(int val) {\n\tif ( !(val & (1>>17)) ) return 1;\n\telse return 0;\n}\n\nalways inline int HI_19(int val) {\n\tif"
    },
    {
      "finish_reason": "stop",
      "index": 16,
      "logprobs": null,
      "text": "always begin\nif (in[1]) pos <= 1;\nelse if(in[0]) pos <= 2;\nelse pos <= 3;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 17,
      "logprobs": null,
      "text": "module \npriority_encoder_b ( in bool bit, \noutput [1:0] out ); \npriority_encoder_b = ( in ) ? logic_zero : priority_encoder( ( in ), pos );\n\n// */\n\n\n/*\n// VHDL definition\n// Decimal 150 \n// Preliminary scan and decode FSM\nmodule \npriority_encoder_2;\n\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\npriority_encoder_1 priority_encoder_1 ( \n\tinput [2:0] in,\n\toutput reg [1:0] pos ); \n// When sel=1, assign b to out\npriority_encoder_2 priority_encoder_2_b ( in bool bit, \n\toutput [1:0] out ); \npriority_"
    },
    {
      "finish_reason": "length",
      "index": 18,
      "logprobs": null,
      "text": "always @(posedge s or negedge v) begin\n    if (v & s && !in[0]) {\n        pos[1:0] <= 2'd0;\n    } else if (v && in[0]) {\n        pos[1:0] <= 2'd3;\n    } else if (!in[0] && in[1] && !in[2]) {\n        pos[1:0] <= 2'd4;\n    } else if (in[0] && in[1] && in[2]) {\n        pos[1:0] <= 2'd7;\n    } else if (in[0] || in[1] || in[2]) {\n        pos[1:0] <= 2'd6;\n    } else if ((!s) && (!in[1]) && (!in[2])) {\n        pos[1:0]"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "// When sel=2, assign a to out\n// When sel=3, do not affect out\nalways @(posedge sig ) begin\n  if (sel == 1)\n    pos <= 1;\n  else if (sel == 2)\n    pos <= 1;\n  else\n    pos <= 0;\nend\n"
    }
  ],
  "created": 1663535989,
  "id": "cmpl-8lYynNLwGrfnQZqrw8iJKAQQMKutr",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 2576,
    "prompt_tokens": 65,
    "total_tokens": 2641
  }
}