example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge clk) begin
    if (sel)
        out <= ~in;
    else if (in & b)
        pos <= b;
    else if (in & a)
        pos <= a;
    else
        pos <= 0;
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge [2:0] clk)  begin
  if (in)
  {
    pos <= in;
  }
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
// b and a are the two input bits.
always @(posedge clk) 
begin 
  case(sel) 
    0 : pos <= a; 
    1 : pos <= b; 
    default : pos <= 0; 
  endcase 
end 

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge clk) begin
    if (sel==1) {
        pos <= b;
    } else {
        pos <= a;
    }
end

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @ (posedge CLK) begin
  if ( sel == 1 )
    pos <= in;
  else
    pos <= in;
end

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge clk) begin
  if (sel==1 && (in[0] || in[1])) pos <= 1;
  else pos <= 0;
end

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
  always @(posedge clk) begin
    if (sel) begin
      pos <= ~in;
    end else begin
      pos <= 1'b0;
    end
  end

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign ~b to out
always @(posedge clk)
begin
  if (in[0]) pos <= 1'b0;
  else pos <= 1'b1;
end
  
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign ~b to out
always @(posedge clk)
begin
  if (in[0]) pos <= 1'b0;
  else if (in[1]) pos <= 1'b1;
  else pos <= 1'b0;
end
  
// This is a 3-bit priority encoder. If none
================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always_comb begin: 
  if (in[1]) pos = 1; else
  if (in[2]) pos = 2; else
  if (in[3]) pos = 3; else
  pos = 0;
end

#line 20

// This is a 2-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign a to out
always_comb begin: 
  if (in[1]) pos = 1; else
  if (in[2]) pos = 2; else
  pos = 0;
end

// This is a 2-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge clk or posedge rst) begin
  if (rst) 
    pos <= 0;
  else if (sel)
    pos <= 1;
  else if (((in[1]) || (in[2]) || (in[3])))
    pos <= 2;
  else if (((in[0]) || (in[2]) || (in[3])))
    pos <= 0;
  else if (((in[1]) || (in[0]) || (in[3])))
    pos <= 1;
  else if (((in[2]) || (in[0]) || (in[1])))
    pos <= 2;
  else if (((in[3]) || (in[0]) || (in[1])))
    pos <= 1;
  
================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk) begin
    if(sel) pos <= in;
end

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge a) begin
    pos <= ~$bitstoshiftleft(~{in}[2:0]);
end

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk) begin
  if(in[0] || in[1]) pos <= 1; 
  else if(in[2] || in[3]) pos <= 2; 
  else if(in[4] || in[5]) pos <= 3; 
  else pos <= 0; 
end

================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge clk) begin
 	pos <= (in > 3) ? 3 : in;
end

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk) begin
    if (sel == 1) begin
        pos <= b;
    end else begin
        pos <= in;
    end
end

================================================================
example-15: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge sel) begin
  if( sel )
    pos <= 1;
  else
    pos <= 0;
end

================================================================
example-16: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
	if (sel==1)
		pos = b;
	else
		pos = in;

================================================================
example-17: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out 
always @(posedge clk) begin 
  pos <= in; 
end 

================================================================
example-18: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst) 
if (sel==1) begin
    pos <= (in and b); // a || b
end

================================================================
example-19: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always_comb
  case (in[0])
    0: pos=0;
    1: pos=1;
    2: pos=2;
    3: pos=3;
  endcase

================================================================
