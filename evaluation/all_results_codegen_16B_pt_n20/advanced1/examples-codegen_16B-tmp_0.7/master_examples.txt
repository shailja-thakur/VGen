example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s = (a & b) | (a ^ ~b);
    assign overflow = (a[7] == 0x01 && b[7] == 0x01);
    assign overflow = (a[7] == 0x01 && b[7] == 0x01) || (~s == 0x80);

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder signed_adder = [7:0] s [7:0], overflow [1:0];

// The first input is a and the second input is b. The output is s and the output overflow. 
assign {s, overflow} = {a + b, a[7] + b[7]}; 



================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    s[7:0] = a[7:0] + b[7:0];
    overflow = ((a[7:0] & b[7:0]) | ((a[7:0] == 0) & (b[7:0] == 0)));
    overflow = (s[7:0] & (~0)) | (a[7:0] & b[7:0]);


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s = a + b;
    assign overflow = (a[7:0] < 0 && b[7:0] < 0 && s[7:0] > 0) || (a[7:0] > 0 && b[7:0] > 0 && s[7:0] < 0);

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow); 

// Implement your adder function in the module.
//
//
//
// Your adder function should return a signed value of type [7:0].
//
// The adder function should return s[7:0] and overflow in a tuple with two values.
//
//
// The first value of the tuple should be the value of s[7:0] before the addition was performed.
//
// The second value of the tuple should be 0 if no signed overflow occurred, 1 if a signed overflow occurred, and -1 if both a and b were negative and the most significant bit of s was 1.
//
//
//
//
//
//
// Example 1:
//
// Input: a = [15], b = [0], s = [0], overflow = [0]
// Output: [15],
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

   overflow = (a[7] == b[7]) && ((a[7] == s[7]) || (s[7] == 0));
   s[7] += a[7];
   s[6] += a[6] + b[6];
   s[5] += a[5] + b[5];
   s[4] += a[4] + b[4];
   s[3] += a[3] + b[3];
   s[2] += a[2] + b[2];
   s[1] += a[1] + b[1];
   s[0] += a[0] + b[0];


// Assign the overflow sign bit to the bit position in the most significant bit position of the output s.

   overflow = (s[7]==0) && ((s[6]
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    signed_adder begin
    
        //s <= a + b
        s <= a + b
        //if s[msb] = 1 and a[msb] = 1 then s[msb] = 1
        //if s[msb] = 0 and a[msb] = 1 then s[msb] = 0 
        //if s[msb] = 0 and a[msb] = 0 then s[msb] = 0
        //overflow = 1
        //overflow <= a[msb] and b[msb] and s[msb]
        //overflow <= a[msb] and b[msb]
        //overflow <= a[msb] and s[msb]
        //overflow <= b[msb] and s[msb]
        //overflow <= a[msb]
        //over
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


int a, b, s, ovf;

signed_adder(a,b,s,ovf);

// a = +0
// b = +0
// s = +0
// ovf = 0

// a = +127
// b = +127
// s = +127
// ovf = 0

// a = +128
// b = +128
// s = -128
// ovf = 1

// a = -128
// b = -128
// s = -128
// ovf = 1

// a = -127
// b = -127
// s = -127
// ovf = 0

// a = -127
// b = -127
// s = -127
// ovf = 0

// a = -1
// b = -1
// s = -127
// ovf =
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implementation

// The algorithm works by adding the two numbers, then checking the most significant bit of the result.  If the most significant bit is zero, the result is positive and no signed overflow occurs.  If the most significant bit is one, the result is negative and a signed overflow occurs.  The algorithm works by shifting one of the inputs by one bit and adding the two numbers.  The most significant bit of the result is shifted out to the output and the result is tested for a sign.

signed_adder(a, b, s, overflow)
{
  assign(overflow, a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] &&
         a[4] == b[4] && a[5] == b[5] && a[6] == b[6]
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a + b) & 0xFF; //overflow 

//assign s = a + b;
//assign s = a - b;
//assign s = a * b;
//assign s = a / b;
//assign s = a % b;
//assign s = a << b;
//assign s = a >> b;
//assign s = a & b;
//assign s = a | b;
//assign s = a ^ b;


//overflow = (a == 0x80 | b == 0x80 | s == 0x80) | ((a == 0x7F | b == 0x7F | s == 0x7F) & (a & b & 0x80 == 0x80) & (a & ~b & 0x80 == 0x80)) | ((a
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//The algorithm of the signed adder is based on the following: 

//Assume a[7:0] and b[7:0] are unsigned integers and s[7:0] is a signed integer. 
//Let a1, a2, a3, a4 be the four most significant bits in a[7:0]. 
//Let b1, b2, b3, b4 be the four most significant bits in b[7:0]. 
//Let s1, s2, s3, s4 be the four most significant bits in s[7:0]. 
//Let a12, a13, a14 be the three least significant bits in a[7:0]. 
//Let b12, b13, b14 be the three least significant bits in b[7:0]. 
//Let s12, s13, s14 be the three least significant
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a + b);
assign overflow = ((a[7] == 0) && (b[7] == 1) && ((s[7] == 0) || (s[7] == 1)));
"""

================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder signed_adder_instance(.a(a),.b(b),.s(s),.overflow(overflow));


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow); 

$display(s); 
$display(overflow); 

===========================================================================
$finish

===========================================================================

// ----------------------------------------------------------------------------
// Copyright (C) 2014 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a[7:0] + b[7:0])[7:0];

assign overflow = (a[7] == b[7]) && (a[7] == s[7]) && a[7:0] + b[7:0] > 255;


================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implement the signed adder. 
// The binary representations of a and b are signed numbers, meaning that the most significant bit of each number is a one.
// A signed overflow occurs when the most significant bit of s is one. The least significant bit of s is zero.
// The signed overflow condition is only true if the most significant bit of a and b are low and the most significant bit of s is high. 


signed_adder(a, b, s, overflow);


// Test cases

a=0b00001111;
b=0b00001100;
s=0b00000000;
overflow=0;

signed_adder(a, b, s, overflow);

// s=0b11111111
// overflow=1

a=0b11111111;
b=0b11111110;
s=0b11111111;
overflow=0;
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder:
    assign s = a + b;

    // signed overflow occurs if a and b are signed and s is signed and the most significant bit of a or b is high and
    // the most significant bit of s is low
    if ((a[7:0] and b[7:0]) == 1'b0 and s[7:0] == 1'b1) {
        overflow = 1'b1;
    } else {
        overflow = 1'b0;
    }

================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s[7:0] = a[7:0] + b[7:0]
    assign overflow = ( a[7] == 0 && b[7] == 0 && s[7] == 0 ) ||
              ( a[7] == 1 && b[7] == 1 && s[7] == 1 ) ||
              ( a[7] == 0 && b[7] == 1 && s[7] == 0 ) ||
              ( a[7] == 1 && b[7] == 0 && s[7] == 1 )
              

// The signed adder adds two numbers and returns an overflow flag. 
// The output of the adder is the sum of the two inputs a and b 
// and the overflow flag is set to true if the most significant bit is 1 and to false if the most significant bit is 0.


================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    s = a + b;
    if (a[7] > b[7])
        overflow = 1;
    else
        overflow = 0;

================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder
    assign {s, overflow} = {
        a + b, 
        a > 0x7f && b > 0x7f
    };

================================================================
