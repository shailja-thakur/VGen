example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// for i=0 to 7
//    s[i] = a[i] + b[i]
//    overflow = b[7] + a[7] + (a[7] != 0 && b[7] != 0)
// Implementation

assign s[0] = a[0] + b[0];
assign s[1] = a[1] + b[1];
assign s[2] = a[2] + b[2];
assign s[3] = a[3] + b[3];
assign s[4] = a[4] + b[4];
assign s[5] = a[5] + b[5];
assign s[6] = a[6] + b[6];

assign overflow = (b[1] exactly "-" s[1] + (b
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    
s = (a ^ b) + s;
s = (a & (b -1)) + s;
  
 * overflow = ((a^b)|(a&b)-1)|(a&s)-(b^s);
 * 
 * output1[0] = s[0];
 * output1[1] = s[1] + (overflow[0] != s[1]);
 * output1[2] = s[2];
 * Split s[2:0] into result1 and result2
 * output1[3] = result1[2];
 * output1[4] = result2[2];
 * output1[5] = s[3];
 *  output1[6] = s[4];
 *  

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder(a, b, s, overflow);

// This produced the following error on Xilinx 2014:1.4
//
// 2014 Jan 18 09:57:43:7d DL_I08 68 64 1f 00 00 01 00 00 01 8f ff e2 81
// 2015 Jan 25 17:32:12:72 CSDL_I08 68 64 1f 00 00 01 00 00 01 88 ff e2 81
//
// Error for 'add_to_dut': Unmatched statements at end of input.
//
// Added some whitespaces, then it actually worked, not sure why
//

================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// differentiate between a positive and negative a
extended_8b a_ext;

// sign extension 
assign a_ext = {a{31{b{7{s[7}}{8{a[7]} + b[7]}}{12{s[6} + 1}}}}};
// note: s[7] is the most significant bit of s because s is 8-bits and gets extended to 16bits

// invert the a_ext to differentiate between a positive and negative a
assign a = {!a_ext};

// bitwise addition 
assign s = {!a + b};

// Signed overflow occurs when a signed addition results in a positive sum of {10{s(most significant bit = 1)}}
assign overflow = {a_ext >= s};


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder signed_adder(a_in, b_in, s_out, ov_out);
        assume a_in & a_in;
        assume b_in & b_in;
        assume s_out & s_out;
        assume ov_out & ov_out;
        assume !s_out & !b_in & !a_in & (s_out == 0); 
        assume !ov_out & !s_out & (s_out == 0) & !b_in & !a_in & (b_in > a_in) | (ov_out == 1); 
&;Se 
void 
signed_adder(in_a, in_b, out_s, ov_out) 
bool 
& a_in, 
& b_in, 
@@ & s
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  assign s = (a + b);  
  assign sig_overflow = (
    (a & s) == (b & s) && ((s & 1) == 1)
  ) || (
    (s > a) != (s > b) 
    && ((a & 1) == 1) && ((b & 1) == 1) 
  );


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	s[7:0] = a[7:0] + b[7:0];
	overflow = s[3] & 1

	s[7] = (s[7] + 1) & 0x7f 
	s[6] = (s[6] ^ 0b1) & 1
	s[5:3] = a[5:2]                 
*/
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	// Z = 0 if (a[7] + b[7]) is greater than s[7]

	assign tmp  = a[7:0] + b[7:0]; 
	assign tmp2 = tmp[7:0] + s[7:0];
	assign Z    = 0;
	if (tmp[7:0] > s[7:0]) {
		assign Z = 1;
	}
    assign s[7:0] = tmp [7:0];
    assign overflow = tmp2[7:0];
    assign tmp[7:0] = tmp [7:0] - 256;
    assign tmp2[7:0] = tmp2[7:0] - 256;
    run;

signed_adder  300 : bool fundsBorrow;


    // output[6:0
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Let us initialize the registers:

reg [8:0] r; small index for zeroes 
reg [7:0] s; small index for ones 
bitset [7:0] a0 = 0
bitset [7:0] b0 = 0
bitset [7:0] p	= 0
bitset [7:0] n 	 = 0


// we are merging small indexes with match operation 
// another compiler   /   other  straight line 
#3 start; 
s0 = a0 + b0; 
#6 if (s0 != 0) 
if (s0[7]) 
#7 if (s0[6]) 
#8 if ((s0[5]) || (s0[4])) 
#9 if (s0[3]) 
#10 if (s0[2])
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder signed_raising_adder(input [7:0] a,
     input [7:0] b,
     output [7:0] s
); 


// This is the test program. It evaluates the part of the design involving the adders and outputs the results of the adder.

main()
{
    signed_picture bit;

    signed_picture bit1;

    signed_picture bit2;

    signed_picture bit3;

    signed_picture bit4;

    signed_picture bit5;

    signed_picture bit6;

    signed_picture bit7;

    signed_picture bit8;

    signed_picture bit9;

    signed_picture bit10;

    unsigned_picture sa;

    unsigned_picture sb;

    signed_picture sum;

    signed_picture overflow;

    // values of a and b for
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s = a + b;
    assign overflow = (a[31] == b[31] && s[31] == ~s[30]) || 
                        ((b[28] == a[28] && b[31] == 0x0 || b[31] == a[31]) && s[31] == s[30] && 
        (a[28] == 0x0 || a[29] == a[31] || a[31] == 0x0) &&
        s[30] == a[30]) ||
        ((a[28] == 0x0 || b[28] == 0x0 || b[29] != 0x0) && s[30] == 0x0 && a[31] == b[31] && 
        a[28] == 0x0) ||
        ((a[30] != 0x0 &&
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

        s[7] = s[6] + a[6] + b[6] >> 2;
        s[6] = ~s[6] + a[5] + b[5] >> 2;
        s[5] = a[4] + ~s[6] + b[4] >> 2;
        s[4] = ~a[3] + s[6] + b[3] >> 2;
        s[3] = a[2] + ~s[5] + b[2] >> 2;
        s[2] = ~a[1] + s[5] + b[1] >> 2;
        s[1] = a[0] + ~s[3] + b[0] >> 2;
        s[0] = ~s[0] + a[0] + b[0] >> 2;  over
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  internal logic [2:0] i3,
  internal logic [1:0] i2,
  internal logic [0:0] i1,
  internal logic [7:6] i3a,
  internal logic [5:4] i3b,
  internal logic [3:2] i2a,
  internal logic [1:0] i2b,
  internal logic [7:6] i1a,
  internal logic [5:4] i1b,
  internal logic [3:2] dst_xor,
  internal logic [1:0] i1c,
  internal logic [7:6] i1d;

  int low_8_bits = ((int)s[0]) & 0xFF;
  int low = ((int)a) + ((int)b) + low_8_bits; 

  
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low




// a must be different than b, and s must be different than a
// thus, if one of the bools is true, we know that a and b are different and not aliased. We return whether or not the signed a and b overflow, and assign that to the output. 
int s_overflow(int a, int b)
{
    int s = a + b;
    if ((s & 0xFF00) == 0 && (a & 0xFF00) == 0x8000 && (b & 0xFF00) == 0x8000) {
        return 1;
    }
    if ((s & 0xFF00) == 0xFF00 && (a & 0xFF00) == 0x8000 && (b & 0xFF00) == 0x7F00) {
        return 0;
    }
    return -1;

}

================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


if a or b is negative, signed overflow occurs


assign s = a + b

// s is assigned a[7:0]'s 000 signal value, while a and b are assigned its values in binary.
// b is assigned a[7]'s 00 signal value, while a is assigned its value in binary.
// b is assigned a[6]'s 01 signal value, while a is assigned its value to 010010010 in binary

// The most significant bit of the output s is the "carry bit", meaning the bit that determines whether it is one or zero

// the carry-bit can also be named as the most significant bit of the binary addition of two unsigned integers 

// The carry bit will always == 1 if a and b are signed numbers. 
//

assign overflow = (a && b)? true: false;





================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

   assign  {s==b+a,s==0,s==0[_]})
   when  a_msb_a_msb_s = high ( s_msbit + a_msbit + b_msbit);
   when  a_msb_a_msb_s = low ( s_msbit + a_msbit + b_msbit);
   when  b_msb_a_msb_s = low ( s_msbit + a_msbit + b_msbit);
   then assign {s=a_msb_a_msb_s + b_msb_a_msb_s, overflow=0}
endsigned_adder; 

          

================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

        first_if (sign(a) == sign(s));
            if (sign(s) == sign(b))
                s = a + b; // s needs no signed overflow, a and b need signed overflow
            else
                invalid
        elsif (sign(a) == false and sign(s) == true);
            s = 2'scomp - a + 2'scomp - b; // 2'scomp is adding ones to all the bits of a and b that are XOR'd. s needs no signed overflow if signed overflow is needed (in a and b) 
            else invalid
        elsif (sign(b) == false and sign(s) == true);
            s = a - 2'scomp - b; // 2'scomp is adding ones to all the bits of a and b that are XOR'd. s needs no signed overflow if signed overflow is needed (in a and b)
================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    s = (a << 1) + b + (a[7] == b[7] && s[7] == 1)
    overflow = a[7] + b[7]
     

================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implementation


// address 0
assign s[7:0] = a[7:0] + b[2:0];          // bit[8 7 6 5 4 3 2 1 0]
assign overflow[0] = ((~a[7] & ~b) || (a[7] && b)) && s[7];


// address 1
assign s[8] = a[8] + b[1];
assign overflow[1] = ((~a[7] & ~b) || (a[7] && b)) && s[8];


// address 2
assign s[9] = a[9] + b[0];
assign overflow[2] = ((~a[7] & ~b) || (a[7] && b)) && s[9];


// address 3
assign overflow[3] = ((~
================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s = a + b;
    assign overflow {s'[7], a_sig_overflow} = (
        s[7:7] == 0 and b[7:7] == 1
        or b[7:7] == 1 and a[7:7] == 0
        or s[7:7] != a[7:7] and s[7:7] != b[7:7]
     );


================================================================
