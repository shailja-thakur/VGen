example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// Otherwise reset data to either the left shift A out form or left shift B out form
#1 begin
    if( load ) begin
            out <= data << amount;
        end
        else begin
            out <= rotate(data, amount) << reset;
        end
    end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
if (load) begin
   out <= data & 0xff;
end else begin
   while(amount > 0) begin
      out = out << 1;
      out = out | data & 1;
      amount = amount - 1;
   end
end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign out = {data,(data << amount) | (data >> (amount+7))};
// assignment of load data {-1,0,1} as -1, do nothing as 0, 0 rotated register as 1
assign load_data = {-1, 0, 0, 1};
assign load_wait = { !load, !load, !load, !load };
always @(posedge clk or ~reset)
    if (!load) begin
    	if (reset) begin
    		out <= 0;
    	end
    	else begin
    		// 0 <= amount < 8 rotate_clock cycle
    		for (int i=7; i>=amount; i--) begin
    			// left rotate the data then shiftout the leftmost 8 bits
    			out <= ({data, (data << 1) | ((data & 0x80) >>
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
	if (load)
		out <= data;
	else {
		out = (data << amount ) | (out >> (8-amount));
	}
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
if (reset) begin
out <= (otherwise data);
end
else begin
if (load) begin
out <= data;
end
else begin
out[(amount-1)*8 + 1:amount*8] <= data[8:1];
out[((amount-1)*8 + 3):((amount-1)*8 + 4)] <= data[7:0];
out[((amount-1)*8 + 2):((amount-1)*8 + 3)] <= out[((amount-1)*8 + 3):((amount-1)*8 + 4)];
out[((amount-1)*8 + 0):((amount-1)*8 + 1)] <= data[15:8];
out[((amount-1)*8 + 1):((amount-1)*8 + 2)] <= data[15:8];
end
================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always begin
    case(load)
    	if(reset == 0) begin
            	  out = data;
    	    end
    	else begin
            	  out = {data,0};
    	    end
    end
end
always begin
    for(#10000 clock = 100,reset = 1,amount = 2)
        left_rotate #10000
    end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or (reset == 1)) begin
if (load) begin out <= data;
else begin out = {(data << amount) | ({out<0}),out<(8-amount)}
end
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin, assign out=~(load|(data<<amount)); if(reset) begin out=~0; end else begin if(load) begin out=data; end else begin amount=((amount)&7)+(((amount)>>4)&7)+(((amount)>>8)&7); out=out<<amount; end end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg out;
always @(posedge clk or posedge reset) begin
 if(reset) begin
     out<0;
     out_=0;
 end else if(load){
     out=data;
 } else begin
     out_ = (out<<amount) | (out>>(8-amount));
     out = out_;
 end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin out := (load) ? data : (out << amount) | (out >> (8 + amount - 1));
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// timescene	reset is active
	begin seq_reset:
		ddram_reset <= 1'b0;
		wait {}
		ddram_reset <= ddram_reset_active;
		wait {}
		ddram_controller_reset <= 1'b1;
		wait {}
		ddram_controller_reset <= ddram_controller_reset_active;
		wait {}
		while(clk), wait {}
		ddram_reset <= 1'b0;
		wait {}
		ddram_reset <= ddram_reset_active;
		wait {}
	endseq
	begin seq_store:
		if(load) begin
			ddram_reset <= 1'b0;
			wait {}
			ddram_reset <= ddram_reset_active;
			wait {}
			while(clk), wait {}
			ddram_device_
================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin end
void main(){
    if(load){
	    out=data;
    }else{
	    out= (out<<amount) | (out>>(size-1-amount));
    }
}
//***************************************************
	// Additional method for left shift with rotate
	// input: clk, reset, shift[2:0], data, load, ack
	// output: out
	//***************************************************
// Extern error_handler

	// 0418 additional module left_rotate
	// combined with enc28j60 and comparator, which could be called
	// by a /start we need to include load,ack
	// ack - indicate that ack has been received
	// load - decide whether to load data to out register

	logic clk,reset,ack;
	logic [2
================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always begin
  if(load)
    out = data;
  else begin
    if(amount == 0) begin
      out = data;
    end
    else begin
      out = {data,(data && ({data % 2})) || ((data >> amount) & 1)};
    end
  end
end
// register implementation
reg [4:0] counter;
// left rotate with load
assign out = {left_rotate(clk,reset,2'b00,counter[4]), counter[4] = (counter[3] >> 1) | (reset), counter[3] = counter[2] >> 1, counter[2] = counter[1] >> 1, counter[1] = counter[0] >> 1, counter[0]};

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
if (reset == 0) begin 
load: begin
  if (load)
  {
    out = data;
  }
  else if (amount[1] == _bsf(amount[0],amount[0]-1))
  {
    out = data[2:0];
    _shift_left_sub(data[2:0],_modulo(amount[0],8),1,data[2:0])
  }        
  else if (amount[2] == _bsf(amount[1],amount[1]-1))
  {
    out = data[2:1];
    _shift_left_sub(data[2:1],_modulo(amount[1],8),1,data[2:1])
  }        
  else if (amount
================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
if(load==1)
{
out=data;
}
else
{
#pragma HLS ARRAY_PARTITION variable=out block factor=16
o:=out[47:0];
o=o<<amount;
o=o|out[15:8];
out=o;
}

================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or negedge reset)
    if (load == 1) begin
        out <= data;
    end else begin
        if (reset == 1) begin
            out <= 0;
        end else begin
            out =   (out << amount) | (out >> ((8-amount) & 0b111)); 

    end
end
//right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to  out
// otherwise rotate right shift the out register 
// followed by right rotate the out register by amount bits first
always @ (posedge clk or negedge reset)
    
================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
 if (load) begin
   out<=(data <<(amount-1)) | (data >> amount);
 }
 end else begin
   $display("left_rotate \v [7:0]\n clk=%d   data=%d   load=%d\n amount=%1d  ", clk, data, load, amount);
   out<=rotate(data,(amount-1) & 7);
 end
end;


// smart_bit_field
// smart bit vector that
// 1. shifts inner data bits when a 0 is inserted, and gets rid of the inserted value
// ANDs inner data and inserted value when a 1 is inserted, and does not affect inner data
// 1. we will divide the inner data and the inserted value by 9 and need to decide
// 2. when to AND
================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
(* @clk = !reset && !load ? @out[data & 0x7F] : 
  @out[(@out >> amount) | (@out << (31-amount))] & 0xFFFFFF80) | 
  (!load ? (@out >> (amount+1)) : @data);)
  
// left shift and rotate operation
module lshr_rrotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
(* @clk = !reset && !load ? @out[data & 0x7F] : 
  @out[(@out >> amount)
================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin begin
	if(reset == 1 && load == 0) begin
		out[7:0] <= data;
		out <<= amount;
	end
	else begin
		out <<= amount;
		out[7:0] <= out[amount+1:0];
	end
end

================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
   if (reset) begin
      out <= 0;
   end else begin
      out <= (load) ? {data,0} :
         (data << amount) | (out >> (8-amount));
   end
end


// right rotate and left shift operation
module right_shift_rotate(clk,reset,amount,data,load,out);
input clk, reset, load;
input [2:0] amount;
input free;
input data;
input [7:0] load;
output reg [1:0] out;
always @(posedge clk or posedge reset) begin
   if (reset) begin
      out <= 0;
   end else begin
      out <= (load & free) | ((amount) ? data : out >> (32-amount));
   end
================================================================
