example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end else begin
    present_state <= IDLE;
    next_state <= IDLE;
    if (x) begin 
      present_state <= S1;
      next_state <= S1;
    end else begin
      present_state <= IDLE;
      next_state <= S1;
    end
  end
end

always @(posedge clk or posedge reset) begin
  z <= present_state;
end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin

if(reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
end

else begin
    present_state <= IDLE;
    next_state <= IDLE;
    if(present_state == IDLE) begin
       if(x) begin
            present_state <= S1;
            next_state <= S1;
        end
    end
    if(present_state == S1) begin
        if(!x) begin
            present_state <= IDLE;
            next_state <= IDLE;
        end
    end
    if(present_state == S10) begin
        if(x) begin
            present_state <= S101;
            next_state <= S101;
        end
    end
    if(present_state
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (reset) begin
        present_state <= IDLE;
    end else begin
        if (present_state == IDLE) begin
            next_state <= S1;
        end else begin
            if (present_state == S1) begin
                next_state <= S10;
            end else begin
                if (present_state == S10) begin
                    next_state <= S101;
                end else begin
                    next_state <= IDLE;
                end
            end
        end
        present_state <= next_state;
    end
    z <= present_state == S101;
end

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset) begin
    present_state <= IDLE;
  end
  else begin
    if (present_state == IDLE) begin
      next_state <= S1;
      present_state <= S1;
    end
    else begin
      if (present_state == S1) begin
        next_state <= S10;
        present_state <= S10;
      end
      else begin
        next_state <= IDLE;
        present_state <= IDLE;
      end
    end
  end
  z <= present_state;
end

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
	if (reset) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
	else begin
		if (present_state == IDLE) begin
			if (x) begin
				present_state <= S1;
				next_state <= S1;
			end else begin
				present_state <= IDLE;
				next_state <= IDLE;
			end
		end else if (present_state == S1) begin
			if (x == 0) begin
				present_state <= IDLE;
				next_state <= IDLE;
			end else begin
				present_state <= S10;
				next_state <= S10;
			end
		end else if (present_state == S10) begin
			if (x == 1) begin

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
    if(reset) begin
        present_state <= IDLE;
    end
    else begin
        present_state <= IDLE;
    end
end

always @(posedge clk) begin
    next_state <= present_state;
    if(present_state == IDLE) begin
        z <= 0;
    end
    else if(present_state == S1) begin
        if(x) begin
            next_state <= S10;
        end
        else begin
            next_state <= IDLE;
        end
    end
    else if(present_state == S10) begin
        if(x) begin
            next_state <= S101;
        end
        else begin
            next_state <= IDLE;
        end
    end
    else if(
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
  if (reset) begin
    present_state <= IDLE;
  end else begin
    present_state <= IDLE;
    if (x) begin
      present_state <= S1;
      next_state <= S10;
    end else begin
      present_state <= S1;
      next_state <= IDLE;
    end
  end
end

always @(posedge clk or posedge reset) begin
  if (present_state == S101) begin
    z <= 1;
  end else begin
    z <= 0;
  end
end

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset) begin
    present_state <= IDLE;
  end
  else begin
    if (present_state == IDLE) begin
      if (x) begin
        present_state <= S1;
      end
      else begin
        present_state <= IDLE;
      end
    end
    else begin
      if (present_state == S1) begin
        if (x) begin
          present_state <= S10;
        end
        else begin
          present_state <= IDLE;
        end
      end
      else begin
        if (present_state == S10) begin
          if (x) begin
            present_state <= S101;
          end
          else begin
            present_state <= IDLE;
          end
        end
        else begin
          present_state
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if(reset) begin
        present_state <= IDLE;
        next_state <= IDLE;
    end
    else begin 
        if(present_state == IDLE) begin
            if(x) begin
                next_state <= S1;
            end else begin
                next_state <= IDLE;
            end
        end else if(present_state == S1) begin
            if(x == 0) begin
                next_state <= S10;
            end else begin
                next_state <= IDLE;
            end
        end else if(present_state == S10) begin
            if(x) begin
                next_state <= S101;
            end else begin
                next_state <= IDLE;
            end
        end else if(present_state == S101) begin
            
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin  
  if (reset == 0) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    next_state <= IDLE;
  end
end

always @(posedge clk) begin
  if (present_state == IDLE) begin
    z <= 0;
  end
  else begin
    z <= 1;
  end
end

always @(posedge clk) begin
  if (present_state == IDLE) begin
    if (x == 1) begin
      next_state <= S1;
    end
    else begin
      next_state <= IDLE;
    end
  end
  else begin
    if (present_state == S1) begin
      if (x == 0) begin
        next_state <=
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk) begin
		if(reset) begin
			present_state <= IDLE;
		end
		else begin
			if(present_state == IDLE) begin
				if(x) begin
					present_state <= S1;
				end
				else begin
					present_state <= IDLE;
				end
			end
			else begin
				if(present_state == S1) begin
					if(x == 0) begin
						present_state <= S10;
					end
					else begin
						present_state <= IDLE;
					end
				end
				else begin
					if(present_state == S10) begin
						if(x == 1) begin
							present_state <= S101;
						end
						else begin
							present_state <= IDLE;
						end
					end
					else begin

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
    if (reset) begin
        present_state <= IDLE;
    end else begin
        present_state <= IDLE;
        if (x) begin
            next_state <= S1;
        end else begin
            next_state <= IDLE;
        end
    end
end

always begin
    if (present_state = IDLE) begin
        z <= 0;
    end else begin
        z <= 1;
    end
end

always begin
    if (present_state = S1) begin
        if (x = 1) begin
            next_state <= S10;
        end else begin
            next_state <= IDLE;
        end
    end else begin
        if (x = 1) begin
            next_state <= S101;
        end else begin
            next_state <= IDLE;
        end
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
    if (reset) begin
        present_state <= IDLE;
        next_state <= IDLE;
    end else begin
        present_state <= IDLE;
        next_state <= IDLE;
        if (present_state == IDLE) begin
            if (x) begin
                next_state <= S1;
            end else begin
                next_state <= IDLE;
            end
        end else if (present_state == S1) begin
            if (x) begin
                next_state <= S10;
            end else begin
                next_state <= IDLE;
            end
        end else if (present_state == S10) begin
            if (x) begin
                next_state <= S101;
            end else begin
                next_state <= IDLE;
            end
        end else if (present_state ==
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
if (reset) begin
present_state <= IDLE;
next_state <= IDLE;
end else begin
if (present_state == IDLE) begin
if (x) begin
present_state <= S1;
next_state <= S1;
end else begin
next_state <= IDLE;
end
end
end

always @(posedge clk) begin
z <= present_state;
end

================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
  if (reset)
    present_state <= IDLE;
  else if (!x)
    present_state <= IDLE;
  else if (x)
    present_state <= S1;
  else
    present_state <= IDLE;
  next_state <= present_state;
end

adv_fsm(clk, reset, x, z)

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
    if(reset)
    begin
        present_state <= IDLE;
    end
    else
    begin
        if(present_state == IDLE)
        begin
            if(x)
            begin
                present_state <= S1;
            end
            else
            begin
                present_state <= IDLE;
            end
        end
        else if(present_state == S1)
        begin
            if(x)
            begin
                present_state <= S10;
            end
            else
            begin
                present_state <= IDLE;
            end
        end
        else if(present_state == S10)
        begin
            if(x)
            begin
                present_state <= S101;
            end
            else
            begin
                present_
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (present_state == IDLE) begin
      if (x) begin
        present_state <= S1;
        next_state <= S10;
      end 
      else begin
        present_state <= IDLE;
        next_state <= IDLE;
      end
    end
    else begin
      if (present_state == S1) begin
        if (x) begin
          present_state <= S10;
          next_state <= S101;
        end 
        else begin
          present_state <= IDLE;
          next_state <= IDLE;
        end
      end
      else begin
        if (present_state == S10) begin
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (reset) begin
        present_state <= IDLE;
    end else if (x) begin
        // present_state is about to be assigned next_state
        if (present_state == IDLE) begin
            next_state <= S1;
        end else if (present_state == S1) begin
            next_state <= S10;
        end else if (present_state == S10) begin
            next_state <= S101;
        end
        // present_state is assigned next_state
        present_state <= next_state;
    end
end

================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
  if (reset) begin
    present_state <= IDLE; 
  end else begin
    if (present_state == IDLE) begin
      if (x) begin
        present_state <= S1; 
      end else begin
        present_state <= IDLE; 
      end
    end else if (present_state == S1) begin
      if (x) begin
        present_state <= S10; 
      end else begin
        present_state <= IDLE; 
      end
    end else if (present_state == S10) begin
      if (x) begin
        present_state <= S101; 
      end else begin
        present_state <= IDLE; 
      end
    end else if (present_state == S101) begin
      z <= 1
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
    if(reset) begin
        present_state <= IDLE;
    end
    else begin
        if(present_state == IDLE) begin
            if(x) begin
                present_state <= S1;
            end else begin
                present_state <= IDLE;
            end
        end else if(present_state == S1) begin
            if(x) begin
                present_state <= S10;
            end else begin
                present_state <= IDLE;
            end
        end else if(present_state == S10) begin
            if(x) begin
                present_state <= S101;
            end else begin
                present_state <= IDLE;
            end
        end else if(present_state == S101) begin
            if(!x) begin
                
================================================================
