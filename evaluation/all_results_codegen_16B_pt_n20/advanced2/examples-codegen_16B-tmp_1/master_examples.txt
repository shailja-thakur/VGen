example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
mediumpathclocks: if ((reset > 0) && (q = 0)) begin
resetq: begin
    q = 0;
end

// q < 10, set q += 1
incq: begin
    if (q != 9) begin
        q = q + 1;
end

// fastena = 1, increment only on positive edge of clock.
// fastena = 0, increment on any edge of clock, reset to 1 at a positive edge. 
counter_inc: begin
    q = q + 1; if (fastena > 0) nor (q = 9); end else begin
    q = 0;
end
end

always begin
    clk = 1;
end

always begin
    count_slow.clk(clk);
end

always begin
    slowena = reset;
end

always begin
    reset = 0;
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or ~reset)
    begin
      if (~reset) q <= 0;
    end

// On the positive edge of the slow clock enable:
// On the falling edge of the ena input: if q is not 9, increment q by 1; otherwise no change to q.

always @(posedge slowclk or ~(slowena and slowen))
    begin
      if (slowena and ~reset) q[1 downto 0] <= q[1] + 1;
      end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge ~clk or posedge reset) begin
    if (reset) q <= 0;
    else q <= q + 1;
    if (slowena) q <= 9;
end

// Output: q
// Note: The output must be registered to remain the same with regard to overflow
//       and signedness.

initial begin
   count_slow(
      .clk(clk),
      .slowena(slowena),
      .reset(reset),
        q(q));
end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always_comb case ar(clk, reset, clkena, ena) begin
          case ({breve(slowena, reset, clkena, ena), done()} = reset)
            {q <= 3'b000;}
          case (clkena && aer(clk, ena)) begin
            case ({breve(slowena, reset, clkena, ena), done()} = reset)
               {q <= 2'b00 + q;}
            case (clkena && aer(clk, ena), q > 1);
               {q <= 3'b0 + q;}
            endcase
          endcase
        endcase

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset) q <= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    else if (slowena)
        if (q != {9, 9, 9, 9, 9, 9, 9, 9, 9, 9})
            q <= q + 1'b1;
end

// Output ready by an active-low written value.
// On the negative edge of the clock, see above.
always @(posedge clk) begin
    if (q == 0) q <= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0} else q <= {9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
end

// Write 1 into sticky set and clear zero
always @(posedge clk) begin
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or (reset==1'b1 & !(slowena==1'b1)))
    begin
        if (!reset) 
                q <= 9'd0;
        if (ena == 1'b1 & q < 9'd9) q++;
    end


// There will be another flipflop at (q+1) to delay the counting a bit.

always @(posedge clk or (reset==1'b1 & !(slowena==1'b1)))
    begin
        lengthy_count <= q;	// (q+1)[0:3];
    end

// output looks like "2001070" which is (read as big endian byte) 20010 70 in binary. 


// Count until "A" is printed. Then reset to 0 and wait for "B" to be printed.

always
================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Derived from 64 iterations: Only 34 iterations needed. 
always @(posedge clk) begin
    if (reset == 1) begin
        q <31'd0> = 0;
    end
    else begin
        if (!disable) begin
            if (ena & ena'[q==9'd9]) begin
                q <= q+9'd1;
            end
        end
    end
end

// On the rising edge of ena:
// When reset goes high, reset the decade counter and even q.
// Otherwise, only increment the decade counter if the ena input goes high and q is not 9.
// Derived from 64 iterations: Only 34 iterations needed. 
always @(posedge ena & ~reset) begin
    if (reset == 0) begin
        q <31'd0> <= q+9'd0;
        if ((q==
================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if (reset)
        q <= 0;
    else
        if (slowena && (q < 9))
            q <= q + 1;
end

// Always active low
assign slowena = 1'd0;

// Allow reset to start slowing everything down
assign reset = 1'd0;

// Tell the counter to off Have to use an if statement because clock does not propagate to immediates
always @(posedge clk) begin
                    output_slow: if (slowena) begin
            // Set the output counters to zero on the first clock
            q <= 0;
                    end
end

// Set the output counter on the
assign q[3:0] = 1;


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge slowena[1:0])
    if (reset) 
        q <= 0; 
    else if (ena())
        if (q < 9) q++
            else q = 0;
//! Remember to remove @ when you submit your code

// On the negative edge of the clock:
// reset the output to 0. 

always @(posedge reset or posedge ~reset)
    if (reset) q <= 0;
 
// Whether 0 is high depends on slowena, and whether 9 is high depends on ena.

always @(posedge clk)
    if (slowena[1])
        q <= 9
    else
        q <= 0;
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
    if (reset)
        reg [0 : 3] = 0;
    else if (slowena && ++reg [3 : 0] != 10)
        reg [0 : 3] = reg [0 : 3] % 10;
    else
        reg [0 : 3] = reg [0 : 3] + 1;

always @(posedge clk or posedge reset)
    reg [0 : 3] = reg [0 : 3] % 10;


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge or !reset) begin
    if (reset)
        q <= 0;
    else if (!slowena)
        q <= 9;
    else if (q < 9)
        q++;
    else if (q < 10)
        q++;
    else
        q += 2;
end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
logic [3:0] arr[$bits(clk)-1:0];

reg [3:0] q;

defparam logic slowena;
defparam logic [$bits(slowena)+1:0] ena;
defparam logic [$bits(clk)]: ena, reset;
defparam reg [$bits(q)]: writable q[1:0]

always begin
   if (reset or !slowena) q <= 0;
   else if (ena and q < 9) q <= q + 1;
   else q <= q; // second output "model"
end

// In cases with only changing the clock speed The design is simpler and more
// compact.
subtype high_speed is logic [2:0];

// This design is implemented only in mips
================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
function count(
    input clk,
    input ena) {
    if (reset[0]) q <= 0; else {
        if (!ena[0] && q != 9) q <= q + 1;
    }
    if (clk) q <= q + 2;
}


// On the positive edge of slowena, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is low and q is not 0.
function count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q) {
    if (slowena[0]) q <= 0; else {
        if (!ena[0] && q != 0) q <= q - 1;
    }
    if (clk) q <= q - 2;
}


// Def
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or (reset or ~slowena))
begin 
if (reset | ~slowena) begin
q <= 0;
else begin
if (!(quadre[0] & q) & q != 9) {
    q <= q + 1;
}
end
end

// Create a 24-bit counter that decrements from 24 to 2, inclusive.
// As with the decade counter, we use two counters, each down to 9, to
// model a wider decrement.

module count_fast(
    input clk,
    input fastena,
    input reset,
    output reg count);

// The first counter counts from 2 to 7 inclusive. 

always @(posedge clk or (reset or ~fastena))
begin
if (reset | ~fastena) begin
    count <= 0;
else if (counter[0
================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// A final rising edge sets the value of output q to 0x1.
// Subsequent rising edges adjacent to the initial state will keep the value of 
// output q to 0x1. On the negative edge, the value of output q quickly starts
// increasing back to 0 (here, on the falling edge).

always @* begin
    // Set output q in the "Natural" mode, from 0 to 9.
    if ((reset == 1) || (slowena == 1))  q <= 0;
    else if ((fastena == 1) && (q < 0x10)) q <= q + 1; 
end

always @* begin
    // Set output q in the "One rising edge delay" mode, 
    // from 0 to 9 on the second rising edge following a falling edge.
    if ((counter == 0)     && (slowena == 0))  q <= 0;
================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or (reset & !slowena))
    if(start)
    {
        if(reset) q <= 0;
        else if(!(ena & q == 9))
            q <= q + 1;
    }

// Now that the decade counter is set up, decrement the decade counter and set print
// to true so we get an accurate count of the number of edges that fall during the
// decade.

(* print = true)

// Pause the clock to test this node behavior.

process(clk, slowena, reset)
{
    if(reset) reset_count = count = global counter = 0

         // Q must hold 0.
         q <= 9

        // The falling edge of progressively higher dates must be counted by q.
        start <= count_slow.posedge
        => assume(q > 0
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)      q <= 0; 
    else if (enable) if (q != 9) q <= q + 1; 

// Report the final value of q on the positive edge of the slow clock. The initial value
// of q is 0 when the reset pin is low and it is set to 9 on the positive edge of the
// clock when reset is high. Report "enable" as 1 if that edge of the clock has been
// missed and count upwards to 9. Report "enable" as 0 if that edge has been seen.
//
// ## TOPOLOGY, RESET AND STARTUP ##
//
//        +---------+                                               +-------------+
//     clk |--**RST**| 2014  clk                                   ++-|SLOW^/16--| 2014
//           '--------^                               
================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always nowarn(30) begin
    if (reset == 0 & ~slowena) {
        q <= 9'b00;
    } else if (reset != 0 & slowena) {
        q <= (q + 1) % 10'b10;
    }
end

// On the positive edge of slowena:
// reset the counter.
always begin
    case (slowena)
        case (5'b00):
        begin
            q <= 0;
        end;
        case (5'b01):
        case (5'b10):
        begin
            q <= 0;
        end;
        case (5'b11):
        begin
            q <= 0;
        end;
    endcase
end

// On the positive edge of reset, disable output.
always begin
    if (reset != 0) begin
        q <=
================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (reset)
        q <= 0;
    else
        if (slowena)
            if (q < 9)
                q <= q + 1;


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// On the positive edge of the slowenable input:
// if reset is high, reset the output q to 0. 
// Otherwise, increment the output q if slowena is high.

//Note that reset should be high at the function beginning.
void count(
    input clk,
    input slowena,
    input ena,
    input reset,
    output reg clrq,
    output reg [3:0] q);

always @(posedge clk) if (clrq) q <= 0;
always @(posedge clk or posedge slowena) if (ena) q <= 9;
always @(posedge clk) if (reset) q <= 0;
`export count_slow

================================================================
