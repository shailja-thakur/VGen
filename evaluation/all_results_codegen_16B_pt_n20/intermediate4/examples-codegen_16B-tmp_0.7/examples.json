// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end else begin\n    present_state <= next_state;\n    next_state <= present_state;\n    if (present_state == 0) begin\n      out <= in;\n    end else begin\n      out <= 1;\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tpresent_state <= 0;\n\telse if (in)\n\t\tnext_state <= present_state;\n\telse\n\t\tnext_state <= present_state + 1;\n\tout <= next_state;\n\tif (present_state == 0)\n\t\tpresent_state <= 1;\n\telse\n\t\tpresent_state <= 0;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n if (reset == 1) begin\n  present_state <= 0;\n end else begin\n  if (in == 1) begin\n   next_state <= present_state;\n   present_state <= next_state;\n  end else begin\n   next_state <= 1;\n   present_state <= next_state;\n end\n if (present_state == 1) begin\n  out <= 1;\n end else begin\n  out <= 0;\n end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= present_state;\n  end else begin\n    present_state <= present_state;\n    next_state <= present_state;\n  end\nend\nalways @(negedge clk) begin\n  if (reset) begin\n    out <= 0;\n  end else begin\n    out <= present_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if(reset) begin\n        present_state <= 0;\n        next_state <= 0;\n    end else begin\n        present_state <= next_state;\n        next_state <= (present_state==0) ? 1 : 0;\n        out <= present_state;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (!reset) begin\n\tnext_state <= 0;\n\tout <= false;\nend\nelse begin\n\tif (present_state == 0 and in == 1) begin\n\t\tnext_state <= 0;\n\t\tout <= false;\n\tend else begin\n\t\tif (present_state == 0 and in == 0) begin\n\t\t\tnext_state <= 1;\n\t\t\tout <= true;\n\t\tend else begin\n\t\t\tnext_state <= present_state;\n\t\t\tout <= in;\n\t\tend\n\tend\n\tpresent_state <= next_state;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tcase(present_state)\n\t\t0: begin\n\t\t\tif(reset) begin\n\t\t\t\tpresent_state <= 0;\n\t\t\t\tnext_state <= 0;\n\t\t\tend else begin\n\t\t\t\tif(in) begin\n\t\t\t\t\tpresent_state <= 1;\n\t\t\t\t\tout <= 1;\n\t\t\t\t\tnext_state <= 1;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state <= 0;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t1: begin\n\t\t\tout <= next_state;\n\t\tend\n\tendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset) present_state <= 0; else present_state <= next_state;\n\tnext_state <= present_state;\n\tif (present_state == 0)\n\t{\n\t\tif (in == 1) present_state <= 0;\n\t\telse present_state <= 1;\n\t}\n\telse if (present_state == 1)\n\t{\n\t\tif (in == 1) present_state <= 1;\n\t\telse present_state <= 0;\n\t}\n\tout <= present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n    out <= 0;\n    end\n  else begin\n    present_state <= next_state;\n    next_state <= present_state;\n    out <= present_state;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if(reset == 1) begin\n        next_state <= 0;\n    end\n    else begin\n        present_state <= next_state;\n        if(present_state == 0) begin\n            if (in == 0) next_state <= 1;\n        end\n        else begin\n            if (in == 1) next_state <= 0;\n            else next_state <= 1;\n        end\n        out <= present_state;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk) if (reset) present_state <= 0; else present_state <= 1;\nalways @(posedge clk) if (in) next_state <= present_state; else next_state <= 0;\nalways @(posedge clk) out <= present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    present_state <= 0;\n  end else begin\n    if (present_state == 0) begin\n      if (in) begin\n        present_state <= 1;\n      end else begin\n        present_state <= 0;\n      end\n    end else begin\n      if (in) begin\n        present_state <= 1;\n      end else begin\n        present_state <= 0;\n      end\n    end\n    next_state <= present_state;\n    out <= next_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset) present_state <= 0;\n    else if (in) present_state <= 1;\n    else present_state <= 0;\n    next_state <= present_state;\n    out <= next_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset == 1) begin\n\t\tpresent_state = 0;\n\t\tnext_state = 0;\n\tend\n\telse begin\n\t\tpresent_state = next_state;\n\t\tif (in == 1) begin\n\t\t\tnext_state = 0;\n\t\tend\n\t\telse if (in == 0) begin\n\t\t\tnext_state = 1;\n\t\tend\n\t\tout = present_state;\n\tend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 14,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if(reset)\n    begin\n        present_state = 0;\n        next_state = 0;\n    end\n    else if(present_state == 0)\n    begin\n        next_state <= in;\n        if(next_state == 1)\n        begin\n            present_state <= 1;\n        end\n        else if(next_state == 0)\n        begin\n            present_state <= 0;\n        end\n        else\n        begin\n            out <= 1;\n        end\n    end\n    else if(present_state == 1)\n    begin\n        next_state <= in;\n        if(next_state == 0)\n        begin\n            present_state <= 0;\n        end\n        else if(next_state == 1)\n        begin\n            present_state <= 1;\n        end\n        "
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "assign present_state = in;\nassign next_state = present_state == 1 ? 1 : 0;\nassign out = present_state == 1 ? 1 : 0;\nalways @(posedge clk) begin\n    if (reset == 1) begin\n        present_state <= 0;\n        next_state <= 0;\n    end else begin\n        if (present_state == 0) begin\n            if (in == 1) begin\n                present_state <= 1;\n                next_state <= 1;\n            end else begin\n                next_state <= 0;\n            end\n        end else begin\n            if (in == 1) begin\n                present_state <= 1;\n                next_state <= 1;\n            end else begin\n                next_state <= 0;\n            end\n            out <= next_state;\n        end\n    end\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 16,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if(reset) begin\n    present_state <= 0;\n    next_state <= 0;\n    out <= 0;\n  end else begin\n    if(present_state == 0 && in == 1) begin\n      present_state <= 1;\n      next_state <= 1;\n      out <= 1;\n    end else if(present_state == 0 && in == 0) begin\n      present_state <= 0;\n      next_state <= 0;\n      out <= 0;\n    end else if(present_state == 1 && in == 1) begin\n      present_state <= 1;\n      next_state <= 1;\n      out <= 1;\n    end else if(present_state == 1 && in == 0) begin\n      present_state <= 0;\n      next_state <= 0;\n      out <= 0;\n    end"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n  present_state:\n  case (present_state)\n    0: if (in) next_state <= 0; else next_state <= 1;\n    1: if (in) next_state <= 1; else next_state <= 0;\n  endcase\n  next_state <= present_state;\n  out <= present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n    if (reset) present_state <= 0;\n    else if (present_state > 0)\n    begin\n        if (in) present_state <= 0;\n        else present_state <= 1;\n    end\n    else next_state <= present_state;\n    if (present_state == 0)\n    begin\n        out <= in;\n    end\n    else\n    begin\n        out <= next_state;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "assign present_state = (in, present_state);\nassign next_state = (present_state, next_state);\nalways @(posedge clk) begin\n\tif (reset == 1) begin\n\tpresent_state <= 0;\n\tnext_state <= 0;\n\tout <= 0;\n\tend else if (present_state == 0) begin\n\tif (in == 1) begin\n\tnext_state <= 0;\n\tout <= 1;\n\tend else begin\n\tnext_state <= 1;\n\tend\n\tend else if (present_state == 1) begin\n\tif (in == 0) begin\n\tnext_state <= 0;\n\tout <= 1;\n\tend else begin\n\tnext_state <= 1;\n\tend\n\tend\nend\n"
    }
  ],
  "created": 1663535718,
  "id": "cmpl-ZmW0KpHYN8m72XSqCLG8GEZ5HGpll",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 2489,
    "prompt_tokens": 148,
    "total_tokens": 2637
  }
}