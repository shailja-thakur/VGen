example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// The next_state is COME_FROM_0 if we are in state 0 waiting to go to 1,
// and RIGHT_TO_0 if we are in state 1 waiting to go to 0
// (Be careful not to NACK if we have been reset, instead reset after 
// determining next_state)
reg [2:0] cputick;
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 0;
	cputick <= 0;
	out <= 0;
	end
	else
	begin
	present_state <= next_state;
	cputick <= cputick + 1;
	if (cputick == 3) cputick <= -1;
	else if (cputick == 2) cout <= 1;
	end
end
always @(present_state, in
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// equation for next state and present state
next_state = present_state;
assign out = present_state;
always@(posedge clk)
begin
if (reset == 1)
present_state = 0;
else
present_state = next_state;
end
always@(in or present_state)
begin
// State 0
if (present_state == 0 && in == 1)
next_state = 1;
// State 1
if (present_state == 1 && in == 0)
next_state = 0;
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// assign out = present_state ^ next_state; 
// Please complete the functionality and implementation of this stimulus by using a RAM to store the present state and next state storage.
// hard-code data of the table (don't look for this BRIDGE sengleton example code)
//check0:1:1
//check0:1:0
//check1:1:1
//check1:1:0
//check1:0:1
//check1:0:0
// check0 -> check1
// check1 -> check0
// check1 -> check1
// check1 -> check1
// check1 -> check1
//check0:0:1
// check1:1:1
//check1:0:1
//check0:1:1
//check0:0:0
// check1 -> check0

reg[1:0]
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Present state assign
parameter s0 = 0, s1 = 1;
// Next state assign
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= s0;
else
present_state <= next_state;
end
// Moore FSM
always @(present_state, in)
begin
case(present_state)
s0:
begin
next_state <= (in)? s0 : s1;
out <= (in)? 0 : 1;
end
s1:
begin
next_state <= (in)? s0 : s1;
out <= (in)? 0 : 1;
end
default:
begin
next_state <= s0;
out <= 0;
end
endcase
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter s0 = 0, s1 = 1;
// both present state and next state need to be reg since Moore is used
always @(posedge clk,posedge reset)
begin
if(reset)
present_state <= s0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
s0:if(in)
next_state <= s1;
else 
next_state <= s0;
s1:if(in)
next_state <= s0;
else 
next_state <= s1;
default:
next_state <= s0;
endcase
end
always @(present_state)

case(present_state)
s0:
out=0;
s1:
out=1;
endcase


================================================================
