example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) begin
		present_state <= 0;
	end else begin
		if (present_state == 0) begin
			next_state <= in;
			out <= next_state;
		end else begin
			next_state <= present_state;
		end
		present_state <= next_state;
	end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if(reset) present_state = 0;
    else if(present_state == 0) begin
        if(in == 1) present_state = 0;
        else present_state = 1;
        next_state = present_state;
    end
    else if(present_state == 1) begin
        if(in == 1) present_state = 1;
        else present_state = 0;
        next_state = present_state;
    end
    out = present_state;
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset == 1) begin
    present_state <= 0;
    next_state <= 0;
  end
  else begin
    present_state <= next_state;
    next_state <= (present_state == 0) ? 1 : 0;
    out <= present_state == 0 ? 1 : 0;
  end
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) present_state <= 0;
	else if (present_state == 0)
	begin
		if (in) present_state <= 0;
		else present_state <= 1;
	end
	else if (present_state == 1)
	begin
		if (in) present_state <= 1;
		else present_state <= 0;
	end
	out <= present_state;
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
  end
  else begin
    if (present_state == 0) begin
      if (in) begin
        present_state <= 1;
        next_state <= 1;
        out <= 1;
      end else begin
        present_state <= 0;
        next_state <= 0;
        out <= 0;
      end
    end else begin
      if (present_state == 1) begin
        if (in) begin
          present_state <= 1;
          next_state <= 1;
          out <= 1;
        end else begin
          present_state <= 0;
          next_state <= 0;
          out <= 0;
        end
      end
    end
  end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
  end else begin
    if (present_state == 0) begin
      if (in) begin
        present_state <= 1;
        out <= 1;
      end else begin
        present_state <= 0;
        out <= 0;
      end
    end else begin
      if (in) begin
        present_state <= 1;
        out <= 1;
      end else begin
        present_state <= 0;
        out <= 0;
      end
    end
  end
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
if (reset == 1) begin
  present_state <= 0;
  next_state <= 0;
end
else begin
  if (present_state == 0) begin
    if (in == 1) begin
      present_state <= 0;
      next_state <= 0;
    end else begin
      present_state <= 1;
      next_state <= 1;
    end
  end else begin
    if (in == 1) begin
      present_state <= 1;
      next_state <= 1;
    end else begin
      present_state <= 0;
      next_state <= 0;
    end
  end
  out <= present_state;
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (reset) begin
        present_state <= 0;
        next_state <= 0;
        out <= 0;
    end
    else begin
        present_state <= next_state;
        next_state <= present_state;
        out <= present_state;
    end
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
  end else begin
    present_state <= next_state;
    next_state <= present_state + 1;
    out <= present_state;
  end
end

// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm_with_reset(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) begin
		present_state <= 0;
	end else begin
		// Present state is the next state
		next_state <= present_state;
		// Set output
		if (present_state == 1) begin
			out <= 1;
		end else begin
			out <= 0;
		end
	end
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (reset) present_state <= 0;
    else if (present_state == 0) begin
        if (in) next_state <= 0;
        else next_state <= 1;
    end else if (present_state == 1) begin
        if (in) next_state <= 1;
        else next_state <= 0;
    end
    present_state <= next_state;
    out <= present_state;
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
present_state = 0;
next_state = 0;
end
always @(posedge clk or posedge reset) begin
if (reset) begin
present_state = 0;
next_state = 0;
end
else begin
if (present_state == 0) begin
if (in) begin
next_state = 0;
end
else begin
next_state = 1;
end
end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (reset) begin
        present_state <= 0;
        next_state <= 0;
    end
    else begin
        if (present_state == 0) begin
            // in=1
            present_state <= 1;
            next_state <= 1;
        end
        else begin
            // in=0
            present_state <= 1;
            next_state <= 0;
        end
        out <= next_state;
    end
end

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset == 1) begin
		present_state <= 0;
		next_state <= 0;
	end
	else begin
		if (present_state == 0) begin
			if (in == 1) begin
				present_state <= 0;
				next_state <= 0;
				out <= 1;
			end else begin
				present_state <= 1;
				next_state <= 1;
				out <= 0;
			end
		end else begin
			if (in == 1) begin
				present_state <= 1;
				next_state <= 1;
				out <= 1;
			end else begin
				present_state <= 0;
				next_state <= 0;
				out <= 0;
			end
		end
	end
	next_state <= present_state;
end
end
================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset) begin
  case(present_state)
    0 : // State 0
      if (reset) begin
        present_state <= 0;
        next_state <= 0;
      end
      else if (in) begin
        present_state <= 1;
        next_state <= 1;
      end
      else begin
        present_state <= 0;
        next_state <= 0;
      end
      case(next_state)
        0 : // State 0
          if (reset) begin
            out <= 0;
          end
          else if (in) begin
            out <= 1;
          end
          else begin
            out <= 0;
          end
        1 : // State 1
          if (reset) begin
            out <= 0;
          end
          else if (in) begin
            out <=
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
if (reset == 1) begin
  present_state <= 0;
  next_state <= 0;
  out <= 0;
end
else begin
  if (present_state == 0) begin
    if (in == 1) begin
      present_state <= 1;
      next_state <= 0;
      out <= 0;
    end
    else begin
      present_state <= 0;
      next_state <= 1;
      out <= 0;
    end
  end
  else begin
    if (in == 1) begin
      present_state <= 1;
      next_state <= 1;
      out <= 1;
    end
    else begin
      present_state <= 1;
      next_state <= 0;
      out <= 0;
    end
  end
end
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
  if (reset == 1) begin
    present_state <= 0;
    next_state <= 0;
  end
  else begin
    if (present_state == 0 and in == 1) begin
      present_state <= 1;
    end
    else if (present_state == 1 and in == 0) begin
      present_state <= 0;
    end
    if (present_state == 0) begin
      out <= 1;
    end
    else begin
      out <= 0;
    end
    next_state <= present_state;
  end
end

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
  end else begin
    // We have to check that the input is 1 first,
    // since the transition to 1 is instantaneous.
    if (in) begin
      present_state <= next_state;
    end else begin
      present_state <= next_state;
    end
  end
end
assign out = present_state;

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) begin
		present_state <= 0;
		next_state <= 0;
	end else begin
		if (present_state == 0) begin
			if (in) begin
				next_state <= 0;
			end else begin
				next_state <= 1;
			end
		end else begin
			if (in) begin
				next_state <= 1;
			end else begin
				next_state <= 0;
			end
		end
		present_state <= next_state;
		out <= present_state;
	end
end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg present_state = 0;
reg next_state = 1;
always @(posedge clk)
begin
  if(reset) begin
    present_state <= 0;
    next_state <= 0;
  end
  else begin
    if(present_state == 0) begin
      if(in) begin
        next_state <= 0;
      end else begin
        next_state <= 1;
      end
    end else begin
      if(in) begin
        next_state <= 1;
      end else begin
        next_state <= 0;
      end
    end
    present_state <= next_state;
    out <= present_state;
  end
end

================================================================
