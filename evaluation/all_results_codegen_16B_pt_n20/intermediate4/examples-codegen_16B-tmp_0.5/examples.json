// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset) begin\n\t\tpresent_state <= 0;\n\tend else begin\n\t\tif (present_state == 0) begin\n\t\t\tnext_state <= in;\n\t\t\tout <= next_state;\n\t\tend else begin\n\t\t\tnext_state <= present_state;\n\t\tend\n\t\tpresent_state <= next_state;\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if(reset) present_state = 0;\n    else if(present_state == 0) begin\n        if(in == 1) present_state = 0;\n        else present_state = 1;\n        next_state = present_state;\n    end\n    else if(present_state == 1) begin\n        if(in == 1) present_state = 1;\n        else present_state = 0;\n        next_state = present_state;\n    end\n    out = present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset == 1) begin\n    present_state <= 0;\n    next_state <= 0;\n  end\n  else begin\n    present_state <= next_state;\n    next_state <= (present_state == 0) ? 1 : 0;\n    out <= present_state == 0 ? 1 : 0;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset) present_state <= 0;\n\telse if (present_state == 0)\n\tbegin\n\t\tif (in) present_state <= 0;\n\t\telse present_state <= 1;\n\tend\n\telse if (present_state == 1)\n\tbegin\n\t\tif (in) present_state <= 1;\n\t\telse present_state <= 0;\n\tend\n\tout <= present_state;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n    out <= 0;\n  end\n  else begin\n    if (present_state == 0) begin\n      if (in) begin\n        present_state <= 1;\n        next_state <= 1;\n        out <= 1;\n      end else begin\n        present_state <= 0;\n        next_state <= 0;\n        out <= 0;\n      end\n    end else begin\n      if (present_state == 1) begin\n        if (in) begin\n          present_state <= 1;\n          next_state <= 1;\n          out <= 1;\n        end else begin\n          present_state <= 0;\n          next_state <= 0;\n          out <= 0;\n        end\n      end\n    end\n  end\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n  end else begin\n    if (present_state == 0) begin\n      if (in) begin\n        present_state <= 1;\n        out <= 1;\n      end else begin\n        present_state <= 0;\n        out <= 0;\n      end\n    end else begin\n      if (in) begin\n        present_state <= 1;\n        out <= 1;\n      end else begin\n        present_state <= 0;\n        out <= 0;\n      end\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk) begin\nif (reset == 1) begin\n  present_state <= 0;\n  next_state <= 0;\nend\nelse begin\n  if (present_state == 0) begin\n    if (in == 1) begin\n      present_state <= 0;\n      next_state <= 0;\n    end else begin\n      present_state <= 1;\n      next_state <= 1;\n    end\n  end else begin\n    if (in == 1) begin\n      present_state <= 1;\n      next_state <= 1;\n    end else begin\n      present_state <= 0;\n      next_state <= 0;\n    end\n  end\n  out <= present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n        out <= 0;\n    end\n    else begin\n        present_state <= next_state;\n        next_state <= present_state;\n        out <= present_state;\n    end\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end else begin\n    present_state <= next_state;\n    next_state <= present_state + 1;\n    out <= present_state;\n  end\nend\n\n// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.\nmodule simple_fsm_with_reset(clk, reset, in, out);\ninput clk;\ninput reset;\ninput in;\noutput out;\nwire out;\nreg present_state, next_state;\n// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1\n// In state 1, if in=1, stay in state 1. In state 1"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset) begin\n\t\tpresent_state <= 0;\n\tend else begin\n\t\t// Present state is the next state\n\t\tnext_state <= present_state;\n\t\t// Set output\n\t\tif (present_state == 1) begin\n\t\t\tout <= 1;\n\t\tend else begin\n\t\t\tout <= 0;\n\t\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if (reset) present_state <= 0;\n    else if (present_state == 0) begin\n        if (in) next_state <= 0;\n        else next_state <= 1;\n    end else if (present_state == 1) begin\n        if (in) next_state <= 1;\n        else next_state <= 0;\n    end\n    present_state <= next_state;\n    out <= present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "initial begin\npresent_state = 0;\nnext_state = 0;\nend\nalways @(posedge clk or posedge reset) begin\nif (reset) begin\npresent_state = 0;\nnext_state = 0;\nend\nelse begin\nif (present_state == 0) begin\nif (in) begin\nnext_state = 0;\nend\nelse begin\nnext_state = 1;\nend\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n    end\n    else begin\n        if (present_state == 0) begin\n            // in=1\n            present_state <= 1;\n            next_state <= 1;\n        end\n        else begin\n            // in=0\n            present_state <= 1;\n            next_state <= 0;\n        end\n        out <= next_state;\n    end\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset == 1) begin\n\t\tpresent_state <= 0;\n\t\tnext_state <= 0;\n\tend\n\telse begin\n\t\tif (present_state == 0) begin\n\t\t\tif (in == 1) begin\n\t\t\t\tpresent_state <= 0;\n\t\t\t\tnext_state <= 0;\n\t\t\t\tout <= 1;\n\t\t\tend else begin\n\t\t\t\tpresent_state <= 1;\n\t\t\t\tnext_state <= 1;\n\t\t\t\tout <= 0;\n\t\t\tend\n\t\tend else begin\n\t\t\tif (in == 1) begin\n\t\t\t\tpresent_state <= 1;\n\t\t\t\tnext_state <= 1;\n\t\t\t\tout <= 1;\n\t\t\tend else begin\n\t\t\t\tpresent_state <= 0;\n\t\t\t\tnext_state <= 0;\n\t\t\t\tout <= 0;\n\t\t\tend\n\t\tend\n\tend\n\tnext_state <= present_state;\nend\nend"
    },
    {
      "finish_reason": "length",
      "index": 14,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  case(present_state)\n    0 : // State 0\n      if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n      end\n      else if (in) begin\n        present_state <= 1;\n        next_state <= 1;\n      end\n      else begin\n        present_state <= 0;\n        next_state <= 0;\n      end\n      case(next_state)\n        0 : // State 0\n          if (reset) begin\n            out <= 0;\n          end\n          else if (in) begin\n            out <= 1;\n          end\n          else begin\n            out <= 0;\n          end\n        1 : // State 1\n          if (reset) begin\n            out <= 0;\n          end\n          else if (in) begin\n            out <="
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "always @(posedge clk) begin\nif (reset == 1) begin\n  present_state <= 0;\n  next_state <= 0;\n  out <= 0;\nend\nelse begin\n  if (present_state == 0) begin\n    if (in == 1) begin\n      present_state <= 1;\n      next_state <= 0;\n      out <= 0;\n    end\n    else begin\n      present_state <= 0;\n      next_state <= 1;\n      out <= 0;\n    end\n  end\n  else begin\n    if (in == 1) begin\n      present_state <= 1;\n      next_state <= 1;\n      out <= 1;\n    end\n    else begin\n      present_state <= 1;\n      next_state <= 0;\n      out <= 0;\n    end\n  end\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 16,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n  if (reset == 1) begin\n    present_state <= 0;\n    next_state <= 0;\n  end\n  else begin\n    if (present_state == 0 and in == 1) begin\n      present_state <= 1;\n    end\n    else if (present_state == 1 and in == 0) begin\n      present_state <= 0;\n    end\n    if (present_state == 0) begin\n      out <= 1;\n    end\n    else begin\n      out <= 0;\n    end\n    next_state <= present_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end else begin\n    // We have to check that the input is 1 first,\n    // since the transition to 1 is instantaneous.\n    if (in) begin\n      present_state <= next_state;\n    end else begin\n      present_state <= next_state;\n    end\n  end\nend\nassign out = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset) begin\n\t\tpresent_state <= 0;\n\t\tnext_state <= 0;\n\tend else begin\n\t\tif (present_state == 0) begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state <= 0;\n\t\t\tend else begin\n\t\t\t\tnext_state <= 1;\n\t\t\tend\n\t\tend else begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state <= 1;\n\t\t\tend else begin\n\t\t\t\tnext_state <= 0;\n\t\t\tend\n\t\tend\n\t\tpresent_state <= next_state;\n\t\tout <= present_state;\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "reg present_state = 0;\nreg next_state = 1;\nalways @(posedge clk)\nbegin\n  if(reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end\n  else begin\n    if(present_state == 0) begin\n      if(in) begin\n        next_state <= 0;\n      end else begin\n        next_state <= 1;\n      end\n    end else begin\n      if(in) begin\n        next_state <= 1;\n      end else begin\n        next_state <= 0;\n      end\n    end\n    present_state <= next_state;\n    out <= present_state;\n  end\nend\n"
    }
  ],
  "created": 1663535709,
  "id": "cmpl-kdVlgQHowOFPNEHJYAFa7FvFok9nN",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 2815,
    "prompt_tokens": 148,
    "total_tokens": 2963
  }
}