example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @( posedge clk )
begin
  if ( sel == 0 )
    out <= a;
  else if ( sel == 1 )
    out <= b;
end

================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a&b to out. 
// When sel=3, assign a|b to out. 
assign out = sel ? b : a;

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
    if (sel) out <= b;
    else     out <= a;
end

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out.

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign nothing to out. 
// When sel=3, assign nothing to out. 
assign out = a;


================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out.


================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = (sel==0)? a : b;

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = (sel==1)?b:a;

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = (sel==0) ? a : b;

================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
always @(posedge clk) begin
if (sel==0) begin
out <= a;
end
else if (sel==1) begin
out <= b;
end
else if (sel==2) begin
out <= a;
end
else if (sel==3) begin
out <= b;
end
end

================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
if (sel==0) begin
out <= a;
end else begin
out <= b;
end
end

================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk)
begin
  if (sel==0) out <= a;
  else out <= b;
end

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
  if (sel == 0) begin
    out <= a;
  end else begin
    out <= b;
  end
end

// Design a 4-to-1 demultiplexer.
module demux( 
input [4:0] a, b, c, d,
output [4:0] out );
// When a=0, assign b to out. 
// When a=1, assign c to out. 
// When a=2, assign d to out. 
always @(posedge clk) begin
  if (a == 0) begin
    out <= b;
  end else if (a == 1) begin
    out <= c;
  end else if (a == 2) begin
    out <= d;
  end
end

// Design a 4-to-
================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
  if (sel==0)
    out <= a;
  else
    out <= b;
end

================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = (sel==0) ? a : b;

================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
always @(posedge clk) begin
  if (sel==0) out <= a;
  else if (sel==1) out <= b;
  else if (sel==2) out <= a;
  else if (sel==3) out <= b;
end

================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
  if (sel==0) begin
    out <= a;
  end else begin
    out <= b;
  end
end

================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = ( sel==0 ) ? a : b;

================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
always @(posedge clk) begin
  if (sel==0)
    out <= a;
  else if (sel==1)
    out <= b;
  else if (sel==2)
    out <= a;
  else
    out <= b;
end

================================================================
