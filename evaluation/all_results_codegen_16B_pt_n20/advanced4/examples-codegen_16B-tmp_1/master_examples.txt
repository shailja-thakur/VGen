example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



always @(posedge clk)
r <= [63:0] (
	r[63:0] & {64'shifth}!(!ena & r[63:0] == r[63:0]));


================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    bool load = bool(load);
    bool carry_count_only = bool(!!(amount & 2) && !bool(ea));
    
    if (load) 
    { 
        #(64, 63) io [63:0] q = data [63:0];
        #(0) {
        if (ena) q = 0; 
        else if (amount == 0 || amount == 2) q = q << 1; //{ handled by synthesis;
        #}
        #(0) {
            for (int i = count ((~load) + 1); i > 0; --i) { 
                if (amount == 0 || amount == 2) q = q << 1; //{ handled by synthesis;
                #(64, 64) io [63:0] val = !load ? (amount == 2 && i == 1 ? 1 : 1)
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


wire lena, lenb;

assign lena = ena^1;
assign lenb = amount & 1 ^ 1;

always @(posedge clk) begin
    if (lena) {
        q <= 64'h0;
    } else if (lenb) { 
        q[63] <= 1;
    }
end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    always @(posedge clk)
    begin
    q = data;
    ena <== ~load;
    ena <== ~ena;
    if(~ena and amount == 2'b00)
        q <= (data << 1);
    else if(~ena and amount == 2'b10)
        q <= (data >> 1);
    else if(~ena and amount == 2'b20)
        q <= (data >> 8);
    else if(~ena and amount == 2'b30)
        q <= (data << 8);
    end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// DFF #1
// Design a D flip-flop, add ports and signals to it as desired, 
// Sync-Load a storage register, testing both data and control signals.
// As in: ordinary flip-flop with Normal operation. with SLFT 0. 
// (SLFT means SER flip-flop)

module dff(input clk,
      input  rising_edge_tdiff_1_2,
      input  falling_edge_data_1_2,
      input  rising_edge_tdiff_2_3,
      input  falling_edge_data_2_3,
      output d);
// (ABCDEF)(ijk)(AHILKDJ)
// . . . . . . . . . . . . . . . .

// RDY #1
// Read-enable synchronous clear operation during loading.

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
 
	if((load) && (ena)) begin
	
		// when load is high, assign data[63:0] to shift register q.
		q <= data[63:0];
		
  end else if((load) && (1==amount)){
    // Shifting left by 1bit

		q <<= 1;
		q |= (data[63:56] & 0x1);
	} else if((load) && (2==amount)){
		// Shifting left by 8 bits

		q <<= 8;
		q |= (data[56:43] & 0xff);
	} else if((load) && (3==amount)){
		// Shifting left by 1 bit

		q <<= 1;
		q |= (data[64:63] & 0x1);
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;
// The shifter will be enabled by selecting ena high.
// ena is specified by sending a clk between 0 and 1,
// and then quiting before a clk of 1.
always
#0 {
  if (ena) begin 
    // Hightogehter /Divider Register selects the scale of the output Q.
    // Loadthe shift register selected by the selected amount to data.
    q = data;
    // Figure out the desired direction of the shifts, and select the direction byte.
    q = q[63:62] +
      q[61:56]  +
      q[55:48]  +
      q[47:40]  +
      q[39:32]  +
      q[31:24]  +
      q[23:16]  +
      q[
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Main logic
    always @(posedge clk) begin 
        // See design comments for most of the following logic 
        if(ena > 0) begin 
            if (load > 0 && load_queue.count() == 1) begin
                q <= data;
            end else begin
                if (amount == rdyl) begin
                    q <-- data_load0;
                end else begin
                    if (amount == rdyr) begin
                        q <-- data_load1; 
                    end
                end
            end
        end
    end


================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    // Particularly important property: amount selects the pin-level to shift into,
    // so that shifting can be set "instantaneously".
    // (2'b00 is equivalent to 1bit_a, and 2'b11 is equivalent to 8bit_a)
    //
    // For a shift register, not all values of amount can be high at once.
    // For a shift register, not all values of amount can be high 
    // at once. If 0-shift is selected, the register has a default value 
    // and the shift register begins returning 0's. Shift registers can be 
    // unidirectional if clk remains low. The enable signal only affects 
    // the direction of the shift operation.
    // SRL input is ignored by the hardware when a full shift register is 
    // read immediately after start-up. However, there is no synchronous load
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Constructor, fills shift register, enables module.
// clk = 0: load on rising edge.
//       = 1: wait for load pulse, and shift on falling edge.
// ena = 0: perform shift.
//       = 1: enable shift 
// amount = Offset to arithmetic right. Valid value is [0:2].
// [63:0] Output at shift register Q.
function advshift(arguments) {
/// Constructor that calls shift right.
function ctor(clk, load, ena) { 
    return advshift(clk, load, ena, 2, 0, arguments[0]);
}

/// Shift left by 1 bit.
function advshift(clk, load, ena, amount, data) {
    if (typeof arguments[4] === "undefined") { arguments[4] = 0; }

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


regall int my_register = 0;

visible main ()
{
  long value;
  int amount;
  value = data;
  result = 0;
// start visualization


char dataout;
// Clock in Load command and store it in my_register. If load is high, read shift register q into my_register,
//   and load shift register data%32 into my_register.
// enable nops and wait for duration_swits of clocks, then assign value equal to my_register
// 
// Clock in Shift command. Assign current value in my_register to dataout. Delay nops for duration_nops
//   clocks, and latch dataout as the first word of the shift register (data%32). Store my_register in q.











  while (1) {
    if (!ena)
      wait;
    while
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 /* Part of User_Interface accelerator's top level. */ 
  module reg [15:0];

  (*(reg)), (()bitselect((!((*(clk)),0)), (ena, (reg(data), 1)), (una, (reg(data + 8), 1))));
  (*(reg)), (()bitselect((!((*(clk)),1)), (ena, (reg(data + 8), 8)), (una, (reg(data + 16) , 8) 
#PACKAGE
#UNPACKAGE
             } )

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (ena) begin
		case (amount)
		case (amount[0]):
		} // end of selectic
		q <= data; // [63:0] << not(amount) | q[46:0];
	end
end

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 import go -> wire;
`
================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// wire [19:0] i;
// wire C[7:0] = i[7:0]; // specify which bits to cause an arithmetic left shift.
// wire D[7:0] = i[15:8]; // specify which bits to cause an arithmetic right shift.
// wire E[7:0] = i[23:16]; // specify which bits to cause an arithmetic right shift.
// wire G[7:0] = i[31:24]; // specify which bits to cause an arithmetic right shift.
// wire H[7:0] = i[39:32]; // specify which bits to cause an arithmetic right shift.
// wire O[7:0] = i[47:40]; // specify which bits to cause an arithmetic right shift.
// wire P[7:0] = i[55:48]; // specify which bits to cause an arithmetic right shift.

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    always @(posedge clk or negedge load) begin
        if (ena && load) begin
            q <= data[63:0];
        end
        if (amount[1]) begin
            q <= q + 1;
        end else if (amount[0]) begin
            q[8:0] <= q[8:0] + 1;
        end 
    end
end
`}

================================================================
