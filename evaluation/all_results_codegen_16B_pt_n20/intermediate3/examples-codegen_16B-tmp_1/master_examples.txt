example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if ( reset == 0 ) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg;
        r_reg <= r_next;
        r_int <= ~r_next.and(3);
        feedback_value <= ~r_reg.and(1).or(2); 
    end
end
assign q <= r_reg;



// Design a 2-bit linear counter to generate alternating clk/pacman input
int getBit( input clk );
reg cnt;
wire CounterInitValue;
wire CounterBit0;
// Reset cnt to 0 on reset
// Assign the least significant bit of cnt to CounterInitValue
// Assign the i_bit of cnt to CounterBit0
// Increment cnt on cl
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
always @(posedge clk or posedge reset) 
begin
    if (reset)
        r_reg <= 0;
    else
        r_next := r_reg;
    r_reg := r_next ^ (r_next << 4);
    feedback_value <= (~r_reg) & 0x0f;
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always(clk) begin
    if (reset && ~reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg = (r_reg << 1) | 1;
    end
    r_next <= ("01" & (r_reg(2,2))) ^ quotient(feedback_value, 8) + quotient(r_reg(4, 4),2);
    q <= r_next(4);
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always begin
    if (reset) 
        r_reg <= 0; 
    else if (clk)
        r_reg <= (
            (r_reg.xor((r_reg() >> 2) & 3)) ^ 
            (r_reg() >> 4) & 0xf
            ); 
    q <= r_next;
    r_next := (r_reg.shift_left(4) & 0x00f0) | 
        r_reg();
end begin

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
Assign( y^y' ) <= {0,0x18}
Assign( x^(!r_reg) y << 5 ): x <= { <<5, r_reg}
wire [5:0] control = {q,1{x}};
Control(wire clock,wire reset,out clk) <= {clk,reset == 0 && clock}
// RFSR graphical example
1 <= lfsr <= 4;

// Recircuit used to generate 18-bit wide binary numbers from Galois LFSR input
module rfsr(
    input clk,
    input reset,
    input [4:0] alphabet,
    flipout xor1,
    output r
);
output [15:0] y;
intB [15:0] rn0, rn1;
private wire a_0, a_1, a
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg xor 2 and r_reg xor 4;
        r_next <= bvconv(r_reg, 6) xor feedback_value;
        feedback_value <= r_reg[2] xor r_reg[4];
        q <= r_next;
    end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always begin begin ## a_wait ## if (reset == 0) begin ## a_stop ## begin ## a_impl ## end endif ## r_reg = 1; 
## a_start ## 
## a_impl ## begin ## a_start ## if (clk == 1) begin ## a_if ## begin ## a_assign ## q[0:4] = xor(\
## q[2:4], r_reg[4:4]); ## a_else ## begin ## a_assign ## q[0:4] = xor(\
## q[2:4], r_reg[4:4]); ## a_endif ## end ## end ## end endif ## end ## a_else ## begin ## a_if ## if (clk == 1) begin ## a_assign ## r_next[0:4] = xor(\
## r_next[2:4], q
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next[9];

// clkdassert fastcase here to very quickly stop a shift
assert(clk.clk == true)
reg [] clkdassert = 0;

Control-C to stop, F to go
sig @clk {
    // if clk == true, shift bit position 1 to bit position 0
    if (clk) r_reg[0] = !r_reg[1];
    // if clk == true, shift bit position 3 to bit position 2
    else r_reg[2] = !r_reg[3];
    // if r_reg[0] == r_reg[2] == 0 then update q with the bit position 1
    if (r_reg && (r_reg[0] == r_reg[2])) q = q ^ r_reg[1]; 
    
================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset == true) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg @ xor(r_reg << 2) @ feedback_value;
        q <= concat(r_reg[4], r_reg[3]);
        r_reg <= r_next;
    end
end
// This first state transition makes fextended to 1
// and the following transition to the other values at the proper bit positions
Battery_boost_waveform_demo1

Battery_boost_waveform_demo2 Battery_boost_waveform_demo2

Battery_boost_waveform_demo3 Battery_boost_waveform_demo3

Battery_boost_waveform_demo4 Battery_boost_waveform_demo4

Battery_boost
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
q <= ~sgAdd(~r_reg[0],
		sgXor(sgXor(sgXor(r_reg[1], r_reg[2]), r_reg[3]), ~reset)
);

// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

// assign b1toq to as if q was clkx
// return final rotation done by one clock cycle, adjust for actual plug
// acceptable range of final rotation of 0, 1, 2, 3, or 4
// return external concatenation of clkx0, clkx1, clkx2, clkx
================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset, n in [7:0]) {
 if reset{Q = 0;}
 else if rising_edge[clk] {
      q <= r_next;
      r_reg = (<2>) r_reg {
        clk, r_reg[2], r_reg[4], feedback_value
      };
      r_next = intcount [] r_reg[wh] {
        3, 3, 3, r_reg[3:2]
      };
      feedback_value = ((<2> o & 0) === 1);
    }
}

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( { reset, clk } ) begin
	if (reset === 1) begin
		r_reg = 1; 
		r_next = 3;
		feedback_value = 4;
		q <= r_next;
	end else begin
		q <= r_reg;
		// Feedback value includes the copy of 4 LS bits received from r_next
		feedback_value <= { ((r_reg >> 2) ^ r_next), (r_reg >> 2) } & 0xF;
		r_reg := r_next; 
		r_next <= r_reg and r_reg xor 2;
	end
end

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always begin
    assign r_reg = r();
    r_next = r_reg;
    if (reset == 1) begin
        r_reg = 1;
    end else begin
        //assign feedback_value = (r_reg == [r4] + [r2^4])?[r2](otherwise)[0][0];                             
        assign feedback_value = (r_reg == 1)?0:1;               
        r_next[1] = r_next[0];
        r_next[0] = feedback_value;
    end
    q <= r_next;
end


// Concatenate two 5-bit LFSRs
module lfsr5( 
    input clk,
    input reset,
    input reset2,
    output [5:0] q
); 
GFFTBIN5
================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset = '1') begin
        r_next = 13'b0000;
        r_reg = 1;
    end
    else begin
        r_reg = r_reg xor 2;
        feedback_value = 2'b01;
        r_next = r_reg({4,3});
    end
end
// now assign the R_next = ALWAYS(CLK or RESET)
not q;
//% R_next'(q)--latch select between q and feedback value
export Q=q;
export RE=r_next.q;

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
reg [4:0] state_machine;
always @(posedge clk or posedge reset) begin
    if( reset ) begin
        r_reg <= 1;
    end else begin
        state_machine <= (r_reg[1] ^ r_reg[2] ^ r_reg[2]);
        r_next <= r_reg ^ (state_machine << 2);
        feedback_value <= ~(r_reg >> 2) ^ (r_reg >> 4);
        q <= state_machine + (feedback_value << 2);
        r_reg <= state_machine;
    end
end

// (a-1)*(a^c)^p
// where a is the number of taps; c is the coefficient; p is the irreducible polynomial
// sorry if my code is a bit buggy
int polynomial_multip
================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
r_reg <= 2'b0;
assign r_next = { 
    { q[3], q[2] },
    r_reg[4] from feedback_value
};
assign feedback_value = 
    not r_reg[2]&(r_reg[4]&2'b1){4} |
    feedback_value&(
        (r_reg[3]&3'b0)^(
            (r_reg[3]&3'b1)^(
                (r_reg[2]&3'b1)^(
                    (r_reg[2]&3'b0)^(
                        (3'b0&(r_reg[4]&2'b1))
                        |2'b0
                    )
                )
            )
        )
    );

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ ( input clk, input reset ) begin
    if (reset = 1) begin
        r_reg := 0x1;
    end else begin
        r_next := {5, 3} << (r_reg[2] ^ r_reg[4]); 
        feedback_value := r_reg{2,4} ^ r_reg; 
        q := r_next; 
        r_reg <= r_next;
    end
end

================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset) process() begin
    if (reset == 1)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= xor(2, r_next) & 4;
    q <= r_reg;
end

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
    if ( reset == 1 ) 
        r_reg = 1;
    else if ( r_reg[3] == 1 )
        r_reg = r_reg << 1 | feedback_value;
    else
        r_reg = xor2( r_reg[2], r_reg[4] ) << 1 | feedback_value;

    r_next = xor2( r_reg[2], r_reg[4] ) & 4
           | concat( r_reg, 12'b1 ) & 4;

    q <= r_next;
end

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
  if (r_reg <= 4'b1000) begin
    r_reg <= 4'b1000;
  end
  else begin
  	r_reg[5] <= r_reg[3];
  	if (r_reg[1]) begin
	    feedback_value <= ~r_reg[2];
	end
	else begin
	  feedback_value <= ~concat(r_reg[3], r_reg[4]);
	end
	r_next = r_reg[] // USED TO DETERMINE THE NEXT STATE WITH LOADS
	r_reg <= r_next;
  end
end

lfsr lfsr1(clk, reset, q);

assign samples = lfsr1[0];
initial begin
  lfsr1 <=
================================================================
