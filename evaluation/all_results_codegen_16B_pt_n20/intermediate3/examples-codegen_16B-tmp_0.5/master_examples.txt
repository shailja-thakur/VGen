example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    begin
        if (reset)
            r_reg <= 0;
        else
            r_reg <= r_next;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= (r_reg >> 2) ^ (r_reg >> 4) ^ (r_reg >> 6);
        q <= r_reg[4] + r_next[4] + feedback_value[4];
    end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    r_reg <= r_next;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
  if ( reset )
    r_reg <= 1;
  else
    r_reg <= r_next;
  r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
  feedback_value <= ~r_reg[2] & r_reg[4];
  q <= r_next[4:0];
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    begin
        if(reset)
            r_reg <= 1;
        else
            r_reg <= r_next;
        r_next <= feedback_value ^ (r_reg[2] ^ r_reg[4]);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_reg;
    end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg << 1 | feedback_value;
        r_next <= r_reg[2:4] ^ r_reg[4];
        feedback_value <= r_reg[2:4] ^ r_reg[4];
    end
    q <= r_next;
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end
    else begin
        r_next <= (r_reg[2] ^ r_reg[4]);
        feedback_value <= (r_reg[2] ^ r_reg[4]) ^ (r_reg[4] ^ (r_reg[4] >> 2));
        q <= r_next[2:0];
        r_reg <= r_next;
    end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2);
        feedback_value <= (r_reg >> 2) ^ (r_reg >> 4);
        q <= r_next;
    end
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
always @(posedge clk) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg >> 1;
        if (r_reg == 1) begin
            r_next <= r_reg;
        end else begin
            r_next <= r_reg ^ (r_reg >> 2);
        end
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_next <= r_reg ^ (r_reg >> 2) ^ (feedback_value << 4);
    end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    if (reset)
        r_reg <= 1;
    else
        r_reg <= r_next;
assign q <= r_reg[2] ^ r_reg[4];
assign r_next[3:0] = r_reg[2];
assign r_next[2] = feedback_value;
assign r_next[4:0] = (r_reg[4]) ^ (r_reg[4] << 2) ^ (r_reg[4] << 3);
assign feedback_value = (r_reg[2] ^ r_reg[4] ^ r_reg[4] << 2) >> 2;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next & (r_reg ^ r_reg[2] ^ r_reg[4]);
reg [4:0] r_reg;
// design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
lfsr lfsr_inst (
    .clk(clk),
    .reset(reset),
    .q(q)
);

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 0;
    end else begin
        if (r_reg == 0) begin
            r_reg <= 1;
        end else begin
            r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
            feedback_value <= r_reg >> 4;
            r_reg <= r_next;
        end
    end
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_next <= r_reg;
        feedback_value <= (r_reg[2] ^ r_reg[4]);
        r_reg <= r_next;
    end
end

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= ~(r_reg[3] ^ r_reg[2]);
    r_reg <= r_next;
    q <= r_reg[4];
end
"""
        )
    
    def __init__(self):
        """
        Constructor.
        """
        self.reset()
        
    def reset(self):
        """
        Resets the LFSR to the initial state.
        """
        self.r_reg = 0
        self.r_next = 0
        self.feedback_value = 0
        self.clk = 0
        self.reset = 0
        
    def set_clock(self, cl
================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    if (reset) r_reg <= 0;
    else r_reg <= r_next;
    r_next <= (r_reg ^ (r_reg >> 1) ^ (r_reg >> 2) ^ (r_reg >> 3) ^ (r_reg >> 4)) & 0xF;
    feedback_value <= (r_reg >> 2) ^ (r_reg >> 4);
    q <= r_next;

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg[4:0];
assign r_reg = (reset == 1) ? 1 : r_reg;
assign r_next = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
assign feedback_value = (r_reg >> 2) ^ (r_reg >> 4);
// specify the clock and reset pins
assign clk = 1;
assign reset = 1;
// specify the initial state of the LFSR
assign r_reg = 1;

================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
  if (reset) r_reg <= 0;
  else r_reg <= r_next;

  r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);

  feedback_value <= r_reg[2] ^ r_reg[4];
  q <= r_next[4:0];
end

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if(reset == 1) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_reg <= r_reg[4] ^ r_reg[2];
        q <= r_next[4:0];
    end
end

================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin 
    if (reset)
        r_reg <= 0;
    else
        r_next <= r_reg;
    feedback_value <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    q <= r_next;
end

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) r_reg <= 1;
    else r_reg <= r_reg + r_reg;
    r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_next[4];
end

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset) r_reg <= 1;
    else r_reg <= r_reg << 1 | r_reg >> 3;
    r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_next;
end

================================================================
