example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is the carry-in register.
reg carry_in;

// This is the sum register.
reg sum;

// This is the output register.
reg cout;

// This is the carry-out register.
reg carry_out;

// This is the process.
process( in, out, sum, cout, carry_in, carry_out )
{
    // We add two bits.
    sum = a + b + carry_in;

    // Write the sum and carry-out to cout.
    cout = sum;
    carry_out = carry_in;
}

// This is the output port.
port out;

// This is the process instantiation.
half_adder( in, out, sum, cout, carry_in, carry_out )
{
    // Instantiate the process.
    in = in
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_i, b_i, sum_i, carry_out;

// The carry-in is the carry-out of the previous cycle.
assign carry_in = carry_out;

// The sum is the sum of the bits.
assign sum = sum_i;

// The new carry-out is the carry-in of the current cycle.
assign carry_out = carry_in;

// The new sum is the sum of the bits and the carry-out.
assign sum_i = (a_i + b_i + carry_out);

// The new carry-out is the carry-in of the current cycle.
assign carry_out = carry_in;

// The new a is the a_i and the carry-out.
assign a_i = a;

// The new b is the b_
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @( posedge a or posedge b ) begin
	if ( a or b )
	begin
		sum <= a + b;
	end
	else
	begin
		cout <= sum;
	end
end

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder(
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @( posedge a or posedge b ) begin
	if ( a or b )
	begin
		sum <= a + b;
	end
	else
	begin
		cout <= sum;
	end
end

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg [1:0] sum;

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

reg [1:0] sum;

always @( posedge clk ) begin
  if ( a and b and c ) begin
    sum <= sum + 1;
    cout <= sum[0];
  end
end

// This is a half adder that has two inputs.
module half_adder_2( 
input a, b,
output cout, sum );

reg [1:0] sum;

// This is a full adder that has two inputs.
module full_adder_2( 
input a, b, c,
output cout, sum );

reg [1:0
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a, b, cin;
wire sout, carry_out;

// This is a full adder. A full adder adds all four bits and produces an output.
module full_adder( 
input a, b, 
output cout );

wire a, b, cin;
wire sout;

// The carry-in is the number of bits that were added to the sum.
// It is determined by the carry-out.
wire carry_in;

// The carry-out is the number of bits that were added to the sum.
// It is determined by the carry-in.
wire carry_out;

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
wire half_adder_output;

// This is a full adder. A full adder adds all four bits and
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, cin, sum_out;

// The carry-in is the carry-out of the previous cycle.
wire carry_in = cin;

wire carry_out = carry_in;

// The sum is the output of the half adder.
wire sum = sum_out;

// The half adder adds two bits and produces a sum and carry-out.
assign {
    a_in, b_in, cin,
    carry_in,
    sum_out,
    carry_out
} = {a, b, carry_in};

// The carry-in is the carry-out of the previous cycle.
assign carry_in = carry_out;

// The sum is the output of the half adder.
assign sum = sum_out;

// The half adder
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-out.
module half_subtractor( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts four bits and produces a difference and carry-out.
module full_subtractor( 
input a, b,
output cout, diff );

// This is a half multiplier. A half multiplier multiplies two bits and produces a product and carry-out.
module half_multiplier( 
input a, b,
output cout, product );

// This is a full multiplier. A full multiplier multiplies
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two numbers and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-out.
module half_subtractor( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts two numbers and produces a difference and carry-out.
module full_subtractor( 
input a, b,
output cout, diff );

// This is a full multiplier. A full multiplier multiplies two numbers and produces a product and carry-out.
module full_multiplier( 
input a, b,
output cout, prod );

// This is a full divider. A full divider
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

void main() {
    cout = 0;
    sum = 0;
    if ( a == 0 || b == 0 ) {
        cout = 1;
    } else {
        cout = 0;
        sum = a + b;
    }
}

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out, sum_in;

// This is the logic that performs the addition.
// The inputs to the logic are a and b.
// The outputs are cout, sum, and carry_out.
module half_adder_logic( 
input a, b,
output cout, sum, carry_out );

// This is the logic that performs the carry-in.
// The inputs are cout and sum.
// The outputs are carry_out and sum_in.
module half_adder_carry_in( 
input cout, sum,
output carry_out, sum_in );

// This is the logic that performs the carry-out.
// The inputs are cout and sum.
// The outputs are cout and sum.
module half_adder_carry_out(
input cout, sum,
output carry_out, sum);


================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire cin;

assign cin = a + b;

reg sum;

assign sum = cin + cin;


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b, 
output cout, sum );

// This is a half adder with carry-in. A half adder adds two bits and produces a sum and carry-out.
module half_adder_with_carry_in( 
input a, b, carry_in,
output cout, sum );

// This is a full adder with carry-in. A full adder adds two bits and produces a sum and carry-out.
module full_adder_with_carry_in( 
input a, b, carry_in,
output cout, sum );

// This is a half adder with carry-out. A half adder adds two bits and produces a sum and carry-out.
module half_adder_
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The inputs to the half adder.
wire a, b;

// The outputs of the half adder.
wire cout, sum;

// The carry-out of the half adder.
wire carry;

// The full adder.
full_adder( a, b, cout, sum, carry );

// The outputs of the full adder.
wire out;

// The carry-out of the full adder.
wire out_carry;

// The carry-out of the full adder.
wire carry_out;

// The half adder.
half_adder( a, b, cout, sum );

// The outputs of the half adder.
wire out;

// The carry-out of the half adder.
wire out_carry;

// The carry-out of the half adder.
wire carry_out
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire carry_in, carry_out;

assign cout = sum + carry_out;
assign sum = a + b + carry_in;

always @(posedge clk)
  if (rst)
    cout <= 0;
  else
    carry_in <= carry_out;

================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_plus_b, a_plus_b_carry_out, sum_out;

// This is the function that will run when we start the simulation.
always @(posedge clk)
begin
    // This is the input to the half adder.
    a_in <= a;
    b_in <= b;

    // This is the output of the half adder.
    sum_out <= a_plus_b;

    // This is the carry-out of the half adder.
    a_plus_b_carry_out <= a_plus_b_carry_in;

    // This is the sum of the two bits.
    sum <= a_plus_b_carry_out;
end

// This is the output port of the half adder.
assign cout = sum_out;
================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a, b, cout, sum;

// The sum is output to the sum register and the carry-out is output to the carry-out register
assign sum = {a, b};
assign cout = sum;


================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire cin, sum, cout, carry;

half_adder( a, b, cout, sum ) {
  cin = a | b;
  sum = cin + carry;
  carry = ( cin > ( a | b ) ) ? 1 : 0;
  cout = sum;
}


================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a, b, cin, sum;

// The inputs are connected to the half adder.
a <= b;
b <= cin;

// The outputs are connected to the sum and carry-out.
cout <= sum;
sum <= a + b;


================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out;
wire sum_in;

wire a_in, b_in;

assign a_in = a;
assign b_in = b;

assign cout = carry_out & sum_in;

half_adder half_adder_1( a_in, b_in, cout, sum_in );


================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Assign cout = a + b + carry_in
assign cout = a + b + carry_in;

// Assign sum = a + b
assign sum = a + b;

// Assign carry_out = carry_in
assign carry_out = carry_in;


================================================================
