example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin 
case(in)
3'b001: pos=2'd1; 
3'b010: pos=2'd1;
3'b100: pos=2'd1;
3'b110: pos=2'd2;
3'b001: pos=2'd1; 
3'b101: pos=2'd2;
3'b110: pos=2'd2;
3'b000: pos=2'd3;
default: pos=2'd0;
endcase
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in ) 
begin 
	case( in ) 
	3'b000: pos = 0; 
	3'b001: pos = 0; 
	3'b010: pos = 1; 
	3'b011: pos = 1; 
	3'b100: pos = 2; 
	3'b101: pos = 2; 
	3'b110: pos = 2; 
	3'b111: pos = 2; 
	//default: pos = 0; 
	endcase 
end 

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in or pos )
begin: pri_enc
case( pos )
0: if( in[2] == 1'b1 )
	pos[1] = 1'b1;
	else pos[1] = 1'b0;
1: if( in[1] == 1'b1 )
	pos[1] = 1'b1;
	else pos[1] = 1'b0;
2: if( in[0] == 1'b1 )
	pos[1] = 1'b1;
	else pos[1] = 1'b0;
endcase
//assign a = in[0];
end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) 
case(in) 
3'b100 : pos = 2'b00; 
3'b110 : pos = 2'b01; 
3'b111 : pos = 2'b10; 
3'b000 : pos = 2'b11; 
endcase 

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) 
casex (in) 
 3'b000: pos=2'd0; 
 3'b001: pos=2'd0; 
 3'b010: pos=2'd1;
 3'b011: pos=2'd1; 
 3'b100: pos=2'd2; 
 3'b101: pos=2'd2; 
 3'b110: pos=2'd2; 
 3'b111: pos=2'd3; 
endcase 

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) 
begin 
case( in ) 
3'b000: pos=2'b00; 
3'b001: pos=2'b01; 
3'b010: pos=2'b10; 
3'b011: pos=2'b11; 
endcase 
end 

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) 
case(in) 
3'd1: pos=2'd0; 
3'd2: pos=2'd0; 
3'd3: pos=2'd0; 
3'd4: pos=2'd1; 
3'd5: pos=2'd1; 
3'd6: pos=2'd2; 
3'd7: pos=2'd3; 
endcase 

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
	case(in) 
	3'd2: pos = 2'd0; 
	3'd3: pos = 2'd1;
	3'd4: pos = 2'd2;
	3'd5: pos = 2'd3;
	3'd6: pos = 2'd4;
	3'd7: pos = 2'd5;
	default: pos = 2'd0;
	endcase
end

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) 
	begin 
	if(in[2]) pos=2'd3;
	else if(in[1]) pos=2'd2;
	else if(in[0]) pos=2'd1;
	else pos=2'd0;
	end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
case(in) 
3'b000: pos=2'b00; 
3'b001: pos=2'b01; 
3'b010: pos=2'b10; 
3'b011: pos=2'b11; 
endcase

================================================================
