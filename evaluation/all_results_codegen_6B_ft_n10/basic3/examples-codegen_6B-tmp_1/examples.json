// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(*) begin\npos[1] = in[2] | in[1];\npos[0] = ((~in[2])&in[1]) | in[0];\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(in or pos) \nbegin \n\tcase( pos ) \n\t// Lower case \n\t2'b0: if(in == 3'b101)\n\t// equal to 2 but serial\n\tpos = 2'b1; \n\t// Upper case \n\t2'b1: if(in == 3'b110)\n\t// equal to 6 but serial\n\tpos = 2'b01; \n\t// Higher case\n\t2'b1x: pos = 2'b10; \n\t//default: pos = 2'bxx;\n\tendcase \nend \n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(in or pos) \ncase( pos ) // The case is a string\n\t\"b\": i1 <= in[0];\n\t\"c\": i2 <= in[1];\n\t\"d\": i3 <= in[2];\n\tdefault: ;\nendcase \nbegin // The begin is just a plain ole begin.\n\n// Define the type of each mux.\n\tassign out = pos[0] ? i1 : pos[1] ? i2 : pos[2] ? i3 : 0;\n\t// It seems to work without the need of a clock here.\n\t// It should be obvious if it don't. \nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @ ( in ) \nif(sel) pos=2;\nelse if(sel) pos=1;\nelse pos=0;\n \n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(*) \nif(sel) \npos = 2'b0; \nelse pos = in; \n//assign pos = sel ? 3'b000 : in; \n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(*)\ncase( in ) \n3'b000 : pos = 0; \n3'b001 : pos = 0; \n3'b010 : pos = 1; \n3'b011 : pos = 2; \n3'b100 : pos = 0; \n3'b101 : pos = 1; \n3'b110 : pos = 2; \n3'b111 : pos = 3; \ndefault : pos = 0; \nendcase \n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(in or pos)\ncase(in)\n\t0: pos = 0;\n\t(1,2,3): pos = 2;\n\tdefault: pos = 0;\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(sel or in)\nbegin: P_ENCODING \n\tcase (sel)\n\t0: if(in==3'b001) pos=2'd0;else pos=2'd1;\n\t1: if(in==3'b010) pos=2'd0;else pos=2'd1;\n\t2: if(in==3'b100) pos=2'd0;else pos=2'd1;\n\t3: if(in==3'b1000) pos=2'd0;else pos=2'd1;\n\t//default pos=2'd0;\n\tendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "// Note: in the case when sel is high, there is no\n// change in value of high, but there is a change \n// in value of other inputs . That is to say sel=1\n// has the highest priority and if the others change\n// lead to incorrect output. \n//highest priority\nalways @(*) \nif(sel1) \nbegin \n pos=2'b00; \nend\n//second highest priority\nelse if(sel2) \npos=2'b01; \n//third highest priority\nelse if(sel3) \npos = 2'b10; \n//fourth highest priority, does not get assigned\n//least highest priority\nelse begin pos =2'b11 ;end \n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(*)\n\tcase(in)\t// Select case\n\tpos2: pos1: pos0 = 2'b00; \t// '=' is a non-blocking assignment\n\t3'b000: pos0 = 2'b00; \n\t3'b001: pos0 = 2'b01; \n\t3'b010: pos0 = 2'b10; \n\t3'b011: pos0 = 2'b11; \n\tdefault: pos0 = 2'b00; \t// Default case must be reachable\nendcase \n//assign b=sel?out:pos0; \t//Blocking or non-blocking assignment\n"
    }
  ],
  "created": 1663600397,
  "id": "cmpl-UdZQ6ohq9QSEFWZKnZc0QbqFwsIZJ",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1057,
    "prompt_tokens": 65,
    "total_tokens": 1122
  }
}