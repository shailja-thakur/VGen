example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
	always @(posedge clk or posedge reset)
	begin
	out=load?data:out;
	if(reset)
	out=0;
	else	
	begin	
	if (amount == 3'b110)
	out=out;
	else if (amount == 3'b101)
	out=out>>1;
	else if (amount == 3'b100)
	out=out>>2;
	else if (amount == 3'b011)
	out=out>>3;
	else if (amount == 3'b010)
	out=out>>4;
	else if (amount == 3'b001)
	out=out>>5;
	end
	end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	if (load) out <= data;
	else begin
	if (amount == 3'b111)
	out <= out;
	else if (amount == 3'b100)
	begin
	out <= {out[6:0],out[7]};
	end
	else if (amount == 3'b011)
	begin 
	out <= {out[5:0],out[6]};
	end
	else if (amount == 3'b010)
	begin 
	out <= {out[4:0],out[5]};
	end
	else if (amount == 3'b001)
	begin 
	out <= {out[3:0],out[4]};
	end
end
	end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] temp;
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	temp<=data;
	else begin
	case(amount)
	3'b000: out<=temp;
	3'b001: out<={temp[0],temp[7:1]};
	3'b010: out<={temp[1:0],temp[7:2]};
	3'b011: out<={temp[2:0],temp[7:3]};
	3'b100: out<={temp[3:0],temp[7:4]};
	3'b101: out<={temp[4:0],temp[7:5]};
	3'b110: out<={temp[5:
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (load) out <= data;
	else begin
	left_shift <= out>>amount;
	right_shift <= out<<amount;
	out <= left_shift+right_shift;
	end
	end


================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
if(reset)
	begin
	out <= 8'b111000000;
	end
else if(load)
	begin
	out <= data;
	end
else if(amount==3'b110)//rotate right
	begin
	out <= {out[6:0],out[7]};
	end
else if(amount==3'b101||amount==3'b100)//rotate left/slide right
	begin
	out <= {out[0],out[7:1]};
	end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
if(load) begin	
	out = data;	
end
else	
	begin	
	for (int i=0;i<=amount-1;i=i+1)
	begin
	out[i]<=out[7-i];
	end
	for (int i=0;i<=pres;i=i+1)
	begin
	out[7-i]<=out[i];
	end
	end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
out<=0;
else if (load)
out<=data;
else begin
	case(amount)
	3'd0: out<=out;
	3'd1: out<={out[6:0],out[7]};
	3'd2: out<={out[5:0],out[6]};
	3'd3: out<={out[4:0],out[5]};
	3'd4: out<={out[3:0],out[4]};
	3'd5: out<={out[2:0],out[3]};
	3'd6: out<={out[1:0],out[2]};
	3'd7: out<={out[0],out[1]};
	
	default
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
if(reset)
	begin
	out<=0;
	end
else if(load)
	begin
	out<=data;
	end
else if(amount==3'b110)
	begin
	out<={1'b0,out[6:0]};
	end
else if(amount==3'b101)
	begin
	out<={out[5:0],1'b0};
	end
else if(amount==3'b100)
	begin
	out<={2'b0,out[7:2]};
	end
else if(amount==3'b011)
	begin
	out<={out[4:0],2'b0};
	end
else if(amount==3'b010)
	begin
	out<={3'
================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always@(posedge clk or posedge reset)
if(reset)
	out<=0;
else if(load)
	out<=data;
else
begin
	
end


================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
if (load)
	out = data;
if (load) begin 
	end
else begin //when load is low perform right shift by the amount
	end

================================================================
