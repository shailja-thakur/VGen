example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if (reset) 
	begin
	q <= 1;
	end
	else if (q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
if(reset)
q <= 4'b0001;
else if(q == 12)
q <= 4'b0001;
else
q <= q + 4'b0001;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if (reset)
	begin
	q <= 4'd1;
	end
	else if (q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (q == 4'd12)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 4'b0001;
	end
	end
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b1;
else
case(q)
4'b1110: q <= 4'b1;
default: q <= q + 4'b1;
endcase
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if (reset)
q <= 4'b0000;
else if (q == 12)
q <= 4'b0000;
else 
q <= q + 1;
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) 
begin
if (reset) q <= 4'd1;
else if (q == 12) q <= 4'd1;
else q <= q + 4'd1;
end 

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b0000;
else
begin
if (q == 12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if (reset)
	q = 4'b0001;
else if (q == 4'b1111)
	q = 4'b0001;
else
	q = q + 4'b0001;
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) q <= 4'b1;
	else if (q == 4'b1111) q <= 4'b1;
	else q <= q + 1;
	end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
begin
	if (reset == 1) 
	begin
	q <= 4'd1;
	end
	else if (q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b0000;
else if (q == 12)
q <= 4'b0000;
else
q <= q + 1;
end 

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b0000;
else if (q == 12)
q <= 4'b0000;
else
q <= q + 1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	q <= 1;
	end
	else
	begin
	if (q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
	end
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset)
q <= 4'b0000;
else
begin
if (q == 12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if(reset) begin
 q <= 4'b0000;
 end
 else if(q == 12) begin
 q <= 4'b0000;
 end
 else begin
 q <= q + 1;
 end
 end

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset)
q <= 1;
else if (q == 12)
q <= 1;
else
q <= q + 1;
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 4'd1;
	end
	else
	begin
	if(q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset) 
q <= 4'b0000; 
else if (q == 12)
q <= 4'b0000; 
else
q <= q + 1;
end 

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
if (reset)
q <= 4'd1;
else if (q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if(reset)
	begin
	q <= 4'd1;
	end
	else begin
	if(q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
end

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset)
q <= 4'b0000;
else if (q == 4'd12)
q <= 4'b0000;
else
q <= q + 1'b1;
end

================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset)
	begin
	q <= 1;
	end
	else if (q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
	end

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b0001;
else if (q == 12)
q <= 4'b0001;
else
q <= q + 1;
end

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if(reset)
q <= 4'b0000;
else if(q == 4'd12)
q <= 4'b0000;
else
q <= q + 1'b1;
end

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if(reset) 
	begin
	q <= 4'd1;
	end
	else 
	begin
	case(q)
	4'd5: q <= 4'd1;
	4'd6: q <= 4'd1;
	4'd7: q <= 4'd8;
	4'd8: q <= 4'd1;
	4'd9: q <= 4'd9;
	4'd10: q <= 4'd1;
	4'd11: q <= 4'd9;
	4'd12: q <= 4'd1;
	default: q <= q + 4'd1;
	endcase
	end
	end

================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if(reset) begin
	q <= 4'b0001;
	end
	else if(q == 12) begin
	q <= 4'b0001;
	end
	else begin
	q <= q + 4'b0001;
	end
end

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
	if ( reset )
	q <= 4'b0000;
	else if ( q == 4'b1111 )
	q <= 4'b0000;
	else
	q <= q + 4'b0001;
	end

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if (reset) 
q <= 4'b0000; 
else if (q == 12) 
q <= 4'b0000; 
else 
q <= q + 4'b0001; 
end 

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b1;
else if (q == 4'd12)
q <= 4'b1;
else
q <= q + 4'b1;
end

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
if (reset)
q <= 1'b1;
else if (q == 12)
q <= 1'b1;
else
q <= q + 1'b1;
end

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset)
 q = 4'b1;
 else if (q == 4'd12)
 q = 4'b1;
 else
 q = q + 4'b1;
end

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if(reset)
q <= 4'd1;
else
begin
if(q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end
end

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (q == 12)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1;
	end
	end
end

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 4'b1;
else
case (q)
4'd12: q <= 4'b1;
default: q <= q + 4'b1;
endcase
end

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'd1;
else if (q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) begin
	q <= 4'd1;
	end
	else if (q == 4'd12) begin
	q <= 4'd1;
	end
	else begin
	q <= q + 4'd1;
	end
end

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'd1;
	end
	else
	begin
	case (q)
	4'd1: q <= 4'd2;
	4'd2: q <= 4'd3;
	4'd3: q <= 4'd4;
	4'd4: q <= 4'd5;
	4'd5: q <= 4'd6;
	4'd6: q <= 4'd7;
	4'd7: q <= 4'd8;
	4'd8: q <= 4'd9;
	4'd9: q <= 4'd10;
	4'd10: q <= 4'd11;
	4'd11: q <= 4'd12;
	4'd12: q <= 4'd1;
	endcase
	end
end

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 4'd1;
	end
	else if(q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
end

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset) begin 
q <= 4'b0000;
end
else if (q == 4'b1111) begin
q <= 4'b0000;
end
else begin
q <= q + 4'b0001;
end
end

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 4'b0000;
else
case (q)
4'b0000:
q <= 4'b0001;
4'b0001:
q <= 4'b0010;
4'b0010:
q <= 4'b0011;
4'b0011:
q <= 4'b0100;
4'b0100:
q <= 4'b0101;
4'b0101:
q <= 4'b0110;
4'b0110:
q <= 4'b0111;
4'b0111:
q <= 4'b1000;
4'b1000:
q <= 4'b1001;
4'b1001:
q <= 4'b1010;
4'b1010:
q <= 4'b1011;
4'b101
================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset)
q <= 1;
else if (q == 12)
q <= 1;
else
q <= q + 1;
end

================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if (reset)
 q <= 4'd1;
 else if (q == 4'd12)
 q <= 4'd1;
 else
 q <= q + 4'd1;
end

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if (reset)
q <= 4'd1;
else if (q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (q == 4'd12) begin
	q <= 4'b0000;
	end
	else begin
	q <= q + 4'b0001;
	end
	end
end

================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if(reset)
	begin
	q <= 4'b1;
	end
	else if(q == 4'd12)
	begin
	q <= 4'b1;
	end
	else
	begin
	q <= q + 4'b1;
	end
	end

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 4'b1;
else if(q == 4'd12)
q <= 4'b1;
else
q <= q + 4'b1;
end

================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset)
q <= 4'b0000;
else if(q == 4'd12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 1'b1;
else if(q == 12)
q <= 1'b1;
else
q <= q + 1'b1;
end

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
 begin
 if(reset)
 q <= 4'd1;
 else if(q == 4'd12)
 q <= 4'd1;
 else
 q <= q + 4'd1;
 end

================================================================
