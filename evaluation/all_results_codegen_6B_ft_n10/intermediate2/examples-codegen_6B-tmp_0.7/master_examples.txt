example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk or posedge reset) 
	begin 
	 
	if(reset) 
	q=1; 
	 
	else if(q == 12) 
	q = 1; 
	 
	else 
	q = q + 1; 
	 
	end 


================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin 
	q = 4'b0001; 
	end 
	else if(q == 4'b1111) 
	begin 
	q = 4'b0001; 
	end 
	else 
	begin 
	q = q + 1; 
	end 
end 

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
case(
reset: 
q = 4'b0001;
q1: 
q = 4'b0001;
q2: 
q = q + 4'b0001;
q3: 
q = q + 4'b0001;
endcase 

initial 
q = 4'b0000;

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset)
q = 1;
else if(q == 12)
q = 1;
else
q = q +1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	if(reset) 
	begin
	q <= 4'b1;
	end 
	else if(q == 4'b1010) 
	begin 
	q <= 4'b1;
	end
	else 
	begin
	q <= q + 4'b1;
	end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset) 
	q <= 1; 
	else if(q == 12) 
	q <= 1;
	else 
	q <= q + 1;
	end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q <= 0;
	end 
	else if (q == 12) 
	begin
	q <= 0;
	end 
	else 
	begin
	q <= q + 1;
	end
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if(reset) 
q <= 4'b0001; 
else if(q == 4'b1111) 
q <= 4'b0001; 
else 
q <= q + 1; 
end 

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin 
	if (reset) 
	q <= 4'b0001;
	else if (q == 4'b1111) 
	q <= 4'b0001;
	else 
	q <= q + 4'b0001;
	end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) // on reset
	q <= 4'b0001;
	else if(q == 12'bzzzz_zzzz_zzzz_zzzz) // if q is 16'hffff, set it to 4'b0001
	q <= 4'b0001;
	else if(q[3:0] == 4'b1010) // if q is 12'bzzzz_zzzz_zzzz_zzzz, then set it to 4'b0001
	q <= 4'b0001;
	else 
	begin
	if(~q[3:0] & q[3:1] == 4'b0001) // if q1 is 0, then set q to 4'b0001
	q[3:0] <= 4'b0001;
	else 
	
================================================================
