example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) q <= reset ? 4'b0 : (slowena ? (q==9 ? 9 : q+1) : q);//sends the same wackamole game


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the counter is 9, then both the inputs are considered and the @q
// output is reset to 0.

always @(posedge clk or posedge reset) begin
 if(reset)
 q = 0;
	
else if(slowena) begin
 if(q == 9) 
 q = 0;
 // If the counter is 9, then only inc the counter if ena is also a high.
 else
 q = q + 1;	 
 end

else
 q = q;
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if (slowena)
	begin
	if (q == 9)
	q <= 0;
	else
	q <= q+1;
	end 
	if (reset)
	q <= 0;

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment the output if this happens.
// This reduces the clock frequency to 0.5 Hz instead of 5 Hz.

	always @(posedge clk)
	begin 
	if(reset) q <= 4'b0000;
	else begin
	if(slowena)
	begin
	if(q == 4'b1001) q = 4'b0000;
	else q <= q+1;
	end
	else q <= q;
	end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment the output by 1 if the output is 9 and the slowena is 1.
// Note: This code does not count towards the overall carry validity.

// As of 3/4/2014, this works for any non-negative sequence of inputs including [9,9,9,0].
// Since I'm using a decade counter, it reads [9,9,9,0] as {9,9,9,0}.

	always @(posedge clk)
	begin
	if (slowena) begin
	if (reset)
	q <= -'b0110000111111;
	else if (q == 9 && slowena)
	q <= 0;
	else if (slowena==0 && fastena==0)
	q <= q + 1;
	end

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) 
	if(reset) q <= 4'b0000; 
	else	if(slowena) begin 
 	 	if(q == 9) q = 4'b0000; 
 	 	else q = q + 1; 
 	end
 



================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Since q is 4 bits, it rolls over from 65 to 0.

assign q = {q[2:0], reset}; 

always @(posedge clk) 
	begin	
	if(reset)
 	q <= 4'b0000; 
 	
	else if(slowena)
	if(q[3:0] < 4'b1010)	//set the counter to maxium value(1023) , when reached
	q <= q[3:0] + 4'b0001; 
	
	else
	q <= 4'b0000; //reset the counter when rolled
	end

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge slowena or posedge reset) begin
	if (slowena || reset) begin
	case (q) //digit no.
0: // Case for d6
1: q <= q + 1;
1: q <= q + 1;
2: q <= q + 2;
2: q <= q + 2;
3: q <= q + 3;
// use a case instead of nested if to have a more generic template
default: q <= q; // return 0 for unspecified digits
endcase
	end
end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
	begin
	 	if (reset)
	 	 	q <= 0;
	 	else
	 	 	q <= (((q < 4'b1111) && (~slowena)) || (q==9'b11111111));

	end

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
always @(posedge clk or posedge reset) begin
	if (reset) q=0;
	else if(slowena) begin
	if (q == 9)
	
	// If the counter is maxed out, reset it to 0.
	// I don't see a more effecient way to do this with a clocked always block.
	
	q=0;
	
	else
	
	// Otherwise, increment by 1.
	// In this problem, a procedural block is more effecient.
	q=q+1;
	end
end


================================================================
