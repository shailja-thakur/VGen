example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

	// G = Carry In
	assign sum = a ^ b;
	assign cout = a & b;

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
 wire x,y,z;
 not( x,a );
 not( y,b );
 and( z, x,y );
 and( sum,a,b );
 and( cout, x,y );
 endmodule 
 
 module half_adder_alt(a,b,sum,cout);
	input a;
	input b;
	output sum;
	output cout;
	assign sum=a^b;
	assign cout=a&b;

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign {cout,sum}= a+b;

================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

	xor(cout, a, b);
	
	xor(sum, a, b);

================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
//Implement the following connectionsion logic list
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
 assign sum = a ^ b; // xor the two inputs. 
 assign cout = a & b; // and the inputs. 

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This asserts if a and b are not both 1 or 0
assign assert_in[0] = (~(a & b)) & a; 
assign assert_in[1] = (~(a & b)) & b;

xor first_xor( result[0], assert_in[0], b );
xor second_xor( result[1], assert_in[1], a );

xor final_xor( sum, result[0], result[1]);
assign cout = result[1];


================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
and a1(w1, a, b);
and a2(w2, a, w1);
or r1(sum, w1, b);
or r2(cout, w2, w1);

================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// primary is sum
assign sum = a ^ b;

// secondary is carry out
assign cout = a & b;


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // xor of input a, b
assign cout = a & b; // and of input a, b

================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;// xor two bits and assign it to output
assign cout = a & b;// and of two bits and assign it to carry-out

================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
xor(sum,a,b);
and(cout, a,b);


================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

not( temp1, a );
and( temp2, a, b );
and(temp3, b, temp1);
or( sum, temp2, temp3 );
and( temp4, temp1, a );
or(cout, temp4, temp2);


================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire x, y; // Declaration of wires for variable names.
xor (sum, a, b); //Sums are generated by xor gate.
and (cout, a, b); // Bitwise and is used to generate carry-out.


================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// assign sum = a ^ b;
xor(sum, a, b);
// assign cout = a & b;
and(cout, a, b);

================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
 
assign sum=a^b;
assign cout=a&b;
 

================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Sum is a carry-out (cout) and is a function of both a and b
assign sum = a ^ b; // Ex-oring

// Carry-out is the value devided by 2. Therefore a carry-in on
// (a or b) results in a carry-out on (cout).
assign cout = a & b;


================================================================
example-20: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

xor( sum, a, b );
and( // Check Code and comment out if neccessary.
d, a, b ); // Check Code and comment out if neccessary.
assign cout = d;


================================================================
example-21: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
and a1(w1, a, b);
and a2(w2, w1, a);
and a3(w3, w2, b);
or o1(sum, w1, w3);
or o2(cout, w2, w3);

================================================================
example-22: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
//Declare variables
reg x, y, z;
//Store the three bit inputs
assign sum = x ^ y;
//xor the two 3-bit numbers using UDP
assign cout = x & y;
//AND gate using UDP
assign z = a & b;
//assign the sum and carry according to the equation
always @ (z or cout)
begin
	x <= z;
	y <= cout;
end
	

================================================================
example-23: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // XOR the bits.
assign cout = a & b; // AND the bits.

================================================================
example-24: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;

================================================================
example-25: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
	
assign sum = a ^ b;
assign cout = a & b;


================================================================
example-26: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Inequalities, specifically the compare operators, rely on truth values.
// 
// Note: it is common practice to use wires for inferred connections, as in the 
// example below. When wiring real circuits, use strong typing to make clear 
// what is being passed, and how is being passed, and how the signal will
// flow through the design. The use of wires with the verilog language will 
// call for a brittle circuit or logic designed so that all possible verilog 
// authors can work together.
// 
// For another services type use to emit a single-cycle xilinx design, I am using 
// an inferred problem. Not sure how I will accomplish that task using an inferred 
// design.

// A feature of UARTs is that they stop receiving data for a significant period 
// of time. Using an assignment operator would likely send data over a
================================================================
example-27: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b; //a XOR b
assign cout = a & b; //a resulting into a number with only 1 bit


================================================================
example-28: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-29: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
xor(w1,a,b);
xor(cout,w1,sum);
// on the XILINX FPGA, these values are connected
// from output to input.

================================================================
example-30: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-31: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
// instantiation
xor gates ( sum, a , b );
and gates ( cout, a, b );

================================================================
example-32: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; //xor
assign cout = a & b; //and

================================================================
example-33: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-34: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-35: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
not (cin, a);
xor (cout, b, cin);
and (sum, a, b);

================================================================
example-36: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; //SUM will hold the binary addition of A and B
assign cout = (a && b);// CON will hold the binary addition of B and Cin

================================================================
example-37: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-38: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // bitwise XOR
assign cout = a & b; // bitwise AND

================================================================
example-39: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-40: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
xor (sum, a, b);
and (cout, a, b);

================================================================
example-41: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
reg cout;
always @(a,b)
begin
if (a==b) 
cout=0;
else if(!a && b)
cout=1;
else 
sum=1;
end

================================================================
example-42: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); // XY
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-43: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // bit-wise xor
assign cout = a & b; // bit-wise and

================================================================
example-44: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b; // a XOR b = sum

assign cout = a & b; // and operator for 2-bit in bit position positions.


================================================================
example-45: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Broadcat adder function
//concatenate a & b to make x 
assign x = {a, b};

// if a=1'b0 or b=1'b0 produces carry-in of 0 (0 + 1) 
// or 1 (1 + 1) which is the same as a proper adder. 
// if a=1'b1 and b=1'b1 (only one of them can be 1 at a time), produces carry-in 1 (1 + 1)
assign carry_in = a ^ b;

assign sum = x[0] ^ x[1]; //assign sum from each individual bit operation 
assign cout = x[1] & x[2]; //assign carry-or of x[2]


================================================================
example-46: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 

assign sum = a ^ b;
assign cout = a & b;

================================================================
example-47: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign cout = a ^ b; //Half adder logic
assign sum = a ^ b;


================================================================
example-48: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-49: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign {cout, sum} = a + b; // full adder or half adder


================================================================
