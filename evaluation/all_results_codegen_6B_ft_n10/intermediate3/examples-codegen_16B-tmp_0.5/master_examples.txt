example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = (reset) ? 1 : r_reg;
always @ (posedge clk)
begin
	r_reg <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk or posedge reset) begin
if (reset) begin
r_reg <= 5'b1;
end
else begin
r_reg <= r_next;
end
end
// define the r_next value
// if i is 0 then j is 3
// if i is 1 then j is 2
always @ (i, j) begin
case (i)
0 : r_next = {r_reg[3], r_reg[3]};
1 : r_next = {r_reg[2], r_reg[3]};
2 : r_next = {r_reg[3], r_reg[2]};
3 : r_next = {r_reg[4], r_reg[1
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
	if (reset) begin
	r_reg <= 5'b10000;
	end
	else begin
	r_reg <= r_next;
	end
end
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[2]};
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg <= r_next;
end
end
// generate feedback_value
assign feedback_value = r_reg[2] ^ r_reg[4];
// generate r_next
assign r_next = r_reg[4] ^ r_reg[5] ^ r_reg[6] ^ r_reg[7] ^
r_reg[1] ^ r_reg[3] ^ feedback_value;

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = ^{r_reg[2],r_reg[4]};
always @ (posedge clk, posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
//assign r_next = feedback_value ^ r_reg;

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk) begin
	if (reset) begin
	r_reg <= 5'b1;
	end
	else begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
//assign r_next = (r_reg << 1) | (feedback_value & {5{r_reg[4]}});
assign r_next = (r_reg << 1) ^ ({5{r_reg[4]}} & r_reg[4:0]);

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'h1 : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
// register
always @(posedge clk)
begin
	r_reg <= r_next;
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? (5'b1 << 4) : (r_reg ^ (r_reg >> 2) ^ (r_reg >> 3));
assign feedback_value = r_reg[4] ^ r_reg[2];
assign q = r_reg;
always @(posedge clk) begin
	if (reset) begin
	r_reg <= 5'b1 << 4;
	end
	else begin
	r_reg <= r_next;
	end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// r_reg = (r_next | q) ^ (r_next >> 4)
assign r_next = ((~reset) & (r_reg[4] ^ r_reg[2] ^ r_reg[4] ^ r_reg[3] ^ r_reg[0] ^ r_reg[1] ^ r_reg[0] ^ r_reg[1]));
assign feedback_value = r_reg[4] ^ r_reg[2];
assign q = r_reg;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk)
begin
	if (reset)
	begin
	r_reg <= 5'b10000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
// define the feedback logic
assign feedback_value = r_reg[2] ^ r_reg[4];
// define the next state
assign r_next = r_reg ^ feedback_value;

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg ^ r_next;
// define the state-transition and output-logic equations
// for a Galois LFSR
// use xor and xor feedback_value to compute the next-state
// and use the AND gates to compute the output
always @(posedge clk, posedge reset)
if (reset) r_reg <= 5'b1;
else r_reg <= r_next;

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
if (reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end
assign feedback_value = r_reg[2] ^ r_reg[4];
//assign r_next = r_reg ^ {r_reg[4], r_reg[3], r_reg[2], r_reg[1], r_reg[0]};
assign r_next = r_reg ^ {r_reg[4], r_reg[3], r_reg[2], r_reg[1], r_reg[0], feedback_value};

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk) begin
if (reset)
r_reg <= 5'b1;
else
begin
feedback_value = r_reg[2] ^ r_reg[4];
r_reg <= r_next;
end
end
// define the next-state values
assign r_next = {r_reg[4],r_reg[3],r_reg[2],r_reg[1],r_reg[0],feedback_value};

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = (reset) ? 5'b1 : r_reg;
assign q = r_reg;
always @ (posedge clk) begin
	r_reg <= r_next;
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[3] ^ feedback_value};
assign q = r_reg;
always @(posedge clk)
if (reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end

================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = (reset) ? 5'b1 : r_reg;
assign q = r_reg;

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
always @(posedge clk)
begin
if(reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;

================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
always @(posedge clk) begin
if (reset) begin
r_reg <= 5'b100001;
end
else begin
r_reg <= r_next;
end
end
assign q = r_reg;

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = (reset) ? 5'b1 : r_reg;
assign r_next[0] = (r_reg[0] ^ feedback_value) & ~(r_reg[4] ^ r_reg[2]);
assign r_next[1] = r_reg[1];
assign r_next[2] = r_reg[2];
assign r_next[3] = r_reg[3];
assign r_next[4] = r_reg[4];
always @(posedge clk) begin
	r_reg <= r_next;
end

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = ^{r_reg[2], r_reg[4]};
assign r_next = r_reg ^ feedback_value;
assign q = r_reg;
always @ (posedge clk)
begin
if (reset)
r_reg <= 5'b01110;
else
r_reg <= r_next;
end

================================================================
example-20: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {r_reg[4], r_reg[3], feedback_value};
always @(posedge clk, posedge reset)
begin
if (reset)
begin
r_reg <= 5'b01011;
end
else
begin
r_reg <= r_next;
end
end
assign q = r_reg;

================================================================
example-21: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk)
begin
if (reset)
r_reg <= 5'b100001;
else
begin
r_reg <= r_next;
end
end
assign r_next = {r_reg[3], feedback_value, r_reg[4]};

================================================================
example-22: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg ^ feedback_value;
always @ (posedge clk)
begin
if (reset)
begin
r_reg <= 5'b10000;
end
else
begin
r_reg <= r_next;
end
end

================================================================
example-23: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk or posedge reset)
if (reset)
r_reg <= 5'b1;
else
begin
r_reg <= r_next;
end
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0] ^ feedback_value};

================================================================
example-24: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = (r_reg[2] & r_reg[4]) ^ r_reg[2];
assign r_next = {r_reg[4], r_reg[3] ^ feedback_value};
always @ (posedge clk)
begin
	if (reset)
	begin
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;

================================================================
example-25: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = (reset) ? 5'b1 : r_reg;
assign q = r_reg;
always @ (posedge clk)
begin
	r_reg <= r_next;
end

================================================================
example-26: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg ^ {r_reg[4], r_reg[2] ^ r_reg[4]};
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk or posedge reset)
begin
	if (reset) 
	begin
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	end
end

================================================================
example-27: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {r_reg[0], r_reg[4] ^ feedback_value};
assign q = r_reg;
always @ (posedge clk) begin
	if (reset) begin
	r_reg <= 5'b00000;
	end
	else begin
	r_reg <= r_next;
	end
end

================================================================
example-28: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @(posedge clk) begin
	if(reset) begin
	r_reg <= 5'b1;
	end
	else begin
	r_reg <= r_next;
	end
end
// define r_next as a function of r_reg
// r_next = r_reg ^ feedback_value
// when r_next[4] is 1, then the next state is:
// r_next[4] = 0;
// r_next[3] = r_reg[4] ^ r_reg[2];
// r_next[2] = r_reg[3] ^ r_reg[0];
// r_next[1] = r_reg[2] ^ r_reg[1];

================================================================
example-29: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset) begin
	if (reset)
	begin
	r_reg <= 5'b10000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[
================================================================
example-30: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk, posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[3:1],feedback_value};

================================================================
example-31: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = ^(r_reg[2:0]) ^ (r_reg[4:0]);
assign q = r_reg;
always @ (posedge clk)
begin
	if (reset)
	begin
	r_reg <= 1;
	end
	else
	begin
	r_reg <= r_next;
	end
end

================================================================
example-32: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk)
begin
	if(reset)
	begin
	// when reset is high, set the next value to 1
	r_reg <= 5'b1;
	end
	else
	begin
	// otherwise, assign the next value to the previous value
	r_reg <= r_next;
	end
end
// define the feedback function
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0]};

================================================================
example-33: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b1 : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
always @ (posedge clk)
begin
	r_reg <= r_next;
end

================================================================
example-34: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk or posedge reset)
if (reset)
r_reg <= 5'b100001;
else
r_reg <= r_next;
assign r_next = {r_reg[4], r_reg[3] ^ feedback_value};

================================================================
example-35: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {r_reg[4], feedback_value};
always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	// when reset is high, turn off the feedback
	// so that r_reg is the same as r_next
	r_reg <= 5'b0;
	end
	else
	begin
	// otherwise, assign the feedback_value to the
	// register at the next clock cycle
	r_reg <= r_next;
	end
end
assign q = r_reg;

================================================================
example-36: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk)
begin
if (reset)
begin
r_reg <= 5'b00001;
end
else
begin
r_reg <= r_next;
end
end
// define the feedback_value
assign feedback_value = r_reg[2] ^ r_reg[4];
// define the next state of r_reg
assign r_next = r_reg ^ {r_reg[4], r_reg[4] ^ r_reg[0]};

================================================================
example-37: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[3] ^ r_reg[2];
assign r_next = r_reg ^ {r_reg[3], r_reg[2], r_reg[4], r_reg[4]};
assign q = r_reg;
// register r_reg
always @ (posedge clk, posedge reset)
begin
	if(reset)
	begin
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	end
end

================================================================
example-38: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[3], r_reg[4], r_reg[4] ^ r_reg[0]};
always @(posedge clk, posedge reset)
begin
if(reset)
begin
r_reg <= 5'b10000;
end
else
begin
r_reg <= r_next;
end
end
assign q = r_reg;

================================================================
example-39: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4
================================================================
example-40: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
// define the feedback function
assign feedback_value = ~(r_reg[2] ^ r_reg[4]);
// define the state update function
assign r_next = r_reg;
// define the state update function
always @(posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end

================================================================
example-41: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {q[4],feedback_value};
assign q[4] = r_reg[4] ^ r_reg[3];
assign q[3] = r_reg[3];
assign q[2] = r_reg[2];
assign q[1] = r_reg[1];
assign q[0] = r_reg[0];
assign r_reg = reset ? 1'b1 : r_next;

================================================================
example-42: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
 if(reset)
 begin
 r_reg <= 5'b1;
 end
 else
 begin
 r_reg <= r_next;
 end
end
// calculate the next value based on the feedback_value
assign r_next = (feedback_value ^ r_reg[2]) ^ r_reg[4];

================================================================
example-43: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next[0] = ~r_reg[0];
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next[1] = r_reg[0] ^ r_reg[1] ^ feedback_value;
assign r_next[2] = r_reg[1] ^ r_reg[2] ^ feedback_value;
assign r_next[3] = r_reg[2] ^ r_reg[3] ^ feedback_value;
assign r_next[4] = r_reg[3] ^ r_reg[4] ^ feedback_value;
always @(posedge clk)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
assign q = r_reg;

================================================================
example-44: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
 if(reset)
 begin
 r_reg <= 5'h1;
 end
 else
 begin
 r_reg <= r_next;
 end
end
//assign r_next = (r_reg[2] ^ r_reg[4]) ? {r_reg[4],r_reg[3:1]}: r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = (feedback_value) ? {r_reg[4],r_reg[3:1]}: r_reg;

================================================================
example-45: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg[4] <= r_next[4];
r_reg[3] <= r_next[3];
r_reg[2] <= r_next[2];
r_reg[1] <= r_next[1];
r_reg[0] <= r_next[0];
end
end
// assign r_next to r_reg with the feedback_value
assign r_next = {r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4], r_reg[4
================================================================
example-46: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0] ^ feedback_value};
assign q = r_reg;
always @ (posedge clk)
begin
if (reset)
begin
r_reg <= 5'b1;
end
else
r_reg <= r_next;
end

================================================================
example-47: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk, posedge reset)
begin
	if (reset)
	begin
	r_reg <= 1;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[3:0], feedback_value};

================================================================
example-48: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
// always block to update the state of r_reg
always @(posedge clk or posedge reset)
begin
if(reset)
r_reg <= 5'b11111;
else
r_reg <= r_next;
end
// always block to compute the next value of r_reg
always @(feedback_value or r_reg)
begin
r_next = r_reg;
r_next[4] = r_reg[0] ^ feedback_value;
r_next[3] = r_next[4] ^ r_reg[1];
r_next[2] = r_next[3] ^ r_reg[2];
r_next[1] = r_next[2] ^ r_reg[3];
r_next[0] = r_next[1] ^ r_
================================================================
example-49: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (r_reg & {5{~reset}}) | (r_reg & {5{reset}}) | feedback_value;
always @(posedge clk)
begin
	r_reg <= r_next;
end
assign q = r_reg;

================================================================
