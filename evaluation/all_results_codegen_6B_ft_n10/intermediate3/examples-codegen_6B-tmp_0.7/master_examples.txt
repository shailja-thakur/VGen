example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
 if(reset)
 r_reg <= #1 5'b0_0100;
 else
 r_reg <= #1 r_next;
end
//assign q = r_reg;
assign feedback = r_reg[4] ^ r_reg[2];
assign r_next = {r_reg[3:0], feedback};
assign q = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// always @(posedge clk, posedge reset)
begin
 if (reset)
 begin
	r_reg <= 5'b00001;
	q <= 5'b00001;
	end
 else
 begin
	r_reg <= r_next;
	q <= {q[0],r_reg[4]^r_reg[2]^feedback_value};
	end
 end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// xor most significant 2 and 4 bits of r_next to get bit positions 2 and 4 of q
assign q = {r_reg[4], r_next[4], r_reg[3], r_next[3], r_reg[2], r_next[2]};

always @(posedge clk or posedge reset)
 begin
	if (reset)
	begin
	r_reg <= 1;
	end
	else
	begin
	r_reg <= r_next;
	end
 end


================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
if (reset)
begin 
	r_reg <= 5'b0;
	q <= 5'b0;
end 
else 
begin 
	r_reg <= r_next;
	q <= {r_reg[3:0],feedback_value};
end
always@(*)
begin 
	r_next ={2'b0,r_reg[3:1]};
	if (r_reg[4:3] == 2'b00) 
	begin 
	r_next[2:0] = q[3:0];
	r_next[3] = q[4];
	end
	else if (r_reg[4:3] == 2'b01) 
	begin 
	r_next[2:0] = q
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin 
	if (reset)
	begin 
	r_reg <= 5'b0001;
	end 
	else 
	begin
	r_reg <= r_next;
	end 
end 
//
assign feedback = r_reg[2] ^ r_reg[4]; 
assign r_next = r_reg << 1;
assign q = r_reg; 

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
 if( ~reset )
 r_reg <= 5'b00001;
 else
 r_reg <= r_next;
end
assign q = r_reg;
assign r_next = {2'b0, feedback_value, r_reg[4:2]};
assign feedback_value = r_reg[1] ^ r_reg[4];

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
if(reset)
r_reg <= 1'b0;
else
r_reg <= r_next;
end
assign q = r_reg;
assign r_next = {feedback_value, r_reg[3:0]^r_reg[4]};
// use 13-function to make a 13-bit LFSR to store the value

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk or posedge reset )
begin : DFF_chain
	if ( reset )
	begin
	r_reg <= 1;
	end
	else
	begin
	r_reg <= r_next;
	end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

always @(posedge clk or posedge reset)
begin
if( reset == 1 )
	r_reg <= 5'b0_0001;
else
	begin
	if (r_reg [2:0] < 5'b0001)	//showaise if any one of the shifted bits is 1
	r_reg <= {r_reg[4:3],r_reg[2:0]^r_reg[4:3]};
	else
	r_reg <= r_reg;
	end
end

assign r_next = {r_reg[4:3],r_reg[2:0]^r_reg[4:3]};
assign q = r_reg;
assign feedback_value = r_reg[4:3]^r_reg[2:0];


================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk, posedge reset ) 
begin
 if (reset)
 r_reg <= 5'b0001;
else
 r_reg <= r_next; 
end 
assign q = r_reg; //outputs the value in register
assign r_next = q[4:2] ^ q[0]; // sets the next value in the register to be the xor of the previous value and the third bit value
assign feedback_value = r_reg[4] ^ r_reg[2]; //sets the feedback value to be the xor of the fourth bit previous value and the third bit value

================================================================
