example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~a[7] & ~b[7]) & s[7]);


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed; // the most significant bit of b is made zero so that the operation is unsigned

assign b_signed = ~b[7] + 1; // b is treated as a unsigned number

// operation is unsigned, but if a or b is negative, the operation is treated as a signed number

assign s = a + b_signed + 1; // s is the sum of a and b, where a and b are both unsigned numbers


assign overflow = (a[7] & b[7] & ~s[7]) | (a[7] & ~b[7] & s[7]); // s is the sum, if a and b are both negative, s is their sum, otherwise s is the sum of a and b

// if a or b is negative, the sum is the sum of a and b, otherwise the sum is the sum
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed [0:7];

// this array holds the values of b after the most significant bit is replaced with a signed high bit
// this is the b that will be added to s

generate
	genvar i; // used to iterate over the bits of b
	for (i=0; i<8; i=i+1)
	begin
	//make a copy of b with the most significant bit replaced with a signed high bit
	//this is the b that will be added to s
	assign b_signed[i] = b[i] ? 8'hff : 8'h00;
	//if the bit is a signed high bit, add it to the sum
	//if the bit is a signed low bit, subtract it from the sum
	if (b_signed[i])
	begin
	s[
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s=a+b;
assign overflow=s[7]^a[7]^b[7];


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [6:0] a_signed, b_signed, s_signed, b_mux;

// The most significant bit of a and b are low if the second most significant bit is high.
assign a_signed = {{2{a[7]}}, a[7:2]};
assign b_signed = {{2{b[7]}}, b[7:2]};

// Muxes for the most significant bit of a and b.
mux2X1 #(7) msb_mux_a(a, b, a[7], b[7]);
mux2X1 #(7) msb_mux_b(a, b, b[7], a[7]);

mux2X1 #(7) msb_mux_s(s, a_signed, s[7], a_signed[
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] c;
wire [7:0] b_signed;

assign b_signed = ~b[7] ? b : ~a[7] ? a : b;

assign c = a + b_signed + 8'b00000001;

assign s = c[7] ? ~c[6:0] + 1'b1 : c[6:0];

assign overflow = (a[7] & b_signed[7]) | (c[7] & a[7]);


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] b_signed; // stores the most significant bit of b
assign b_signed = ~b[7] + 1; // calculates the b most significant bit

wire signed_adder_overflow; // the output overflow
assign signed_adder_overflow = (a[7] & b_signed[7]) & ~s[7]; // calculates if the output overflow is high


// assigns the two numbers as the output s and the output overflow
assign s = a + b + signed_adder_overflow;

// calculates the carry output
assign carry = (a[7] & b_signed[7]) & ~(s[7] ^ signed_adder_overflow);


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// if a or b is negative, the sum may or may not be negative
// the sum is casted to a signed type to check if the sum is negative or positive

wire signed [7:0] casted_sum;

// if the most significant bit of a or b is high, the sum is negative
// if the sum is casted to a signed type, it will become negative if the most significant bit is high

assign casted_sum = a + b;

assign s = (casted_sum[7] == 1'b1) ? ~casted_sum + 1'b1 : casted_sum; // if the sum is negative, the most significant bit is high

// if the sum is positive, the most significant bit is low
// if the sum is casted to a signed type, it will become positive if the most significant bit is low

ass
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] c;

assign c = {1'b0,a} + {1'b0,b};

assign s = c[8] ? c[7:0] + {1'b1,1'b0} : c[7:0] + {1'b0,1'b1};

assign overflow = c[8] ^ c[7];



================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0]^b[0]; //for the carry out bit, we just add the two most significant bits
assign s[1] = a[1]^b[1]^(a[0]&b[0]); //we'll actually add three bits, the two most significant bits and the carry out bit
assign s[2] = a[2]^b[2]^(a[1]&b[1]);
assign s[3] = a[3]^b[3]^(a[2]&b[2]);
assign s[4] = a[4]^b[4]^(a[3]&b[3]);
assign s[5] = a[5]^b[5]^(a[4]&b[4]);
assign s[6] = a[
================================================================
