example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


fulladder0 add0_1 (a[0],b[0],s[0],carry[0],overflow[0]);
fulladder0 add0_2 (a[1],b[1],carry[0],s[1],carry[1]);
fulladder0 add0_3 (a[2],b[2],carry[1],s[2],carry[2]);
fulladder0 add0_4 (a[3],b[3],carry[2],s[3],carry[3]);
fulladder0 add0_5 (a[4],b[4],carry[3],s[4],carry[4]);
fulladder0 add0_6 (a[5],b[5],carry[4],s[5],carry[5]);
fulladder0 add0_7 (a[6],b[6],carry[5],s[6],
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//Turn a and b into two's complement form if these numbers are negative
assign b_of = {b[6:0],1'b1} + {b[7],1'b1} ;
assign a_of = {a[6:0],1'b1} + {a[7],1'b1} ;

always@(*) 
begin	
	if ({a[7],a[6:0]} < {b_of[7],b[6:0]})	
	begin 
	assign s = {a[7],a[6:0] - b_of[6:0]}; 
	assign overflow1 = 0;
	end	
	else 
	begin 
	assign s = {a[7],a[6:0] + b_of[6:0]}; 

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = (a[7] & b[7]) & (~s[7]);

// uge the most significant bit of a and b to the most significant bit of s.

assign s[0] = a[0] ^ b[0];


//?? comp y tiwu yo bit hai
//a and b are equal if the most significant bit is equal
// xor the least significant bit of a and b to the least significant bit of s.

assign s[1] = a[1] ^ b[1];
assign s[2] = a[2] ^ b[2];
assign s[3] = a[3] ^ b[3];
assign s[4] = a[4] ^ b[4];
assign s[5] = a[5] ^ b[5];
assign s[6]
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0]; 
assign s[1] = a[1] ^ b[1];
assign s[2] = a[2] ^ b[2];
assign s[3] = a[3] ^ b[3];
assign s[4] = a[4] ^ b[4];
assign s[5] = a[5] ^ b[5];
assign s[6] = a[6] ^ b[6];
assign s[7] = a[7] ^ b[7];
assign overflow = signed_overflow_a_b; 

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed_a_shr0_b_shr0;
wire signed_a_shr1_b_shr1;
wire signed_a_shr2_b_shr2;
wire signed_a_shr3_b_shr3;

assign signed_a_shr0_b_shr0 = a[0]^b[0];
assign signed_a_shr1_b_shr1 = a[1]^b[1];
assign signed_a_shr2_b_shr2 = a[2]^b[2];
assign signed_a_shr3_b_shr3 = a[3]^b[3];

assign s = signed_a_shr0_b_shr0 + 36'shA + signed_a_shr1_b_shr1 + 36'shA + signed_a_shr2_
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 
wire [7:0] b_as_negated; // b is a negative number, so we have to actually add 1 to it to get a positive number

assign b_as_negated = generate_negative_b(b); // ([7:0]) is what is printed on the paper. SHIPS OPCODE SUCKS

full_adder add1(a[0], b_as_negated[0], s[0], s[1], s[2]); 
full_adder add2(a[1], b_as_negated[1], s[3], s[4], s[5]); 
full_adder add3(a[2], b_as_negated[2], s[6], s[7], s[8]);
assign overflow = b_as_negated[3] ^ a[3]; // xor of the
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// 15 adder modules reduced to 1.
// assign s={b,a}
assign s={b[6:0],a[6:0],2'b00};
last_adder_carry l0 (b[7],a[7],1'b0,s[7],c1);
last_adder_carry l1 (b[6],a[6],c1,s[6],c2);
last_adder_carry l2 (b[5],a[5],c2,s[5],c3);
last_adder_carry l3 (b[4],a[4],c3,s[4],c4);
last_adder_carry l4 (b[3],a[3],c4,s[3],c5);
last_adder_carry l5 (b[2],a[2],c5,s[
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [8:0] bsigned[1:0];

assign bsigned[0] = {b[7],b[7:1]}; //take binary representation of b (MSB goes to b1, LSB goes to b0)
assign bsigned[1] = {b[5:3],b[2:0]}; //take binary representation of b

assign s[0] = a[0]^b0[0]; //verifies if the output is negative if both a and b are negative else adds.
assign s[7:1] = a[7:1]^b0[7:1]+bsigned[0]; //if a or b is negative,the output is negative else addition.
assign overflow = b0[0]^ bsigned[0]; // this indicates the signed overflow (difference of a-b is negative and
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] o;
wire m; 
shift_reg sr0 (a, o, overflow, m, 1'b1);
shift_reg sr1 (b, s, overflow, m, 1'b1);


================================================================
