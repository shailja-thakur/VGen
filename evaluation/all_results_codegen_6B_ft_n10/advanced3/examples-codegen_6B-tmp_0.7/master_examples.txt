example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
case(present_state)
IDLE: if(x) next_state=S1;
else next_state=IDLE;
S1: if(x) next_state=S10;
else next_state=IDLE;
S10: if(x) next_state=S101;
else next_state=IDLE;
S101: if(x) next_state=S1;
else next_state=IDLE;
default: next_state=IDLE;
endcase

case(present_state)
IDLE: if(reset)z=0;
S1: if(reset)z=0;
S10: if(reset)z=0;
S101: if(reset)z=0;
endcase

end

always @(posedge clk)
begin

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin 
 if(reset)
 	present_state<=IDLE;
else 
	present_state<=next_state;
end 

always @(present_state,x)
case(present_state) 
IDLE: 	if(x)
	begin
	next_state=S1;
	end
	else
	begin
	next_state=IDLE;
	end
S1: 	if(x)
	begin
	next_state=S10;
	end
	else
	begin
	next_state=IDLE;
	end
S10: 	if(x)
	begin
	next_state=S101;
	end
	else
	begin
	next_state=IDLE;
	end
S101
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
always @(posedge clk, posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 
 
always @(present_state, x) 
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
S1: if(x) next_state = S10; 
	else next_state = IDLE; 
S10: if(x) next_state = S101; 
	else next_state = IDLE; 
S101: if(x) next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 
 
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset) 
	if (reset) 
	present_state = IDLE; 
	else 
	present_state = next_state;

always @ (posedge clk or posedge reset)
	if (reset) 
	next_state = IDLE; 
	else 
	begin
	case(present_state)
	IDLE: 
	if (x) next_state = S1; 
	else next_state = IDLE;
	S1: 
	if (x) next_state = S10; 
	else next_state = IDLE;
	S10: 
	if (x) next_state = S101; 
	else next_state = IDLE;
	S101: 
	if (x) next_state = S1;
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
	if (reset) present_state <= IDLE; 
	else
	present_state <= next_state;
	
	
always @(posedge clk or posedge reset) 
	if (reset) next_state <= IDLE; 
	else 
	case (present_state)
	IDLE: 
	case (x)
	1'b0: next_state <= S1; 
	1'b1: next_state <= S10; 
	endcase
	S1: 
	case (x)
	1'b0: next_state <= S101; 
	1'b1: next_state <= S10; 
	endcase
	S10: 
	case (x)
	1'b0: next_state <=
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin 
if(reset) 
present_state = IDLE; 
else 
present_state = next_state;
end 

always @(x,present_state)
case(present_state)
IDLE: next_state = x?S1:IDLE;
S1: next_state = x?S10:IDLE;
S10: next_state = x?S101:IDLE;
S101: next_state = x?S1:IDLE;
endcase
assign z = (present_state==S101); 

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk ) 
begin 
if(reset) 
present_state <= IDLE ; 
else 
present_state <= next_state ; 
end 

always @ ( x or posedge reset ) 
begin
if(reset) 
next_state <= IDLE ; 
else 
case(present_state) 
IDLE : begin 
if (x) next_state <= S1 ; 
else next_state <= IDLE ; 
end 

S1: begin 
if(x) next_state <= S10 ; 
else next_state <= S1 ; 
end 

S10 : begin 
if(x) next_state <= S101 ; 
else next_state <= S1 ; 
end 

S101 : begin 
if(x) next_state <= S1
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// if next_state is IDLE, output is held at 0, otherwise it is asserted to 1
assign z = (present_state == IDLE) ? 0 : ((next_state == IDLE) ? 1 : 0);

always @(posedge clk) 
	begin
	if (reset)
	present_state <= IDLE;
	else 
	present_state <= next_state;
	end

always @(x, present_state)
case(present_state)
	IDLE: if(x) next_state = S1; else next_state = IDLE;
	S1: if(x) next_state = S10; else next_state = IDLE;
	S10: if(x) next_state = S101; else next_state = IDLE;
	S101: if(x) next_state =
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state;
end 

always @(present_state or x)
begin 
	next_state = IDLE; 
	case (present_state)
	IDLE: if (x) next_state = S1; 
	S1: if (x) next_state = S10; 
	S10: if (x) next_state = S101; 
	S101: if (x) next_state = S1; 
	endcase 

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(x or reset or present_state) begin 
	if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
end 

always @(x or present_state) begin 
	if (present_state == IDLE) 
	if (x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	else 
	if (present_state == S1) 
	if (x) 
	next_state = S10; 
	else 
	next_state = S1; 
	else 
	if (present_state == S10) 
	if (x) 
	next_state = S101; 
	else 
	next_state = S1; 
	else
================================================================
