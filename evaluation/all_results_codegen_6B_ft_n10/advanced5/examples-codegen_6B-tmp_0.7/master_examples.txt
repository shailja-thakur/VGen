example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is high, the state change to SB or SA.
always @(posedge clk) 
cur_state <= next_state;
// State machine using case statements.
always @(cur_state or a or b) 
case(cur_state)
IDLE: if(a & b) next_state = SA;
else if(a) next_state = SB;
else if(b) next_state = SAB;
SA: if(a & b) next_state = SA;
else if(a) next_state = SB;
else if(b) next_state = SAB;
SB: if(a & b) next_state = SB;
else if(a) next_state = SAB;
else if(b) next_state = SAB;
SAB: if(a & b) next_state = S
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, but the current state is SAB,
// state change to SB. Otherwise, change to IDLE.
always @ (posedge clk or posedge reset) begin
 if (reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @ (cur_state or a or b) begin
case (cur_state)
IDLE : begin
z <= 0;
if (a != 0 && b != 0)
next_state = SA;
else if (a !=0 && b == 0)
next_state = SB;
else if (a == 0 && b != 0)
next_state = SAB;
else
next_state = IDLE;
end
SA : begin
z <= 0;
if (a != 0 && b != 0)
next_state
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// Otherwise, if any output is high, state change to SB.
always @(*) begin 
	cur_state = next_state;
end
always @(posedge clk) begin
	if (reset)
	cur_state = IDLE;
	else
	cur_state = next_state;
end
// State machine:
always @(*) begin
	case(cur_state)
	IDLE: next_state = a ? SAB : IDLE;
	SA: next_state = b ? SAB : IDLE;
	SB: next_state = a ? SAB : IDLE;
	SAB: next_state = a ? SAB : SB;
	default: next_state = IDLE;
	endcase
end
// Output logic:
assign z = (cur_state == SAB);

================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// Otherwise, state changes to either SA or SB.
always @(posedge clk or posedge reset) begin
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
// State machine:
// if both a and b are asserted, next_state = SAB;
// if either a or b is asserted, next_state = SA or SB.
always @(cur_state or a or b) begin
	case(cur_state)
	IDLE: begin 
	if (a && b) next_state = SAB;
	else if (a || b) next_state = SA;
	else next_state = IDLE;
	end
	SA: begin 
	if (a && b) next_state = SAB;
	else if (a || b) next_state =
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a or b is high, state changes to S1 or S0.
always @(posedge clk or posedge reset)
	if (reset) 
	cur_state <= IDLE; 
	else 
	cur_state <= next_state;
// State machine to control FSM
always @(cur_state or a or b)
begin
	case(cur_state)
	IDLE: 
	if (a & b) next_state = SAB; 
	else if (a) next_state = S1; 
	else if (b) next_state = S0;
	else next_state = IDLE;
	SAB: 
	if (a & b) next_state = SAB; 
	else if (a) next_state = S1; 
	else if (b) next_state
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If a or b are asserted, state changes to SAB. 
// If state is SAB and inputs a and b are asserted, state changes to SB.
// If state is SAB and inputs a or b are asserted, state changes to IDLE.
always @(posedge clk or posedge reset) begin
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
// State machine:
always @(*) begin
	case(cur_state)
	IDLE: begin
	if(a & b)
	next_state = SA;
	else if(a | b)
	next_state = SAB;
	else 
	next_state = IDLE;
	end
	SA: begin
	if(a & b)
	next_state = SA;
	else if
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If a or b are high, state changes to SB or IDLE.
always @(*) begin
	cur_state <= next_state;
end
always @(*) begin
	case(cur_state)
	IDLE: begin
	if(a && b)
	next_state = SA;
	else if(a || b)
	next_state = SB;
	else
	next_state = IDLE;
	end
	SA: begin
	if(a && b)
	next_state = SAB;
	else
	next_state = SB;
	end
	SB: begin
	if(a && b)
	next_state = SAB;
	else
	next_state = SB;
	end
	SAB: begin
	if(a && b)
	next_state = SAB;
	else
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// Otherwise, if any one of them is high, the state change to SB or IDLE.
always @(*) begin
cur_state = next_state;
case(cur_state)
IDLE: begin
if (a==1 && b==1)
next_state = SA;
else if (a==1 || b==1)
next_state = SB;
else 
next_state = IDLE;
end
SA: begin
if (a==1 && b==1)
next_state = SAB;
else 
next_state = SB;
end
SB: begin
if (a==1 && b==1)
next_state = SAB;
else 
next_state = IDLE;
end
default: next_state = IDLE;
endcase
end
// Output logic:
// Set z to 1 when current state is SAB
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is high, state changes to SB or IDLE.
always @(posedge clk or negedge reset) 
begin
 if( ~reset ) 
 cur_state <= IDLE;
 else 
 cur_state <= next_state;
end 
always @(cur_state or a or b ) 
begin 
 case(cur_state) 
 IDLE: if(a&b) 
 next_state = SA;
 else if(a) 
 next_state = SB;
 else if(b) 
 next_state = SAB;
 SAB: if(a&b) 
 next_state = SA;
 else if(a) 
 next_state = SB;
 else if(b) 
 next_state = SAB;
 SB: if(a&b) 
 next_state = SA;
 else
================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset)
	cur_state <= IDLE;
else
	cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
	if (a & b) next_state = SA;
	else if (a) next_state = SB;
	else if (b) next_state = SAB;
	else next_state = IDLE;
end
SA: begin
	if (a & b) next_state = SAB;
	else if (a) next_state = SB;
	else if (b) next_state = SAB;
	else next_state = IDLE;
end
SB: begin
	if (a
================================================================
