example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state,in)
begin
case(present_state)
0:
begin
if(in==1)
next_state = 0;
else
next_state = 1;
end
1:
begin
if(in==1)
next_state = 1;
else
next_state = 0;
end
endcase
end
assign out = (present_state==1)?1:0;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;
	end
always @(in or present_state)
begin
next_state = 1'b0;
case(present_state)
1'b0:
begin
if(in)
next_state = 1'b0;
else
next_state = 1'b1;
end
1'b1:
begin
if(in)
next_state = 1'b1;
else
next_state = 1'b0;
end
endcase
end
assign out = ((present_state == 1'b0) && (in == 1'b1)) ? 1'b1 : 1'b0;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset) begin
	if (reset)
	begin
	present_state <= 0;	// state 0
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in) begin
	case (present_state)
	0: begin
	if(in == 1)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1: begin
	if(in == 1)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset == 1)
	begin
 	present_state <= 1'd0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in, present_state)
begin
	case(present_state)
	1'd0: begin
	next_state <= in ? 1'd0 : 1'd1;
	out <= in ? 1'd0 : 1'd1;
	end
	1'd1: begin
	next_state <= in ? 1'd1 : 1'd0;
	out <= in ? 1'd1 : 1'd0;
	end
	endcase
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset == 1'b1)
begin
present_state <= 1'b0;
next_state <= 1'b0;
out <= 1'b0;
end
else
begin
case (present_state)
1'b0:
begin
if(in == 1'b1)
begin
next_state <= 1'b0;
out <= 1'b0;
end
else
begin
next_state <= 1'b1;
out <= 1'b0;
end
end
1'b1:
begin
if(in == 1'b1)
begin
next_state <= 1'b1;
out <= 1'b0;
end
else
begin
next_state <= 1'b0;
out <= 1'b0;
end
end
endcase
end
================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(present_state, in)
begin
	case(present_state)
	0:begin
	if(in)
	begin
	next_state=0;
	out=0;
	end
	else
	begin
	next_state=1;
	out=0;
	end
	end
	1:begin
	if(in)
	begin
	next_state=1;
	out=0;
	end
	else
	begin
	next_state=0;
	out=0;
	end
	end
	endcase
end
always@(posedge clk)
begin
	if(reset)
	present_state=0;
	else
	present_state=next_state;
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (present_state)
case (present_state)
0: if (in)
	next_state = 0;
	else
	next_state = 1;
1: if (in)
	next_state = 1;
	else
	next_state = 0;
default: next_state = 0;
endcase
always @ (posedge clk or posedge reset)
if (reset)
	present_state = 0;
else
	present_state = next_state;
assign out = (present_state == 1);

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
assign out = (present_state == 1) ? 1 : 0;
// Define NextState
always@(*)
begin
case(present_state)
0: next_state = in;
1: next_state = in;
default: next_state = 0;
endcase
end
// Define PresentState
always@(posedge clk)
begin
if(reset)
begin
present_state <= 0;
end
else
begin
present_state <= next_state;
end
end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
// resetting the present state
always @(posedge clk)
begin
 if(reset)
 begin
 present_state <= 1'b0;
 end
 else
 begin
 present_state <= next_state;
 end
end
always @(present_state, in)
begin
 case(present_state)
 1'b0:
 begin
 if(in)
 begin
 next_state <= 1'b0;
 end
 else
 begin
 next_state <= 1'b1;
 end
 end
 1'b1:
 begin
 if(in)
 begin
 next_state <= 1'b1;
 end
 else
 begin
 next_state <= 1'b0;
 end
 end
 endcase
end
assign out = present_state;

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1) ? 1 : 0;
always @(posedge clk) begin
if(reset)
present_state <= 1;
else
present_state <= next_state;
end
always @(*) begin
case(present_state)
0 : begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1 : begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (~in);
always @ (posedge clk or negedge reset)
begin
	if (reset == 0) 
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else 
	begin
	present_state <= next_state;
	end
end
always @ (present_state or in)
begin
	case (present_state)
	0: begin
	if (in == 1) 
	begin
	next_state <= 0;
	end
	else 
	begin
	next_state <= 1;
	end
	end
	1: begin
	if (in == 1) 
	begin
	next_state <= 1;
	end
	else 
	begin
	next_state <= 0;
	end
	end
	
================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <=1;
	end
	else
	begin
	next_state <=0;
	end
	end
	endcase
end
assign out = (present_state == 1)? 1:
================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: begin
if(in)
	next_state = 0;
	else
	next_state = 1;
	end
1: begin
if(in)
	next_state = 1;
	else
	next_state = 0;
	end
endcase
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Go to state 0 if reset=1
always @ (posedge clk, posedge reset)
begin
if (reset)
	present_state = 0;
else
	present_state = next_state;
end
always @ (present_state, in)
begin
case(present_state)
0: if(in)	begin next_state = 1; out = 1; end else
	begin next_state = 0; out = 0; end
1: if(in)	begin next_state = 1; out = 1; end else
	begin next_state = 0; out = 0; end
endcase
end

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
 present_state <= 0;
else
 present_state <= next_state;
end
always @(in or present_state)
begin
 case (present_state)
 0 : begin if(in)
 0<=next_state;
 else
 1<=next_state;
 end
 1 : begin if(~in)
 0<=next_state;
 else
 1<=next_state;
 end
 endcase
end
assign out = (present_state == 0)?1:0;

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// Instantiate the Unit Under Test (UUT)
simple_fsm uut(
.in(in), 
.clk(clk), 
.reset(reset), 
.out(out)
);
initial begin
$monitor("in=%b clk=%b reset=%b present_state=%b next_state=%b out=%b", in, clk, reset, present_state, next_state, out);
end

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
// State transition logic with present state and input
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
// State transition logic with present state and input
always @(present_state or in)
begin
	case(present_state)
	1'b0:
	begin
	if (in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if (in)
	begin
	next_state <= 1'b1;
	end
	
================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1.
// Note: state 0 and state 1 are mutually exclusive states.
initial
begin
	present_state <= 1'b0;
	next_state <= 1'b0;
end
always @ (posedge clk)
begin
	if (reset)
	begin
	present_state <= 1'b0;
	next_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @ (present_state, in)
begin
case(present_state)
// For the values of present state, the output is 1 only if the input is 1
	1'b0:
	begin
	out = 1'b0;
	next_state <= in ? 1'b0 : 1'b1;
	
================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// The next state is present state + 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end

================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk)
begin
if (reset)
present_state <= #1 0; // initial state 0
else
present_state <= #1 next_state; // next state
end
always @ (present_state, in)
case (present_state)
0: if (in)
next_state = 0;
else
next_state = 1;
1: if (in)
next_state = 1;
else
next_state = 0;
endcase
assign out = present_state;

================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 0 & in == 1) ? 1:
(present_state == 0 & in == 0) ? 0:
(present_state == 1 & in == 1) ? 1:
(present_state == 1 & in == 0) ? 0:
1'bx;
// Next state calculation. If state 0, go to state 1 if in = 1. 
// If state 0, go to state 0 if in = 0. If state 1, stay in state 1 if in = 0.
// If state 1, go to state 0 if in = 1.
always @(present_state or in)
begin
case(present_state)
0: if(in == 0) next_state <= 0;
1: if(in == 1) next_state <= 1;
endcase
end
// State transition logic (controller)
always @(posedge
================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin : FSM
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	case (present_state)
	0: if(in)
	begin
	next_state = 0;
	present_state = next_state;
	end
	else
	begin
	next_state = 1;
	present_state = next_state;
	end
	1: if(in)
	begin
	next_state = 0;
	present_state = next_state;
	end
	else
	begin
	next_state = 1;
	present_state = next_state;
	end
	endcase
	end
end
always @ (present_state or in)
begin : OUT
================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in) begin
	case(present_state)
	0:begin
	if(in == 1)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:begin
	if(in == 0)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	default:begin
	next_state <= 0;
	end
	endcase
end
assign out = (present_state == 0)? 1:0
================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (present_state, in)
	case (present_state)
	0: begin
	if(in) 
	begin
	present_state <= 0;
	next_state <= 0;
	out <= 1;
	end
	else
	begin
	present_state <= 1;
	next_state <= 1;
	out <= 0;
	end
	end
	1: begin
	if(in) 
	begin
	present_state <= 1;
	next_state <= 0;
	out <= 0;
	end
	else
	begin
	present_state <= 0;
	next_state <= 0;
	out <= 1;
	end
	end
	default: present_state <= 0;
	endcase
	// State transition logic
	always @ (present_state)
	begin
	case
================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter s0=0, s1=1;
// Present state
always @(posedge clk)
begin
if(reset)
present_state <= s0;
else
present_state <= next_state;
end
// Next state
always @(posedge clk)
begin
case(present_state)
s0: if(in)
next_state <= s0;
else
next_state <= s1;
s1: if(in)
next_state <= s1;
else
next_state <= s0;
endcase
end
assign out = (present_state == s1);

================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
parameter s0 = 0;
parameter s1 = 1;
always @ (posedge clk)
begin
if (reset)
present_state <= s0;
else
present_state <= next_state;
end
always @ (present_state or in)
begin
case (present_state)
s0: if(in)
begin
next_state <= s0;
out <= 0;
end
else
begin
next_state <= s1;
out <= 0;
end
s1: if (in)
begin
next_state <= s1;
out <= 1;
end
else
begin
next_state <= s0;
out <= 1;
end
endcase
end

================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// reset=1 resets the state machine to state 0, and out = 0
initial
begin
	present_state <= 0;
end
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	0:
	begin
	next_state <= in ? 0 : 1;
	out <= in ? 0 : 1;
	end
	1:
	begin
	next_state <= in ? 1 : 0;
	out <= in ? 1 : 0;
	end
	endcase
end

================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(*)
begin
	case(present_state)
	0:
	begin
	if(in)
	next_state <= 0;
	else
	next_state <= 1;
	end
	1:
	begin
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
	end
	default:
	next_state <= 0;
	endcase
end

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter S0 = 0;
parameter S1 = 1;
always @ (posedge clk, posedge reset)
begin
	if (reset)
	begin
	present_state <= S0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @ (in, present_state)
begin
	case (present_state)
	S0:
	begin
	if (in)
	begin
	next_state = S0;
	out = 0;
	end
	else
	begin
	next_state = S1;
	out = 0;
	end
	end
	S1:
	begin
	if (in)
	begin
	next_state = S0;
	out = 0;
	end
	else
	begin
	next_state
================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
 if(reset)
 begin
 present_state <= 0;
 end
 else
 begin
 present_state <= next_state;
 end
end
always @(present_state, in)
begin
 case(present_state)
 0:begin
 if(in)
 begin
 next_state <= 0;
 end
 else
 begin
 next_state <= 1;
 end
 end
 1:begin
 if(in)
 begin
 next_state <= 1;
 end
 else
 begin
 next_state <= 0;
 end
 end
 endcase
end
assign out = (present_state == 1) ? 1 : 0;

================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 0) ? (in) : (~in);

always @ (posedge clk)
begin
if (reset) present_state <= 0;
else present_state <= next_state;
end

always @ (present_state or in)
begin
case(present_state)
0:
begin
if (in) next_state <= 0;
else next_state <= 1;
end
1:
begin
if (in) next_state <= 1;
else next_state <= 0;
end
endcase
end

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset == 1)
 present_state <= 1'b0;
else
 present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'b0: begin
 out <= 1'b0;
 next_state <= (~in) ? 1'b0 : 1'b1;
 end
1'b1: begin
 out <= 1'b1;
 next_state <= (~in) ? 1'b0 : 1'b1;
 end
endcase
end

================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Go to state 0 if reset=1
always @(posedge clk)
begin
 if (reset)
 begin
 present_state <= 0;
 end
 else
 begin
 present_state <= next_state;
 end
end
always @(present_state, in)
begin
 case (present_state)
 0: begin if(in)
 next_state = 0;
 else
 next_state = 1;
 end
 1: begin if(in)
 next_state = 1;
 else
 next_state = 0;
 end
 endcase
end
assign out = present_state;

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1 && in == 1) ? 1 : (present_state == 1 && in == 0) ? 0 : present_state;
// Next state logic
always @(posedge clk) begin
 if(reset) begin
// if reset, go to state 0
 next_state = 0;
 end
 else begin
// else, next state is same as present state
 next_state = present_state;
 end
end
// State flip-flops with asynchronous reset
always @(posedge clk) begin
 if(reset) begin
 // if reset, set state to 0
 present_state = 0;
 end
 else begin
 // if not reset, set state to next state
 present_state = next_state;
 end
end

================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0 = 0, state1 = 1;
always @(posedge clk or posedge reset) begin
	if (reset)
	begin
	present_state <= state0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in) begin
	case (present_state)
	state0:
	begin
	if (in)
	begin
	next_state <= state0;
	end
	else
	begin
	next_state <= state1;
	end
	end
	state1:
	begin
	if (in)
	begin
	next_state <= state1;
	end
	else
	begin
	next_state <= state0;
	end
	end
	endcase
end
assign out = (present
================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 1'd0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
next_state = present_state;
case(present_state)
1'd0 : begin
if(in)
next_state <= 1'd0;
else 
next_state <= 1'd1;
end
1'd1 : begin
if(in)
next_state <= 1'd1;
else
next_state <= 1'd0;
end
endcase
end
assign out = (present_state == 1'd0)? 1'd1 : 1'd0;

================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	present_state <= 1'b0;
	next_state <= 1'b1;
	end
	else 
	begin
	present_state <= next_state;
	end
end

================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0 = 0, state1=1;
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= state0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
state0:
begin
if(in == 1)
next_state = state0;
else
next_state = state1;
end
state1:
begin
if(in == 1)
next_state = state1;
else
next_state = state0;
end
endcase
end
assign out = (present_state==state0)?1:0;

================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0 = 0, state1 = 1;
always @ (posedge clk)
begin
if (reset)
present_state <= state0;
else
present_state <= next_state;
end
always @ (reset or in or present_state)
begin
case (present_state)
state0:
begin
if (in)
next_state = state0;
else
next_state = state1;
end
state1:
begin
if (in)
next_state = state1;
else
next_state = state0;
end
endcase
end
assign out = present_state == state1;

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in or present_state)
begin
	case (present_state)
	0: begin
	next_state <= in;
	out <= 0;
	end
	1: begin
	next_state <= in;
	out <= 0;
	end
	default: begin
	next_state <= 0;
	out <= 0;
	end
	endcase
end

================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
// always @(posedge clk)
always @(present_state or in)
begin
case(present_state)
0: if(in)
	begin
	next_state <= 0;
	out <= 0;
	end
	else
	begin
	next_state <= 1;
	out <= 1;
	end
	1: if(in)
	begin
	next_state <= 1;
	out <= 0;
	end
	else
	begin
	next_state <= 0;
	out <= 1;
	end
	default: next_state <= 0;
endcase
end

================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 is illegal
// This is a Moore state machine.
always @(posedge clk or posedge reset)
begin: STATE_MEMORY
if (reset) present_state <= #1 0;
else present_state <= #1 next_state;
end
always @(present_state or in)
begin: NEXT_STATE_LOGIC
case(present_state)
0: if(in) next_state <= #1 0;
else next_state <= #1 1;
1: if(in) next_state <= #1 1;
else next_state <= #1 0;
endcase
end
assign out = (present_state == 0)?1:0;

================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(present_state, reset, in)
begin
case(present_state)
0: begin
 if (reset)
 next_state = 0;
 else if (in)
 next_state = 0;
 else
 next_state = 1;
 end
1: begin
 if (reset)
 next_state = 1;
 else if (in)
 next_state = 1;
 else
 next_state = 0;
 end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset) present_state <= 0;
else present_state <= next_state;
end
always @(in, present_state)
begin
case (present_state)
0: if (in) next_state <= 0;
else if (!in) next_state <= 1;
1: if (in) next_state <= 1;
else if (!in) next_state <= 0;
default: next_state <= 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk, posedge reset)
begin
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @ (in, present_state)
begin
	case (present_state)
	0: if (in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	1: if (in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// In state 0, if out=1, stay in state 0. In state 0, if out=0, go to state 1
// In state 1, if out=1, stay in state 1. In state 1, if out=0, go to state 0
initial
begin
present_state = 0;
next_state = 0;
end
always @(posedge clk)
begin
if(reset)
present_state <= next_state;
else
present_state <= present_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out =
================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
parameter state_0 = 0;
parameter state_1 = 1;
assign out = (present_state == state_0 && in == 0) || (present_state == state_1 && in == 1);
always @(posedge clk)
begin
if (reset)
present_state <= state_0;
else
present_state <= next_state;
end
always @(posedge clk)
begin
case(present_state)
state_0:
begin
if (in == 0)
next_state <= state_0;
else
next_state <= state_1;
end
state_1:
begin
if (in == 0)
next_state <= state_0;
else
next_state <= state_1;
end
default:
next_state <=
================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(in, present_state)
begin
case(present_state)
0: if(in)
begin
next_state = 0;
out = 0;
end
else
begin
next_state = 1;
out = 0;
end
1: if(in)
begin
next_state = 1;
out = 0;
end
else
begin
next_state = 0;
out = 1;
end
endcase
end

================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0=0, state1=1;
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	present_state = state0;
	next_state = state0;
	end
	else
	begin
	present_state = next_state;
	end
end
always @(present_state, in)
begin
	case(present_state)
	state0:
	begin
	if(in)
	begin
	next_state = state0;
	end
	else
	begin
	next_state = state1;
	end
	end
	state1:
	begin
	if(in)
	begin
	next_state = state1;
	end
	else
	begin
	next_state = state0;
	end
	end
	
================================================================
