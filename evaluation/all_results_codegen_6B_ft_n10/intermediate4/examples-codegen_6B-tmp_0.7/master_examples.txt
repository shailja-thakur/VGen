example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if(in==1)
	begin
	next_state = 1;
	present_state = 1;
	end
	else
	begin
	next_state = 0;
	present_state = 0;
	end
	1: 
	if(in==1)
	begin
	next_state = 1;
	present_state = 1;
	end
	else
	begin
	next_state = 0;
	present_state = 0;
	end
	default: 
	begin
	next_state
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// Register output
always@(posedge clk)
	if(reset) //if reset is high, output is 0
	begin	
	next_state=present_state;
	out=0;
	end
	else 
	begin
	present_state=next_state;
	if(present_state==0 & in==1)
	begin
	next_state=1;
	out=0;
	end
	else if(present_state==1 & in==1)
	begin
	next_state=0;
	out=1;
	end
	else if(present_state==1 & in==0)
	begin
	next_state=1;
	out=1;
	end
	else if(present_state==0 & in==0)
	begin
	next_state=1;
	
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)^(next_state==1'b1);
// Register to store values in the next state
always @(posedge clk)
if (reset)
present_state<=1'b0;
else
present_state<=next_state;
// Next state
always @(present_state, in)
case(present_state)
1'b0: if(in) next_state=1'b1;
	else next_state=1'b0;
1'b1: if(in) next_state=1'b1;
	else next_state=1'b0;
default: next_state=1'b0;
endcase

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;

always @(posedge clk or posedge reset)
if (reset) begin
	// State transition logic: next_state = 0; 
	present_state <= 0;
end else begin
	// State transition logic: present_state = next_state;
	present_state <= next_state;
end

// State encoding logic: next_state = encode(in);
always @(in)
case(in)
	1'b0: next_state = 2'b00;
	1'b1: next_state = 2'b01;
endcase


================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// When reset is high, present_state = 0, next_state = 0
// When reset is low, present_state = 0, next_state = 1
// If we make a change to a state, it is updated. If we make a change to cb, it 
// is seen and the new value is used. If we make a change to cb, then a new 
// value is not seen.
always@(posedge clk or posedge reset) begin
	if(reset) begin
	present_state = 0;
	next_state = 1;
	end
	else begin
	present_state = next_state;	
	next_state = 1;
	end
end
assign out = present_state;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// This is a sequential logistic equation that generates a sigmoid function.
// The equation is: out=(exp(-(x-x0))+1)/2;
// Notice that the term (x-x0) is converted to a shifted binary representation.
// It works for 0<=x<=1 (but not for -1<=x<=0).

assign out=(present_state==0)?(!in):(exp(-(present_state-1))+1)/2;
//Note that if x<0, then exp will throw an error, so if in<0,
//then out<=0, else out<=1.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state<=0;
	else
	present_state<=next_state;
	end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// this works if you do not use a clock to set the next state, but instead use a combinational always block

always @(posedge clk)
if(reset)
present_state <= 0;
else
present_state <= next_state;

always @(present_state or in)
case(present_state)
0: next_state <= in;
1: next_state <= ~in;
endcase

assign out = (present_state == 1);
// End of the FSM code. You need not code the output (out)

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out is the output of this module
// input is the input that determines the state
assign next_state = present_state & (~in);
assign out = (present_state & in);
// Register output
always @(posedge clk)
	if (reset)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= next_state;
	end
// Output logic
always @(posedge clk)
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

assign out=(present_state==next_state);

always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	// State transitions
	case(present_state)
	0: if(in)
	next_state=0;
	else
	next_state=1;
	1: if(in)
	next_state=1;
	else
	next_state=0;
	endcase
	// Output transitions
	case(present_state)
	0: if(in)
	out=1;
	else
	out=0;
	1: if(in)
	out=0;
	else
	out=1;
	endcase
	end
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
//reg out;
// These are the current and next states
//`include "simple_fsm_state_defs.v"

always @(posedge clk or posedge reset)
	present_state <= next_state;

always @(*)
begin
	case(present_state)
	2'b00: next_state <= in ? 2'b01 : 2'b00;
	2'b01: next_state <= in ? 2'b10 : 2'b00;
	2'b10: next_state <= in ? 2'b00 : 2'b11;
	2'b11: next_state <= in ? 2'b00 : 2'b11;
	endcase
end

// Output logic
always @(present_state)
	case(present_state)
	2'b00: out <= 0;
================================================================
