example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ in;
always @(posedge clk or posedge reset) begin
	if (reset)
	// Set the present state to state 0
	present_state <= 0;
	else
	// Otherwise, the present state is the next state
	present_state <= next_state;
end
// State 0: in=1 -> next_state=0; in=0 -> next_state=1;
// State 1: in=1 -> next_state=1; in=0 -> next_state=0;
always @(present_state or in) begin
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	next_state <= present_state;
	end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: if(out) out = 1; else out = 0;
	1: if(out) out = 0; else out = 1;
	endcase
	end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==0 & in)|(present_state==1 & ~in);
// The next state is a bit more complex. In state 0, if in=1, stay in state 0.
// If in=1 and out=1, then go to state 1. If in=1 and out=0, then go to state 0.
// If in=0 and out=1, then go to state 1. If in=0 and out=0, then go to state 0.
always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state<=0;
	else
	present_state<=next_state;
	end
always @(present_state or in or out)
	case(present_state)
	0: 
	begin 
	if(in==1 & out==1)
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==0)&(in);
always @(posedge clk)
	if(reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	present_state=next_state;
	case(present_state)
	0: if(in)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
	1: if(in)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
	endcase
	end
assign out=(present_state==0)&(~in);

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 if the current state is state 0 and in=1, or if the current state is state 1 and in=1
assign out = present_state & (in | ~reset);

// Register to store the next state, and output the present state
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	next_state <= (present_state & (~in | ~reset)) | (next_state & (~in | ~reset));
	end


================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	// State transition logic
	present_state <= next_state;
	// Output logic
	case(present_state)
	0: next_state <= in ? 0 : 1;
	1: next_state <= in ? 1 : 0;
	endcase
	end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in==1) next_state = 1;
	1: if(in==1) next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: if(in==1) present_state = 1;
	1: if(in==1) present_state = 0;
	endcase
	end

================================================================
