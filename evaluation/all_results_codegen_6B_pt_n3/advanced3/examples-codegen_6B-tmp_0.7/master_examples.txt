example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
  if( reset && !(next_state = IDLE) ) next_state = IDLE;
  if( next_state != IDLE )
  begin
    if( reset ) next_state = IDLE;
    else
    begin
      if( x ) next_state = S1;
      else next_state = IDLE;
      end
    end
  end
  if( clk )
  begin
    if( next_state != IDLE )
    begin
      next_state = present_state;
    end
  end
end

// end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always clk = 1;
  always rst = 1;
  always x = x;
  always z = 1;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
  always next_state = IDLE;
  always present_state = IDLE;
begin
  if (x == 1) next
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
	repeat 2000
		next_state = IDLE;
		present_state = IDLE;
		if (x == high)
			next_state = S101;
		if (x == low)
			next_state = S1;
		present_state = next_state;
		z = present_state;
		wait_ns(10);
	end
end

================================================================
