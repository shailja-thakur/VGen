example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset == 1) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

int test_locRegisterUpdate() {
    int result = 0; 
    counter c;
    int cw[3:0] = {1, 1, 2};
    c.q = cw;
    c.clk = 0;
    c.reset = 0;
    c.val = 1;
    // this rule runs until the counter reloads 
    // This should assert with a '-' in the
    // location register, preventing further
    // execution of the rule.
    DINTEL_MODULE.CORE_INSTANCE.VERIFY_RULE(
================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always(clk)
  q <= (reset) ? 1'b1 :
    ((q < 12) ? (q < 0x13) ? (q + 1) : (q + 1) || 1'b1 : 1'b0 );
end
end
      
// here is a logic circuit which copies the output latch (q) to 3 other 
// Qdec outputs which will be provided by the three latches D4 wtih HIGH 
// level, D5 with LOW level and D6 on CHANGE_LEVEL level
module latches ( 
    input res[7],
    input resQdec
    output resQ,
    output resQ1,
    output resQ2,
    output resQ3
);
  if ( res[1] == 1 and res[2] == 1 )
  begin
    resQ <= resQdec;
    
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) 
	q <= { 
 	    case reset != 1: 
 	        q <= 0;
 	    case q >= 12: 
 	        q <= 1;
 	    case q <> 1:
 	        q <= q + 1;
 	}

================================================================
