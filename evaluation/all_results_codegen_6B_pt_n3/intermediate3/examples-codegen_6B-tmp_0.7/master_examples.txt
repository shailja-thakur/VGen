example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always( clk or reset )
begin
    if (reset)
    begin
        r_reg = 0b1111;
        r_next = (r_reg[1] ^ r_reg[2]) | ((r_reg[3] ^ r_reg[0]) << 4);
        feedback_value = r_next[4];
    end
    else
    begin
        if (r_next[2] or r_next[0])
        begin
            r_reg = r_next;
        end
    end
    q <= r_reg;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  if (reset) begin
    r_reg <= 1;
    r_next <= r_reg;
    feedback_value <= 4'b1010;
  end
  else
    r_next <= (r_reg & 4) | ((r_reg >> 1) & 8) | ((r_reg << 1) & 0xf);
end


// Program to generate the lookup table for the ID
// of the LFSR with taps at bit positions 5 and 3
//
// Sample run:
//    $ ./lfsr_generator.v
//    $ ./lfsr_generator.v > lfsr_table.csv
//    $ ./lfsr_generator.v < lfsr_table.csv
//    [
//      "lfsr_table_r1.dat",
//      "lfsr
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_reg = (clk == 1) ? 0 : r_next;
assign r_next = r_reg xor bit(2) | bit(4);
assign feedback_value = (r_next[4:0] & 0x01) << 3;

//The LFSR outputs the feedback_value.
assign q = (feedback_value | r_reg[4:0]).or(0x01);


================================================================
