example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (!feedback_value || feedback_value);
//assign r_next = (!feedback_value || feedback_value);
assign q = r_reg + r_reg;
assign q = feedback_value;
assign feedback_value = feedback_value && r_reg == 5'b11111;


initial begin
r_reg = 5'b00000;
end

always @ (posedge clk or posedge reset)
begin
	if (reset) begin
		r_reg <= 5'b00000;
	end else begin
		r_reg <= r_next;
	end
end

assign q = (r_reg < 50); // r_reg < 50


================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg - 1;
//assign r_next = {r_reg[0], feedback_value}; 
assign r_next = {r_reg[0], r_reg[1]};
assign q = r_reg;
//assign r_next = {r_reg[0], feedback_value};
assign r_next = {r_reg[0], feedback_value}; 


always@(posedge clk, posedge reset)
begin
  if(reset == 1'b1) // send the current rst
	  r_reg <= 5'b00000;
	 else if(r_next != 5'b00000 && feedback_value == 1'b0) 
	  r_reg <= r_next;
end


================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {r_reg[3], feedback_value};
// together the output mux to output
always@(posedge clk)
begin
 if(reset)
 r_reg <= 5'b11111;
 else 
 r_reg <= r_next;
 end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always@(posedge clk, posedge reset)
begin
	if(reset) r_reg <= 5'b0;
	else r_reg <= {r_reg[3:0], feedback_value}; 
end// end of the module

assign r_next = r_reg;
assign q = r_reg;


================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {r_reg[3], feedback_value};
r #(5) r_reg_enc(.c(clk), .d(r_reg[4]), .rst(reset), .q(r_next[4]));

//assign r_next = {r_reg[2], feedback_value, ^r_reg[0]};
assign r_next = {r_reg[3], feedback_value, ^r_reg[2]};

always@(posedge clk or posedge reset)
begin
	if(reset == 1'b1)
	begin 
		r_reg  <= 5'b00000;
	end
	else
	begin
		r_reg  <= r_next;
	end
end


================================================================
