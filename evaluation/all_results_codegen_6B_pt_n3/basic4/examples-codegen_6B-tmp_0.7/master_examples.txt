example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always_comb sel_0 = { out <= a; };
always_comb sel_1 = { out <= b; };
`
	c := mux.NewMuxCtl()
	c.Set(0, 0, 0)
	c.Set(0, 0, 1)
	c.Set(0, 1, 0)
	c.Set(0, 1, 1)
	c.Set(1, 0, 0)
	c.Set(1, 0, 1)
	c.Set(1, 1, 0)
	c.Set(1, 1, 1)
	mux.Run(c)
	fmt.Println("Test 1")
	c.Set(0, 0, 0)
	c.Set(0, 0, 1)
	c.Set(0, 1, 0)
	c
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk or a)
out <= sel ? a : b;

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk or negedge rst) begin
    out <= sel ? a : b;
end

// Test the multiplexer.
#4:1 multiplex( {1'b0, 1'b1}, {1'b1, 1'b0} );
#4:2 multiplex( {0'b1, 0'b0}, {0'b0, 0'b1} );
#4:3 multiplex( {1'b0, 1'b1}, {1'b0, 1'b1} );
#4:4 multiplex( {0'b1, 0'b0}, {0'b1, 0'b0} );
#4:5 multiplex( {'1'b1, '1'b0}, {'1'b1, '1'b0} );
#
================================================================
