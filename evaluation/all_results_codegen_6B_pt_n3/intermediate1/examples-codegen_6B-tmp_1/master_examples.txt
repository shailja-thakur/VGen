example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

impure function under_5_to_carry1()
  input cout, a, b,
      carry1 <= 0, carry2 <= 0,
      carry_out := carry1 & carry2;

bool is_half_adder(
input carry1, carry2, carry_out );

var( a, b, cout, sum, carry1, carry2, half, carry_out );

function setup()
{
  a <= 0;
  b <= 0;
  cout <= 0;
  sum <= 0;
  carry1 <= 0;
  carry2 <= 0;
  half <= 0;
  carry_out <= 0;
}

int loop_body()
{
  half <= carry1;
  authority.y <= carry_out & overload.y;
  overload.y <= carry1 & carry2;
  
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
input q;
@foreachint loop;
@foreachres sum = q + a + b + q;
@foreachc cout = sum + q;
@end

module half_adder_zcf( input a, b );
input q;
output res;
@foreachint loop;
@foreachres half_adder("q", a, b, cout, res);
@end

// This module checks whether overflow occurs in CZC3. Eventually the intermediate (doubled)
// sum should be folded into a single output. The output should be considered whether the half-adder
// should cover the final range rather than the first.
module half_adder_cf( 
input a, b,
output cout, sum, carry_out );
input q;
reset carry_out;
@foreachint loop;
carry_out = half_adder("q
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
input [31:0] a;
input [31:0] b;
output [31:0] cout;
output sum = 0;
output carry_out = 0;
always @(posedge clk)
    if ( bin2bust_fail == 1 ) begin
        bin2bust_fail = 0;
        sum = a + b;
        sum_flip = sum;
        carry_out = sum[30];
        bin2bust_fail = 1;
    end
end

#endif

================================================================
