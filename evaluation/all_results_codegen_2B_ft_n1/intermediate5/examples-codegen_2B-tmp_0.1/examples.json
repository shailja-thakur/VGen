// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse\nout <= {out[6:0],out[7]};\nend\n"
    }
  ],
  "created": 1663606670,
  "id": "cmpl-u0Di1dtTFuAmocPFeQ005Cdb7EcX2",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 56,
    "prompt_tokens": 94,
    "total_tokens": 150
  }
}