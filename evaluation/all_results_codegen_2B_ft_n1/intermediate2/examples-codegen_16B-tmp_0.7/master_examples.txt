example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset) 
begin
if (reset) 
q <= 4'b1; 
else if (q == 4'd12) 
q <= 4'b1; 
else 
q <= q + 4'b1; 
end 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if(reset)
q <= 4'b1;
else
begin
case(q)
4'b1: q <= 4'b10;
4'b10: q <= 4'b11;
4'b11: q <= 4'b100;
4'b100: q <= 4'b101;
4'b101: q <= 4'b1000;
4'b1000: q <= 4'b1001;
4'b1001: q <= 4'b10000;
4'b10000: q <= 4'b10001;
4'b10001: q <= 4'b100000;
4'b100000: q <= 4'b100001;
4'b100001: q <= 4'b100000;
default: q <= q + 4'b1;


================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset) 
begin 
if (reset) q <= 4'b1; 
else if (q == 12) q <= 4'b1; 
else q <= q + 4'b1; 
end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@( posedge clk, posedge reset ) 
begin 
if( reset ) 
q <= 1'b1; 
else if( q == 4'b1111 ) 
q <= 1'b1; 
else 
q <= q + 1'b1; 
end 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset) 
q <= 4'b0001;
else if (q == 12) q <= 4'b0001;
else q <= q + 4'b0001;
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin 
if(reset) 
q <= 4'b0000; 
else if(q == 4'b1011) 
q <= 4'b0000; 
else 
q <= q + 1'b1; 
end 
// always block that checks the value of the q register 
// and assigns the value to the final q output 
// when the value is 12
always @(q) begin
case(q) 
4'b0000: begin
end 
4'b0001: begin
end 
4'b0010: begin
end 
4'b0011: begin
end 
4'b0100: begin
end 
4'b0101: begin
end 
4'b0110: begin
end 
4'b0111: begin
end 
4'b1000: begin
================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'd5) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 1'b1;
	end
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset)
	q <= 1'd1;
else if (q == 4'd11)
	q <= 1'd1;
else
	q <= q + 1'd1;
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset)
q <= 4'd1;
else if(q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 case (reset)
 1'b0: begin
 end
 1'b1: begin
 if (q == 4'b1111)
 q = 4'b0000;
 else
 q = q + 4'b0001;
 end
 endcase
 end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin
if (reset) q <= 1;
else if (q == 12) q <= 1;
else q <= q + 1;
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 0;
//else if (q == 12)
//q <= 0;
else
q <= q + 1;
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset)
q <= 4'd1;
else if(q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
 if(reset)
 q <= 4'b0000;
 else if (q == 12)
 q <= 4'b0000;
 else
 q <= q + 1;
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if(reset)
q <= 4'b0000;
else if(q == 4'b1111)
q <= 4'b0000;
else
q <= q + 1;
end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if (reset) q <= 4'b0000;
else
if(q == 4'd12) q <= 4'b0000;
else q <= q +4'b0001;
end

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if (reset) q <= 4'b0000;
else if (q == 12) q <= 4'b0000;
else q <= q + 1;
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q == 1
else if (q == 12)
q = 1
else 
q = q + 1
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) begin 
if(reset)
q <= 1;
else if(q == 12)
q <= 1;
else
q <= q + 1;
end

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset) 
begin
	if (reset)
	begin
	q = 4'b0110;
	end
	else 
	begin
	case (q) 
	4'd12: 
	begin
	q = 4'b1000;
	end
	4'd9: 
	begin
	q = 4'b1001;
	end
	default: 
	begin
	q = q + 4'b0001;
	end
	endcase
	end
end

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
if (reset)
q <= 4'd1;
else q <= (q == 4'd12) ? 4'd1 : q + 4'd1; 
end 

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
	if(reset) 
	begin 
	q <= 4'b0000; 
	end 
	else if(q == 12) 
	begin 
	q <= 4'b0000; 
	end 
	else 
	begin 
	q <= q + 4'b0001; 
	end 
end 

================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if(reset) 
q <= 4'd1; 
else 
case(q) 
4'd12: q <= 4'd1; 
4'd7 downto 4'd0: q <= q + 4'd1; 
endcase 
end

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin
 if (reset) 
 q <= 1'b0;
 else if (q == 4'd12)
 q <= 1'b0;
 else
 q <= q + 1'b1;
end

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset) begin
	q <= 1'd0;
	end
	else begin
	if (q == 12'd12) 
	q <= 1'd1;
	else
	q <= q + 1'd1;
	end
end

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
 if (reset)
 q <= 4'd1;
 else
 case (q)
 4'd9: q <= 4'd1;
 // default case: decrement q by 1
 4'd10: q <= q - 4'd1;
 endcase
end

================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset)
begin 
 if(reset)
 begin
 q <= 1'b1; 
 end 
 else if(q == 12)
 q <= 1'b1;
 else
 q <= q + 1'b1; 
 end

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
	if(reset)
	begin
	q <= 4'b1;
	end
	else if(q == 4'd9) 
	begin
	//$display("done");
	q <= 4'b1;
	end
	else
	begin
	//$display("hello");
	q <= q + 4'd1;
	end
	end

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset) 
begin 
if (reset) 
q <= 1;
else 
case (q) 
4'd12: q <= 4'd1; 
else 
q <= q + 4'd1; 
default: q <= q;
endcase
end

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
// if reset, set q to 1 
begin
if(reset)
	q <= 4'b1;
else
// if q is 12, set q to 1 
	if(q == 4'b1110)
	begin
	// if q is 12, set q to 1 
	q <= 4'b1; 
	end 
	else 
	// otherwise increment q 
	begin
	q <= q + 1; 
	end 
end 

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if (reset) begin
	q <= 1'd0;
	end
	else if (q == 12) begin 
	q <= 1'd1;
	end
	else begin
	q <= q + 1'd1;
	end
end

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
 begin
 if (reset)
 q <= 4'b0001;
 else if (q == 12)
 q <= 4'b0001;
 else
 q <= q + 4'b0001;
 end

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset) 
begin
if (reset) q <= 4'd1;
else if (q == 12) q <= 4'd1; 
else q <= q + 4'd1;
end

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin 
case (reset) 
1'b0: q <= 4'd1; 
1'b1: q <= 4'd12; 
endcase 
end 

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
if(reset)
q <= 4'b0000;
else
begin
if(q == 4'd12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
 if (reset)
 q <= 4'b0001;
 else if (q == 4'b1110)
 q <= 4'b0001;
 else
 q = q + 1;
end

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
reset? q <= 4'd1 :
q <= q[3:0] == 4'd12 ? 4'd1 :
q + 4'd1;
end

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
if(reset)
q <= 4'd1;
else if(q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
	if (reset) q <= 4'b1;
	else if(q == 4'b1111) q <= 4'b1;
	else q <= q + 4'b1;
	end

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset)
q <= 4'b0000;
else begin
if(q == 12)
q <= 4'b0000;
else
q <= q + 1;
end
end

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin 
if ( reset ) 
q <= 4'd1; 
else if ( q == 4'd12 ) 
q <= 4'd1; 
else 
q <= q + 4'd1; 
end 

================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 4'd1;
else
case (q)
4'd12: q <= 4'd1;
default: q <= q + 4'd1;
endcase
end

================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset) 
begin 
if (reset) q <= 4'b0001; 
else if (q == 4'b1111) q <= 4'b0001; 
else q <= q + 4'b0001; 
end 

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
if(reset)
q <= 1;
else
case (q)
4'b1xxx: q <= 4'b0000;
default: q <= q + 4'b0001;
endcase
end

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
	if(reset)
	q = 4'b0001;
	else
	case(q)
	4'b0001:
	q = 4'b0001;
	4'b0010:
	q = 4'b0001;
	4'b0011:
	q = 4'b0001;
	4'b0100:
	q = 4'b0001;
	4'b0101:
	q = 4'b0001;
	4'b0110:
	q = 4'b0001;
	4'b0111:
	q = 4'b0001;
	4'b1000:
	q = 4'b0001;
	4'b1001:
	q = 4'b0001;
	4'b1010:
	q = 4'b0001
================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk or posedge reset) begin
 if (reset) q <= 4'b0000;
 else if (q == 4'd12) q <= 4'b0000;
 else q <= q + 4'b0001; 
end 

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
if(reset)
q <= 4'b0000;
else
begin
if(q == 4'd12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
if(reset) q<=4'b1;
else q<=q[3:0]==4'b1001?4'b1:q[3:0]+1'b1;
end
// always block initializes all variables

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
	if (reset) q <= 4'd1;
	else if (q == 4'd12) q <= 4'd1;
	else q <= q + 4'd1;
	end

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	if (q == 12) 
	begin 
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
end

================================================================
