example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    //Assert that IDLE state does not change 
    if (present_state[0] == IDLE) next_state = IDLE;
    // Assignment of transition values
    // Assignment of output signal
    else if (present_state[0] == S1)          next_state = S10;
    else if (present_state[0] == S10)         next_state = S101;
    else if (present_state[0] == S101)        next_state = IDLE;
    else termin;
                                             
    present_state = next_state;
end
assign z = present_state[1];


initial begin
    present_state = IDLE;
    next_state = IDLE;
end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE




always @(posedge reset)
      begin
      case(present_state)
      case(IDLE)
         next_state <= IDLE;
         end
      case(S1)
         next_state <= IDLE;
         end
      case(S10)
         present_state <= S1;
         end
      case(S101)
         present_state <= S10;
         next_state <= IDLE;
         end
      end
   
bit present_state, next_state;
reg [1:0] pstate, nstate;  
reg [3:2] rst;
reg [3:0] x;
always @(posedge clk)
      begin 
      if(reset == 1) 
        begin
        present_state <= IDLE;
        next_state <= IDLE;
        end

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin Adv_fsm

----------------------------------------------------------------
Initialization
----------------------------------------------------------------
  begin Adv_gfl2
  present_state = IDLE;
  next_state = IDLE;

  end Adv_gfl2
----------------------------------------------------------------
Signal Assignment
----------------------------------------------------------------
  end Adv_fsm

"""

        num_samples = 3 

        mod_attr_iter.write('assign x = "1 1 0";', wait=True)
        mod_attr_iter.write('.tech {y}', wait=True)
        mod_attr_iter.write('y = 1;', wait=True)
        mod_attr_iter.write('assign clk = x;', wait=True)
        mod_attr_iter.write('assign rst = 1;', wait=True)

        self.assert_(count_if(tree,len_is(1
================================================================
