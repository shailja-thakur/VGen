example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
next_state <= IDLE;
present_state <= IDLE;

always@(posedge reset)
begin
if (reset) begin
next_state <= IDLE;
present_state <= IDLE;
end
end

always@(posedge clk)
begin
if (clk'event and clk'rising_edge) begin
if (present_state == IDLE) begin
next_state <= S1;
present_state <= S1;
end
end

always@(posedge x)
begin
if (x'event and x'rising_edge) begin
if (present_state == IDLE) begin
next_state <= S10;
present_state <= S10;
end
else begin
next_state <= IDLE;
present_state <= IDLE;
end
end

always@(posedge x)
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    always @(posedge clk) begin
        if(reset) begin
            present_state <= IDLE;
        end else begin
            present_state <= next_state;
        end
    end
    
    always @(posedge clk) begin
        if(reset) begin
            next_state <= IDLE;
        end else begin
            next_state <= present_state;
        end
    end
    
    always @(posedge clk) begin
        if(present_state == IDLE && x == 1) begin
            next_state <= S1;
        end else next_state <= IDLE;
    end
    
    always @(posedge clk) begin
        if(present_state == S1 && x == 0) begin
            next_state <= IDLE;
        end else next_state <= S1;
    
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
	if(reset) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
	else begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
end

always @(negedge clk) begin
	next_state <= present_state;
end

always @(posedge clk) begin
	if(present_state == IDLE && x == 1) begin
		present_state <= S1;
		next_state <= S1;
	end
	else begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
end

always @(posedge clk) begin
	if(present_state == S1 && x == 0) begin
		present_state <= S10;
================================================================
