// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n// State 0\nalways @(posedge clk)\nbegin\n\tif (reset)\n\t\tpresent_state <= 0;\n\telse if (present_state == 0)\n\t\tif (in)\n\t\t\tnext_state <= 0;\n\t\telse\n\t\t\tnext_state <= 1;\n\telse\n\t\tif (in)\n\t\t\tnext_state <= 1;\n\t\telse\n\t\t\tnext_state <= 0;\n\tif (present_state == 0)\n\t\tout <= 1;\n\telse\n\t\tout <= 0;\n\tpresent_state <= next_state;\nend\n\n// State 1\nalways @(posedge clk)\nbegin\n\tif (reset)\n\t\tpresent_state <= 0;\n\telse if (present_state == 0)\n\t\tif (in)\n\t\t\tnext_state <= 0;\n\t\telse\n\t\t\tnext_state <= 1;\n\telse\n"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    case(present_state)\n        1'b1 <=> present_state <= 1'b0;\n        case(present_state)\n            1'b0 <=> if (reset) begin\n                present_state <= 1'b0;\n                next_state <= 1'b0;\n            end else if (in) begin\n                present_state <= 1'b0;\n                next_state <= 1'b1;\n            end else begin\n                present_state <= 1'b0;\n                next_state <= 1'b0;\n            end\n        case(next_state)\n            1'b1 <=> next_state <= 1'b0;\n            1'b0 <=> if (in) begin\n                next_state <= 1'b1;\n            end else begin\n                next_state <= 1'"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  present_state <= next_state;\n  next_state <= present_state;\n  if (reset) begin\n    next_state <= 0;\n  end else if (present_state == 0) begin\n    if (in) out <= 1;\n    next_state <= 1;\n  end else if (present_state == 1) begin\n    if (in) out <= 1;\n    next_state <= 0;\n  end\nend\n"
    }
  ],
  "created": 1663533915,
  "id": "cmpl-bbTrtR5o4tNVF3XJOJWkEWGwj0Dxc",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 515,
    "prompt_tokens": 148,
    "total_tokens": 663
  }
}