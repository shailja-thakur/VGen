example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	if (amount == 2'b00)
	begin
	q <= {q[62:0], 1'b0};
	end
	else if (amount == 2'b01)
	begin
	q <= {q[63], q[63:1]};
	end
	else if (amount == 2'b10)
	begin
	q <= {q[63], q[63:8]};
	end
	else
	begin
	q <= {q[63], q[63:16]};
	end
end


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00) begin
	q <= {q[62:0], 1'b0};
	end
	else if (amount == 2'b01) begin
	q <= {q[63], q[63:1]};
	end
	else if (amount == 2'b10) begin
	q <= {q[63:0], 1'b0};
	end
	else if (amount == 2'b11) begin
	q <= {q[63], q[63:1]};
	end
	else begin
	q <= q;
	end
	end
end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00:
	q <= {q[62:0], 1'b0};
	2'b01:
	q <= {q[63], q[63:1]};
	2'b10:
	q <= {q[63:0], 1'b0};
	2'b11:
	q <= {q[63:1], q[63:0]};
	endcase
	end
	end
end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	begin
	if (amount == 2'b00)
	q <= {q[62:0], 1'b0};
	else if (amount == 2'b01)
	q <= {q[0], q[63:1]};
	else if (amount == 2'b10)
	q <= {q[63], q[63:1]};
	else if (amount == 2'b11)
	q <= {q[63], q[0], q[63:1]};
	end
end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load == 1) 
	begin
	q <= data;
	end
	if (ena == 1)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b11:
	begin
	q <= {q[62:0], 8'b0};
	end
	endcase
	end
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	// shift data left.
	if (amount == 2'b00)
	begin
	q <= {data[62:0], 1'b0};
	end
	else if (amount == 2'b01)
	begin
	q <= {8'h0, data[63:1]};
	end
	else if (amount == 2'b10)
	begin
	q <= {1'b0, data[63:1]};
	end
	else if (amount == 2'b11)
	begin
	q <= {data[63:1], 1'b0};
	end
	else
	begin
	q <= q;
	end
	
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 1'b1};
	end
	2'b10:
	begin
	q <= {1'b0, q[63:1]};
	end
	2'b11:
	begin
	q <= {1'b1, q[63:1]};
	end
	endcase
end
end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if(load)
q <= data;
else if(ena)
case(amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {q[63], q[63:1]};
2'b10: q <= {q[63:0], 1'b0};
2'b11: q <= {q[63], q[63:1]};
endcase
end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00:
	begin
	q[63:1] <= q[62:0];
	q[0] <= 0;
	end
	2'b01:
	begin
	q[63:8] <= q[63:1];
	q[7:0] <= q[7:1];
	end
	2'b10:
	begin
	q[63:8] <= q[63:1];
	q[7:0] <= q[7:1];
	end
	2'b11:
	begin
	q[63:8] <= q[63:1];
	q[7:0
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load) begin
	q <= data[63:0];
	end
	else if (ena) begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[61:0], q[63]};
	2'b10: q <= {q[60:0], q[63], q[63]};
	2'b11: q <= {q[59:0], q[63], q[63], q[63]};
	endcase
	end
	end

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load) 
	begin
	q <= data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[62:0], q[63]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63], q[63:1]};
	endcase
	end
end

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[62:0], 1'b0};
	endcase
	if(load)
	begin
	q <= data;
	end
	if(ena)
	begin
	q <= q >> amount;
	end
end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) 
begin
	if (load) 
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= q << 1;
	2'b11: q <= q >> 1;
	endcase
	end
	end

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b10:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b11:
	begin
	q <= {q[62:0], 8'b0};
	end
	endcase
	end
end

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	begin
	if (amount == 2'b00)
	q <= {q[62:0], 1'b0};
	else if (amount == 2'b01)
	q <= {q[63], q[63:1]};
	else if (amount == 2'b10)
	q <= {q[63], q[63:1]};
	else if (amount == 2'b11)
	q <= {q[63], q[63:8]};
	end
end

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {1'b0,q[62:1]};
	end
	2'b01:
	begin
	q <= {q[62:0],1'b0};
	end
	2'b10:
	begin
	q <= {q[63-8:0],8'b0};
	end
	2'b11:
	begin
	q <= {q[63-1:0],1'b0};
	end
	endcase
	end
	end

================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[62:0], 8'b0};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63], q[63:1]};
	endcase
	end
end

================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[63], q[63:1]};
	end
	endcase
	end
end

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63], q[63:1]};
	endcase
	end
end

================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[63], q[63:8]};
	end
	endcase
	end
	else
	q <= q;
end

================================================================
example-20: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b10:
	begin
	q <= {q[0], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[0], q[63:1]};
	end
	endcase
	end
end


================================================================
example-21: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	 q <= data;
	end
	else if (ena)
	begin
	 case (amount)
	 2'b00: q <= { q[62:0], 1'b0 };
	 2'b01: q <= { q[63], q[63:1] };
	 2'b10: q <= { q[63], q[62:0] };
	 2'b11: q <= { q[63:0], 1'b0 };
	 endcase
	 end
end

================================================================
example-22: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load) begin
	q <= data;
	end
	else if (ena) begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	default: q <= q;
	endcase
	end
	end


================================================================
example-23: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[62:0], 1'b0};
	endcase
end


================================================================
example-24: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	if (amount == 2'b00)
	begin
	q <= {q[62:0],1'b0};
	end
	else if (amount == 2'b01)
	begin
	q <= {1'b0,q[63:1]};
	end
	else if (amount == 2'b10)
	begin
	q <= {q[63-8:0],8'b0};
	end
	else if (amount == 2'b11)
	begin
	q <= {8'b0,q[63-1:0]};
	end
end


================================================================
example-25: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else 
	begin
	if (ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[61:0], 8'b0};
	end
	2'b10:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[63], q[63:8]};
	end
	endcase
	end
	end
end

================================================================
example-26: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	endcase
end
end

================================================================
example-27: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
end

================================================================
example-28: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin

if (load)
q <= data;
if (ena)
begin
case (amount)
2'b00:
q <= {q[62:0], 1'b0};
2'b01:
q <= {q[62:0], 8'b0};
2'b10:
q <= {q[63], q[63:1]};
2'b11:
q <= {q[63], q[63:1]};
endcase
end
end

================================================================
example-29: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[62:0], 8'b0};
	2'b10: q <= {q[63:1], 7'b0};
	2'b11: q <= {q[63:1], 15'b0};
	endcase
	end
end

================================================================
example-30: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
q <= data;
else if (ena)
begin
case(amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {q[62:0], 8'b0};
2'b10: q <= {q[63], q[63:1]};
2'b11: q <= {q[63], q[63:1]};
endcase
end
end

================================================================
example-31: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
// assign data[63:0] to q.
	q <= data;
	end
	if (ena)
	begin
	case (amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b11:
	begin
	q <= {q[62:0], 8'b0};
	end
	endcase
	end
end

================================================================
example-32: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 1'b1};
	end
	2'b10:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[63], q[63:1]};
	end
	endcase
	end
end

================================================================
example-33: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 1'b1};
	end
	2'b10:
	begin
	q <= {q[63:1], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[63:1], 1'b0};
	end
	endcase
	end
end

================================================================
example-34: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if(load)
	q <= data;
	else if (ena) begin
	case(amount)
	2'b00: begin
	q <= {q[62:0],1'b0};
	end
	2'b01: begin
	q <= {q[55:0],8'b0};
	end
	2'b10: begin
	q <= {q[63], q[63:1]};
	end
	2'b11: begin
	q <= {q[63], q[63:8]};
	end
	endcase
	end
end

================================================================
example-35: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
begin
	if (amount[0])
	begin
	q[63:1] <= q[62:0];
	q[0] <= 1'b0;
	end
	else
	begin
	q[63:8] <= q[63:8];
	q[7:0] <= q[7:0];
	end
	if (amount[1])
	begin
	q[63:1] <= q[62:0];
	q[0] <= 1'b0;
	end
	else
	begin
	q[63:8] <= q[63:8];
	q[7:0] <= q[7:0];
	end
end
end

================================================================
example-36: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
 if (load)
 q <= data;
 else
 begin
 if (ena)
 begin
 case(amount)
 2'b00: q <= q << 1;
 2'b01: q <= q << 8;
 2'b10: q <= q >> 1;
 2'b11: q <= q >> 8;
 endcase
 end
 end
 end

================================================================
example-37: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if (load) begin
	q <= data;
	end else if (ena) begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63:1], q[0]};
	2'b11: q <= {q[63:8], q[63:8], q[0]};
	endcase
	end
end

================================================================
example-38: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load == 1'b1)
	begin
	q <= data;
	end
	if (ena == 1'b1)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:
	begin
	q <= q >> 1;
	end
	2'b11:
	begin
	q <= q >> 8;
	end
	endcase
	end
end

================================================================
example-39: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= {q[62:0], 1'b0};
	end
	else if(amount == 2'b01)
	begin
	q <= {q[63], q[63:1]};
	end
	else if(amount == 2'b10)
	begin
	q <= {q[63], q[63], q[63:2]};
	end
	else if(amount == 2'b11)
	begin
	q <= {q[63], q[63:2]};
	end
	end
end

================================================================
example-40: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00:
	q <= {q[62:0], 1'b0};
	2'b01:
	q <= {q[62:0], 8'b0};
	2'b10:
	q <= {q[62:0], 1'b1};
	2'b11:
	q <= {q[62:0], 8'b1};
	endcase
	end
	end

================================================================
example-41: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
if (load)
	q <= data;
else if (ena) begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	endcase
	end
end

================================================================
example-42: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
if (load) begin
	q <= data;
end else if (ena) begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	endcase
	end
end

================================================================
example-43: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[61:0], q[63], q[63]};
	2'b10: q <= {q[60:0], q[63], q[63]};
	2'b11: q <= {q[58:0], q[63], q[63]};
	endcase
	end
end


================================================================
example-44: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 1'b1};
	end
	2'b10:
	begin
	q <= {1'b0, q[63:1]};
	end
	2'b11:
	begin
	q <= {1'b1, q[63:1]};
	end
	endcase
	end
end

================================================================
example-45: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	case(amount)
	2'b00:
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	q <= {q[62:0], 1'b0};
	end
	end
	2'b01:
	begin
	if(load)
	begin
	q <= data << 1;
	end
	else if(ena)
	begin
	q <= {q[62:0], 1'b0};
	end
	end
	2'b10:
	begin
	if(load)
	begin
	q <= data << 8;
	end
	else if(ena)
	begin
	q <= {q[62:0], 1'b0};
	end
	
================================================================
example-46: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if (load == 1)
	begin
	q <= data;
	end
	else if (ena == 1)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	endcase
	end
	end

================================================================
example-47: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
//	q <= data;
	q <= {data[63:1], 1'b0};
	end
	if (ena)
	begin
	case (amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
end

================================================================
example-48: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	q <= {q[62:0], 1'b0};
	else if(amount == 2'b01)
	q <= {q[62:0], 8'b0};
	else if(amount == 2'b10)
	q <= {q[63], q[63:1]};
	else if(amount == 2'b11)
	q <= {q[63:0], 1'b0};
	end
end

================================================================
example-49: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
if (load)
	q <= data;
else if (ena)
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63:0], 1'b0};
	endcase

================================================================
