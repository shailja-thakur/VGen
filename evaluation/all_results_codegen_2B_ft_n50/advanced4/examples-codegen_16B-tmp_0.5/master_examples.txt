example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[63:1];
	q[0] <= q[0];
	end
	else if(amount == 2'b11)
	begin
	q[63:1] <= q[63:1
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[55:0];
	end
	else if(amount == 2'b11)
	begin
	q[63:8] <= q[56:0];
	end
	end
end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else begin
	if(ena) begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end
end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	if (load)
	begin
	if (ena)
	begin
	if (amount == 2'b00)
	begin
	q <= data << 1;
	end
	else if (amount == 2'b01)
	begin
	q <= data << 8;
	end
	else if (amount == 2'b10)
	begin
	q <= data >> 1;
	end
	else if (amount == 2'b11)
	begin
	q <= data >> 8;
	end
	end
	end
	else
	begin
	q <= q;
	end
 end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	if(amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	if(amount == 2'b11)
	begin
	q[63:8] <= q[56:0];
	end
	end
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(ena)
	begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	if(load)
	begin
	q <= data;
	end
	end
	
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end
	end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
	begin
	if (load)
	q <= data;
	else if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	else if (amount == 2'b01)
	q <= q << 8;
	else if (amount == 2'b10)
	q <= q >> 1;
	else if (amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
if(ena)
begin
case(amount)
2'b00: q <= q << 1;
2'b01: q <= q << 8;
2'b10: q <= q >> 1;
2'b11: q <= q >> 8;
endcase
end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	q <= data;
	else if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	if (amount == 2'b01)
	q <= q << 8;
	if (amount == 2'b10)
	q <= q >> 1;
	if (amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[63] <= q[63];
	end
	else if(amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[63] <= q[63];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	q[63] <= q[63];
	end
	else if(amount == 2'b11)
	begin
	q[63
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (ena)
	begin
	if (load)
	q <= data;
	else
	begin
	if (amount == 2'b00)
	q <= q << 1;
	else if (amount == 2'b01)
	q <= q << 8;
	else if (amount == 2'b10)
	q <= q >> 1;
	else
	q <= q >> 8;
	end
	end
	end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b11)
	begin
	q[63:
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b10)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b11)
	begin
	q[0] <=
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin 
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	if(ena)
	begin
	if(amount[1:0] == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount[1:0] == 2'b01)
	begin
	q[63:8] <= q[55:0];
	end
	else if(amount[1:0] == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	else
	begin
	q[63:8] <= q[55:0];
	end
	end
 end

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	else if (amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	else
	begin
	q[63:8] <= q[56:0];
	end
	end
end

================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if (load)
	begin
	q[63:1] <= data[63:1];
	q[0] <= data[0];
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if (amount == 2'b11
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else if(amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk) begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	 case(amount)
	 2'b00: 
	 begin
	 q[0] <= q[0];
	 q[63:1] <= q[63:1];
	 end
	 2'b01:
	 begin
	 q[0] <= 0;
	 q[63:8] <= q[63:8];
	 end
	 2'b10:
	 begin
	 q[63:1] <= q[63:1];
	 q[0] <= q[0];
	 end
	 2'b11:
	 begin
	 q[63:8] <= q[63:8];
	 q[0] <= 0;
	 end
	 endcase
================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	// shift left or right
	if(ena)
	begin
	// shift left
	if(amount[0])
	begin
	q[0] <= data[0];
	q[63:1] <= data[63:1];
	end
	// shift right
	else if(amount[1])
	begin
	q[0] <= data[63];
	q[63:1] <= data[62:0];
	end
	end
	end
end


================================================================
example-20: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if (amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if (amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
end

================================================================
example-21: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if(load)
	begin
	q[63:0] <= data;
	end
	else if(ena)
	begin
	if(amount==2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount==2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	else if(amount==2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	else if(amount==2'b11)
	begin
	q[63:8] <= q[56:0];
	end
	end
end

================================================================
example-22: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(load)
	q <= data; // if load is high, shift register q is loaded with data.
	if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1; // shift left by 1 bit.
	if(amount == 2'b01)
	q <= q << 8; // shift left by 8 bits.
	if(amount == 2'b10)
	q <= q >> 1; // shift right by 1 bit.
	if(amount == 2'b11)
	q <= q >> 8; // shift right by 8 bits.
	end
	end

================================================================
example-23: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else if(amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-24: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
begin
if(load) q <= data;
else begin
if(ena) begin
case(amount)
2'b00: q <= q << 1;
2'b01: q <= q << 8;
2'b10: q <= q >> 1;
2'b11: q <= q >> 8;
endcase
end
end
end

================================================================
example-25: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00 || amount == 2'b11)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else
	begin
	if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else
	begin
	if(amount == 2'b10)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] >> 1;
	end

================================================================
example-26: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load == 1'b1)
	begin
	q <= data;
	end
	else if (ena == 1'b1)
	begin
	if (amount == 2'b00)
	begin
	q <= q << 1'b1;
	end
	else if (amount == 2'b01)
	begin
	q <= q << 8'b1;
	end
	else if (amount == 2'b10)
	begin
	q <= q >> 1'b1;
	end
	else if (amount == 2'b11)
	begin
	q <= q >> 8'b1;
	end
	end
end

================================================================
example-27: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load == 1'b1)
	q <= data;
	if(ena == 1'b1)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end



================================================================
example-28: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	if (amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	end
	if (amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	if (amount == 2'b11)
	begin
	q[63:8] <= q[56:0];
	end
	end
 end 

================================================================
example-29: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63] <= q[62];
	q[62] <= q[61];
	q[61] <= q[60];
	q[60] <= q[59];
	q[59] <= q[58];
	q[58] <= q[57];
	q[57] <= q[56];
	q[56] <= q[55];
	q[55] <= q[54];
	q[54] <= q[53];
	q[53] <= q[52];
	q[52] <= q[
================================================================
example-30: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@ (posedge clk)
begin
	if (load)
	begin
	//	q <= data;
	end
	else
	begin
	if (ena)
	begin
	q[63:0] <= q[63:0] << amount;
	end
	end
end

================================================================
example-31: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
if(load)
	q <= data;
else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[31];
	q[31:1] <= q[30:0];
	q[63:32] <= q[31:0];
	end
	else if(amount == 2'b10)
	begin
	q[63:32] <= q[31:0];
	q[31:1] <= q[0];
	q[0] <= q[32];
	end
	else if(amount == 2'b
================================================================
example-32: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if (amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if (amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else if (amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end
	
================================================================
example-33: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
	begin
	if(load)
	q <= data;
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else
	q <= q >> 8;
	end
	end
	end

================================================================
example-34: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	else if (ena)
	begin
	if (amount[1:0] == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[1];
	end
	else if (amount[1:0] == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[8];
	end
	else if (amount[1:0] == 2'b10)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[1];
	end
	else if (amount
================================================================
example-35: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end

================================================================
example-36: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(load)
	begin
	q <= data;
	end
	else begin
	if(ena)
	begin
	if (amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if (amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if (amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else if (amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end
	end

================================================================
example-37: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	q[63:0] <= q[63:0] << amount;
	q[63:0] <= q[63:0] >> amount;
	end
	end

================================================================
example-38: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	q <= data;
	else if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else if(amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-39: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else if(amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-40: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load == 1'b1)
	begin
	//	q <= data;
	end
	else if (ena == 1'b1)
	begin
	//	q <= q[63:amount];	//I'm guessing that "amount" is how much the shift should be.
	end
end

================================================================
example-41: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-42: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	//	q <= data;
	end
	else if(ena)
	begin
	//	q <= {1'b0, q[62:0]};
	end
end

always @ (posedge clk)
begin
	if(ena)
	begin
	//	q <= q[63-amount:0];
	end
end


================================================================
example-43: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if (amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if (amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-44: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load == 1) begin
	q <= data;
	end
	else begin
	if(ena == 1) begin
	if(amount == 2'b00) begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01) begin
	q[0] <= q[31];
	q[31:1] <= q[30:0];
	q[63:32] <= q[31:0];
	end
	else if(amount == 2'b10) begin
	q[63:32] <= q[31:0];
	q[31:1] <= q[0];
	q[0] <= q[31];
	end
	else if(amount
================================================================
example-45: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	//shift left by 1 bit
	if(amount == 2'b00 && ena == 1'b1)
	begin
	q[0] <= data[0];
	q[63:1] <= data[63:1];
	end
	//shift left by 8 bit
	else if(amount == 2'b01 && ena == 1'b1)
	begin
	q[0] <= data[0];
	q[63:8] <= data[63:8];
	end
	//shift right by 1 bit
	else if(amount == 2'b10 && ena == 1'b1)
	begin
	q[63:1] <= data[63:1];
	q[0] <= data[0];
	end
================================================================
example-46: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	q <= data;
	else
	begin
	if(ena)
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end

================================================================
example-47: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[63:1] >> 1;
	q[0] <= q[0];
	end
	else 
	begin
	q[0] <= q[0];
================================================================
example-48: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount==2'b00)
	begin
	q <= q << 1;
	end
	else if(amount==2'b01)
	begin
	q <= q << 8;
	end
	else if(amount==2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-49: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load==1'b1)
	begin
	//	q <= data;
	end
	else
	begin
	if(ena==1'b1)
	begin
	case(amount)
	2'b00:
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	2'b01:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	2'b10:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] >> 1;
	end
	2'b11:
	begin
	q[0
================================================================
