example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
if (load)
q <= data;
else if (ena)
begin
case(amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {1'b0, q[63:1]};
2'b10: q <= {q[63], q[63:1]};
2'b11: q <= {1'b0, q[62:0], 1'b0};
default: q <= {q[63:0], 1'b0};
endcase
end
end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
if(load)
q <= data;
else if(ena)
begin
case(amount)
2'b00:
q <= {q[62:0], 1'b0};
2'b01:
q <= {q[62:0], 8'b0};
2'b10:
q <= {1'b0, q[63:1]};
2'b11:
q <= {8'b0, q[63:8]};
endcase
end
 end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) 
begin
	if (load)
	begin
	//if (ena)
	q <= data;
	end
	else
	if (ena)
	begin
	case (amount)
	2'b00:
	q <= {q[62:0], 1'b0};
	2'b01:
	q <= {q[61:0], 8'b0};
	2'b10:
	q <= {q[60:0], 16'b0};
	2'b11:
	q <= {q[59:0], 24'b0};
	endcase
	end
end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	q <= {q[62:0], 1'b0};
	end
end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
if (load | ena) q <= data;
else
case (amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= q << 1;
2'b10: q <= {q[62:0], 1'b0};
2'b11: q <= q >> 1;
endcase

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load) 
	begin
	q <= data;
	end
	else if(ena) 
	begin
	case(amount)
	2'b00:	q <= q << 1;
	2'b01:	q <= q << 8;
	2'b10:	q <= q >> 1;
	2'b11:	q <= q >> 8;
	endcase
	end
end

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk) 
begin
case (amount)
2'b00: begin
if (load) 
q <= data[63:0]; 
else if (ena) 
q <= {q[62:0], 1'b0}; 
end
2'b01: begin
if (load) 
q <= data[63:0]; 
else if (ena) 
q <= {1'b0, q[62:1]}; 
end
2'b10: begin
if (load) 
q <= data[63:0]; 
else if (ena) 
q <= {q[0], q[62:1]}; 
end
2'b11: begin
if (load) 
q <= data[63:0]; 
else if (ena) 
q <= {q[62:0
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	
	if(ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0],1'b0};
	end
	2'b01:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b10:
	begin
	q <= {q[0], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[1:0], q[63]};
	end
	endcase
	end
	
end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else
	if (ena)
	begin
	case (amount)
	2'b00: begin q <= q << 1; end
	2'b01: begin q <= q << 8; end
	2'b10: begin q <= q >> 1; end
	2'b11: begin q <= q >> 8; end
	endcase
	end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk) begin
if (load)
	q <= data;
if (ena) begin
	case(amount)
	2'b00: q <= q << 1; 
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
end

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) 
begin
	if (load) q <= data;
	else if (ena) begin
	case (amount)
	2'b00:	q <= {q[62:0], 1'b0};
	2'b01:	q <= {q[62:0], 1'b0, q[63]};
	2'b10:	q <= {q[63:1], q[0]};
	2'b11:	q <= {q[63:1], q[0], q[63]};
	endcase
	end
end


================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
q <= data;
else if (ena)
begin
case (amount)
2'b00: q <= q << 1;
2'b01: q <= q << 8;
2'b10: q <= q >> 1;
2'b11: q <= q >> 8;
endcase
end
end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load == 1'b1)
	begin
	q <= data;
	end
	else 
	begin
	if (ena == 1'b1)
	begin
	if (amount == 2'b00)
	begin
	q <= {q[62:0], 1'b0};
	end
	else if (amount == 2'b01)
	begin
	q <= {q[63], q[63:1]};
	end
	else if (amount == 2'b10)
	begin
	q <= {q[63], q[63:1]};
	end
	else if (amount == 2'b11)
	begin
	q <= {q[63], q[63:1]};
	end
	end
	end
end



================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	reg [63:0] loaddata;
	reg [3:0] loadamount;
	always @(posedge clk) begin
	if(load)
	begin
	loaddata <= data;
	loadamount <= amount;
	end
	else begin
	if(ena)
	begin
	case(loadamount)
	4'b0000: q <= {q[62:0], loaddata[63]};
	4'b0001: q <= {q[63], loaddata[62:0]};
	4'b0010: q <= {loaddata[61:0], q[63:1]};
	4'b0011: q <= {q[63:0], loaddata[61]};
	4'b0100: q <= {q[63], loaddata[60:0]};
	4'b0101: q
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk) begin
 if (load) begin
 q <= data;
 end 
 if (ena) begin
 case(amount)
 2'b00: begin
 q <= {q[62:0], 1'b0};
 end
 2'b01: begin
 q <= {1'b0, q[63:1]};
 end
 2'b10: begin
 q <= {q[63:1], 1'b0};
 end
 2'b11: begin
 q <= {q[63:1], q[62:0]};
 end
 endcase
 end
 end
 endmodule

// Design a 16-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, 
//selected by amount.
module advance_shifter(input clk,

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg load_n;
reg ena_n;
always @(posedge clk)
begin: enable_counter
// q <= data;
ena_n <= ena;
load_n <= load;
if (load)
q <= data;
else if (ena)
if (amount == 0)
q <= {q[62:0], 1'b0};
else if (amount == 2'b00)
q <= {q[62:48], q[47:0], 12'b0};
else if (amount == 2'b01)
q <= {q[48:0], q[47:1], 24'b0};
else if (amount == 2'b10)
q <= {q[0], q[63:1], 56'b0};
else if (amount == 2'b11)
q <= {q[63:
================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
begin
	q <= data;
	end
else if (ena) 
	begin
	case (amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[62:0], 8'b0};
	2'b10: q <= {q[63], q[63:1]};
	2'b11: q <= {q[63], q[63:1]};
	default: q <= {q[61:0], 1'b0};
	endcase
	end
else
	q <= q;
end

================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	if (load) q <= data;
	else if (ena) begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[39:0], 8'b0};
	2'b10: q <= {q[31:0], 16'b0};
	2'b11: q <= {q[63], q[63:1]};
	endcase
	end

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin

if (load == 1'b1)
	q = data;
else if (ena == 1'b1)
	begin
	//When shifting right, rotate the bits to the left.
	if (amount == 2'b00)
	begin
	q = {q[62:0], q[63]};
	end
	//When shifting left, rotate the bits to the right.
	else if (amount == 2'b01)
	q = {q[0], q[63:1]};
	else if (amount == 2'b10)
	q = {q[63:0], q[63:1]};
	else if (amount == 2'b11)
	q = {q[63:0], q[0]};
	end
end

================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// amount: 0: shift left 1 bit. 1: shift left 8 bits. 2: shift right 1 bit. 3: shift right 8 bits.
always @(posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena) begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[62:0], 8'h0};
	2'b10: q <= {q[62:0], 1'b0};
	2'b11: q <= {q[62:0], 8'h0};
	default: q <= {q[62:0], 1'b0};
	endcase
	end
end

================================================================
example-20: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	begin
	q<=data;
	end
	else if(ena)
	begin
	case(amount)
	2'b00: q<={q[62:0],1'b0};
	2'b01: q<={1'b0,q[63:1]};
	2'b10: q<={q[63-8:0],8'b0};
	2'b11: q<={8'b0,q[63:8]};
	endcase
	end
	end

================================================================
example-21: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
 	if(load) 
 	begin
 	 q <= data;
 	end 
 	else 
 	begin
 	 if(ena) 
 	 begin
 	 case(amount)
 	 2'b00: q <= q << 1;
 	 2'b01: q <= q << 8;
 	 2'b10: q <= q >> 1;
 	 2'b11: q <= q >> 8;
 	 endcase
 	 end
 	end
 end

================================================================
example-22: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
if(load)
	q <= data;

always@(posedge clk)
if(ena)
	begin
	case(amount)
	2'b00:begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:begin
	q <= {q[63], q[63:1]};
	end
	2'b11:begin
	q <= {q[63], q[63:8]};
	end
	endcase
	end

================================================================
example-23: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) 
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena) 
	begin
	q <= q << amount;
	end
end

================================================================
example-24: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else
	if (ena)
	begin
	if (amount == 2'b00)
	begin
	q <= {q[62:0], q[63]};
	end
	else if (amount == 2'b01)
	begin
	q <= {q[58:0], q[63]};
	end
	else if (amount == 2'b10)
	begin
	q <= {q[60:0], q[63]};
	end
	else if (amount == 2'b11)
	begin
	q <= {q[62:0], q[63]};
	end
	end
end


================================================================
example-25: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
 if (load) q <= data;
 else if (ena) begin
 case (amount) 
 2'b00: begin
 q <= {q[62:0], 1'b0};
 end
 2'b01: begin
 q <= {q[62:0], 8'b0};
 end
 2'b10: begin
 q <= {q[63], q[63:1]};
 end
 2'b11: begin
 q <= {q[63], q[63:8]};
 end
 endcase
 end
 end

================================================================
example-26: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if (load)
	begin
	q<=data;
	end
	else if (ena)
	begin
	case(amount)
	2'd0: q<=q << 1'b1;
	2'd1: q<=q << 8'd1;
	2'd2: q<=q >> 1'b1;
	2'd3: q<=q >> 8'd1;
	endcase
	end
	else
	q<=q;
end

================================================================
example-27: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	reg [63:0] temp;
	always @(posedge clk)
	begin
	if (load)
	begin
	temp = data;
	end
	else
	begin
	if (ena)
	begin
	case (amount)
	2'b00:temp = temp << 1;
	2'b01:temp = temp << 8;
	2'b10:temp = temp >> 1;
	2'b11:temp = temp >> 8;
	default:temp = temp;
	endcase
	end
	end
	end
	always @(*)
	begin
	case (amount)
	2'b00:q = temp[0];
	2'b01:q = temp[16:1];
	2'b10:q = temp[32:17];
	2'b11:q
================================================================
example-28: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	end
	else if(ena)
	begin
	end
end

================================================================
example-29: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	 q <= data;
	else if(ena)
	 begin
	 case(amount)
	 2'b00: begin
	 	q <= {q[62:0], 1'b0};
	 end
	 2'b01: begin
	 	q <= {q[63], q[63:1]};
	 end
	 2'b10: begin
	 	q <= {q[0], q[0], q[31:1], q[31:2]};
	 end
	 2'b11: begin
	 	q <= {q[0], q[0], q[31:1], q[31:2]};
	 	q <= {q[63], q[63:1]}; 
	 end
	 endcase
	
================================================================
example-30: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[62:0], q[63], q[63], q[63], q[63:1]};
	2'b10: q <= {q[63], q[63:1], q[63:2], q[63:3], q[63:4]};
	2'b11: q <= {q[63], q[63:1], q[63:2], q[63:3], q[63:4]};
	endcase
	end
	end

================================================================
example-31: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
if (load)
	q <= data;
else if (ena) begin
case(amount)
2'b00: q <= {q[62:0], q[63]};
2'b01: q <= {q[63], q[62:1]};
2'b10: q <= {q[63], q[62:8]};
2'b11: q <= {q[63], q[62:16]};
endcase
end

================================================================
example-32: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] temp;
always@(posedge clk)
begin
if(load)
	temp = data;
else if(ena)
	temp = temp << amount;
	
	q = temp;
end

================================================================
example-33: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	 begin
	 	q <= data;
	 end
	else if(ena)
	begin
	 case(amount)
	 2'b00:
	 begin
	 q <= {q[62:0], 1'b0};
	 end
	 2'b01:
	 begin
	 q <= {q[62:0], 8'b0};
	 end
	 2'b10:
	 begin
	 q <= {q[63], q[63:1]};
	 end
	 2'b11:
	 begin
	 q <= {q[63], q[63:8]};
	 end
	 endcase
	end
end

================================================================
example-34: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 reg [63:0] TEMP;
 assign q = TEMP;
 always @(posedge clk)
 begin
 if (load)
 TEMP <= data;
 else if (ena)
 begin
 case(amount)
 2'b00: TEMP <= TEMP << 1;
 2'b01: TEMP <= TEMP << 8;
 2'b10: TEMP <= TEMP >> 1;
 2'b11: TEMP <= TEMP >> 8;
 endcase
 end
 end

================================================================
example-35: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	q <= data;
	else if(ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[0], q[63:1]};
	2'b11: q <= q;
	endcase
	end
	end 

================================================================
example-36: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case (amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
end

================================================================
example-37: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	// assign the q shift register to the output, q.
	if(load)
	begin
	q <= data;
	end
	// if ena, then q <- q xor j
	if(ena)
	begin
	q <= (amount == 2'b00) ? (q[63:0] << 1) : q;
	end
	end


================================================================
example-38: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load == 1'b1) begin
	case(amount)
	2'b00: q <= data[63:48];
	2'b01: q <= data[47:32];
	2'b10: q <= data[31:16];
	2'b11: q <= data[15:0];
	endcase
	end
	else if (ena == 1'b1) begin
	q <= {q[62:0], 1'b0};
	end
end

================================================================
example-39: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load)
	q <= data[63:0];
else if (ena)
	begin
	case (amount)
	2'b00: q <= { q[62:0], 1'b0 }; 
	2'b01: q <= { q[59:0], 2'b0, q[61:1] };
	2'b10: q <= { q[55:0], 4'b0, q[57:1] };
	2'b11: q <= { q[47:0], 8'b0, q[49:1] };
	endcase
	end
end

================================================================
example-40: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] previous; 

always @(posedge clk)
if (load)
	q <= data;
else if (ena)
begin
	case(amount)
	2'b00:
	begin
	q <= q << 1;
	end
	2'b01:
	begin
	q <= q << 8;
	end
	2'b10:
	begin
	q <= q >> 1;
	end
	2'b11:
	begin
	q <= q >> 8;
	end
	endcase
end

================================================================
example-41: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
if (load)
	q <= data;
// always @(posedge clk)
// if (load)
// 	q <= data;
else if (ena)
	begin
	case(amount)
	2'b00: q <= {q[62:0], 1'b0};
	2'b01: q <= {q[63], q[63:1]};
	2'b10: q <= {q[63:8], q[63:8]};
	2'b11: q <= {q[63:8], q[63:8]};
	endcase 
	end

================================================================
example-42: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 if (load) 
 q <= data;
 else if (ena)
 case (amount)
 2'b00: q <= {q[62:0], 1'b0};
 2'b01: q <= {q[56:0], 8'b0};
 2'b10: q <= {q[48:0], 16'b0};
 2'b11: q <= {q[40:0], 24'b0};
 default: q <= q;
 endcase

================================================================
example-43: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	
	if (amount == 2'b01)
	q <= q << 8;
	
	if (amount == 2'b10)
	q <= q >> 1;
	
	if (amount == 2'b11)
	q <= q >> 8;
	end
end

================================================================
example-44: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
 if (load)
	q <= data;
 else if (ena) begin
	case (amount)
	2'b00:
	begin
	q <= {q[62:0], 1'b0};
	end
	2'b01:
	begin
	q <= {q[62:0], 8'b0};
	end
	2'b10:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b11:
	begin
	q <= {q[63], q[63:2]};
	end
	endcase
 end
end

================================================================
example-45: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin

if (load) 
q <= data;
else if (ena)
case(amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {q[63], q[63:1]};
2'b10: q <= {q[63], q[63:1]};
2'b11: q <= {q[63:0], 1'b0};
endcase
end

================================================================
example-46: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data[63:0];
	end
	else if (ena)
	begin
	case(amount)
	2'b00:
	q <= {q[62:0], q[63]};
	2'b01:
	q <= {q[63], q[63:1]};
	2'b10:
	q <= {q[63:8], q[63]};
	2'b11:
	q <= {q[63], q[63:8]};;
	endcase
	end
end

================================================================
example-47: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] prev;
always @(posedge clk)
	if (load)
	begin
// assign right shift 8 bits.
// assign left shift 1 bit.
// assign left shift 8 bits.
// assign right shift 1 bit.
	
	q <= data;
	prev <= {data[0],q[63:1]};
	end
	else if (ena)
	begin
	if (amount == 2'b00)
// shift left.
	begin
	q <= {q[62:0], prev[63]};
	end
	else if (amount == 2'b01)
// shift left.
	begin
	q <= {prev[63], q[63:1]};
	end
	else if (amount == 2'b10)
// shift right.
	begin
	q <= {prev[
================================================================
example-48: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	q <= q << amount;
	end
end


================================================================
example-49: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 if (load)
 q <= data;
 else if (ena)
 if (amount == 2'b00)
 q <= {q[62:0], 1'b0};
 else if (amount == 2'b01)
 q <= {1'b0, q[63:1]};
 else if (amount == 2'b10)
 q <= {q[63], q[63:1]};
 else if (amount == 2'b11)
 q <= {q[63:1], q[0]};
 

================================================================
