example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else
	begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out
================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
begin
if(reset)
	out<=8'b0;
else if(load)
	out<=data;
else begin
	out<={out[6:0],out[7]};
	end
end

================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(*)
begin
if(load)
out <= data;
else if(amount==3'b110)
out<=out;
else if(amount==3'b101)
out <= {out[6:0],out[7]};
else if(amount==3'b100)
out <= {out[5:0],out[6],out[7]};
else if(amount==3'b011)
out <= {out[4:0],out[5],out[6],out[7]};
else if(amount==3'b010)
out <= {out[3:0],out[4],out[5],out[6],out[7]};
else if(amount==3'b001)
out <= {out[2:0],out[3],out[4],out[5],out[6],out[
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
begin
	if(reset)
	begin
	out = 0;
	end
	else if(load)
	begin
	out = data;
	end
	else
	begin
	out = {out[6:0],out[7]};
	end
end

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
	begin
	if(reset)
	out<=8'b0;
	else if(load)
	out<=data;
	else
	begin
	// shift left by one bit
	out<={out[6:0],1'b0};
	end
	end

================================================================
