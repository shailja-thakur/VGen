example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or negedge reset)
begin
if(!reset)
out <= 8'b0;
else if(load)
out <= data;
else
out <= {data[7:4],data[3:0],data[7:4]};
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else
begin
out[7] <= data[0];
out[6] <= out[7];
out[5] <= out[6];
out[4] <= out[5];
out[3] <= out[4];
out[2] <= out[3];
out[1] <= out[2];
out[0] <= out[1];
out[7-amount] <= out[0];
end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// set out to 0 at end
always @(posedge clk or posedge reset)
begin
if(reset)
out <= 0;
else if(load)
out <= data;
else if(amount != 3'b111)
out <= out << amount;
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk,posedge reset)
if(reset) out <= 0;
else if(load) out <= data;
else begin
out <= {data[6:0],out[7]};
out <= out << amount;
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// out is the data shifted left
always @(posedge clk) begin
	if (reset) begin
	out <= 8'd0;
	end
	else begin
	if (load) begin
	out <= data;
	end
	else begin
	case(amount)
	3'd0: out <= {data[7:0],out[1:8],out[7:8]};
	3'd1: out <= {out[0],out[1],out[2],out[3],out[4],out[5],out[6],out[7]};
	3'd2: out <= {out[0],out[1],out[2],out[3]};
	3'd3: out <= {out[0],out[1],out[3],out[2],out[4],out[5],out[6],out[
================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@ (posedge clk or negedge reset)
begin
if(~reset)
out <= 8'b0;
else if(load)
out <= data;
else begin
out <= out << amount;
end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset)
out <= 0;
else if (load)
out <= data;
else
out <= {data[7:0],out[7:1]};
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else
out<={1'b0,out[6:0],1'b0};
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
if(reset) 
out <= 0;
else if(load)
out <= data;
else begin
case(amount)
3'd0 :out <= {data[1],data[0],data[3],data[2],data[5],data[4],data[7],data[6],data[8],data[9],data[11],data[10],data[13],data[12],data[15],data[14],data[17],data[16],data[19],data[18],data[21],data[20],data[23],data[22],data[25],data[24],data[27],data[26],data[29],data[28],data[31],data[30]};
3'd1 :out <= {data[2],data[1],data[0],data[3],
================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
	out <= 0;
else if(load)
	out <= data;
else begin
	out <= {data[0],out[7:1]};
	out[7:1] <= {out[6],out[7]};
	out[7] <= 0;
	end
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
if (reset==1)
out <= 0;
else begin
if (load == 1) begin
out <= data;
end
else begin
case(amount)
3'b0000: out <= {data[0],data[7:1]};
3'b0001: out <= {data[1],data[7:2]};
3'b0010: out <= {data[2],data[7:3]};
3'b0011: out <= {data[3],data[7:4]};
3'b0100: out <= {data[4],data[7:5]};
3'b0101: out <= {data[5],data[7:6]};
3'b0110: out <= {data[6],data[7]};
3'b0111: out <= {data
================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset) out <= 8'b0;
else
	if (load) out <= data;
	else
	begin
	case(amount)
	3'b000: out <= {data[0],data[7:1]};
	3'b001: out <= {data[1],data[7:2]};
	3'b010: out <= {data[2],data[7:3]};
	3'b011: out <= {data[3],data[7:4]};
	3'b100: out <= {data[4],data[7:5]};
	3'b101: out <= {data[5],data[7:6]};
	3'b110: out <= {data[6],data[7]};
	3'b111: out <=
================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	out <= data;
	else
	begin
	case(amount)
	3'b000: out <= {data[6:0],data[7]};
	3'b001: out <= {data[7],data[7:1]};
	3'b010: out <= {data[7:1],data[7]};
	3'b011: out <= {data[7:2],data[7:3]};
	3'b100: out <= {data[7:3],data[7:5]};
	3'b101: out <= {data[7:5],data[7:6]};
	3
================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset == 1)
out <= 8'b0000_0000;
else begin
if (load == 1)
out <= data;
else begin
case (amount)
3'b000: out <= {1'b0,data[7:1]};
3'b001: out <= {data[7],data[6:0]};
3'b010: out <= {data[6],data[5:0]};
3'b011: out <= {data[5],data[4:0]};
3'b100: out <= {data[4],data[3:0]};
3'b101: out <= {data[3],data[2:0]};
3'b110: out <= {data[2],data[1:0]};
3'b111: out <= {
================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out <= 8'd0;
else if(load)
out <= data;
else
out <= {out[6:0],out[7]};
end

================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// reset is used to clear the shift register
always @(posedge clk or posedge reset)
begin
	if (reset == 1)
	begin
	out <= 0;
	// out is set to all 0's on reset
	end
	else if (load == 1)
	begin
	out <= data;
	// load data into out register
	end
	else begin
	out <= {out[6:0],out[7]};
	// rotate left with out register
	end
end

================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else begin
out <= {out[6:0],out[7]};
out <= out << amount;
end
end

================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if (reset)
out <= 8'b0000_0000;
else if (load)
out <= data;
else
out <= {data[7:7-amount],data[6:0]};
end

================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
out <= 0;
else if (load)
out <= data;
else 
out <= {out[6:0],data[7]};
end

================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset) begin
	if(reset) begin
	out <= 8'b00000000;
	end
	else if(load) begin
	out <= data;
	end
	else begin
	case(amount)
	3'b000: out <= {data[0],data[3],data[1],data[2],data[4],data[5],data[6],data[7]};
	3'b001: out <= {data[1],data[2],data[3],data[4],data[5],data[6],data[7],data[8]};
	3'b010: out <= {data[2],data[3],data[4],data[5],data[6],data[7],data[8],data[9]};
	3'b011: out <= {data[
================================================================
example-20: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
if(reset)
out <= 8'b00000000;
else if(load)
out <= data;
else
out <= {out[6:0],out[7]};
end

================================================================
example-21: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// if reset is high, reset the data register to 0
always@(posedge clk)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else 
begin
case(amount)
3'b000: out <= out;
3'b001: out <= {out[0],out[7:1]};
3'b010: out <= {out[1:0],out[7:2]};
3'b011: out <= {out[2:0],out[7:3]};
3'b100: out <= {out[3:0],out[7:4]};
3'b101: out <= {out[4:0],out[7:5]};
3'b110: out <= {out[5:0],out[7:6]};
3'b
================================================================
example-22: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if(reset)
out <= 8'b0;
else
if(load)
out <= data;
else
case(amount)
3'b000: out <= {1'b0,out[7:1]};
3'b001: out <= {out[6:0],1'b0};
3'b010: out <= {out[6:0],out[7],1'b0};
3'b011: out <= {out[6:0],out[7:1],1'b0};
3'b100: out <= {out[7:0],1'b0,out[7:1]};
3'b101: out <= {out[7:1],out[6:0],1'b0};
3'b110: out <= {out[7:1
================================================================
example-23: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
begin
if(reset)
out <= 8'b00000000;
else if(load)
out <= data;
else
case(amount)
3'b000: out <= {1'b0,out[7:1]};
3'b001: out <= {out[6:0],1'b0};
3'b010: out <= {1'b0,out[7:1]};
3'b011: out <= {out[6:0],1'b0};
3'b100: out <= {1'b0,out[7:1]};
3'b101: out <= {out[6:0],1'b0};
3'b110: out <= {1'b0,out[7:1]};
3'b111: out <= {out[
================================================================
example-24: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
if (reset)
out <= 8'b00000000;
else if (load)
out <= data;
else if (amount>0)
out <= out << amount;
end

================================================================
example-25: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, negedge reset)
begin
if(reset == 1'b0)
out <= 8'd0;
else
begin
if(load == 1'b1)
out <= data;
else if(load == 1'b0)
out <= {out[7:0],1'b0};
end
end

================================================================
example-26: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
	if (reset)
	begin
	out <= 8'b00000000;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	for (int i = 0; i < 8; i = i + 1)
	begin
	out[i] <= data[8-i-1];
	end
	end
end

================================================================
example-27: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
if (reset)
out <= 0;
else if (load)
out <= data;
else begin
out <= data << amount;
end

================================================================
example-28: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 8'b00000000;
	end
	else
	begin
	if(load)
	out <= data;
	else
	out <= {out[6:0],out[7]};
	end
end

================================================================
example-29: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
	else begin
	if(load)
	begin
	out <= data;
	end
	else begin
	case(amount)
	3'b000:
	begin
	out <= data;
	end
	3'b001:
	begin
	out[7] <= data[0];
	out[6] <= data[1];
	out[5] <= data[2];
	out[4] <= data[3];
	out[3] <= data[4];
	out[2] <= data[5];
	out[1] <= data[6];
	out[0] <= data[7];
	end
	3'b010:
	begin
	out[7]
================================================================
example-30: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or reset)
begin
if (reset == 1'b1)
begin
out <= 0;
end
else if (load == 1'b1)
begin
out <= data;
end
else if (amount == 3'b010 || amount == 3'b011)
begin
out <= {data[0],data[7:1]};
end
else if (amount == 3'b100 || amount == 3'b101)
begin
out <= {data[1:0],data[7:2]};
end
else if (amount == 3'b110 || amount == 3'b111)
begin
out <= {data[2:0],data[7:3]};
end
else if (amount == 3'b111)
begin
out <= {data[3:0],data[7:4]};
end
end
================================================================
example-31: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
if (reset == 1'b1)
out <= 8'b0;
else if (load == 1'b1)
out <= data;
else
begin
	out <= data << amount;
end

================================================================
example-32: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
if (reset)
out=8'b00000000;
else if (load)
out=data;
else if (amount!=3'b111)
out={out[6:0],out[7]};
end

================================================================
example-33: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (load) 
out <= data;
else
if (amount == 3'b001)
out <= {1'b0,data[7:1]};
else if (amount == 3'b010)
out <= {1'b0,data[7:2]};
else if (amount == 3'b011)
out <= {1'b0,data[7:3]};
else if (amount == 3'b100)
out <= {1'b0,data[7:4]};
else if (amount == 3'b101)
out <= {1'b0,data[7:5]};
else if (amount == 3'b110)
out <= {1'b0,data[7:6]};
else if (amount == 3'b111)
out <= {1
================================================================
example-34: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
if(~reset)
out = 8'b0;
else if(load)
out = data;
else
begin
out = {out[6:0], data[7], data[6], data[5], data[4], data[3], data[2], data[1], data[0]};
if(amount == 3'b111)
out = 8'b0;
end
end

================================================================
example-35: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
	if (reset)
	begin
	out <= 8'b0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	end
end

================================================================
example-36: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
out<=8'b0;
else if(load)
out<=data;
else
out<={out[6:0],out[7]};
end

================================================================
example-37: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,reset)
begin
if (reset == 1'b1)
out <= 8'b00000001;
else if(load)
out <= data;
else if(amount == 3'b000)
out <= {1'b0,out[7:1]};
else if(amount==3'b001)
out <= {out[6:0],1'b0};
else if(amount==3'b010)
out <= {1'b0,out[6:0],1'b0};
else if(amount==3'b011)
out <= {out[5:0],1'b0,1'b0};
else if(amount==3'b100)
out <= {1'b0,out[5:0],1'b0,1'b0};
else if(amount==3
================================================================
example-38: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset) out <= 8'b00000000;
else if(load) out <= data;
else begin
for(i=0;i<7;i=i+1)
out[i] <= out[i+amount];
out[7] <= out[0];
end
end

================================================================
example-39: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] temp;
reg [7:0] left_shift;
always @(posedge clk,posedge reset )
begin
if (reset)
begin
temp <= 0;
out <= 0;
left_shift <= 0;
end
else
begin
if (load) temp <= data;
else
begin
left_shift <= {left_shift[6:0],temp[7]};
out <= {left_shift[7-amount],left_shift[7-amount-1:0]};
end
end
end

================================================================
example-40: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// load is active low
always @(posedge clk)
begin
if (!load) begin
out <= data << amount;
end
end

================================================================
example-41: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
begin
	if(reset == 1)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	out <= data;
	else
	begin
	case(amount)
	3'b000:
	out <= {data[0],data[1],data[2],data[3]};
	3'b001:
	out <= {data[4],data[5],data[6],data[7]};
	3'b010:
	out <= {data[1],data[2],data[3],data[4]};
	3'b011:
	out <= {data[5],data[6],data[7],data[0]};
	3'b100:
	out <= {data[2],data
================================================================
example-42: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
if (load)
out <= data;
else if (amount==1'b1)
out <= {out[0],out[7:1]};
else if (amount==1'b0)
out <= {out[6:0],out[7]};
else
out <= {out[1:0],out[7:2]};
end

================================================================
example-43: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk,posedge reset)
if (reset) out <= 0;
else if (load) out <= data;
else begin
for(int i=0;i<8;i++)
begin
out[i] <= data[i+amount];
end
end

================================================================
example-44: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else begin
out[0] <= out[7];
out[1] <= out[0];
out[2] <= out[1];
out[3] <= out[2];
out[4] <= out[3];
out[5] <= out[4];
out[6] <= out[5];
out[7] <= out[6];
end
end

================================================================
example-45: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
if (reset) begin
out <= 0;
end
else
if (load)
out <= data;
else
case(amount)
3'b000 : out <= data << 1;
3'b001 : out <= data << 2;
3'b010 : out <= data << 3;
3'b011 : out <= data << 4;
3'b100 : out <= data << 5;
3'b101 : out <= data << 6;
3'b110 : out <= data << 7;
3'b111 : out <= data << 8;
default: out <= 0;
endcase
end

================================================================
example-46: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else
out <= {out[6:0],out[7]};
end

================================================================
example-47: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
if (reset)
out<=0;
else if (load)
out<=data;
else begin
out<={1'b0,out[7:1]};
out<=out>>amount;
end
end

================================================================
example-48: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
begin
//if reset is high
if(reset==1'b1)
out<=8'b0;
// if load is high, load data to out
else if(load==1'b1)
out<=data;
// otherwise rotate the out register followed by left shift the out register by amount bits
else
begin
//out[0]<=out[1];
//out[1]<=out[2];
//out[2]<=out[3];
//out[3]<=out[4];
//out[4]<=out[5];
//out[5]<=out[6];
//out[6]<=out[7];
//out[7]<=out[0];
out<=
	(amount==0)?out:
	(
================================================================
example-49: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset) out <= 8'b00000000;
else 
case(amount)
3'b000: out <= data;
3'b001: out <= {data[1:0],out[7:2]};
3'b010: out <= {out[7:1],out[7:0],0};
3'b011: out <= {out[7:2],out[7:0]};
3'b100: out <= {out[7:1],out[7:0]};
3'b101: out <= {out[7:1],0};
3'b110: out <= {out[7:0],out[7:1]};
3'b111: out <= {out[7:0],0};
endcase
end

================================================================
