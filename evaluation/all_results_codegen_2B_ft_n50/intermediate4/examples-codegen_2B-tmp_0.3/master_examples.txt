example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= 0;
endcase
end
always @(present_state)
begin
case (present_state)
0: out <= 0;
1: out <= 0;
default: out <= 0;
endcase
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
if(reset)
present_state <= 0;
else
present_state <= next_state;
// next_state
always @(present_state, in)
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= present_state;
endcase
// out
assign out = (present_state == 1) && (next_state == 0);

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state = present_state & in
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
if (reset)
present_state <= 0;
else
present_state <= next_state;
// next_state
always @(present_state, in)
case (present_state)
0: begin
	if (in)
	next_state <= 1;
	else
	next_state <= 0;
	end
1: begin
	if (in)
	next_state <= 0;
	else
	next_state <= 1;
	end
endcase

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state = present_state & in
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
// next_state = present_state & in
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
// out = present_state
assign out = present_state;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state = present_state
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
// next_state = present_state
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
endcase
end
// out = present_state
assign out = present_state;

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
default: next_state <= 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
default: out <= 1;
endcase
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
if (reset)
present_state <= 0;
else
present_state <= next_state;
// next_state
always @(present_state or in)
case (present_state)
0: begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
1: begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
// out
assign out = (present_state == 1) && (present_state == next_state);

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0 : next_state <= in ? 0 : 1;
1 : next_state <= in ? 1 : 0;
default : next_state <= 0;
endcase
end
always @(present_state)
begin
case(present_state)
0 : out <= 0;
1 : out <= 0;
default : out <= 1;
endcase
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= present_state;
endcase
end
always @(present_state)
begin
case (present_state)
0: out <= 0;
1: out <= 0;
default: out <= 0;
endcase
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	0: next_state <= in ? 0 : 1;
	1: next_state <= in ? 0 : 1;
	endcase
end
always @(present_state)
begin
	case (present_state)
	0: out <= 0;
	1: out <= 0;
	endcase
end

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
default: out <= 0;
endcase
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0 : next_state <= in ? 0 : 1;
1 : next_state <= in ? 1 : 0;
default : next_state <= 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0 : begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
1 : begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
endcase
end
always @(present_state)
begin
case (present_state)
0 : out <= 0;
1 : out <= 0;
endcase
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
if (reset)
present_state <= 0;
else
present_state <= next_state;
// next state
always @(present_state or in)
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
default: next_state <= 0;
endcase
// output
assign out = (present_state == 1) && (next_state == 0);

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
// next_state = present_state;
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
default: next_state <= 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
1: begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
default: next_state <= 0;
endcase
end
assign out = (present_state == 1) && (next_state == 0);

================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0 : next_state <= in ? 0 : 1;
1 : next_state <= in ? 1 : 0;
default : next_state <= 0;
endcase
end
assign out = (present_state == 1) ? 1 : 0;

================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= present_state;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
default: out <= 1;
endcase
end

================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state = present_state & (~in)
// present_state = in
// next_state = in
// present_state = (in)
// next_state = (in)
// present_state = 0
// next_state = 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= (~in) ? 0 : 1;
1: next_state <= (~in) ? 1 : 0;
default: next_state <= present_state;
endcase
end
assign out = (present_state == 1) ? 1 : 0;

================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0: begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
1: begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
endcase
end
always @(present_state)
begin
case (present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
default: next_state <= present_state;
endcase
end
assign out = (present_state == 1) & (next_state == 0);

================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
default: next_state <= 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
default: out <= 1;
endcase
end

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0:
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
1:
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
default:
	next_state <= 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state=in in state 0, and in in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
endcase
end
assign out = (present_state==1)&&(next_state==0);

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0: if (in)
next_state <= 1;
else
next_state <= 0;
1: if (in)
next_state <= 0;
else
next_state <= 1;
default: next_state <= 0;
endcase
end
always @(present_state)
begin
case (present_state)
0: out <= 0;
1: out <= 0;
default: out <= 1;
endcase
end

================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	0:
	begin
	if (in == 1)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if (in == 1)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	default:
	begin
	next_state <= 0;
	end

================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 1;
endcase
end
always @(present_state)
begin
case (present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0: next_state = in ? 0 : 1;
1: next_state = in ? 0 : 0;
default: next_state = 0;
endcase
end
always @(present_state)
begin
case (present_state)
0: out = 0;
1: out = 0;
default: out = 0;
endcase
end

================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: begin
	if(in)
	next_state <= 0;
	else
	next_state <= 1;
	end
1: begin
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
	end
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 1;
endcase
end

================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
assign out = (present_state == 1) && (next_state == 0);

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	0:
	begin
	if (in == 1)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	1:
	begin
	if (in == 0)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	default:
	begin
	next_state <= 0;
	end

================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0: begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
1: begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
endcase
end
always @(present_state)
begin
case (present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
if(reset)
present_state <= 0;
else
present_state <= next_state;
// next_state
always @(present_state, in)
case(present_state)
0: begin
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
	end
1: begin
	if(in)
	next_state <= 0;
	else
	next_state <= 1;
	end
endcase
// out
assign out = (present_state == 1) & (present_state == 0);

================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 0 : 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0: begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
1: begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
endcase
end
assign out = (present_state == 1) && (next_state == 0);

================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state=in in state 0 and next_state=in in state 1
always@(posedge clk)
begin
if(reset)
present_state<=0;
else
present_state<=next_state;
end
always@(present_state, in)
begin
case(present_state)
0: next_state=in?0:1;
1: next_state=in?1:0;
endcase
end
assign out=present_state;

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case (present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state = present_state & in
always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
// next_state = present_state;
// next_state = present_state & in;
// next_state = present_state | in;
// next_state = present_state ^ in;
// next_state = present_state | (in & next_state);
// next_state = present_state & (~in);
// next_state = present_state ^ (~in);
// next_state = present_state | (~in);
// next_state = present_state & in;
// next_state = present_state & (~in);
// next_state = present_state ^ (~in);
// next_state = present_state |
================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// next_state is the state that will be present next
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
// next_state
always @(present_state or in)
begin
case(present_state)
0: if(in) next_state <= 1;
else next_state <= 0;
1: if(in) next_state <= 0;
else next_state <= 1;
default: next_state <= 0;
endcase
end
// out
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
default: out <= 1;
endcase
end

================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0: next_state <= in ? 0 : 1;
1: next_state <= in ? 1 : 0;
endcase
end
always @(present_state)
begin
case(present_state)
0: out <= 0;
1: out <= 0;
endcase
end

================================================================
