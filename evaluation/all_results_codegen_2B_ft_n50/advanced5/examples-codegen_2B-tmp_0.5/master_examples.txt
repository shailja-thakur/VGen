example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB.
always @(posedge clk or posedge reset)
if (reset)
	cur_state <= IDLE;
else
	cur_state <= next_state;
// next state assignment
always @*
case(cur_state)
	IDLE:
	if (~a & ~b) 
	next_state = IDLE;
	else 
	next_state = SA;
	SA:
	if (a & ~b) 
	next_state = IDLE;
	else 
	next_state = SA;
	SB:
	if (a & b) 
	next_state = IDLE;
	else 
	next_state = SB;
	default:
	next_state = IDLE;
end
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a is high and b is low, state changes to SA.
// If input a is low and b is high, state changes to SB.
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	cur_state <= IDLE;
	end
	else
	cur_state <= next_state;
end
always @(*)
begin
	case(cur_state)
	IDLE:
	begin
	if (a)
	next_state = SA;
	else if (b)
	next_state = SB;
	else
	next_state = IDLE;
	end
	SA:
	begin
	if (a)
	next_state = IDLE;
	else
	next_state = SAB;
	end
	SB:
	begin
	if (b
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a or b is high, state changes to SA. 
// if input a or b is low, state changes to SB.
always @(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1 &&
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA, if input b is high, state changes to SB. 
always @(posedge clk) begin
if(reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always @(*) begin
case(cur_state)
IDLE: begin
if(a) next_state = SA;
else if(b) next_state = SB;
else next_state = IDLE;
end
SA: begin
if(a) next_state = IDLE;
else if(b) next_state = SB;
else next_state = SAB;
end
SB: begin
if(b) next_state = IDLE;
else if(a) next_state = SA;
else next_state = SAB;
end
SAB: begin
if(a) next_
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA.
// if only input b is high, state changes to SB.
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
if (a && b)
next_state <= SA;
else if (a)
next_state <= SB;
else if (b)
next_state <= SAB;
else
next_state <= IDLE;
SA:
next_state <= SA;
SB:
next_state <= SB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end
always @(cur_state)
begin
case
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE: begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA: begin
if(a)
next_state <= SA;
else
next_state <= IDLE;
end
SB: begin
if(b)
next_state <= SB;
else
next_state <= IDLE;
end
default: next_state <= IDLE;
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// Next state combinational logic:
always @(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
if(a==1'b1 && b==1'b0)
next_state <= SA;
else if(b==1'b1 && a==1'b0)
next_state <= SB;
else
next_state <= IDLE;
end
SA: begin
if(a==1'b1 && b==1'b0)
next_state <= SAB;
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a and b are both low, state changes to IDLE. 
always@(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE: begin
if({a,b} == 2'b11)
next_state <= SA;
else
next_state <= IDLE;
end
SA: begin
if({a,b} == 2'b10)
next_state <= SB;
else
next_state <= SA;
end
SB: begin
if({a,b} == 2'b01)
next_state <= SAB;
else
next_state <= IDLE;
end
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB. 
always @(posedge clk or posedge reset) begin
if (reset) cur_state <= IDLE; else cur_state <= next_state; end
always @(*) begin
case(cur_state)
IDLE: begin
if(a) next_state <= SA;
else if(b) next_state <= SB;
else next_state <= IDLE;
end
SA: begin
if(a) next_state <= SA;
else next_state <= IDLE;
end
SB: begin
if(b) next_state <= SAB;
else next_state <= IDLE;
end
SAB: begin
if(a) next_state <= SA;
else next_state <= SB;
end
endcase
end
//
================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
always @(*)
	case(cur_state)
	IDLE:
	begin
	if(a)
	next_state <= SA;
	else if(b)
	next_state <= SB;
	else
	next_state <= IDLE;
	end
	SA:
	begin
	if(a)
	next_state <= IDLE;
	else
	next_state <= SAB;
	end
	SB:
	begin
	if(b)
	next_state <= IDLE;
	else

================================================================
example-10: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only one of a or b is high, the other state is selected.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state)
begin
case(cur_state)
IDLE: begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
z <= 0;
end
SA: begin
if(a)
next_state <= SA;
else
next_state <= SAB;
z <= 0;
end
SB: begin
if(b)
next_state <= SB;
else
next_state <= SAB;
z <= 0;
end
SAB: begin
if(a)
next_state <= SA
================================================================
example-11: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE.
// if input a is high and b is low, state changes to SA.
// if input a is low and b is high, state changes to SB.
always @(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE: next_state = a?SA:IDLE;
SA: next_state = b?SA:SB;
SB: next_state = b?IDLE:SA;
default: next_state = IDLE;
endcase
end
// Output logic
always @(*)
begin
case(cur_state)
IDLE: z = 0;
SA: z = 0;
SB: z =
================================================================
example-12: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case(cur_state)
IDLE: begin
	if(a&&b)
	next_state <= SA;
	else if(a)
	next_state <= SA;
	else if(b)
	next_state <= SB;
	else
	next_state <= IDLE;
	end
SA: begin
	if(b)
	next_state <= SAB;
	else
	next_state <= SA;
	end
SB: begin
	if(a)
	next_state <= SAB;
	else
	next_state <= SB;

================================================================
example-13: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a==0 && b==0)
next_state <= IDLE;
else
next_state <= SA;
end
SA:
begin
if(a==1 && b==0)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(a==0 && b==1)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if
================================================================
example-14: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a is high and input b is low, state changes to SA. 
// If input a is low and input b is high, state changes to SB.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// State transition logic:
always@(*)
begin
case(cur_state)
IDLE: begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA: begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB: begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB: begin
if(a
================================================================
example-15: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk, posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE: begin
if (a == 1'b1 && b == 1'b1)
next_state = SA;
else if (a == 1'b1 && b == 1'b0)
next_state = SB;
else if (a == 1'b0 && b == 1'b1)
next_state = SAB;
else
next_state = IDLE;
end
SA: begin
if (a == 1'b1 && b == 1'
================================================================
example-16: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to SA.
// if input a is high and b is low, state changes to SB.
always @(posedge clk) begin
 if (reset) cur_state <= IDLE;
 else cur_state <= next_state;
end
always @(*) begin
case(cur_state)
IDLE: begin
case(a)
1'b1: begin
next_state <= SA;
end
1'b0: begin
next_state <= IDLE;
end
default: next_state <= IDLE;
endcase
end
case(b)
1'b1: begin
next_state <= IDLE;
end
1'b0: begin
next_state <= SB;
end
default: next_state <= IDLE;
endcase
end

================================================================
example-17: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(cur_state or a or b)
case (cur_state)
IDLE: 
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (a == 1'b1 && b == 1'b0)
next_state <= SB;
else if (a == 1'b0 && b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA: 
begin
if (a == 1'b1 && b
================================================================
example-18: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a and b are both low, state changes to IDLE.
assign z = (cur_state == SAB) ? 1 : 0;
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SAB;
else
next_state <= SA;
end
SB:
begin
if(b)
next_state <= SAB;
else
next_state <=
================================================================
example-19: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
================================================================
example-20: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB.
always@(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
if (a==1'b1 && b==1'b1)
next_state <= SA;
else if (a==1'b1)
next_state <= SB;
else if (b==1'b1)
next_state <= SAB;
end
SA: begin
if (a==1'b1)
next_state <= SA;
else if (b==1'b1)
next_state <= SB;
else if (b==1'b0
================================================================
example-21: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, the state changes to SA.
// if input a is low and input b is high, the state changes to SB.
always@(posedge clk) begin
if(reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always@(*) begin
case(cur_state)
IDLE: begin
if(a) next_state = SA;
else next_state = IDLE;
end
SA: begin
if(b) next_state = SB;
else next_state = SA;
end
SB: begin
if(b) next_state = SAB;
else next_state = SA;
end
SAB: begin
if(a) next_state = IDLE;
else next_state = SAB;
end
default: next_state = IDLE;
================================================================
example-22: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA
// if only b is high, state changes to SB
// if none of a or b is high, state changes to IDLE
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
if(a)
next_state <= IDLE;
else
next_state <= S
================================================================
example-23: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA. 
// if only b is high, state changes to SB.
// If none of a, b, or reset is high, state is IDLE.
always @(posedge clk)
	if(reset) cur_state <= IDLE;
	else cur_state <= next_state;
always @(*)
	case(cur_state)
	IDLE: if(a) next_state <= SA; else next_state <= IDLE;
	SA: if(b) next_state <= SB; else next_state <= SA;
	SB: if(b) next_state <= SAB; else next_state <= IDLE;
	SAB: if(a) next_state <= IDLE; else next_state <= SAB;
	default: next_state <= IDLE;
	endcase
assign
================================================================
example-24: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE. 
// if input a is high and b is low, state changes to SA. 
always @(posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// Combinational logic:
assign z = (cur_state == SAB);
always @*
begin
case(cur_state)
IDLE: begin
case(b)
1'b0: next_state = IDLE;
1'b1: next_state = SA;
default: next_state = IDLE;
endcase
end
SA: begin
case(a)
1'b0: next_state = IDLE;
1'b1: next_state = SAB;
default: next_state
================================================================
example-25: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
next_state <= a ? SA : IDLE;
SA:
next_state <= b ? IDLE : SA;
SB:
next_state <= b ? IDLE : SA;
default:
next_state <= IDLE;
endcase
end
// Output logic:
assign z = (cur_state == SAB) ? 1 : 0;

================================================================
example-26: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE.
// if input a and b are both high, state changes to SA.
always @(posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// next state combinational logic:
always @(*)
begin
case (cur_state)
IDLE:
begin
if (a)
next_state = SA;
else if (b)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if (a)
next_state = SA;
else if (b)
next_state = SAB;
else
next_state = IDLE;
end
SB:
begin
if (a)
next_state = IDLE;

================================================================
example-27: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if either input is high, then state changes to SA. 
always @(posedge clk or negedge reset)
if(reset == 0)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a == 1 && b == 1)
next_state <= SA;
else if(a == 1 || b == 1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a == 0 && b == 0)
next_state <= SAB;
else if(a == 0 || b == 0)
next_state <= IDLE;
else
next_state <= SA;
end
SB:
begin
if(a == 0 && b == 0)
next_state <= S
================================================================
example-28: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB.
always@(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// FSM next state logic:
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
================================================================
example-29: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and b is low, state changes to SA.
// if input a is low and b is high, state changes to IDLE.
always@(posedge clk or negedge reset)
if(!reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
// FSM next state logic
always@(*)
begin
case(cur_state)
IDLE: begin
	if(a) next_state <= SA;
	else if(b) next_state <= SB;
	else next_state <= IDLE;
	end
SA: begin
	if(a) next_state <= SA;
	else next_state <= SAB;
	end
SB: begin
	if(b) next_state <= IDLE;
	else next_state <= SB;
	end
SAB:
================================================================
example-30: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if(a)
next
================================================================
example-31: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case (cur_state)
IDLE:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (a == 1'b1)
next_state <= SB;
else if (b == 1'b1)
next_state <= SAB;
end
SA:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SAB;
else if (a == 1'b0)
next_state <= SA;
else if (b == 1'b1)
================================================================
example-32: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a and b are both low, state changes to IDLE. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next state generation logic:
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state = SA;
else if(b)
next_state = SB;
else
next_state = IDLE;
SA:
if(a)
next_state = SAB;
else
next_state = SA;
SB:
if(b)
next_state = SAB;
else
next_state = IDLE;
default:
next_state = IDLE;
endcase
end
// output logic:
================================================================
example-33: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high or b is high, state changes to SA.
// if input a or b are both low, state changes to IDLE.
assign z = ((cur_state == SA) || (cur_state == SAB) ? 1 : 0);
always @(posedge clk)
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
	if(a == 1'b1 && b == 1'b0)
	next_state <= SA;
	else if(a == 1'b0 && b == 1'b0)
	next_state <= IDLE;
	else
	next_state <= IDLE;
SA:
	if(a == 1'b1
================================================================
example-34: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk, posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE : begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (a == 1'b1 && b == 1'b0)
next_state <= SB;
else if (a == 1'b0 && b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA : begin
if (a == 1'
================================================================
example-35: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE. 
// if input a is high and input b is low, state changes to SA. 
always @(posedge clk, posedge reset)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// Output logic:
always @(cur_state)
case(cur_state)
IDLE: begin
z = 1'b0;
end
SA: begin
z = 1'b0;
end
SB: begin
z = 1'b0;
end
SAB: begin
z = 1'b1;
end
default: begin
z = 1'b0;
end
endcase
// State transition logic:
always @(cur_state or a or b)
case(cur_state)
IDLE: begin
next
================================================================
example-36: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high only, state changes to SA. 
// if input b is high only, state changes to SB. 
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
SAB:
begin
if(a)
next
================================================================
example-37: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA. 
// if input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a&&b)
next_state <= SA;
else if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a&&b)
next_state <= SAB;
else if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
================================================================
example-38: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b0)
next_state <= SAB;
end
SA:
begin
if(a==1'b0)
next_state <=
================================================================
example-39: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk, posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case (cur_state)
IDLE:
begin
if (a==1'b1 && b==1'b1)
next_state <= SA;
else if (a==1'b1 && b==1'b0)
next_state <= SB;
else if (a==1'b0 && b==1'b0)
next_state <= IDLE;
else next_state <= IDLE;
end
SA:
begin
if (a==1'b1 && b==1'b1
================================================================
example-40: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always@(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next state combinational logic:
always@(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(
================================================================
example-41: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always@(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE: next_state = a?SA:IDLE;
SA: next_state = b?SB:SA;
SB: next_state = b?IDLE:SA;
default: next_state = IDLE;
endcase
end
always@(*)
case(cur_state)
IDLE: z = 0;
SA: z = 0;
SB: z = 1;
endcase

================================================================
example-42: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SAB:
begin
if(
================================================================
example-43: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
// if none of a or b is high, state changes to IDLE.
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case (cur_state)
IDLE: 
begin
if (a & b)
next_state <= SA;
else if (a | b)
next_state <= SB;
else
next_state <= IDLE;
end
SA: 
begin
if (a & b)
next_state <= SAB;
else
next_state <= SA;
end
SB: 
begin
if (a & b)
next_state <= SAB;
else
next_state
================================================================
example-44: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input b is high and a is low, state is SA.
// if input a is high and b is low, state is SB.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a & b)
next_state = SA;
else if(b)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if(a)
next_state = IDLE;
else
next_state = SAB;
end
SB:
begin
if(b)
next_state = SAB;
else
next_state = IDLE;
end
SAB:
begin
next_state = IDLE
================================================================
example-45: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only b is high, state changes to SA.
// if only a is high, state changes to SB.
always @(posedge clk) begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*) begin
case (cur_state)
IDLE: begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (b == 1'b1)
next_state <= SB;
else
next_state <= IDLE;
end
SA: begin
if (a == 1'b0)
next_state <= IDLE;
else
next_state <= SAB;
end
SB: begin
if (a == 1'b0)
next_state <= IDLE;
else
next_state <= SAB;

================================================================
example-46: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB.
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if (a)
next_state <= SA;
else
next_state <= IDLE;
end
SB:
begin
if (b)
next_state <= SB;
else
next_state <= IDLE;
end
default:
next_state <= IDLE;
endcase
end
================================================================
example-47: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
assign z = (cur_state == SA && a && b) || (cur_state == SAB && a && b) || (cur_state == IDLE && a && b);
// State transition logic:
always @(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
// Idle state has no next state.
if(a)
next_state = SA;
else if(b)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
// SA state has no next state.
if(a)
next_state = SA;
else if(b)
next_state = SB;
else
next_state =
================================================================
example-48: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA.
// if only input b is high, state changes to SB.
// if input a or b are low, state remains unchanged.
always @ (posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ (*)
begin
case (cur_state)
IDLE: begin
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
end
SA: begin
if (a)
next_state <= SA;
else
next_state <= IDLE;
end
SB: begin
if (b)
next_state <= SB;
else
next_state <= IDLE;
end
default: next_state
================================================================
example-49: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset) begin
if(reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always @(*) begin
case(cur_state)
IDLE: begin
if(a && b) next_state = SA;
else if(a) next_state = SB;
else next_state = IDLE;
end
SA: begin
if(a && b) next_state = SAB;
else if(b) next_state = SA;
else next_state = IDLE;
end
SB: begin
if(b) next_state = SAB;
else next_state = IDLE;
end
SAB:
================================================================
