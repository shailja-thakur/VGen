example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q = 4'b1;
	end
	else if(q == 4'b12)
	begin
	q = 4'b1;
	end
	else
	begin
	q = q + 1;
	end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
if(reset) 
 q <= 1;
 else if(q == 12)
 q <= 1;
 else
 q <= q + 1;

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 1;
	end
	else if (q == 12)
	begin
	q <= 1;
	end
	else if (q == 1)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if(reset) begin
 q <= 1;
 end 
 else if(q == 4'b1111) begin
 q <= 1;
 end
 else begin
 q <= q + 1;
 end
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
 if (reset)
 q <= 4'b0001; 
 else if (q == 11)
 q <= 4'b0001; 
 else 
 q <= q + 1;
end 

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
 if(reset) q <= 4'b0001;
 else if(q == 4'b1210) q <= 4'b0001; 
 else q <= q + 1'b1;
 end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if(reset)
	begin
	q <= 4'd1;
	end
	else if(q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b1000;
	end
	else if (q==4'b1201)
	begin
	q <= 4'b1001;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if (reset)
q <= 4'b1; 
else if (q == 4'b12) 
q <= 4'b1; 
else 
q <= q + 1'b1; 
end 

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)begin
if (reset) q <= 1; 
else if (q == 12) q <= 1;
else if (q == 1) q <= 1;
else q <= q + 1;
end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
begin
	if (reset) begin
q <= 0; end
	else if (q == 12) begin
q <= 0; end
	else begin
q <= q + 1; end
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
 begin
 if (reset)
 q <= 4'b1;
 else if(q == 4'd12)
 q <= 4'b1;
 else
 q <= q + 1;
 end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// Part 3
/*
*/
	always @( posedge clk or negedge reset ) begin
	if(reset==0)
	q <= 1;
	else if(q==12)
	q <= 1;
	else
	q <= q + 1;
	end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
	begin
	if(reset)
	q <= 4'b0001;
	else 
	if(q == 4'b12)
	q <= 4'b0001;
	else
	q <= q + 1;
	end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
 if (reset)
 q <= 4'b0001;
 else if (q == 4'b12)
 q <= 4'b0001;
 else
 q <= q + 1;

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 4'b0001;
else if(q == 4'b12)
q <= 4'b0001;
else
q <= q + 1;
end

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if(reset) begin
	q = 4'd1;
	end
	else if(q == 4'd12) q = 4'd1;
	else if(q == 4'd1) q = 4'd12;
	else q = q + 1'b1;
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset) q <= 1;
 else if (q == 12) q <= 1;
 else q <= q + 1;
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
 if (reset)
 q <= 4'b0001;
 else if (q == 4'b1201)
 q <= 4'b0001;
 else
 q <= q + 1;

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) begin
if (reset) begin 
q <= 1;
end
else if (q == 12) begin 
q <= 1;
end
else begin 
q <= q + 1;
end
end

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
 if (reset == 1) q = 4'b0000;
 else if (q == 4'b0001) q = 4'b0001;
 else q = q + 1'b1;
end

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin

case (reset)
1'b0: q <= 4'b1;
1'b1: q <= 4'b1;

1'bx: q <= 4'b1;

endcase

end // always


================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
 if (reset) begin
 q <= 1;
 end
 else if (q == 12) begin
 q <= 1;
 end
 else begin
 q <= q + 1;
 end
end

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@ (posedge clk, posedge reset)
begin
	if (reset) q <= 1; // send reset to 0
	else begin
	if (q == 12) q <= 1;
	else q <= q + 1; // increment q
	end
end

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end
	else if (q == 4'b1210) 
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin: state_FFs
if (reset)
q <= 1;
else if (q == 12)
q <= 1;
else
q <= q + 1;
end

================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
	always @ (posedge clk)
	begin
	if(reset)
	begin
	q <= 4'b0111;
	end
	else if (q == 4'b12)
	begin
	q <= 4'b0111;
	end
	else if (q == 4'b0000)
	begin
	q <= 4'b0111;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
 if(reset)
 q<=1;
 else
 case(q)
 4'b1: q<=4'b1;
 4'b10: q<=4'b1;
 default: q<=q+1;
 endcase

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset)
begin
	if (reset == 1'b0)
	begin
	q <= 1'b1;
	end
	else if (q == 4'b1110)
	begin
	q <= 1'b1;
	end
	else
	begin
	q <= q + 1'b1;
	end
end

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk ) begin
 if (reset) q <= 4'd1;
 else if (q == 4'd12) q <= 4'd1;
 else q <= q + 4'd1;
end

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// Assign the output q to your output 
always @(posedge clk or posedge reset)
begin
 if(reset)
 q = 0; 
 else if(q == 12)
 q = 1;
 else
 q = q + 1;
 end

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if (reset)
q <= 4'd1;
else if(q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset) 
	q <= 1;
 else if (q == 12)
	q <= 1;
 else if (q == 1)
	q <= 12;
 else
	q <= q + 1;
 end

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
 if (reset)
 q = 4'd1;
 else if (q == 4'd12)
 q = 4'd1;
 else
 q = q + 1'b1;
end 

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@ (posedge clk)
 if (reset) begin
 q = 1;
 end else if(q == 12) q = 1;
 else begin
 q = q + 1;
 end

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if (reset == 1'b1) q <= 4'b1;
else if (q ==4'b12) q <= 4'b1;
else q <= q + 1'b1;

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if(reset) q <= 1;
	else if(q == 12) q <= 1;
	else if(q == 1) q <= 1;
	else q <= q + 1;
end

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if(reset) begin // on reset, assign q to 1
 q<=1;
 end
 else if (q==12) begin // if q is 12, assign q to 1
 q<=1;
 end
 else if (q==0) begin // if q is 0, assign q to 1
 q<=1;
 end
 else begin // any other cases
 case(q)
 1:begin
 q<=q+1;
 end
 2:begin
 q<=q+1;
 end
 3:begin
 q<=q+1;
 end
 4:begin
 q<=q+1;
 end
 5:begin
 q<=q+1;
 end
 6:begin
 q<=q+1;
 end
 7:begin
 q<=q+1;
 end
 8:begin

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
if (reset)
q <= 4'd1;
else if (q == 4'd12)
q <= 4'd1;
else
q <= q + 4'd1;

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
begin
if(reset)
q <= 1;
else if(q==12)
q <= 1;
else
q <= q+1;
end

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset) begin
 q = 1;
 end
 else if (q == 12) begin
 q = 1;
 end
 else begin
 q = q + 1;
 end
end

================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
 begin
 
 if (reset)
 q <= 4'd1;
 else if (q == 4'd12)
 q <= 4'd1;
 else
 q <= q + 1;
 
 end
 endmodule 
 
 
 
 
 
 
 
 
 
module pwm_generator(
 input clk,
 input reset,
 input [9:0] duty_cycle,
 output reg pwm_out
);

reg [9:0] counter;

// This is a counter that counts from 1 to 12, then resets.

always @(posedge clk)
 begin
 if (reset)
 counter <= 10'd1;
 else
 counter <= counter + 10'd1;
 end

// This is the PWM signal.
always @(posedge clk)
 begin

================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
 if (reset == 1)
	q <= 1;
 else if (q == 12)
	q <= 1;
 else
	q <= q + 1;

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
 q <= 1; 
 else if (q == 12)
 q <= 1;
 else 
 q <= q + 1;
end

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 1;
	end
	else if(q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk, posedge reset)
begin
if(reset)
q<=4'b1;
else
if(q==4'b12)
q<=4'b1;
else
q<=q+1;
end

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk, posedge reset) 
begin
	if (reset) 
	begin
	 q<=4'b0001;
	end
	else if (q==12) 
	begin
	 q<=4'b0001;
	end
	else if (q==0) 
	begin
	 q<=4'b0001;
	end
	else
	q<=q+1;
end

================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
 if(reset)
 q <= 1;
 else if(q == 12)
 q <= 1;
 else
 q <= q + 1;
end

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) 
begin 
	if( reset == 1'b1 )
	begin
	q <= 4'b0001;
	end
	else
	if( q == 4'b0000 )
	begin
	q <= 4'b0001;
	end
	else
	if( q == 4'b0110 )
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 1'b1;
	end
end 

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
if(reset)
q<=1;
else if(q==12)
q<=1;
else
q<=q+1;
end 

================================================================
