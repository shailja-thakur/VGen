example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
	always @(in) begin 
	case(in)
	3'b000: pos=2'b00; 
	3'b001: pos=2'b01;
	3'b010: pos=2'b10;
	3'b011: pos=2'b11;
	endcase
	end 

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in)
if(in[2]) if(in[1]) if(in[0]) begin
pos[0] = 1'b1; pos[1] = 1'b0;
end else if(in[0]) begin
pos[0] = 1'b0; pos[1] = 1'b1;
end else if(in[1]) begin
pos[0] = 1'b1; pos[1] = 1'b1;
end else begin
pos[0] = 1'b0; pos[1] = 1'b0;
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
	casex ( in[1:0] )
	 2'b00 : pos <= 2'b10;
	 2'b01 : pos <= 2'b01;
	 default: pos <= 2'b00;
	endcase 
end 

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in)
	casex (in)
	//first 6 input bits
	4'b1001: pos = 2'b00; 
	4'b1011: pos = 2'b01; 
	4'b0111: pos = 2'b10; 
	4'b0011: pos = 2'b11; 
	
	//most signifigant input bit
	4'b1100: pos = 2'b10;
	default: pos = 2'b00;
	endcase

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(*)

casex(in)

3'bx0z : pos=2'bxx; 

3'b0xz : pos=2'bxx; 

3'bx1z : pos=2'b10;

3'b1xz: pos=2'b01;

3'bxz1 : pos=2'b00;

default : pos=2'b00; 

endcase


================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) begin
casex ( in ) 
	3'b000: pos = 2'b00;
	3'b001: pos = 2'b01;
	3'b010: pos = 2'b10;
	3'b011: pos = 2'b11;
	default: pos = 2'bzz;
	endcase 
	end

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or pos)
begin
if(pos == 3'b111)
out=2'b11;
else if((pos[1]&pos[0]) == 1)
out=1;
else
out=0;
end

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(in) begin
case( in )
3'b000: pos<=2'b00;
3'b001: pos<=2'b01;
3'b010: pos<=2'b10;
3'b011: pos<=2'b11;
default: pos<=2'b00;
endcase 
end

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @* 
begin
case( in )
	3'b000 : {pos,b} = 1'b0;
	3'b001 : {pos,b} = 1'b0;
	3'b010 : {pos,b} = 1'b0;
	3'b011 : {pos,b} = 1'b1;
	3'b100 : {pos,b} = 1'b0;
	3'b101 : {pos,b} = 1'b1;
	3'b110 : {pos,b} = 1'b1;
	3'b111 : {pos,b} = 1'b1;
endcase
end 

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) begin
casex( in )
3'b000: b = 2'b00;
3'b001: b = 2'b01;
3'b010: b = 2'b10;
3'b011: b = 2'b11;
3'b100: b = 2'b10;
3'b101: b = 2'b01;
3'b110: b = 2'b11;
3'b111: b = 2'b00;
default: b = 2'b11;
endcase
end
// When sel=0, assign a to out
always @(in) begin
case( in )
3'b000: a = 2'b00;
3'b001: a = 2'b01;
3'b010: a = 2'b10;
3'b011:
================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or pos)
begin
case (in)
2'b01 :
	case(pos)
	0 : pos = 2'b10;
	1 : pos = 2'b01;
	default : pos = 2'b00;
	endcase	
2'b10 :
	case(pos)
	0 : pos = 2'b11;
	1 : pos = 2'b10;
	default : pos = 2'b00;
	endcase	
default : pos = 2'b00;
endcase 
end

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// Then take the values of in and 'or' them to determine the output one at a time
always @( in ) 
casex ( in ) 
3'b0x0: pos = 2'b00; // low 4 bits 
3'b?X0: pos = 2'b10; // high 4 bits
3'b??x: pos = 2'b01; // default output = 1
default: pos = 2'bxx;
endcase

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// select HIGH or LOW priority
always @(in)
 begin
 casex(in)
 8'bxxxxxxx1: pos = 2'b11;
 8'bxxxxxxx0: pos = 2'b10;
 8'bxxxxxx00: pos = 2'b01;
 8'bxxxxxx01: pos = 2'b00;
 8'bxxxxx101: pos = 2'b11;
 8'bxxxx1011: pos = 2'b10;
 8'bxxxx1001: pos = 2'b01;
 8'bxxxx1000: pos = 2'b00;
 default: pos = 2'b00;
 endcase
 end

================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(pos or in or in[0]) // always have to use in[0] also
case(in)
3'b011:
begin
pos=2'b10;
end
3'b001:
begin
pos=2'b01;
end
3'b011:
begin
pos=2'b00;
end
default:;
endcase

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
case(in) 
3'b000: 
pos = 2'b00;
3'b001: 
pos = 2'b01;
3'b010:
pos = 2'b10;
3'b011:
pos = 2'b11;
endcase
end	 

================================================================
example-15: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( * ) 
case ( in[2] | in[1] | in[0])
1'b0 : pos = 2'b00;
1'b1 : pos = 2'b01; 
default : pos = 2'b11;
endcase

================================================================
example-16: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) 
case (in) 
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
default: pos = 2'b00;
endcase

================================================================
example-17: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or pos) begin
case(in)
3'b000: begin pos = 2'b11; end
3'b001: begin pos = 2'b10; end
3'b010: begin pos = 2'b01; end
3'b011: begin pos = 2'b00; end
3'b100: begin pos = 2'b10; end
3'b101: begin pos = 2'b01; end
3'b110: begin pos = 2'b00; end
3'b111: begin pos = 2'b11; end
default begin pos = 2'b00; end
endcase
end

================================================================
example-18: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (sel) begin
if (!sel) begin
pos[1]<=0;
pos[0]<=0;
end else if (!in[0]) begin
pos[0]<=0;
pos[1]<=1;
end else if (!in[1]) begin
pos[0]<=1;
pos[1]<=0;
end else begin
pos[0]<=1;
pos[1]<=1;
end
end

================================================================
example-19: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// when sel=0, output the preceding pixel.
always @(* in)
case(in)
3'b111: pos=2'b01;
3'b110,3'b101: pos=2'b10;
3'b011: pos=2'b11;
default : pos=2'b00;
endcase 

================================================================
example-20: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or pos) begin
if(pos==0) begin
out = in; 
end else if(in[1]==1) begin
out = 2'b00 ; 
end else begin
out = 2'b01 ; 
end
end

================================================================
example-21: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
 always@(in)
 // Whatever it is, it's your choice
 case(in)
 2'b00: begin pos=0; end
 2'b01: begin pos=1; end
 2'b10: begin pos=1; end
 2'b11: begin pos=0; end
 endcase

================================================================
example-22: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in)
begin
case( in )
3'b000: pos=2'b00;
3'b001: pos=2'b01;
3'b010: pos=2'b10;
3'b011: pos=2'b11;
default: pos=2'b00;
endcase
end

================================================================
example-23: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// assign output to output(0 0 0 r ... if more than 4 bits active)
//for (i = 0; i < 4; i++) -> FF(in[0], in[1], in[2], out[i]);
reg [3:0] out;
always @(in) begin
if(in[0]) out <= 0;
else if (in[1]) out <= 1;
else if (in[2]) out <= 2;
else out <= 3;
end 

================================================================
example-24: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @ *
begin
casex (in)
{2'b00}: pos = 2'b00;
{2'b01}: pos = 2'b01;
{2'b10}: pos = 2'b10;
{2'b11}: pos = 2'b11;
endcase
end

================================================================
example-25: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in )
begin
	case ({in})
	3'b000: begin
	pos <= 2'd0;
	end 
	3'b001: begin
	pos <= 2'd1;
	end 
	3'b010: begin
	pos <= 2'd2;	
	end 
	3'b011: begin
	pos <= 2'd3;	
	end 
	3'b100: begin
	pos <= 2'd4;	
	end 
	3'b101: begin
	pos <= 2'd5;
	end	
	3'b110: begin
	pos <= 2'd6;
	end 
	default: begin
	pos <= 2'd0;
	end
	endcase
end

================================================================
example-26: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or pos) begin
case(pos)
0 : begin out = 1'b0; b = in[2]; end
1 : begin out = 1'b0; b = in[1]; end
default : begin out = 1'b1; b = in[1]; end
endcase
end

================================================================
example-27: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
parameter no_priority = 3'd0;
parameter requirement = 3'd1;
parameter command = 3'd2;
parameter delaration = 3'd3;
always @ (in)
begin
casex (in)
no_priority:
begin
pos = 2'd0;
end
requirement:
begin
pos = 2'd1;
end
command:
begin
pos = 2'd2;
end
delaration:
begin
pos = 2'd3;
end
endcase
end

================================================================
example-28: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in or pos )

case ( in ) 

3'b000: pos <= 2'b00;
3'b001: pos <= 2'b01;
3'b010: pos <= 2'b10;
3'b011: pos <= 2'b10;
3'b100: pos <= 2'b10;
3'b101: pos <= 2'b11;
3'b110: pos <= 2'b11;
3'b111: pos <= 2'b00;
default : pos <= 2'b00;

endcase

================================================================
example-29: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or pos ) 
begin 
case(pos) 
0 : in <=3'b000;
1 : in <=3'b001;
2 : in <=3'b010;
3 : in <=3'b011;
endcase
end 

================================================================
example-30: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(*)
begin
	casex(in)
	4'bxxxz: pos <= 2'bxx;	
	4'bzzxx: pos <= 2'bzz;	
	4'bxxxx: pos <= 2'bx0;
	4'bzzzz: pos <= 2'bz0;
	4'bxxxxz: pos <= 2'bx1;
	4'bzzzzd: pos <= 2'bz1;
	3'bxxxz: pos <= 2'bxx;	
	3'bzzzz: pos <= 2'bzz;	
	3'bxxxx: pos <= 2'bx0;
	3'bzzzz: pos <= 2'bz0;
	3'bxxxxd: pos <= 2'bx1;
	3'bzzzzd: pos <= 2
================================================================
example-31: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in, pos) 
begin 
case(in)
0: begin pos=2'b00; end 
1,2,3,4: begin pos=2'b01; end
5,6,7: begin pos=2'b10; end
default: pos=2'b00; 
endcase 
end

================================================================
example-32: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
case( in ) 
0: pos = 0;
1: pos = 0;
2: pos = 1;
3: pos = 1;
4: pos = 2;
5: pos = 2;
6: pos = 2;
7: pos = 2;
8: pos = 3;
9: pos = 3;
10: pos = 3;
11: pos = 3;
endcase

================================================================
example-33: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in[1] or in[0]) 
	case(in)
	2'b00: pos = 2'b00;
	2'b10: pos = 2'b01;
	2'b11: pos = 2'b10;
	2'b01: pos = 2'b10;
	default: pos = 2'b00;
	endcase 

================================================================
example-34: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) 
	begin
	// MSBit first
	casex (in)
	2'bxx: 	pos = 2'bxx;
	2'b10, 2'b11, 2'b01, 2'b00: begin
	casex (in)	
	2'b10, 2'b11, 2'b01, 2'b00: 
	pos = 2'bxx;
	1'b1: 	pos = 2'b10; 
	1'b0: 	pos = 2'b11;
	default: pos = 2'b01;
	endcase
	end
	2'b00, 2'b01, 2'b11, 2'b10: begin
	casex (in)	
	2'b00, 2'b01, 2'b11,
================================================================
example-35: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( * )
	casex ( in )
	3'bxxx: pos <= 2'bx;
	3'b010: pos <= 2'b0;
	3'b011: pos <= 2'b1;
	3'b001: pos <= 2'bx;
	default: pos <= 2'bx;
	endcase

================================================================
example-36: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( * in )
	 if ( in[2] == 1'b0 ) begin
	 	// 2 (high) -> 00
	 	// one or more zeros
	 	pos <= 2'b00;
	 end 
	 else if ( in[1] == 1'b1 ) begin
	 	// 3 (low) -> 05
	 	// one or more ones
	 	pos <= 2'b05;
	 end
	 else if ( in[1] == 1'b0 ) begin
	 	// 1 -> 01
	 	// one or more ones
	 	pos <= 2'b01;
	 end

================================================================
example-37: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// and sel=0, assign a to out
always @(*)
case (in)
2'b00:
#1 pos = 2'bxx;
2'b01:
#1 pos = 2'b00;
2'b10:
#1 pos = 2'b01;
2'b11:
#1 pos = 2'b10;
endcase
assign pos = ~pos; 

================================================================
example-38: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge in or negedge in) 
case(in)
2'b00 :pos=2'b10;
2'b01 :pos=2'b01;
2'b10 :pos=2'b00;
endcase

================================================================
example-39: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out

always @ ( in ) begin
 case( in )
 
 2'b00: pos = 2'b11;
 // 2'b01;
 2'b10: pos = 2'b10;
 // 2'b11;
 2'b11: pos = 2'b01;
 
 endcase
 end 


================================================================
example-40: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) begin
case(in)
3'b000: begin
pos=2'b00;
end
3'b000: begin
pos=2'b01;
end
3'b000: begin
pos=2'b10;
end
3'b000: begin
pos=2'b11;
end
default: pos=2'b00;
endcase
end

================================================================
example-41: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (pos or in)
case (in)
3'b000 : pos = 2'bxx ;
3'b001 : pos = 2'b00 ;
3'b010 : pos = 2'b01;
3'b011 : pos = 2'b10;
3'b100 : pos = 2'b11 ; 
default : pos = {pos} ;
endcase


================================================================
example-42: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(in) begin
if (in[0]) begin
	pos = 2'b01;
	end
else if (in[1]) begin
	pos = 2'b10;
	end
else if (in[2])
	pos = 2'b11;
else
	pos = 2'b00;
end

================================================================
example-43: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*sel) 
if(sel==1) b <= in;

================================================================
example-44: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
	casex (in)
	0 : {pos} <= 0;
	1 : {pos} <= 1;
	2 : {pos} <= 2;
	3 : {pos} <= 9;
	4 : {pos} <= 8;
	5 : {pos} <= 75;
	6 : {pos} <= 33;
	7 : {pos} <= 6;
	8 : {pos} <= 9;
	9 : {pos} <= 9;
	default : {pos} <= 0;
	endcase
end

================================================================
example-45: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
 case (in)
 0: pos = 2'b00;
 1: pos = 2'b01;
 2: pos = 2'b10;
 3: pos = 2'b11;
 endcase
 end

================================================================
example-46: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(one_hot in)
case(one_hot)
3'b000 : out = 2'b00;
3'b001 : out = 2'b01;
3'b010 : out = 2'b10;
3'b011 : out = 2'b11;
default : out = 2'bxx;
endcase

================================================================
example-47: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
// De-compact the input
in[2] = in[1];
in[1] = in[0];
in[0] = 1'b0;

case(in) 
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
default: pos = 2'b00;
endcase
end

================================================================
example-48: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
	 // directions:
	 // invert to use AND
	casex( in )
	8'b xzxxyzz..zzlyyy : pos=01;
	8'b xxzyyzz..zgljie : pos=10;
	8'b zxxyyyyz..eis.. : pos=11;
	default : pos=00;
	 endcase // casex( in )

end // always @ (ready)


================================================================
example-49: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always_comb
begin
case(in%10)

0:pos=2'b00;
1:pos=2'b01;
2:pos=2'b10;
3:pos=2'b11;

endcase
end

================================================================
