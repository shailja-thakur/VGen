example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
if (reset)
q <= 4'b0;
else begin
if (slowena)
if (q < 4'b1001)
q <= q + 4'b0001;
end
end

// On the falling edge of the ena input, if the q reached 9, set the output q to 4'b0.
// Otherwise, set the output q to the previous value of the q.

always @(negedge slowly)
begin
if (q == 4'b1001)
assign q = 4'b0;
else
assign q = slowpoke;
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// (Note that it is ok to decrement q when the ena input is high and q is 9
// because in this case q will become 0 in the next clock cycle.)

always @(posedge clk) begin
if (reset)
q <= 4'b0000;
// note: this assumes q < 10 in all cases
else if (slowena && (q < 9))
q <= q + 1;
else
q <= q;
end 


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	// reset the counter (give it a default value of 0)
	q <= 4'b0;
	end
	else if (slowena)
	begin
	// increment the counter if ena is high
	q <= q + 1'b1;
	// for hexadecimal, use counter < 4
	// (we do not know what all the ones in the number 
	// we are trying to display will do..they are all working 
	// the same way)	
	if (q < 4)
	begin
	// if counter is less than 4, 
	// display a 0 instead of a 1
	q <= 4'b0;
	end
	else if (q > 9)
	begin
	// if counter is greater than
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset) 
	begin
 	 q <= 4'b0; end
	
 	else 
	begin 
 	 if (slowena)
 	 begin 
 	 if (q == 9) 
 	 q <= 4'b0;
 	 else 
 	 q <= q + 1;
 	end
 	end
 	end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
if(reset)
	q <= 0;
else if(slowena && q != 8)
	q <= q+1;
	
else if(slowena && activeCount==true) // cannot increment for a second
	q <= q;	
end

// On the spike input, keep track of number of times active is high 
always @(posedge clk)
begin
if(activeCount)
	q <= q+1;
else
	q <= 0;
end

// O the binary counter input, when it goes high to low or toggles, 
// this counter should advance to the next state
// n this counter should toggle and not advance

// You may assume that the signals are mutually exclusive
always @(posedge clk)
begin
if(binaryCount)
	q <= q-1;

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else if (slowena)
	begin
	if(q == 4'd9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
begin

if (reset == 1'b0) // Active low
	q <= 4'b0000; // Reset to all 0s

else if (slowena) // Active low
	begin
	if (q == 4'd9)
	q <= 4'b0000; // In this case, the same thing happens as in the previous rule, except that q gets reset to all 0s
	else
	q <= q + 1'b1; // Increment q
	end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)begin

case(reset)

1'b1: q <= 0;

1'b0: begin

if(slowena) begin

if(q != 'd9)begin
q = q + 1'b1;
end

else begin
q = 0;
end

end

end

endcase

end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) begin
	if (reset) q <= 0;
	else begin
	 if (slowena) begin
	 &q;
	 end
	end
	end

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
// if reset high, output low to g reset initially
// otherwise only continue if counter does not reach 9
	if (reset) q <= 4'b0;
	else if(slowena && q!=4'b1001)q <= q + 4'b0001;	
end

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
if(reset) begin
q<=0;
end
else begin
if(slowena && q<9) begin
q<=q + 1;
end
end

================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk)begin
	if (reset)
	q=0;
	else if(slowena) begin
	if (q == 9)
	q=0;
	else
	q=q+1;
	end
	else
	q=q;
	end


// Design implementation


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset) begin q <= 4'b0000; end
	else begin
	if (slowena)begin
	if (q == 4'd9) begin q = 4'd0; end
	else begin
	
end
end


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if(reset)
q <= 4'h0;

else if(slowena && q < 9)
q <= q + 1;
 
end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin

	if (reset) q <= 4'h0;
	else if (slowena && q != 4'h9) q <= q + 4'h1;
	else q <= q;
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Errors block writing to the q register if slowena input is not active.
always @(posedge clk)
begin
	if (~reset)
	begin
	q <= 4'b0000;
	end
	else 
	begin 
	
	if (~slowena)begin
	$display("slow enable bit can't be active");
	end
	
	else
	begin
	if (q == 9)
	q <= 0;
	else 
	q <= q + 1;
	end
	end
end

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset | !slowena)
	 	q <= 4'b0;
	else if (slowena && q !==9)
	 	q <= q + 1;
end


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset && slowena)
q <= q - 1'd1;

// If the input is high and the counter is 10, set the output to high. Apply bitwise
// xor to the previous output and the input to see if the value has changed. If the
// output is not equal to the input, increment q, otherwise output the value of q.
else if(q == 4'd9 && slowena)
q <= 4'd1;

else if(slowena)
q <= q + 4'd1;
end

================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
if (reset) begin
q <= 0;
end
else
begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 0;
	end
	else
	begin
	q <= q + 1;
	end
end
end

================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin: CLOCK
	if (reset)
	begin
	//counter clause
	q <= 4'b0;
	end//end of the reset condition. necessary to enable the decrementation.
	else//counter increments only when we see ena is on and q = 9
	begin
	if(slowena && q == 4'd9)
	begin
	q <= 4'b0;
	end
	else
	//counter increments
	begin
	q <= q + 4'h1;
	end
	end
end //CLOCK END


================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset==1); // If reset is high, then set the count slow down to 0.
 else begin
if (slowena == 1) begin
if (q != 9) begin
q = q +1;
end 
if (q == 9) begin
q = 0;
end 
end
end
end

================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin 
	if (reset) begin
//	else if (slowena)begin
	q <= #1 0;
//	else begin
//	end
	end
	else begin
	if (slowena) begin
	if (~&q) begin
	q <= #1 q + 1'b1;
	end
	end
	end
	
	end
//	end
// On the negative edge of the clock: reset the q output to 0.
always @(negedge clk) begin 
	q <= #1 4'b0;
end

================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
begin
 if(reset)
 q <= 4'd0;
	else
	begin
	if (slowena == 1'b1)
	begin
	if(q == 9)	
	q <= 4'd0;
	else
	q <= q + 4'd1;
	end
	end
end

================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @( posedge clk, posedge reset)
	begin
// if reset is active, clear. When complete, q should --x0.089x
// $display("Counter: %d", $time);
	if ( reset == 1'b1 ) begin 
	//counter starts as set to zero.
	q = 4'b0;
	end
	else begin
	if (slowena == 1'b1 && q < 4'b1001 ) begin //count only if ena is on and counter is not maxed out.
	// at each clock ena is always on and counter is incrementing slowly
	if ( clk == 1'b1 ) begin
	//counter is incremented on positive edge of clk, if mask is on.
	q[3] = q[2];
	q[2] = q[1];
	q[1]
================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
if (reset) q <= 4'b0;
else if (slowena && q < 4'b1001) q <= q + 1;

end


================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Note: this implementation only shifts the q register using Verilog left shift operators (<<).
// To manually count up we could simply sum the contents of each q register (count_slow+N). 
always @(posedge slTime)
begin
if (reset)
	q = 4'b0000;
else if (slowena && (q!==4'b1001))
	q = q << 1;
// for compulsory generation of the slow clock
else if (!(slowena & (q!==4'b1001)))
	q = 4'b0000;
end


================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
begin
if(reset)
q<=4'b0;
else
begin
if(slowena)
if(q<=4'b1001)
q<=q+1;
end
end


================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk or posedge reset)
begin
	if (reset)
	begin
	// if the reset is active then ...
	// 0 should be used as the output instead of the default 9.
	q = 0;
	end

	else if (slowena)
	begin
	
	if (q < 9)
	begin
	// The output won't be reset when the slowena is high and q is below 9.
	q = q + 1;
	end
	end
end

================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
begin
if(reset)
q <= 4'b0;
else begin
if(slowena)
if(q < 4'd9)
q <= q + 4'd1;
end // ~reset
end // ~reset
end // always


================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always@(posedge clk) begin
	if(reset | !slowena)
	begin
	q <= 4'b0;
	end
	else begin
	q <= q + 4'b1;
	end
end


================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @( posedge clk, posedge reset)

if (reset) begin

q <= 4'b0;

end else if (slowena) begin

if (q !== 4'b1001) begin

q <= q + 1'b1;

end

end


================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk or posedge reset)
begin
// If the reset signal is high, set q to 0
// Otherwise, if the ena signal is high and the output of the decade counter q is 9, then reset q to 0
	if(reset)
	begin
	q = 4'b0000;
	end
	 else
	begin
	if(slowena)
	begin
	//Output of the decade counter 9 times the input value as code 
	q = q + 4'b0110;
	end
	//If the signal isn't enabled or the decade counter is overflowed, then return 0
	if(!slowena)
	begin
	q = 4'b0000;
	end
	end
end
//Whenever the state changes; update the decade counter to 0
always@(posedge clk)
begin
	if(!
================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset==1'b1) begin
	q=4'b0000;
end else begin
	if( slowena == 1)begin
	if(q == 4'd9) begin
	q=4'b0000;
	end
	else begin
	q=q+1;
	end
	end

end
end


================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
if ((reset) || (slowena == 1'b0))
q = 0;
else begin
if (q == 4'd9 & slowena == 1'b1)
q = 0;
else q = q + 1;
end

// On the negedge of the clock, do not alter q.
// Simply use a non blocking statement.


================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
if(reset) q <= 4'b0000;

else if(slowena && q!= 9) q <= q+1;

end

// You must always initialize all variables.
initial begin
q <= 4'b0000;
end

================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always_ff @ (posedge clk) begin
if (reset) q <= #1 4'b0;
else if (slowena)
if (q == 9'd9)
q <= #1 4'b0;
else
// #1 required to ensure that values are assigned before next statement gets evaluated
q <= #1 q + 1'b1;
end


================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always@( posedge clk, posedge reset ) 
begin
	if ( reset ) 
	
	// Do nothing? reserved for another meaning.c
	
	// If input is not high, then set output to 0.
	else if ( !slowena ) // ( slowena ? 9'b0111_1111 : 9'b0 ) 
	begin
	
	// Otherwise if the input is high, increment the value of q.
	q <= ( q == 9 ) ? 9'b0 : q + 1'b1;
	
	end
end

================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The final output is q+1.

always @(posedge clk or posedge reset) begin
	if (reset)
	q=0;
	else
	begin
	if (slowena==1&q!=9)
	q=q+1;
	end
	end



================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	 // Here's what this block does:
	 // if the reset is high, set q to 0.
	 q <= 4'd0; 
	end
	else begin
	 // if reset is low OR if the output is 9, set q to 0.
	 if (q == 9 || !slowena) begin
	 // if the current value of q == 9, or if slowena is low, set q to 0.
	 q <= 4'd0;
	 end
	 // if the output is less than 9, increment q.
	 else begin
	 // if the output is not currently 9, increment q.
	 q <= q + 4'd1; 
	 end
	 end
	end

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
casez ({clk, reset, slowena})
8'b1xxx01xx: q <= q; // Since the output range is 0 to 9, no need to OR the three bits
8'b1xxx10xx: if(q != 9)
q <= q + 1; // since the output range is 0 to 9, no need to OR the three bits
default: q <= 4'b0000;
endcase
end

================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) begin
 if (reset)
 q <= 4'h0;
 else if (slowena) begin
 q <= q + 4'h1;
 end
end


================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always@(posedge clk) begin : step
	q <= (reset & slowena & ~&q) ? 0 : q + 1;
end


================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Whenever the output q is 9, then the output q 
// is assigned to 0.

always @(posedge clk ) 
begin
if (~reset) begin
 q <= 'd0;
end

else begin
if (slowena && q != 'd9) begin
q <= q + 'd1;
end

else begin
q <= 'd0;
end

end


================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or negedge reset) 
begin

if (~reset) // type of operator is not important; negative operator handled shlifty way too
 // when reset equals to 0 the output will be zero.
q <= 4'b0;

else if (slowena)

// when ena is high it will keep incrementing until it reaches 9.
begin
if (q == 4'b1000) // q at its highest value; "&&" operator will've to repeat it's overall effects
q <= 0; 
else
q <= q + 1'b1; // At q's value{enas test bar(q)}; they will perform like "||" operation and will never stop at 9th number. 
// operation will start again from 0.
end

end


================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
if(reset)
	q <= 1'b0;
else begin
	if(slowena && (q != 4'd9))
	begin
	q <= q + 1'b1;
	end
end
end

================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk, negedge reset)
	begin
	if (reset == 1'b0) // Reset case
	q <= 4'b0001;
	else if (&count == 1) // Ensure that count stays positive
	// Increment the output
	// (if ena is high and q is not 9)
	if (slowena == 1'b1 && q != 4'b1001) // (this is two-bit and)
	q <= q + 1;
	end // ~reset

================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
if (reset)
q <= 4'd0;
else
begin
 if (slowena)
 begin
if (q == 9)
q <= 4'd0;
else
q <= q + 4'd1;
 end
 end
end


================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin	
	if (reset) begin
	
	// reset
	q <= #1 4'b0;	
	
	end
	
	else if (slowena && (q < 9)) begin
	
	// increment
	q <= #1 q + 1'b1;
	
	end
end
	

================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
if (reset)
q <= 0;
else begin
if(slowena) begin // note: ctln is not safe item. presumably D addessing coproccessors. 
	if (q < 9)
	q <= q + 1;
	else
	q <= 0;
end
	end
end


================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(clk,reset,q,slowena) begin
case ({reset,slowena,q})

4'b0101: q <= q + 1'b1;
4'b0111: q <= {q[2:0],1'b0};
default: q <= 4'bxxxx;

endcase
end


================================================================
