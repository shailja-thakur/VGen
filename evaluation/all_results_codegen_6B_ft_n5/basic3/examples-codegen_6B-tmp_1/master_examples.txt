example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
case(in)
	3'b000: pos=2'b00;
	3'b001: pos=2'b01;
	3'b010: pos=2'b10;
	3'b011: pos=2'b11;
	// don't care for unexpected input
	default: pos=2'bxx;
endcase

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, sel=b
// If sel=b, take contents of pos
// Fill pos to 1+ when input is 2 or 3
always @(*) 
begin[prefix]0 pos = {sel[1], (sel[1] & in[2]) | (sel[0] & sel[1] & in[1]) | (sel[0] & in[1])};
endprefix

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
parameter sel=1;
always @ (in or pos) 
	begin 
	case(in) // case in[2:1]:
	3'b11: pos=2'b00;
	3'b10: pos=2'b01;
	3'b01: pos=2'b10;
	3'b00: pos=2'b11;
	//default pos=2'bxx;
	endcase
	end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in or sel )
begin 
	if (sel) 
	begin 
	case (in) 
	3'b000: pos=2'bcc; 
	3'b001: pos=2'b01; 
	3'b010: pos=2'b10; 
	3'b011: pos=2'b01; 
	3'b100: pos=2'b10; 
	3'b101: pos=2'b00; 
	3'b110: pos=2'b10; 
	3'b111: pos=2'b11; // don't care
	endcase 
	end 
end 

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or pos)
case(pos)
2'b00: out = in; // Priority applies to case 0
2'b01: out = in; // Priority approximates case 1
2'b10: out = 2'b01; // Priority approximates case 2
endcase

================================================================
