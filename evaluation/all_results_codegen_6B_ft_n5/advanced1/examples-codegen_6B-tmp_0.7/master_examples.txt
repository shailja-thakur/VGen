example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = {b[6:0],b[7]};

// assigns the value of b to b_signed if b is a signed value

wire signed [5:0] sum_msb = a[6:0] + b_signed[6:0]; // adds a and b, and stores the carry in the seventh bit of s

wire [6:0] sum_lsb = a[7:1] + b_signed[5:1]; // adds a and b, and stores the carry in the first bit of s

// assigns the values of a and b to s

assign s = {sum_msb[5:0], sum_lsb[6:0]};

//assigns the value of a and b to s

assign overflow = (a[7] & b_signed[7
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_sign;
wire [7:0] b_two;
wire [7:0] c;
wire carry;


assign b_two = {~b[6],b[5],b[4],b[3],b[2],b[1],b[0],1'b0};
assign b_sign = b[7] ? b_two : b;

adder8 add1(a,b_sign,c,carry);

assign s = c[7] ? {a[6:0],b_sign} : {a[6:0],b};

assign overflow = carry ^ (a[7]^b_sign);


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed; 
wire signed [7:0] signed_a_interm; 

assign b_signed = ~b;
// the above statement is a one-dimensional array of 8 elements, 8'b or 8'b

//assign signed_a_interm = a ^ b_signed;
// the above statement is a one-dimensional array of 8 elements, 8'b or 8'b

assign signed_a_interm = a + b_signed + 8'b00000001; 

assign s = signed_a_interm[7:0];
// s is the signed sum
//assign overflow = (a[7] & b_signed[7]) | (b[7] & signed_a_interm[7]);
//nand(overflow, a[7], b_signed[
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//s=a+b;

//if(s[7]==1)
//begin 
//assign overflow=1;
//end
//else if(s[7]==0)
//assign overflow=0;
//end

//
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b; // This is a signed adder
assign overflow = ((~a[7]&b[7])&s[7]) | ((a[7]&b[7])&(a[7]^s[7])); // This is a VHDL 2.


================================================================
