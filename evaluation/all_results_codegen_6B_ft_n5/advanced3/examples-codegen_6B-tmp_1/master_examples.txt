example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state,x,reset)
case(present_state) 
IDLE:
	if (x) next_state=S1; 
	else next_state=IDLE;
S1: 
	if (x) next_state=S10; 
	else next_state=IDLE;
S10:
	if (x) next_state=S101; 
	else next_state=IDLE;
S101: 
	if (x) next_state=S1; 
	else next_state=IDLE;
default: next_state=IDLE;
endcase

always @(posedge clk, posedge reset) 
if (reset) present_state=IDLE; 
else present_state=next_state; 

assign z=(present_state==S101); 
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( present_state,x ) begin : autoblock 
	case( present_state ) 
	IDLE:
	if( reset ) 
	case( x )
	1'b0: to_state <= S1;
	1'b1: to_state <= S10;
	endcase
	S1: begin 
	case( x )
	1'b0: to_state <= S1;
	1'b1: to_state <= S10;
	endcase
	to_state <= S2;
	end
	S2: begin 
	case( x )
	1'b0: to_state <= S3;
	1'b1: to_state <= S10;
	endcase
	to_state <= S4;
	end
	S4: begin 
	case(
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin 
if(reset==1'b1) 
	present_state<=IDLE;
else 
	present_state<=next_state;
end 

always @(present_state or x)
begin 

case(present_state)

	IDLE: 
	begin 
	if(x==1'b1) 
	begin
	next_state= S1 ;
	end 
	else 
	begin
	next_state= IDLE ;
	end 
	end 
	 
	S1: 
	begin 
	if(x==1'b1) 
	next_state= S10 ;
	else 
	next_state= IDLE ;
	end 
	
	S10: 
	
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) // set the next state for state 101 
if(next_state != 'd3) // the state for state 101 is not 'd3
begin 
case(next_state) // next state for state 101
2'b11: next_state = 'd3;
2'b01: next_state = 'd2;
endcase
end
else 
begin 
case(next_state) // next state for next state in case of 2'b11
2'b11: next_state = 'd1;
2'b01: next_state = 'd0;
endcase
end
// next state for state 1 
// oputput logic 
case(present_state) // case stes for output logic 
2'b11: z = 1;
2'b01: z =
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
present_state = next_state;
end 

always @(*) 
begin 
 //if the source or destination data are not available or the channel is already open
 if (data_out[1]==1'b0 ) 
	next_state = IDLE; 
 //if SRV is closed, the master should send EOP and SD_complete, let tb_categorize know
 else if (dest_channel_valid[1]==0) 
	next_state = S1; 
 //if channel is not open, but SRV is requesting directory information fork this task and
 else if (get_txn_out==1'b1) begin
 	next_state = S1; 
 end 
 //for all other cases, see if the master is sending directory/IOD type commanDS over the
================================================================
