example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk or posedge reset )
begin
if ( reset )
 
q <= 1;

else if ( q == 12 )
 
q <= 1;

else 

q <= q + 1;
end 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// Note that the order in which the statements are written is very important and this relies on the stated ranks. 
always @(posedge clk or posedge reset) begin
	if (reset) begin // on posedge reset then q <=1 
end else if (q == 12) begin // The edge case is that q is 12. The if (q == 12) then will not triger. 
	q<= 1; // The according rising edge edge of clk is not there yet, instead there is a nan. 
end else begin // if q is not 12 then begin
 	q = q+1; // The per-posedge-edge addition will trigger. 
end
 

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset) 
	begin
	q <= 1;
	end 
	else if (q == 12) 
	begin 
	q=1; 
	end 
	else 
	begin 
	q= q + 1;// increment q 
	end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	q<=3'b000;
	else
	if(q==12'b1111_1111_1111)
	q<=3'b000;
	else
	q<=q+1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) // At rising edge of clock
begin
	case({reset,q[3:0]}) // {reset,f}=0 와 아닌가? {~reset,1,2,3}=3 이라서 case 를 수행하게 되잇음던지 그런식으로 플립플하는게 서모환을 제곧하기 위한 코드입니다.
	{1'b0,4'b1110}: q<=q; //무어
================================================================
