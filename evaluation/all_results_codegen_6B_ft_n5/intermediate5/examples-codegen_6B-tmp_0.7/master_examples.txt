example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
	out<=0;
else if (load)
	out<=data;
else begin
	//$display("amount = %d",amount);
	out <= {out[6:0],out[7]};
	//$display("out = %b",out);
	end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
if (load) out<=data;
else begin
	if(amount==3'd0) out<=out;
	else out<={out[6:0],out[7]};
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] out_d;
always@(posedge clk)
	begin
	if(reset)
	begin
	out<=8'b0;
	out_d<=8'b0;
	end
	else if(load)
	begin
	out<=data;
	out_d<=out;
	end
	else
	begin
	out_d<={out_d[6:0],out_d[7]};
	out<={out_d[7],out_d[6:1]};
	end
	end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if (load)
	begin
	out<=data;
	end
	else if (amount==3'd3) //as the key is 3 bits, we have to iterate 3 times to get the final output
	begin
	out<={out[5:0],out[6]};
	end
	else if (amount==3'd4)
	begin
	out<={out[4:0],out[5]};
	end
	else if (amount==3'd5)
	begin
	out<={out[3:0],out[4]};
	end
	else if (amount==3'd6)
	begin
	out<={out[2:0],out[3
================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
if(reset)
	begin
	out <= 0;
	end
else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	end
	end

================================================================
