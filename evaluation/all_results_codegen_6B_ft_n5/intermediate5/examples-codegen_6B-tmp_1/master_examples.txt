example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
 if (load) out = data ;
 else begin
	if(amount == 3'd0) out = out;
	else if(amount == 3'd1) out = {out[6:0],out[7]};
	else if(amount == 3'd2) out = {out[5:0],out[7:6]};
	else if(amount == 3'd3) out = {out[4:0],out[7:5]};
	else if(amount == 3'd4) out = {out[3:0],out[7:4]};
	else if(amount == 3'd5) out = {out[2:0],out[7:3]};
	else if(amount == 3'd6) out = {out[1:0],out[7:2]};
	else if(amount
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge areset)
begin
	if (areset) 
	begin
	out = 8'b00000000;
	end
	if (load)
	begin
	out = data;
	end
	else 
	begin
	if (amount == 3'b111)
	out = 8'b00000000;
	else
	begin
	//$display($time," amount = %b",amount);
	//$display($time," ROTATE");
	out = {out[0],out[7:1]};
	end
	end
	end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign out = load ? data : rotate(out,amount);
//anti_rotate would be the inverse of rotate, used to "undo" the rotation
assign rotate = (~load) & (amount) & data[7];

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
	if(reset==1)
	begin
	out <= 0;
	end
	else if(load==1)
	begin
	out<=data;
	end
	else 
	begin
	out<={1'b0,out[6:0],amount};
	//out<={amount,out[5:0],1'b0};
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(load)
	out = data;
	else begin
	case(amount) // amount rotations
	3'd1: out = {out[6:0],out[7]};
	3'd2: out = {out[5:0],out[6]};
	3'd3: out = {out[4:0],out[5]};
	3'd4: out = {out[3:0],out[4]};
	endcase
	end
	end

================================================================
