example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load==1'b1)
	q<=data;
	else
	begin
	if(ena==1'b1)
	begin
	if(amount==2'b00)
	q<=q<<1;
	else if(amount==2'b01)
	q<=q<<8;
	else if(amount==2'b10)
	q<=q>>1;
	else if(amount==2'b11)
	q<=q>>8;
	end
	end
	end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
//	if (ena)
	 begin
	q[63:0] = data;
	end
	end
	else if(ena)
	begin
//	if (ena)
	begin
	if(amount==2'b00)
	begin
	//logic for shifting left by 1 bit
	q[63:1] = q[62:0];
	end
	else if(amount==2'b01)
	begin
	//logic for shifting left by 8 bits
	q[63:8] = q[56:0];
	end
	else if(amount==2'b10)
	begin
	//logic for shifting right by 1 bit
	q[63:1] = q[62:0]<<1;
	
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if (ena) begin
	case (amount)
	2'b00: q <= {q[62:0],1'b0};
	2'b01: q <= {q[55:0],8'b0};
	2'b10: q <= {q[63],q[63:1]};
	2'b11: q <= 64'b0;
	endcase
	end
	else if (load)
	q <= data;
	else
	q <= q;
 end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)begin
	if(load) begin
	q <= data;
	end
	else if (ena) begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)begin
	if(load)
	begin
	q[63:0]<=data[63:0];
	end
	
	if(ena)
	begin
	//performs operation
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	
	if(amount == 2'b01)
	begin
	q[63:8] <= q[56:0];
	q[0] <= q[63];
	end
	
	if(amount == 2'b10)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	
	if(amount == 2'b11
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk) begin
	 if (load) begin
	 q<=data;
	 end
	 if (ena) begin
	 
	 case(amount)
	 2'b00:	q<=q<<1;
	 2'b01:	q<=q<<8;
	 2'b10:	q<=q>>1;
	 2'b11:	q<=q>>8;
	 endcase
	 end
	 
	 end
	 
	 
	 
	 

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load == 1'b1)
	begin
	q <= data;
	end
	else if (ena == 1'b1)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[31];
	q[31:1] <= q[30:0];
	q[63:32] <= q[31:0];
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[31:0];
	q[0] <= q[31];
	q[31:1
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
if(load)
begin
	q <= data;
end
else if(ena)
begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else if(amount == 2'b10)
	begin
	q[63:0] <= q[63:0] >> 1;
	q[63] <= q[0];
	end
	else
	begin
	q[63:0] <= q[63:0] << 1;
	q[63
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	q <= data;
	if(ena)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	if(amount == 2'b01)
	q <= q << 8;
	if(amount == 2'b10)
	q <= q >> 1;
	if(amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if(load) begin
	q <= data;
	end
	else begin
	if(ena) begin
	case(amount)
	2'b00:
	begin
	q[1:0] <= q[63:62];
	q[63:62] <= q[63:62] + 1'b1;
	end
	2'b01:
	begin
	q[7:0] <= q[63:56];
	q[63:56] <= q[63:56] + 8'b1;
	end
	2'b10:
	begin
	q[1:0] <= q[63:62];
	q[63:62] <= q[63:62] - 1'b1;
	end
	2'b11:
	begin
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) 
	begin
	if (load)
	begin
	q <= data;
	end
	else if (ena) 
	begin
	case(amount)
	2'b00:
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	2'b01:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	2'b10:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] >> 1;
	end
	2'b11:
	begin
	q[0] <= q[0];
	q[63:1]
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	
	if (load == 1)
	begin
	q <= data;
	end
	else if (ena == 1)
	begin
	if (amount == 2'b00)
	begin
	q[0] <= q[63];
	q[1] <= q[62];
	q[2] <= q[61];
	q[3] <= q[60];
	q[4] <= q[59];
	q[5] <= q[58];
	q[6] <= q[57];
	q[7] <= q[56];
	q[8] <= q[55];
	q[9] <= q[54];
	q[10] <= q[53];
	q[11] <= q[52];
	q[12] <= q
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	q<=data;
	else 
	begin
	if(ena)
	begin
	case(amount)
	2'b00: q<={1'b0,q[62:1]};
	2'b01: q<={8'b0,q[55:0]};
	2'b10: q<={q[63], q[63:1]};
	2'b11: q<={8'h0,q[63:0]};
	endcase
	end
	end
	end

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load) q <= data;
	else if(ena)
	begin
	if(amount == 2'b00) q <= q << 1;
	else if(amount == 2'b01) q <= q << 8;
	else if(amount == 2'b10) q <= q >> 1;
	else if(amount == 2'b11) q <= q >> 8;
	end
	end

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	//	$display("advshift : loading %b into q in time %t", data, $time);
	//	$display("advshift : clk is %b at time %t", clk, $time);
	//	$display("advshift : q is %b at time %t", q, $time);
	//	$display("advshift : ena is %b at time %t", ena, $time);
	//	$display("advshift : amount is %b at time %t", amount, $time);
	//	$display("advshift : clk is %b at time %t", clk, $time);
	end
	
	if (ena)
	begin
	//	$display("advshift: enabling shift in time %
================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load) q<= data;
	else begin
	if(ena) begin
	case(amount)
	2'b00: q <= q<<1;
	2'b01: q <= q<<8;
	2'b10: q <= q>>1;
	2'b11: q <= q>>8;
	endcase
	end
	end
	end

================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if (load) begin
	case(amount)
	2'b00: q<=data;
	2'b01: q<=data<<8;
	2'b10: q<=data>>8;
	2'b11: q<=data<<56;
	endcase
	end
	
	else if (ena) begin
	// q<=q(q-1)
	case(amount)
	2'b00: q<=q<<1;
	2'b01: q<=q<<8;
	2'b10: q<=q>>8;
	2'b11: q<=q<<56;
	endcase
	end
	else begin
	q<=q;
	end
	end

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if (load == 1'b1)
	begin
	q <= data;
	end
	else if (ena == 1'b1)
	begin
	if (amount == 2'b00)
	begin
	// shift left by 1 bit
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b01)
	begin
	// shift left by 8 bits
	q[0] <= q[56];
	q[56:1] <= q[55:0];
	q[63:8] <= q[63:0];
	end
	else if (amount == 2'b10)
	begin
	// shift right by 1 bit
	q[63] <= q[0];
================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always@(posedge clk) begin
	if(load) begin
	q <= data;
	end
	else begin
	if(ena) begin
	if(amount == 2'b01) begin
	q <= q << 1;
	end
	else if(amount == 2'b10) begin
	q <= q >> 1;
	end
	else begin
	q <= q;
	end
	end
	end

================================================================
example-20: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk) begin
 if (load) begin
 q <= data;
 end
 else begin
 if(ena) begin
 case(amount)
 2'b00: q <= q << 1;
 2'b01: q <= q << 8;
 2'b10: q <= q >> 1;
 2'b11: q <= q >> 8;
 endcase
 end 
 end
end

================================================================
example-21: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	q <= data;
	else if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	else if (amount == 2'b01)
	q <= q << 8;
	else if (amount == 2'b10)
	q <= q >> 1;
	else if (amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-22: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load)
	q <= data;
	else if(ena) begin
	q <= {q[62:0],1'b0};
	end
	end

================================================================
example-23: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q<=data;
	end
	else
	begin
	if(ena)
	begin
	if(amount==2'b00)
	begin
	q[0] <= q[63];
	q[63:1]<= q[62:0];
	end
	
	if(amount==2'b01)
	begin
	q[0] <= q[63];
	q[63:8]<= q[56:0];
	end
	
	if(amount==2'b10)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	
	if(amount==2'b11)
	begin
	q[
================================================================
example-24: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(ena) begin
	if(amount == 2'b00) begin
	q <= q << 1;
	end
	if(amount == 2'b01) begin
	q <= q << 8;
	end
	if(amount == 2'b10) begin
	q <= q >> 1;
	end
	if(amount == 2'b11) begin
	q <= q >> 8;
	end
	if(load) begin
	q <= data;
	end
	end
	end

================================================================
example-25: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) 
	begin
	if (load)
	q <= data;
	else if (ena)
	begin
	if (amount == 2'b00) //left shift by 1 bit
	q <= {q[62:0], q[63]};
	else if (amount == 2'b01) //left shift by 8 bits
	q <= {q[56:0], q[63:56]};
	else if (amount == 2'b10) //right shift by 1 bit
	q <= {q[0], q[63:1]};
	else //right shift by 8 bits
	q <= {q[0], q[63:1]};
	end
	end

================================================================
example-26: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
 if(load)
 q <= data;
 else
 begin
 if(ena)
 begin
 case(amount)
 2'b00: q <= q << 1;
 2'b01: q <= q << 8;
 2'b10: q <= q >> 1;
 2'b11: q <= q >> 8;
 default: q <= q;
 endcase
 end
 else
 q <= q;
 end
 end

================================================================
example-27: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin

if (load == 1'b1) begin
	//assign q = data;
	q <= data;
	end
	
else if (ena == 1'b1) begin
	
	if (amount == 2'b00) begin
	// Left Shift
	// first bit shifted out = 1'b0
	// final bit shifted out = 1'b0
	q[0] <= q[1];
	q[63:1] <= q[62:0];
	end
	
	else if (amount == 2'b01) begin
	// Left Shift
	// first bit shifted out = 1'b0
	// final bit shifted out = 1'b1
	q[0] <= 1'b0;
	q[63:1] <= q[62:0] + 1
================================================================
example-28: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	
	if (load)
	begin
	// shifts the input along the amount line on the negative edge of the clock
	// and assigns it to the output shift in q
	q <= data <<< (-amount);
	end
	else if (ena)
	begin
	// shift q along the amount line on the positive edge of the clock
	q <= q >> amount;
	end
	end

================================================================
example-29: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 reg [63:0] q_temp;
 always @ (posedge clk) begin
 if(load)
 q_temp <= data;
 else if(ena)
 q <= q_temp;
 end
 

================================================================
example-30: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk) begin
 if (load) q <= data;
 else begin
 if (ena) begin
 case(amount)
 2'b00: q <= q << 1;
 2'b01: q <= q << 8;
 2'b10: q <= q >> 1;
 2'b11: q <= q >> 8; // if bits are all 1's, q = -1.
 endcase
 end
 end
 end
 endmodule
// PART 2 BELOW:

module advshift_tb();
reg clk, load, ena, [1:0] amount;
reg [63:0] data;
wire [63:0] q;
integer i;

advshift dut(clk, load, ena, amount, data, q);
initial begin
$dumpfile("advshift.vcd"); $dumpvars(0
================================================================
example-31: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin

if(load)
	q <= data;
	// shift left or right, depending on amount.
	// if left, shift 1 bit.
	// if right, shift 8 bits.
else if (ena)
	begin
	if(amount == 2'b00 | amount == 2'b11)
	q <= q << 1;
	else
	q <= q << 8;
	end
	// set output to input.
	// else, do not perform any shifting, and return input unchanged.
	
end

================================================================
example-32: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:0] <= q[63:0] << 1; // shift left by 1 bit.
	end
	if(amount == 2'b01)
	begin
	q[63:0] <= q[63:0] << 8; // shift left by 8 bits.
	end
	if(amount == 2'b10)
	begin
	q[63:0] <= q[63:0] >> 1; // shift right by 1 bit.
	end
	if(amount == 2'b11)
	begin
	q[63:0] <= q[63
================================================================
example-33: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	q <= data;
	end 
	if(ena)
	begin
	if(amount == 2'b00)
	begin 
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
end

================================================================
example-34: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
	if(load)
	begin
	q <= data;
	end
	
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	
	else if(amount == 2'b11)
	begin
	q <= q >> 8;
	end
	
	end
	

================================================================
example-35: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	q <= data;
	else begin
	if(ena)
	begin
	case(amount)
	2'b00:
	q <= q << 1;
	2'b01:
	q <= q << 8;
	2'b10:
	q <= q >> 1;
	2'b11:
	q <= q >> 8;
	endcase
	end
	end
end

================================================================
example-36: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
if(load)
	q <= data;
else begin
	if(ena)
	begin
	// Shift left by 1 bit
	if(amount == 2'b00)
	begin
	q[0] <= q[1];
	q[1] <= q[2];
	q[2] <= q[3];
	q[3] <= q[4];
	q[4] <= q[5];
	q[5] <= q[6];
	q[6] <= q[7];
	q[7] <= q[8];
	q[8] <= q[9];
	q[9] <= q[10];
	q[10] <= q[11];
	q[11] <= q[12];
	q[12] <= q[13];
	
================================================================
example-37: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always@(posedge clk) 
 begin
	if(load == 1'b1)
	begin
	q <= data;
	end
	else
	begin
	if(ena == 1'b1)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[63:1] >> 1;
	q[0] <= q[0];
	end
	else
	begin
	q
================================================================
example-38: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin 
	//if (ena) begin
	q <= data;
	//q <= 64'h0000000000000000;
	end 
	else if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63] ^ q[63:1];
	end
	if (amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	q[0] <= q[63:8] ^ q[63:8+1];
	end
	if (amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q
================================================================
example-39: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	//	q <= data;
	end
	else 
	begin
	if(ena)
	begin
	//	q <= q[63:amount];
	end
	end
end

================================================================
example-40: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if (load)
	begin
	case (amount)
	2'b00: q=data;
	2'b01: q=data<<1;
	2'b10: q=data>>1;
	2'b11: q=data>>>1;
	endcase
	end
	else if (ena)
	q=q<<amount;
	else 
	q = q;
	end

================================================================
example-41: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@ (posedge clk)
begin 
if(load)
	q <= data;
else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[1];
	q[1] <= q[2];
	q[2] <= q[3];
	q[3] <= q[4];
	q[4] <= q[5];
	q[5] <= q[6];
	q[6] <= q[7];
	q[7] <= q[8];
	q[8] <= q[9];
	q[9] <= q[10];
	q[10] <= q[11];
	q[11] <= q[12];
	q[12] <= q[13];
	q[13] <= q[14];
================================================================
example-42: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if (load == 1'b1) begin
	q <= data;
	end
	if (ena == 1'b1) begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end

================================================================
example-43: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin
	if(load == 1)
	begin
	//	q <= data;
	end
	
	else
	begin
	
	if(ena == 1)
	begin
	case(amount)
	2'b00:
	begin
	q[1:0] <= q[63:62];
	q[63:2] <= q[61:60];
	end
	2'b01:
	begin
	q[1:0] <= q[63:62];
	q[63:2] <= q[59:56];
	end
	2'b10:
	begin
	q[1:0] <= q[63:62];
	q[63:2] <= q[55:52];
	end
	2'b11:
	begin

================================================================
example-44: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(ena) begin

	case(amount)
	2'b00: q <= {q[62:0],1'b0};
	2'b01: q <= {q[55:0],8'b0};
	2'b10: q <= {q[63],q[63:1]};
	2'b11: q <= data;
	endcase
	end
	else if(!ena) begin
	q <= q;
	end
	else begin
	q <= q;
	end
	end
	

================================================================
example-45: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin

if(ena)
begin
// shift left or right.
if(amount == 2'b00)
q = {data[62:0], 1'b0};
else if(amount == 2'b01)
q = {data[55:0], 8'b0};
else if(amount == 2'b10)
q = {data[63], data[63:1]};
else if(amount == 2'b11)
q = {{data[63], data[63:1]}, data[63:1], data[63:1], data[63:1], data[63:1], data[63:1], data[63:1], data[63:1], data[63:1]};
end

else if(load)
q = data;

end


================================================================
example-46: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ ( posedge clk )
	begin
	if(load == 1'b1)
	begin
	q <= data;
	end
	else if (ena == 1'b1)
	begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end

================================================================
example-47: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// if load is high, shift left/right by 1 bit.
// if ena is high, shift left/right by 8 bits.
always @ (posedge clk)
begin
	if (load) begin 
	// if load is high, assign data[63:0] to shift register q.
	// if ena is high, shift left/right by 8 bits.
	q <= {data[62:0], 1'b0};
	end
	else if(ena) begin
	// if ena is high, shift left/right by 1 bit.
	q <= {q[62:0], 1'b0};
	end
	// if ena is low, retain value of q.
	end
	// if load is low, retain value of q.
end



================================================================
example-48: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	//load data into the shift register
	q <= data;
	$display("Shifted: %b \n",q);
	end
	else if(ena)
	begin
	//shift the register
	q <= q << amount;
	$display("Shifted: %b \n",q);
	end
end

================================================================
example-49: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if (load) begin
	q <= data;
	end
	else begin
	if (ena) begin
	case(amount)
	2'b00:
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	2'b01:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	2'b10:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] >> 1;
	end
	2'b11:
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:
================================================================
