example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// setup state 0
parameter A=1'b0; 
parameter B=1'b1; 
always @(present_state or in)
	case(present_state)
	A: if(in) next_state = A;
	B: if(in) next_state = B;
	endcase
// State 0 code
always @(posedge clk or posedge reset)
	if(reset)	
	begin
//	if(out)
	state <= 4'b0000;
	end
	else	
	state <= next_state;	

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state = present_state & ~in;
assign out = present_state;
always @(*) begin 
	if (reset) begin // Synchronous code first determines the next state, then sets the output
	 	//present state = next state;
	 	case(next_state)
	 	//0 and 1; can be written as 01 and 10
	 	2'b01: present_state = 2'b10;
	 	2'b10: present_state = 2'b01;
	 	endcase
	 	//setting the values of out and other variables
	 	case(next_state)
	 	//0 and 1; can be written as 01 and 10
	 	2'b01:
	 	assign out = 1'b0;
	 	2'b10:
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// if you're in state 0 and in is 0, then move to state 1, on the next clock edge it should goto state 0
// if you're in state 1 and in is 0, then move to state 0, on the next clock edge it should goto state 1
always @(posedge clk or posedge reset)
	if (reset) begin // if this statement is reached during reset, then both present and next are 0s.
	 //this means we have a reset, meaning we are going from state 0 -> state 1.
	present_state <= next_state;
	end
	else begin 
	//if this statement is reached during a clock edge, then both present and next are 1s
	//if next is 1 and present is 0, then this means we have a new input and we're going from state 1 -> state 0
	present_state <= next_state;
	//if next
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @ (posedge clk or posedge reset)
	begin
	// If the reset is active, return to state 0
	if (reset)
	present_state = 0;
	else
	present_state = next_state;
	case(present_state)
	0: if (in) next_state = 0; else next_state = 1;
	1: if (in) next_state = 0; else next_state = 1;
	endcase
	end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	present_state=next_state;
	end
end
always @(next_state or in)
begin 
	case(next_state)
	0: if(in)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
	1: if(in)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
endcase
end
assign out=(present_state==0);

================================================================
