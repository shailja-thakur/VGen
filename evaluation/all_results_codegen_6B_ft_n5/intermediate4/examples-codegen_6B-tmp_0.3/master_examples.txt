example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in);
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Register output always has a delay of one clock cycle
always @(posedge clk)
	present_state <= next_state;
// Next-state logic
always @(present_state or in)
	case(present_state)
	0: if(in) next_state = 1; else next_state = 0;
	1: if(in) next_state = 1; else next_state = 0;
	endcase

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	begin
	if(in==1) 
	begin
	next_state = 1;
	present_state = 1;
	end
	else 
	begin
	next_state = 0;
	present_state = 0;
	end
	end
	1: 
	begin
	if(in==1) 
	begin
	next_state = 1;
	present_state = 1;
	end
	else 
	begin
	next_state = 0;
	present_state = 0;
	end
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==0)&(in);
always @(posedge clk)
	if(reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	// $display("nextState: %b",next_state);
	// $display("presentState: %b",present_state);
	// $display("out: %b",out);
	if(present_state==0 && in==1)
	begin
	next_state=1;
	present_state=1;
	end
	else if(present_state==1 && in==0)
	begin
	next_state=0;
	present_state=0;
	end
	end
assign out=(present_state==0)&(in);

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 0 and in=1 in state 1
// out=1 in state 1 and in=1 in state 0
// out=0 in state 0 and in=1 in state 1
// out=0 in state 1 and in=1 in state 0

always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if (in)
	begin
	next_state <= 0;
	out <= 0;
	end
	else
	begin
	next_state <= 1;
	out <= 0;
	end
	1: 
	if (in)
	begin
	next_state <= 1;
	out
================================================================
