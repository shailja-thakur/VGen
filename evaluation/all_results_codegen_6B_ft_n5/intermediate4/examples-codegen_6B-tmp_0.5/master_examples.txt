example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & ~next_state & in;
// The sequential always block for reg updates
always @(posedge clk)
	begin
	if(reset) //if the reset button is pressed
	present_state <= 0;
	else
	present_state <= next_state;
	end
//The combinational always block for reg updates
always @(*)
	begin
	next_state = present_state;
	case(present_state)
	0: if(in)
	next_state = 1;
	1: if(in)
	next_state = 0;
	endcase
	end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// if next_state is 0, then out=1
// if next_state is 1, then out=0
always @(posedge clk or posedge reset)
	begin
	if (reset) 
	present_state <= 0;
	else 
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case(present_state)
	0: if(in) next_state = 1;
	1: if(in) next_state = 0;
	endcase
	end
assign out = present_state;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state == 1) ? (in) : (out);
always @(posedge clk)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in)
	begin
	next_state <= 0;
	present_state <= 1;
	end
	else
	begin
	next_state <= 0;
	present_state <= 0;
	end
	1: if(in)
	begin
	next_state <= 1;
	present_state <= 1;
	end
	else
	begin
	next_state <= 1;
	present_state <= 0;
	end
	endcase
	end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= (present_state == 1 && in == 0) ? 0 : ( (present_state == 0 && in == 1) ? 1 : 0 );
	end
assign out = (present_state == 0) ? 0 : ( (present_state == 1) ? 0 : 1 );

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 0 and in=0 in state 1
// out=1 in state 1 and in=0 in state 0
// out=0 in state 1 and in=1 in state 0
// out=0 in state 1 and in=1 in state 1
// initial state is 0
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	next_state=0;
	present_state=0;
	end
	else 
	begin
	present_state=next_state;
	case(present_state)
	0: if(in) next_state=0; else next_state=1;
	1: if(in) next_state=1; else next_state=0;
	endcase
	end
assign out=(present_state==1);

================================================================
