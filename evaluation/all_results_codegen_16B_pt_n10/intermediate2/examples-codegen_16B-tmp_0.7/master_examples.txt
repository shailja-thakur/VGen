example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// If q is 12, reset q to 0
// else, assign q to q
always @(posedge clk or posedge reset) begin
    if (q == 12) q <= 0;
    else q <= q;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset == 0) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// we want to test q
reg [3:0] testq;
assign testq = q;

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// note that incrementing q with a register can be done with:
// q = q + 1 
// The code in this example uses an inline function to do this.
inline void update_q( void )
{ 
    q = ( reset == 0 ) ? 1 : ( q == 12 ) ? 1 : q + 1; 
}
// update q whenever clk changes from low to high
always @(posedge clk) begin
    update_q();
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin 
    if (reset) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// synthesize the output
assign q = q'[3:0]; 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin 
    if (reset == 1) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1; 
end
// display q on the positive edge of the clock
// this follows the above algorithm
always @(posedge clk) begin 
    if (reset == 0)
        q <= 1;
    else if (q == 12) 
        q <= 1;
    else 
        q <= q + 1;
end


================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset == 0) {
        q <= 1;
    } else if (q == 12) {
        q <= 1;
    } else {
        q <= q + 1;
    }
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset == 1) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
    q <= q + 1;
end
// output q is assigned to the register
assign q = q;

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
    if (reset)
        q <= 1;
    else if (q == 12)
        q <= 1;
    else q <= q + 1;
// assignment operator overloads the <= operator
// for assignment, q stores the value of q
// for read, q returns the value of q

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// This only works for q < 13
// Note that if q = 13, clk is not asserted on the positive edge of the clock
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// The output logic is the same as the case above
// This only works for q < 13
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

// This is a counter that counts from 1 to 12
module counter_2( 
    input clk,
    input reset,
    output reg [2:0] q
); 
// update q on the
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
