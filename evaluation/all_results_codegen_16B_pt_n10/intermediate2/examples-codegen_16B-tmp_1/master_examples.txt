example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 1) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// hold model for READY signal (from SOT)
replacement LHS implicit ready;
// Produce READY << 8'b1111 0011'b1101 with ticking simulated

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = ( q == 12 ) |
    ( reset == 0 && q == 1 ) |
    ( q + 1 < 13 );
"""
    )
for i in range(12):
    file.write('    assign {} = {}\n'.format(str.numberic_literal(i+1),str.numberic_literal(clamp_values[i])))


# Setting inputs
file = open(outFile, 'w')
file.write('// This is a counter that counts from 1 to 12\n')
for i in range(12):
    file.write('    default_input {}_plus_7= 7{};'.format(str.identifier(i+1), str.numeric_literal(clamp_bits[i])))
file.write('\n')
file.write('    reg [7:{}] {}
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
generate ifq=1 reset=q==0 q else if   (!reset && q == 13) q
else q = q + 1;
bind clk q

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
    if(reset) 
        q <= 1;
    else if(q==12) 
        q <= 1; 
    else 
        q <= q + 1; 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
  if (reset) q <= 0;
  else if (q == 12) q <= 1; 
  else q <= q + 1;
end
// a simple way to implement a counter is to tell the synthesizer to delay any values that
// it finds that are not 1
_4BIT_DELAY #( .DELAY(0) ) organization( sequential );
// _4BIT_DELAY is a synthesized module that has a 4 bit input and an 8 bit output

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset==0) q <= 1;
    else if (q==12) q <= 1;
    else {q <= q+1;}
end
// bbcarry:
// This is somiteh's BBS code.
// It's the same but just counts up instead of down.
//module bbcarry( 
//    input clk,
//    input reset,
//    output reg clr,
//    output reg clt 
//); 
// local reg temp1, temp2, temp3;
// always under clk is !reset clr clt
///* tasks in here will go under the task-specific things above */
window first,second,third,four;

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always test on (clk'=1) begin
    q <= 12'b000;
    if (reset = '0' || q[3,2] = '0') q <= 11'b000;
    else q <= q + 1'b1;
end // end 'test' action

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
void main()
{
    int i;
    for (i=0;i<3;i++){
        q[i] = 0;
    }
    always @ (posedge(clk))
    begin
        if (reset)
        {
            q <= 1;
        }
        else if (q==12)
        {
            q <= 1;
        }
        else
        {
            q <= q+1;
        }
    end
}


================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = (reset == 0)
  ? 0 : q + 1
  | q == 12
  ? 0 : q + 1
  ; 
// clk = rising-edge updated q
always @(posedge clk or posedge reset) begin
  if (clk) begin
    q <= q + 1;
    if (q == 12) q <= 0;
  end else begin
    q <= q;
  end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk | posedge reset) begin
    case(q)
        case(reset) begin
            q <= 1;
            case(0) q <= 12; q <= q + 1; end
        end
    end
end
// The value of q is assigned to a DFF signal that may be connected to other
// logic in the design. The purpose of this signal is to enable the DFF to be
// connected to an I/O port

// The high part is connected to the output state of a LED controlled by the DFF

================================================================
