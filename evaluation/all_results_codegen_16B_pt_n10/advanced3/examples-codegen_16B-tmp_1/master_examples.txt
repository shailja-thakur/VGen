example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

   present_state <= S1;
   next_state <= IDLE;
   always @(posedge reset or posedge clk) begin
     if(rising_edge(reset)) next_state <= IDLE;
     else if(present_state == S1 && x == 1) next_state <= S10;
     else if(present_state == S1 && x == 0) next_state <= IDLE;
     else if(present_state == S10 && x == 1) next_state <= S101;
     else if(present_state == S10 && x == 0) next_state <= IDLE;
     else if(present_state == S101 && x == 1) next_state <= IDLE;
     else next_state <= IDLE;
     if(present_state == IDLE && x == 1) present_state <= S1; 
     if
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


assign present_state = `present_state;       // value retained in next cycle
if (clk==1) // rising edge on clock
{
  if (present_state==IDLE)
  {
    next_state = x==1 ? S1 : (x==0 ? S10 : IDLE);
  }
  else if (present_state==S1)
  {
    next_state = x==0 ? S10 : (x==1 ? S101 : IDLE);
  }
  else if (present_state==S10)
  {
    next_state = x==1 ? S101 : IDLE;
  }
  else // if (present_state==S101)
  {
    next_state = IDLE; // never drop-out at intermediate stages
  }
  
  if (present_state==S101)
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 _always @(posedge clk or posedge reset) begin
  if ( reset == 0 ) begin
    present_state <= IDLE;
  end else begin
    present_state <= (IDLE);
  end

end


// This function is used to delay the clock 10 cycles. 
_reg delay_fp(1 downto 1);
_reg data_delayed;
_reg clk_delayed;
_reg clk_ri = 0;
_reg rst_new;
_reg prev_present_state = IDLE;
_reg enable = 0; //_reg = 1 // enable to test
_reg cnt = 0; //for testing

_always @(posedge clk or posedge x) begin
  if ( cnt == 0 ) begin
    delay_fp <= 0;
    data_delayed <= x;  
    
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always_ii // upon reset it is IDLE, will change accordingly
begin
    case(present_state)
        IDLE        : present_state <= next_state = IDLE;       
        S1          : if(x) present_state <= next_state = S10;
        S10         : if(!x) present_state <= next_state = S1;
        S101       : present_state <= next_state = IDLE;
        endcase
end

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 include "fsm.p";
 sinzez enable;
always { clk = 0; }

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always begin 

	case(present_state)
		0: begin    
			next_state = x;
			present_state = next_state;
			x: begin
			end
			end case
		1: begin    
			next_state = present_state;
			present_state = IDLE;
			clk: begin
			end
			end case 
		2: begin    
			next_state = S1;
			present_state = next_state;
			x: begin
			end
			end case
		3: begin    
			next_state = present_state;
			present_state = IDLE;
			end case
	endcase
end
  
//
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always {
	next_state = present_state;
	present_state = IDLE;
}

// This is a finite state machine that recognizes the sequence 011 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S11=3;
// output signal z is asserted to 1 when present_state is S11 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
  if(reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (present_state==IDLE and x) begin
      present_state <= S101;
      next_state <= S1;
    end
    else if (present_state==IDLE and !x) begin
      present_state <= IDLE;
      next_state <= IDLE;
    end
  end
  z <= present_state;
end

================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
// first line of FSM 
if (present_state != IDLE) begin
  if (x == 1) begin
    next_state <= S1 ;
  end
else begin
  if (reset != 0) begin
    present_state <= IDLE ;
  end
end
// subsequent lines of FSM
if (present_state != S1) begin
  if (clk == 1) begin
    if (x == 0) begin
      next_state <= IDLE ;
    end
    else begin
      next_state <= S1 ;
    end
  end
else begin
  if (x == 1) begin
    next_state <= S10 ;
  end
  else begin
    next_state <= IDLE ;
  end
end
end

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
	if(clk or reset) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
	else begin
		next_state <= IDLE;	
		if(x) begin
			present_state <= S1;
		end
		else begin
			// we have to reset the next_state on reset because otherwise the finished under one
			// flit FSM runs for ever, so we must always reset it after one flit of re is completed
			next_state <= IDLE;			
		end
	end
end

assign z = present_state;

{0}

================================================================
