example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the falling edge of the clock:
// if slowena is high, increment q.
// Otherwise, only increment q if q is not 9.

always @(posedge clk or posedge reset) begin
    if (slowena) q <= q + 1;
    else if (q < 9) q <= q + 1;
end

// On the rising edge of the clock:
// if slowena is high, reset q to 0.
// Otherwise, only reset q if q is 9.

always @(posedge clk or posedge reset) begin
    if (slowena) q <= 0;
    else if (q == 9) q <= 0;

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena)
        if (q < 9) q <= q + 1;
end

// On the positive edge of the enable input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge ena or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena)
        if (ena and q < 9) q <= q + 1;
end

// On the positive edge of the slow enable input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk, negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(posedge clk, negedge reset)
    if (reset) q <= 9;
    else if (slowena && q > 0) q <= q - 1;

always @(posedge clk) begin
    if (slowena) q <= q + 1;
    else if (q > 0) q <= q - 1;
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment the output q by 1 on the positive edge of the clock.
always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
// Decrement the output q by 1 on the negative edge of the clock.
always @(posedge clk or negedge reset) begin
    if (reset) q <= 9;
    else if (slowena && q > 0) q <= q - 1;
end

// The input clk is divided by 2, and the result is used to drive the decade counter.
// The decade counter
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock, set q to 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= {0, 1, 2};
    else if (slowena) {
        if (q < 9) q <= q + 1;
    } else {
        q <= 9;
    }
end

// On the falling edge of the slowena input, reset the output q to 0.
// On the rising edge of the slowena input, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena or negedge slowena) begin
    if (slowena) q <= {0, 1, 2};
    else if (q < 9) q <= q + 1;
end

// On the rising edge of the ena input, reset the output
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena) q <= 9;
    else if (q != 9) q <= q + 1;
end

// On the positive edge of the slow enable input:
// reset the output q to 0.

always @(posedge slowena) begin
    q <= 0;
end

// The output q is the decade counter value.

assign q = q + 1;


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if (reset) q <= 0;
    else if (slowena) q <= q + 1;
end

// On the positive edge of the slowena input:
// reset q to 0.

always @(posedge slowena) begin
    q <= 0;
end

// The counter should be reset on the positive edge of the reset input.

always @(posedge reset) begin
    q <= 0;
end

// The counter should be reset on the positive edge of the reset input.

always @(posedge clk) begin
    if (reset) q <= 0;
    else if (slowena) q <= q + 1;
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the positive edge of the slow enable signal:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the positive edge of the slow enable signal:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the positive edge of the slow enable signal:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the positive edge of the slow enable signal:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the positive
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// if slowena is high and q is not 9, skip the ena input.
// if q is 9, skip the ena input.
// if slowena is low, skip the ena input.

always @(posedge clk or negedge reset) begin
    if (reset)
        q <= 0;
    else if (slowena && q != 9)
        q <= q + 1;
    else if (q == 9)
        ;
    else if (slowena == 0)
        q <= q + 1;
    else
        q <= q;
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena)
        if (q != 9) q <= q + 1;

// On the positive edge of ena:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the clk input is high and q is not 9.

always @(posedge ena or negedge reset)
    if (reset) q <= 0;
    else if (clk)
        if (q != 9) q <= q + 1;

// On the negative edge of ena:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the clk input is high and q is not 0.

always @(posedge ena or
================================================================
