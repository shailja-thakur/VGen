example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// This is an instance of the embedded flops manually

reg [3:0] q;

always @(posedge clk, posedge reset)
begin
    if(reset) q <= 0;
    else       q <= q + 1'b1;
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
reg [3:0] q;

always @(posedge clk, posedge reset) begin
  if (reset)
    q <= 0;
  else if (slowena)
    q <= q + 1;
end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
reg [10:0] q_1;
reg [10:0] q_2;
reg [10:0] q_3;
reg [10:0] q_4;
reg [10:0] q_5;
reg [10:0] q_6;
reg [10:0] q_7;
reg [10:0] q_8;
reg [10:0] q_9;
reg [10:0] q_10;
reg [10:0] q_11;
reg [10:0] q_12;
reg [10:0] q_13;
reg [10:0] q_14;
reg [10:0] q_15;
reg [10:0] q_16;
reg [10:0] q_17;
reg [10:0] q_18;

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// This implementation says whether to "ena" or "reset" (ena" or "set" or "set").
// 
// When ena is high, the reset signal is high, and the output would
// be used as an "sr" just before the rising edge of the clock.
//
// The counter is implemented as a clock.
//
reg [3:0] q;

// When clk_ena is high, the output is enabled
// The output is latched when clk_ena is low.
// This implementation ensures that the clock at 50 MHz.
//
// The clk_ena signal is created by an assertion clk_ena.
//
always @(posedge clk or negedge reset)
    if(!reset) q <= 0;
    else        q <= q + 1;

//
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
// The final "reset" is the counter.
// "reset" is the count, and "set" is the new count.
// "load" is the new count, and "load" is the new count.
// "load_en" is the counter.
// "load_en" is the counter.
// "load_counter" is the "counter.
// "load_counter_r" is the "counter_r" is the "counter_r" is the "counter_r" is the "counter_r"
// "counter_en" is the counter.
// "load_counter_r" is the "counter_r" is the "counter_r" is the "counter_r" is the "counter_r" is the "counter_r" is the "counter_r"
// "counter_en" is the counter.
// "load_counter_
================================================================
