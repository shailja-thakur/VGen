example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The input slowena is ignored.
always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (ena) q <= q + 1;
end

// On the positive edge of the slow clock
// if slowena is high, reset the output q to 0.
// Otherwise, only increment the output q if q is not 9.
// The input ena is ignored.
always @(posedge slowclk or negedge slowclk) begin
    if (slowena) q <= 0;
    else if (q != 9) q <= q + 1;
end

always @(posedge clk) begin
    if (slowena) q <= 0;
    else if (ena) q <= q + 1;
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (reset)
        q <= {3'b000, others => 0};
    else if (slowena && q < 9)
        q <= q + 1;

// The number of decades is one less than the number of times the decade counter passes through 9.
always @(posedge clk)
    if (slowena && q == 9)
        q <= 9;
    else if (slowena && q == 0)
        q <= 9;
    else
        q <= 9;


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 0;
    else if (clk and slowena and q < 9)
        q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 9;
    else if (clk and slowena and q > 0)
        q <= q - 1;


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset) begin:
    if (reset == 1) q <= 0;
    else if (slowena == 1) begin
        if (q < 9) q <= q + 1;
    end
end

always @(posedge clk or negedge reset) begin:
    if (reset == 1) q <= 0;
    else if (slowena == 1) begin
        if (q < 9) q <= q + 1;
    end
end

// The decade counter is a decade counter implemented as an array of counters.
// The counter for each digit is a gate controlled by a pair of comparators.
//
// For each digit:
// When a digit is incremented, the counter is incremented.
// When the counter is incremented and hits the threshold, the digit is incremented.
// When a digit is incre
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin:
    if (reset) q <= 0;
    else if (!slowena && q < 9) q <= q + 1;
end

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or ~reset) begin
    if (~reset) q <= {0, 3, 6, 9};
    else if (slowena && q < 9) q <= q + 1;
end

// The following implementation is slow.
// The above algorithm should be implemented using a counter module.
always @(posedge clk or ~reset) begin
    if (~reset) q <= {0, 3, 6, 9};
    else if (slowena) q <= q + 1;
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] q;

always @(posedge clk)
    if (reset)
        q <= 0;
    else if (slowena)
        if (q != 9)
            q <= q + 1;

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
  if (reset) q <= '0';
  else if (slowena) if (q != 9) q <= q + 1;

// On the positive edge of slowena:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena)
  if (reset) q <= '0';
  else if (clk) if (slowena && q != 9) q <= q + 1;

// If slowena is deasserted, q is 0.

always @(posedge reset)
  q <= '0';

// On the positive edge of ena:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// Finally, the output must be clocked out on the rising edge of ena.
// On the rising edge, if ena is high, then set the q output to 9.
// This makes sense as a decade counter, since the counter values are always 9, 10, ..., 90, 91, ..., 99.

always @(posedge clk or negedge ena)
    if (ena) q <= 9;


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
    if (reset or not (slowena and q[2]))
        q <= 0;
    else if (slowena and q != 9)
        q <= q + 1;

// The clock is always positive. 
// The reset pin is positive only when reset is high.
// The ena input is positive only when ena is high.

// The ena input of the decade counter is an asynchronous clock.

// The clock is asynchronous to the decade counter output.
// The decade counter starts counting from a state that depends on the
// state of the ena input on the first rising edge of the clock.

// The decade counter is self-clearing.
// The decade counter is not affected by the reset pin. 
// The decade counter is not affected by the ena input.

// The decade counter is
================================================================
