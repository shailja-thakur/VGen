example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
    if (reset) q <= {3'b000, 3'b000};
    else if (customida && q < 9) q <= (q + 1'b1);

    // Do not count when the enable input is high. 
    if (not(slowena) && q == 9) q <= {3'b000, 3'b000};
end

--------------------------------------------------------------------------------

module count_fast(
    input clk,
    input fastena,
    input reset,
    input customclr,
    output reg [4:0] q)
    localparam clrcnt = 10

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin:
    if (!reset) q <= 0;
    else if (ena && q < 9) q <= q + 1;
end

always @(negedge clk or posedge reset) begin:
    if (slowena) begin:
        if (reset) q <= 0;
        else if (ena && q !== 9) q <= q + 1;
    end
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If slowena is high and q is zero, set q to 0 also.
// Finally, only decrement q by 1 if q is non-zero and its output is not high.
always #1 begin 
    if (reset) {
        q <= "00";
    } 
    else if (!(q == 9 & ena) & !(!slowena & q == 0)) {
        q <= q + "100" & ?("00");
    }
    else if (slowena  & q == 0) q <= "00";
    else if (q >= 1 && !(q == 1 & qrnd)) q <= q - 1 & ?("10");
    else q <= "00";
end

//makernd generate always @(posedge clk [1:0]) begin
//    qrnd <= (ena & q) ? "1" : "
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
    always @(posedge clk)
      if(reset)
        q <= 0;
      else
        if (slowena && q != 9)
          q <= q + 1;
  end

// Make the next increment happen in the cycle after the previous.
void countDec_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q) {
    q <= q + 1;

    // Disable the divider to turn off the clock chain.
    always @(posedge clk)
        begin
        slowena <= 0;
        q <= 0;

        case(q)

            // Count to 9, invoke a divider
            0:
            // negating the edge of the clock causes the change to be
            // done in the next cycle.
            reset <= 0;
            w <=
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// q outputs 0, 1, 2, 3, 4, 5, 6, 7 and 8.

  always @(posedge ~reset) begin
    if (reset) begin
      q <= 0;
    end else begin
      if (slowena && q < 3) q <= q + 1;
    end
  end // always @(posedge ~reset) begin

// endmodule

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Return the 16 bit integer represented by 0q01221122.

always @(posedge clk) begin: 
    if reset == 1'b1) begin 
        q <= 0;
    end else begin 
    if (slowena == 1'b0) begin
        case (3'd0) begin
            q <= q + 1;
            if q == 9'b0) q <= 3'b0;
            else end
            case (3'd1) begin
                q <= q + 2;
                if q == 9'b0) q <= 3'b1;
                else end
            end 
        end
    end
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
    if (~reset)
        q <= ([3:0] default "0");
    else
        if (slowena)
            if (q != 9)
                q <= ([3:0] default " ");
            else
                q <= ([3:0] default "1");
        else
            q <= ([3:0] default "0");
// On the negative edge of the clock:
// For the first or second transition after the ena input goes high:
// Yes, reset it to 00.

always @(negedge slowena)
    if (q == 9)
        q <= ([3:0] default "0");
    else
        q <= ([3:0] default " ");


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset or slowena) begin:
  if (reset) q <= {0,0,0};
  else q <= q + 1;
  if (slowena && (q % 10) < 9) q <= {q%10,q%10,q%10};
end;

always @(posedge clk or negedge reset or slowena) begin:
  if (reset) q <= {0,0,0};
  else q <= q + 1;
  if (fastena && (q % 10) == 9) q <= {q%10,q%10,q%10};
end;

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
initial begin
    q <= 9'd0;
    if (reset) q <= 0;
    else if (ena && q < 9'd9) q <= q + 1;
end

// On the negative edge of the clock:
// decrement the output q if q > 0. 
// Otherwise, if both ena and q are low, reset the output.
initial begin
    if (slowena && q > 9'd0) q -= 1;
    else if (ena && ena && q == 9'd9) q >= 0;
    else q <= 3'd0;
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
parameter pmask = 1'b1;

reg [1:0,2,31:0] q;

always @(posedge clk && slowena == pmask && !reset)
    if (reset == 1'b1)
        q <= 0;
    else if (q != 9'b9)
        q <= q + 1'b1;

silence_encoder(q);


================================================================
