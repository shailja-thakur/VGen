// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (!reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end else begin\n    present_state <= next_state;\n    next_state <= 0;\n  end\nend\nassign out = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "reg next_state = 0;\nalways @(posedge clk, posedge reset)\nbegin\n    if (reset)\n        next_state <= 0;\n    else\n    if (in)\n        next_state <= 1;\n    else\n    if (next_state > 0)\n        next_state <= 0;\n    else\n    if (next_state < 1)\n        next_state <= 1;\n    else\n        next_state <= 0;\n    out <= next_state;\n    present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  present_state = present_state + 1;\n  if (reset)\n    present_state = 0;\n  next_state = present_state;\n  if (in==1)\n    next_state = next_state + 1;\n  if (in==0)\n    next_state = next_state - 1;\n  out = present_state==0;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (present_state == 0)\n      if (in == 1)\n        next_state = 0;\n      else\n        next_state = 1;\n    else if (present_state == 1)\n      if (in == 1)\n        next_state = 1;\n      else\n        next_state = 0;\n    else if (present_state == 2)\n      next_state = 0;\n    else if (present_state == 3)\n      next_state = 1;\n    if (present_state == 0) {\n      if (next_state == 1) {\n        if (out == 1)\n          present_state = 2;\n        else\n          present_state = 3;\n      } else {\n        present_state = 1;\n      }\n    } else if (present_state == 1) {\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if(reset) begin\n    present_state <= 0;\n    next_state    <= 0;\n  end\n  else begin\n    if(present_state == 0) begin\n      if(in)  next_state <= 0;\n      else     next_state <= 1;\n    end\n    else begin\n      if(in)  next_state <= 1;\n      else     next_state <= 0;\n    end\n    out <= present_state && next_state;\n    present_state <= next_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always_ff @(posedge clk) begin\n    if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n    end else begin\n        if (present_state == 0) begin\n            if (in) next_state <= 0;\n            else next_state <= 1;\n        end else if (present_state == 1) begin\n            if (in) next_state <= 1;\n            else next_state <= 0;\n        end else begin\n            next_state <= 0;\n        end\n        present_state <= next_state;\n        out <= present_state;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk or rising_edge reset) begin\n    if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n    end else begin\n        present_state <= next_state;\n        next_state <= present_state + (in == 1 ? 1 : 0);\n        out <= present_state == 1;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always {\n\tif (reset == 1) {\n\t\tnext_state = 0;\n\t} else if (present_state == 0 && in == 1) {\n\t\tnext_state = 0;\n\t} else if (present_state == 1 && in == 1) {\n\t\tnext_state = 1;\n\t} else if (present_state == 1 && in == 0) {\n\t\tnext_state = 0;\n\t} else if (present_state == 0 && in == 0) {\n\t\tnext_state = 1;\n\t}\n\tpresent_state = next_state;\n\tout = present_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n\tcase(present_state)\n\t\t1'b0 : out <= 1'b0;\n\t\t1'b1 : out <= 1'b1;\n\t\tdefault: out <= 1'b0;\n\tendcase\n\tnext_state <= present_state;\n\tif(reset == 1) present_state <= 1'b0;\n\telse present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "simple_fsm state_machine(\n\t.clk(clk),\n\t.reset(reset),\n\t.in(in),\n\t// State 0\n\t.out(out),\n\t.present_state(present_state),\n\t.next_state(next_state),\n\t.next_state_transition(next_state == 0 ? 0 : 1)\n\t// State 1\n);\n// END simple_fsm\n"
    }
  ],
  "created": 1663534643,
  "id": "cmpl-dKsMvJpmGDnn5wI9DaDGVai6UKCzP",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1229,
    "prompt_tokens": 148,
    "total_tokens": 1377
  }
}