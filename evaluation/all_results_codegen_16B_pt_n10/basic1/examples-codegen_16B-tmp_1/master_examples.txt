example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
out <= in;
"""
def module_library( name,tok,tok_e ):
	return %{ 'NAME': name,
		'INPUT':input,
        'OUTPUT':output,
        'E_LIBRARY': e_library,
        'H_LIBRARY': h_library,
        'C_LIBRARY': c_library,
	    'TOK':tok,
	    'TOK_E':tok_e }

================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign output_value_in( in , output_value(out) );
// assign out to in
wire_assign depth_in( in , depth(out) );

// Associate clocks with boolean address and write addresses
requires clock;
// Update the clock whenever the output changes the clock.
Supply0CL< clock > R(&clock, port< CLK >, true);
// Step the sensor driver clock when the data changes
Supply0CL< clock > doa(out,doa_port);

// set up address lines in the S11C configuration
Cinv_addrAssign  Cinv( cinv_addrAssign );

Std_logic  V_I(I);
NoDelay     V_T1(I);
NoDelay     V_T2(I);
NoDelay     V_T3(I);


================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign<input> out(in);


// Define the Test component
struct Test
{
  Test( clock_type& ) {}
  lsr<1> out{ in };
};

int sc_main(int, char**)
{
  Test(driver).out;

  return 0;
}

================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
void wire_assign( input_type in, output_type out ) 
{ 
	assert( in != null && out != null );

	// code goes here
	out = in; 
}


// Design a module that prints an argument
module wire_print( input_type in, output_type out  );

void wire_print( input_type in, output_type out )	// Not a module
{
    assert( in != null && out != null );

    // code goes here

	out = in.val;

    // Code goes here
}


// ----------------------------------------
// CLASS PRINT_MACRO
// ----------------------------------------
// Create print_macro and wire the generate_line string to the IN port
STRING_MACRO( " we are from line ", wire_print , IN )












================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign( in, out ).in[0] = 7;
// To use as relational expressions/predicates
wire wire1 = in(0);
wire wire2 = out(0);
expr a = wire1 >> 8;
expr b = wire2 >>1;
expr result = (a < 17) & (b > 20);

// to compare two integer values
expr inv3() {return not(0 <= x) & (x < 10);}

// design a module that computes  input[0]^input[1]^input[2]^...x.input[N-1]
// module dups( input in, out int_arr, N );
// int_arr[i] = (( in[0] ^ in[1] ^ in[2] ^ ..x. in[N-1] ) & inv(N) ) |
//              
================================================================
example-5: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
"""

for out in tuples:
	str += " module { unit({DMA}) new({outputs({ "
	for down, out in enumerate(out):
		if not (down+1)==len(out):
			str += "{ \"target_{0}\" , $FROM={0} , $TO={1} };\n".format(out[down],out[down+1])
	str +="});}\n"

str+="
================================================================
example-6: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// ...
// if out = 1 then:
//
// just output one data packet of 0s
// next cycle
// ...
// if out = 0
//   - snort
//   - iptables
//   - ...
// endif
//
// note that out can be 0 unless implicitly tied to $clock
module assign_cc( input cc, output out ) {
  module name @ ( input cc ) {
    assign_cc_impl( $stdout, $screen );
    $integral := $screen;
    $screen   := $integral[sym_stdout];
    $integral := $integral[sym_clock];
    $integral   %-= $integral.cell[1]
    $integral   %:= $integral.$row.cell[$integral.integral]
    $clock     %-= $integral.$
================================================================
example-7: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign activator( in, out );
// assign dout to din
wire_assign din_out( bin, dout );


*/


/* 
Design a single nway-flip-flop (booth) element:

process gate(),
 select bit( clock ),
 T         side( gate ),
 D         side( gate ),
 r_in      side( T ),
 RES       side( T ),
 Q         side( gate ),
 Cin       side( D ),
 Clk       side( RES ),
 Vie         out ( Q ),
 Vei         out ( RES ),
 out       start ( Cin ),
 key       Q,
 reset       in
 */ 
/*  
d2_ff(  ),
 d   ( clk ),
 R     ( ),
 C   ( in ),V   ( ),
 I   ( ),K   ( )
*/
================================================================
example-8: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign J = I.plus_assign(5);

//2 d. Design a module that assigns outputs to outputs
module wire_assign II = I.plus_assign(5);
// 3 e. Design a module that assigns outputs to inputs
module inout_wire_assign = I.plus_assign(5); )/

 Module Definition Source File

 This is the automatic generated parent Module Definition Source File.
 edat will generate the hint comment. Before you can use the hint comment,
 you have to compile the "hint" section at least once.
 If you ahs compile more than one time, you have to change the "edat_count" and
 "edat_hint_comment_count" and re-compile.
 You are able to edit arbitrary stuff in between. Every valid block has to
 end with a }; block_end.

edat_
================================================================
example-9: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign( inreg in, inreg out );

================================================================
