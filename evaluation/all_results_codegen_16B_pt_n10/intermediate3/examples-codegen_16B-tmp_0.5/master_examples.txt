example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_reg <= r_reg[4:3] | feedback_value;
        q <= r_reg[4:0];
    end
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= (r_reg >> 2) ^ (r_reg >> 4) ^ feedback_value;
        feedback_value <= ~r_reg[2] & r_reg[4];
        r_reg <= q;
    end
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;

// instantiate the LFSR
lfsr lfsr_inst (
    .clk(clk),
    .reset(reset),
    .q(q)
);

// instantiate a register
reg r_reg_inst (
    .clk(clk),
    .reset(reset),
    .q(q)
);

// instantiate a register
reg r_next_inst (
    .clk(clk),
    .reset(reset),
    .q(q)
);

// instantiate a register
reg feedback_value_inst (
    .clk(clk),
    .reset(reset),
    .q(q)
);

// instantiate a register
reg r_reg_next_inst (
    .clk(clk),
    .
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
  if (reset)
    r_reg <= 1;
  else
    r_next <= r_reg xor (r_reg >> 2) xor (r_reg >> 4);
  feedback_value <= r_reg xor (r_reg >> 2) xor (r_reg >> 4);
  q <= r_next;
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
  if (reset) r_reg <= 1;
  else r_reg <= r_reg + r_reg + 1;
  r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
  feedback_value <= r_reg[2] ^ r_reg[4];
  q <= r_next[4:0];
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset) begin
        r_reg <= 0;
        r_next <= 0;
    end else begin
        r_reg <= r_reg << 1 | r_reg >> 3;
        r_next <= r_reg ^ (r_reg << 2) ^ (r_reg >> 2);
        feedback_value <= r_reg[2] ^ r_reg[4];
    end
end
assign q <= r_next;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @* begin
    if (reset) begin
        r_reg = 1;
    end else begin
        r_next = r_reg;
        feedback_value = r_reg^(r_reg<<2);
        r_reg = r_reg<<1 | feedback_value[3];
        q = r_reg[4:0];
    end
end
// define the LFSR
lfsr lfsr_inst (
    .clk(clk),
    .reset(reset),
    .q(q)
);

// Design a 4-bit maximal-length Galois LFSR with taps at bit positions 0, 2
module lfsr2( 
    input clk,
    input reset,
    output [3:0] q
); 
reg [3:0] r_reg;
wire [3:0
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset) begin
    if (reset)
        r_reg <= 1;
    else {
        r_reg <= r_reg + r_reg - 1;
        r_next <= (r_reg[2] ^ r_reg[4]);
        feedback_value <= (r_reg[2] ^ r_reg[4]) ^ r_reg[4];
        r_reg <= r_next;
    }
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
// set the initial value of r_reg to 1
assign r_reg = 1;
// set the initial value of r_next to r_reg
assign r_next = r_reg;
// define the feedback equation
assign feedback_value = (r_reg[2] ^ r_reg[4]) & 0x3;
// define the clk as a clock input
assign clk = clk;
// define the reset as a reset input
assign reset = reset;
// define the feedback equation
assign r_reg = (r_reg << 1) | feedback_value;
// define the lfsr as a clock and reset source
assign clk = clk;
assign reset = reset;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg;
        feedback_value <= ~((r_reg[2] ^ r_reg[4]) ^ r_reg[4]) & 0xF;
        r_reg <= r_next;
    end
end
assign q <= r_reg[4];

================================================================
