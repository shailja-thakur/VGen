example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test cases will be used to test your adder. 
// Note that the inputs to the adder are 8-bit 2's complement numbers. 
// The inputs to the adder are in the range [-128, 127]. 
// The outputs of the adder are in the range [-128, 127]. 

// Inputs for the first test case. 

a = 0; 
b = 0; 

// Expected outputs for the first test case. 

s = 0; 
overflow = 0; 

// Inputs for the second test case. 

a = 0; 
b = 128; 

// Expected outputs for the second test case. 

s = 128; 
overflow = 1; 

// Inputs for the third test case
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0x7F. 
// The output s = 0x7F and the overflow is 0. 
// The signed adder should return 0x7F and 0. 

signed_adder(0x80, 0x7F, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0x80. 
// The output s = 0x7F and the overflow is 1. 
// The signed adder should return 0x7F and 1. 

signed_adder(0x80, 0x80, s, overflow);

// The following test case shows the signed adder for a and b = 0x7F and 0x80. 
// The output
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are unsigned numbers. 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// an unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is low
// an unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is high


unsigned_adder(a, b,
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder in action. 
// The signed adder is implemented as a 4-stage pipeline. 
// The inputs a and b are loaded into the adder. 
// The output s is stored in the output register. 
// The output overflow is stored in the output register. 
// The adder is clocked, and the results are stored in the output register and the output overflow register. 
// The following test case shows the results of the adder. 
// The input a is 0x80 and b is 0xFF. 
// The output s is 0x00 and the output overflow is 0x01. 

a = 0x80;
b = 0xFF;
s = 0x00;
overflow = 0x01;

signed_adder(a,
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x00. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF. 
// The output s = 0xFF and the output overflow = 0x01. 

signed_adder(0x00, 0xFF, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF. 
// The output s = 0xFF and the output overflow = 0x00. 

signed_adder(0xFF, 0xFF, s,
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two positive numbers. 
// The result is 0x00, since the most significant bit of s is 0. 
// The overflow is 0x00. 

a = 0x01;
b = 0x02;
s = 0x00;
overflow = 0x00;

// The following test case shows the signed adder for two negative numbers. 
// The result is 0xFF, since the most significant bit of s is 1. 
// The overflow is 0xFF. 

a = 0x80;
b = 0xFF;
s = 0x00;
overflow = 0xFF;

// The following test case shows the signed adder for two positive numbers. 
// The result is 0x01, since the most significant
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two numbers a = 0x00 and b = 0x01. 
// The output s = 0x01 and the output overflow = 0x00.

signed_adder(0x00, 0x01, s, overflow);

// The following test case shows the signed adder for two numbers a = 0x01 and b = 0x00. 
// The output s = 0x00 and the output overflow = 0x01.

signed_adder(0x01, 0x00, s, overflow);

// The following test case shows the signed adder for two numbers a = 0xFF and b = 0x00. 
// The output s = 0x00 and the output overflow = 0x01.

signed_adder(0xFF, 0x00
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0x00, 0xFF, 0x00, 0x01);

// The following test case shows the signed adder for a and b = 0xFF and 0x00. 
// The output s = 0xFF and the output overflow = 0x00. 

signed_adder(0xFF, 0x00, 0xFF, 0x00);

// The following test case shows the signed adder for a and b = 0x00 and 0x00. 
// The output s = 0x00 and the output overflow = 0x00. 

signed_adder(0x
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
// The numbers are a = 0x00 and b = 0xFF. 
// The expected output is s = 0x00 and overflow = 0x00. 
// The actual output is s = 0x00 and overflow = 0x01. 

signed_adder(0x00, 0xFF, 0x00, 0x01);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
// The numbers are a = 0xFF and b = 0x00. 
// The expected output is s = 0xFF and overflow = 0x01. 
// The actual output is s = 0xFF and overflow = 0x00. 

signed_adder(0
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are unsigned numbers. 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is high


unsigned_adder(a, b,
================================================================
