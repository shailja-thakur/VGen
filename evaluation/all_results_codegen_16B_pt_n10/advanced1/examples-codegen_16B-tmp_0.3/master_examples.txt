example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implement the signed adder.

signed_adder(a,b,s,overflow)
{
    if (a[7] == 0 && b[7] == 0)
    {
        s[7] = a[7] + b[7];
        s[6] = a[6] + b[6] + (s[7] > 0);
        s[5] = a[5] + b[5] + (s[7] > 0);
        s[4] = a[4] + b[4] + (s[7] > 0);
        s[3] = a[3] + b[3] + (s[7] > 0);
        s[2] = a[2] + b[2] + (s[7] > 0);
        s[1] = a[1] + b
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0x7F
// The output s = 0x7F and the output overflow = 0

signed_adder(0x80, 0x7F, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0x80
// The output s = 0x7F and the output overflow = 1

signed_adder(0x80, 0x80, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x7F
// The output s = 0xFF and the output overflow = 0

signed_adder(0xFF, 0x7F, s, overflow);

// The following test case shows the signed
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow) {
    if (a[7] == 0 && b[7] == 0) {
        s[7] = a[7] + b[7];
        s[6] = a[6] + b[6] + s[7];
        s[5] = a[5] + b[5] + s[6];
        s[4] = a[4] + b[4] + s[5];
        s[3] = a[3] + b[3] + s[4];
        s[2] = a[2] + b[2] + s[3];
        s[1] = a[1] + b[1] + s[2];
        s[0] = a[0] + b[0] + s[1];
        overflow
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implementation

assign s = a + b;

// Overflow is only possible if a and b have the same sign and s has the opposite sign

assign overflow = ((a[7:0] < 0) == (b[7:0] < 0)) && ((s[7:0] > 0) != (a[7:0] > 0));


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Assume that a and b are in the range [-128, 127]
// Assume that s is in the range [-128, 127]
// Assume that overflow is in the range [0, 1]

signed_adder(a, b, s, overflow)
{
    s = a + b;
    overflow = ((a & b) == 0) && ((a & s) != 0) || ((b & s) != 0);
}

================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Example:
// a = [1, 0, 1, 1, 1, 0, 0, 1], b = [0, 1, 0, 0, 0, 1, 1, 1], s = [1, 0, 1, 1, 1, 0, 0, 1], overflow = [0, 0, 0, 0, 0, 0, 0, 0]

signed_adder(a, b, s, overflow);

// The output s is [1, 0, 1, 1, 1, 1, 1, 1], the output overflow is [0, 0, 0, 0, 0, 0, 0, 0]

// a = [1, 0, 1, 1, 1, 0, 0, 1], b = [0, 1, 0, 0, 0, 1, 1, 1], s = [1, 0, 1, 1, 1, 0, 0, 1
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are unsigned numbers. 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is high
// a unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is low


unsigned_adder(a, b,
================================================================
