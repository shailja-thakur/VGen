example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    // The = operator performs binary integer addition.
    // The right-hand operand is subtracted from the left-hand, while an 0 is still left on the output.

    //Underflow is detected at the output by the compare operator, which compares an input value to zero and 
    //returns 0 if two things are equal and the number is 0, otherwise it will return 1.

    // Overflow is detected by comparing the xth and the (x-1)th bit of the operand, setting the overflow bit, 
    // which by design is at location 6 in each register, to 1 if the most significant bit of s and x are different 
    // The bit at location 6 is logically shifted right once before being stored. 
    // The first address after a pointer is at location 0. 
    // Set that address to 0 with a set, and check by comparator at the second address


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    signed_adder   overflow: 0;
    s <= a + b;
    overflow nz: a > a && b > b && s > s;
    
// ----------------------------------------------------------------

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[7:0] = a[7:0] + b[7:0];

// assign overflow = s[8];

// s = s[7:0]

assign overflow = ((s[8] == 0x00) && (a[7] == b[7])) && (s[0] == 0x00) && (a[8] == 0x00);


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

   assign unsigned overflow {
           (a msb aka a[31:30],a[29:28] or a[27:26],a[25:24],a[23:22],a[21:20],a[19:18],a[17:16],a[15:14],a[13:12],a[11:10],a[9:8],a[7:6],a[5:4],a[3:2],a[1:0] msb zeroes) or 
           (b msb aka b[31:30],b[29:28] or b[27:26],b[25:24],b[23:22],b[21:20],b[19:18],b[17:16],b[15:14],b[13:12],b[11:10],b[9:8],b[
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

        // int s = a + b;
        // int i = s;
        // int s = a - b;
        // int i = s;
        // int s = a * b;
        // int i = s;
        // int s = b > a;
        // int i = s;
        // int s = (b > a) ? 1 : 0;
        // int i = s;
        //  int s = (b >= a) ? 1 : 0;
        //  int i = s;
        //  int s = b > a; 
        // int i = s * -1;


assign(
    s,
    add(
        a,
        b
    )
);

s.next[0][0] = a[0] + b[0];
s.next[1][0] = a
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign   s[7:0]    = {((a[7] + b[7]) by 1) + (a[6] + b[6]) +  (a[5] + b[5]),
                    ((a[6] + b[6])) + (a[5] + b[5]) + (a[4] + b[4]),
                    ((a[5] + b[5])) + (a[4] + b[4] ) + (a[3] + b[3]),
                    ((a[4] + b[4])) + (a[3] + b[3]) + (a[2] + b[2]),
                    ((a[3] + b[3])) + (a[2] + b[2]) +  (a[1] + b[1]),
                    ((a[2] + b
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    s = (s + a) ^ ((s + b) ^ a);
    overflow = ((s >> 15) & (a >> 15)) | ((s >> 15) & (b >> 15));

digital logic network
Digital logic network consists of simple devices arranged in logic circuits for performing logical operations and for directly connecting logic elements and simple devices 

Adders are devices that have two inputs, called the first operand a and the second or addend b, called the second operand, and an output called the sum c. 
Some adders such as carry-out adders can add up to a number of bits first. The arithmetic, the addition, can be any type. 

A carry-out adder's output c may be in one of two states. 
One state has carry to the most significant digit and is called a negative carry-out. 
The other state has no carry. 


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


a = a + b + carry|s++;
carry 

end module ; 
 
signed_adder(a,b,s, Overflow) {
    b_signed = not(b[7])
    s[8] = a[8] ^ s[7] ^ b_signed
    
    s[9] = (a[9] + b[9] + carry) | a_signed_overflow

    s[10:0] = a[10:0]+b[10:0] 
    a_signed_overflow
}
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s[7:0] = (a[7:0] + b[7:0])[7:0];
    assign overflow = ((a[7] & b[7]) == 0)xor((a[7] & s[7])==0)xor((s[7] & b[7])==0);

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Memory

unsigned memory[2];

// Inputs

// a and b are passed in through the memory cells.

// A and B are read from the memory and passed to the adder through the a and b input parameter.

// The result, s, is stored in the s memory cell

// Overflow is passed out through the overflow output parameter

//Assumptions

//a and b are 2's complement numbers.

//if an operand is 0 , the operand is treated as having an infinite numerical value. 

//if the sum causes an overflow , an Overflow fault is generated

// if The sum does not cause an overflow , no overflow is generated and s is loaded with the subtraction result.
  
void main () {
    signed_adder(memory[0],memory[1],memory[2], memory [3]);

    // a = input
================================================================
