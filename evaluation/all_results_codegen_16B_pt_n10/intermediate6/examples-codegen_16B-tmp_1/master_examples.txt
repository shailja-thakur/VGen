example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always_true () begin
    if (we) begin
        ram[addr] <= data;
        q <= ram[addr];
    end
end
// return max ram address
bram a = ram[31:0];
// reset module
ram #( .ADDR_WIDTH($address_width - 1), .DATA_WIDTH($data_width - 1) ) ram_i ( .addr(&a), .data(&data) );

================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we)
        ram[addr] <= data;
    q <= ram[addr];
end

================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or we)
    ram[addr] <= ram[addr] << 1 & (we == 1) ? data : q;

reg [ADDR_WIDTH-1:0] ram_adr;
reg [8-1:0]   ram_dat;
// separate input
assign ram_adr = {7{ADDR_WIDTH-1} 1{8-1} {3}};
assign ram_dat = {6{DATA_WIDTH-1} {4}};
// leading zeros
assign q = {8{7}};
// output
assign q = 0;
// local variables
block ram_d2: process(clk, we)
    if rising_edge(we)
    begin
        if write_enable()
        begin
            if access()
            begin
                ram
================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or negedge rst) begin
    if (we) begin
        if (rst == 1)
            ram[addr] <= 0;
        else
            ram[addr] <= data;
    end else begin
        if (rst == 1)
            ram[addr] <= 0;
        else
            ram[addr] <= ram[addr];
    end
end

================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) begin
        if (addr == 0) q <= data; // addr = 0
        else if (addr == 1) q <= ram[0]; // addr = 1
        else if (addr == 2) q <= ram[1]; // addr = 2
    end
end

// main module
// we don't care about frequency of "less than 2 ns"
logic [31:0] bus0, bus1, bus2, bus3;
assign bus0 = ram[2]; // load to address 2
assign bus1 = ram[1]; // load to address 1
assign bus2 = ram[0]; // load to address 0
always @(posedge clk) begin
    if (addr > 0) bus3 <= ram[addr-1]; // address has 0, 1, or 2 lsbs

================================================================
example-5: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) begin
        assert (addr <= 2**ADDR_WIDTH-1);
        if (addr == 2**ADDR_WIDTH-1) {
            ram[addr] <= data;
        }
        q <= ram[addr];
    end else begin
        assert (addr <= 2**ADDR_WIDTH-1);
        q <= ram[addr];
    end
end

================================================================
example-6: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) begin
        q <= ram[addr];
    end
end

    data
    ram      // ram access lib
    /***************************************/
    clk
    addr_write
    addr_addr
    addr_data

'''
        (data_line, addressing) = get_inputs('ram', content)

        data_values = [self.convert_val(data_line + ' '), ADC(macro=DATA_WIDTH)]
        addr_values = [self.convert_val('addr' + ' '), ADC(macro=ADDR_WIDTH)]

        result = alu(data_values[0], ' ', data_values[1], addressing, data_values[1])
        self.assertEqual(data_line + ' ' + self.
================================================================
example-7: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) begin
        ram[addr] <= data;
        q <= ram[addr];
    end
end


`define FAST_MEM 0

system_tb_macros:

module logic FAST_MEM;
#( .FAST_MEM(FAST_MEM) );

module logic FAST_MEM_BIT;
#( .FAST_MEM_BIT(FAST_MEM_BIT) );

module logic FAST_MEM_EN;
#( .FAST_MEM_EN(FAST_MEM_EN) );

module logic FAST_MEM_ADDR;
#( .FAST_MEM_ADDR(FAST_MEM_ADDR) );

module logic FAST_MEM_DATA;
================================================================
example-8: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q on successive reads
always @(posedge clk) begin
    if(we) {
        if (addr[0]) q <= ram[255]; // read 0b1111111111
        else q <= ram[addr[0]];    // read 0b0000001111
    }
end


================================================================
example-9: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or posedge reset)
    if (we) ram[addr] <= data;
    q <= ram[addr];

================================================================
