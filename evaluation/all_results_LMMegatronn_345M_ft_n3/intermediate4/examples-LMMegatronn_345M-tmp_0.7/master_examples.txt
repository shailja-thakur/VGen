example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
//
always @(present_state or in)
	if(present_state == 0)
		next_state = in;
	else
		next_state = in;
		
always@(present_state or in)
	case(present_state)
		in:
			if(in==0)
				next_state = 1;
			else begin
				if(in==1)
					next_state = 0;
				else
					next_state = in;
			end
		
		out:
			if(in==0)
				next_state = 0;
			else begin
				if(in==1)
					next_state = 0;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to output because they are the same as being output at the output.
reg [1:0] next_state;
// 0-1 in "default" state.
// 1-0 in "state" state.
// 0-1 in "state" state.
//
// Since the state transition is 0, in[0], state[1] corresponds to state
// (low) at once, the next state is 0.
// At this time, the next state is (low).
// Otherwise, the state transition is (low).
// This can be follows:
// "signal" state.
//
// Since the other states transition is 0, in[0], state[2] is in progress.
// At this time, the next state is in progress.
//
// On the other transition, the next state is in progress.
//
// As long as there are three states.
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set next state to 0 in the input in and to the output in the previous state.
reg [1:0] next_state;
// State changes in the previous state.
always@(state or in)
begin
   case (state)
      0 : next_state = in ? 1 : 0; // A
      1 : next_state = in ? 2 : 0; // B
      2 : next_state = in ? 3 : 0; // C
      3 : next_state = in ? 4 : 0; // D
      4 : next_state = in ? 5 : 0; // E
      5 : next_state = in ? 6 : 0; // F     
      6 : next_state = in ? 7 : 0; //
================================================================
