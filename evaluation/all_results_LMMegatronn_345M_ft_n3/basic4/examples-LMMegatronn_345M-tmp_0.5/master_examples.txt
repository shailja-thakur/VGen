example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Each mux=0, mux_in.
wire [4:0] mux_in0;
mux mux0(.a(a[0]),.b(b[0]),.sel(sel),.out(mux_in0));
mux mux1(.a(a[1]),.b(b[1]),.sel(sel),.out(mux_in1));
mux mux2(.a(a[2]),.b(b[2]),.sel(sel),.out(mux_in2));
mux mux3(.a(a[3]),.b(b[3]),.sel(sel),.out(mux_in3));
mux mux4(.a(a[4]),.b(b[4]),.sel(sel),.out(mux_in4
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0] out;
always @ (a or b or sel)
begin
	case (sel)
		1'b0: out = a;
		1'b1: out = b;
	endcase
end

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0] out;
always @( 
	     // or sel=0
	     // or sel=1
	     // or sel=2
	     // or sel=3
	     // or sel=4
	     // or sel=5
	     // or sel=6
	     // or sel=7
	     // or sel=8
	     // or sel=9
	     // or sel=10
	     // or sel=11
	     // or sel=12
	     // or sel=13
	     // or sel=14
	    
================================================================
