example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

wire counter([1-1:0] inter) =
    c_in_decode(in & ~c_in_decode(~res(&reset), reset, 1)) == ~1,
    c_in_decode($display(reset, signal(c_in_decode(~in, reset, 1)))) == 0
    if ^c_in_decode(~res(&reset), reset, 1) else
    $display(c_in_decode(~in, reset, 1))

instance main of simple_fsm(clk, reset @> c_in<c_in_decode(reset, reset, 1), in, out) {

  initial state: 0
  begin
    always @ ~("~reset|reset) fsm_setout_proc
      out <= 1
      divide/2
    end

  defer 
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(*)
begin:
if (clk == 1) // input --> output
  out = in;
else
    if (reset == 1) // State 0 --> State 1
      next_state = 0;
    else
      if (in == 1) // State 0 --> State 1
        next_state = 1;
      else
        if (out == 1) // State 1 --> State 0
          next_state = 0;
        else
            next_state == reset;
end
// State 0 --> State 1, Next State if we receive 1
always @(-)
begin:
if (out == 1) // Transition in State 0 --> State 1
  next_state == 1; // Next State
end

always @(reset)
begin:
if (out == 1) // State 1 --> State 0
  next_state = 0;
end


================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (clk, reset)
begin : fake_reset()
    reduce(next_state);
    out = ((reg("state_0") == 1 && reg("state_1") == 0) || (reg("state_0") == 0 && reg("state_1") == 1))
       && (next_state <= 3);
    else if(in==1)
         if(present_state==1)
             out = 1;
         else
             out = 1;
    else end_state;
    next_state = present_state;
end fake;


================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

reg x_in, y_in;

wire state_memory[x_in];
reg trooper;

always @(posedge clk)
{
  trooper = (reset == 0) ? 1 : 0;
  
  if (reset == 1)
    next_state = 0;
  
  // when in = 0, in state=0
  if (in == 0 && trooper == 0)
  {
    state_memory[x_in] = 0; // solicit downstream changes
    y_in = state_memory[0];
    out=1;
        
    next_state = 1;
  }
  // when by_lookup(x) == 0 and in = 1, in state=1
  else if (in == 1 && trooper == 1)
  {
    out = 1;
//    state_memory
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
void main(void) {
	fsm f = [in](fsm f){
		if(f.in){
			if(f.clk==1)
				f.out = 1;
			f.next_state=0;
		}
		else {
			f.out = 0;
			f.next_state=1;
		}
	};
	fsm n = [in](fsm n){
		if(n.clk!=1)
			n.out = 1;
		n.next_state=0;
	};
	reset = 0;
	// module fsm_design_behaviour(clk, reset, in, out);
	// Set the external signals clk and reset but not in or out to pull global clocks (+1111 + 1 because senseout lines are +1)
	in = 0b10000000
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    case clk:
        present_state <= 0;
        if (~reset) out <= out;
    endcase
    if (~reset)
        switch (present_state) {
            case 0: present_state <= 1; next_state <= 1;
                if (~in) out <= in;
                else     out <= next_state;
                break;
            case 1: present_state <= 0; out <= next_state;
        }
endcase

// Design a Moore state machine that runs on an LSTM CELL. Reset state is 0, state 1 is 1.
module lstm_cell(clk, reset, in, out);
input reset;
input in;
output out;
reg next_state;
mini_lstm l():
	wire : ;
	reg start_state, stop_
================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
state st2 (reg &in, reg out) is
    posedge clk, reset--;
    posedge reset - posedge clk: out = (in==1) ? 1 : 0; _next_state = 1; _tx_is_ready = 1 too state 1
    posedge clk--;
    posedge reset -- posedge clk: _tx_is_ready = 0; _next_state = 0; _out = (in == 0); _in = 1
    posedge clk: _tx_is_ready = true; _next_state = 0 delSt2 st 2 (reg in, reg out)
endstate st2

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state=0, next_state=0;

always @*   // @ ||/1/1*p/0/0/1/n
state0
{
    if (out==1)
		next_state=1;

	out=in;
}

always @*   // @ ||/1/1*p/0/1/0/n
state1
{
	next_state=0;
	if (in==1)
		next_state=1;
}


always @(*) begin
    if ((wld==1) and (clk==1))
    {
    	next_state=gtoh(n)?'0':'1';
    }
end

always @(*) begin
    present_state=from_string(n_ltoa(n));
end

always @
================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial state:
    present_state = 0;
    next_state = 1;

    // use perl subroutine
    next_state::in = in;
    next_state::out = ~reset & ~(in | clk);
end state:
    next_state = present_state;
    if(reset > 0)
    {
            out = 1;
    }
end module simple_fsm;

*/

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge in)
caseout state0:
next_state=~(~clk&reset)|(~reset|in);


caseout state1:
next_state=~(~clk&~reset)|(clk&reset|~in);

default:
out=0;
}

wire state;
always @(posedge clk)
caseout state_autoRequest:
state=~next_state&(~reset|in);

loop
caseout state_tristate_loop:
if(clk&reset){
state=~(~clk&reset)&~reset;
}else{
state=~(~clk&reset);
}
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
localparam rf_offset=50;

initial begin
    reset = 1'b0;
    clk = 1'b1;
    in = 1'b0;
    out = 1'b0;
    out = 1'b0;
    next_state=0;

    present_state <= 0;
end

barrier begin
    always @(posedge clk)
    begin
        reg new_present_state;
        new_present_state = !(pres_x & (in==0));
        if (reset == 1'b1) reset = !reset;
        present_state = new_present_state;
    end
end

always @(posedge reset)
begin   
    
    if (clk == 1'b0) begin
        if (reset == 1'b0) begin
            out = 1
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial state 0 := [in => 0, out => 1, present_state => 0];
initial state 1 := [in => 1, out => 0, present_state => 1];
// fsm requires external clock clock that is connected into here (by FSMAN.mac or CDNFAN.mac)
initial state fairy_fsm_0: [clk => clk, reset => reset];
initial state fairy_fsm_1: [reset => reset, clk => [7'h18:0x60:0 0], in => 0, out => 1, present_state => 1];

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    switch(present_state)
    {
        case 0 : if (in) next_state = 0;
                else next_state = 1;
                break;
        case 1 : if (in) next_state = 1;
                else next_state = 0;
                break;
        default : next_state = 0;
    }
    // delay(5ns);
    sample clock;
    always @(posedge clock)
    {
        out = .concat(present_state, next_state);
    }

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (next_state==0 and in='1') out='1';
    if (next_state==1 and in='0') out='0'
end state 0 [out,clk,reset](reset='1') out='0'

    // out_state=0 is shown sent to the output
    next_state=(present_state==0 and next_state==0) or (present_state==1 and next_state==1), // 0,1,0=>0,0,1
    // out_state=1 is shown received by the observer
    present_state=(present_state==0 and next_state==0) or (present_state==1 and next_state==0),
end;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

initial begin
  next_state = 0;
  out = 0;
  present_state = 0;
  if (reset) disable_reset_delayed();
  if (clk) disable_threshold(next_state, in);
  // if (clk) start_waiting_delayed();
  if (present_state==0 && clk==1) out = 1;
end

always @(posedge clk, posedge reset)
  if (reset)
  {
    next_state  = 0;
    out = 0;
  }
  // else if (clk)
  else if (present_state==0) {out = 1; };
  // else if (clk)
  else {
    next_state = 1;
    out = 1;
  }
  present_state = next_state;
================================================================
