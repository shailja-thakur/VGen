example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//special function
bit carry=x[0];
begin
initial    
z=present_state=IDLE

next_state Config.FSM(clk)
z=0; z=carry
S*1: next_state=S1
z=T
S1: next_state=S10
z=0; carry=1
S10: next_state=S101
z=1; carry=!carry
S101: next_state=IDLE
end

arch_init_sequence :
guard(z)
yield(z)
end
*/
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
initial state_init(
clk=0,
reset=1,
x=0
);

always @(posedge clk) 
   if (x == 1) {
     if (reset == 0) {
        next_state = S1;
      } else {
        next_state = IDLE;    
      }
   } else if(x == 0) {
     if (reset == 0) {
        next_state = S10;
      } else {
        next_state = IDLE;
      }
   } else {
     next_state = IDLE;
   }
   xmux = x;
end 

initial state_init(x=0);

always @(posedge clk) 
   local_signal_output;
   local_signal_output = next_state;
end
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    present_state = IDLE;
    next_state = IDLE;
end


reg led = 0; 

begin 
// the output led is asserted with the output when s11 is true
s11_handler(clk,reset,x,led); 
reg [2:0] s10_state, s11_is_set; 
s10_handler(clk,reset,x,s10_state, s11_is_set); 

GPOS = 1;
GPOS=;
GPOS=3
GPOS=;
GPOS=1
GPOS=;
GPOS=1
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS=
GPOS
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


`nc
#include<stdio.h>
 
//Pass the freq and x, via hardwired local variables. 
 
#include"adv_fsm.h"
clk clk; 
reset reset; 
x x; 
z z; 
 
  int idd1( int idxd )
{ 
  return idxd<0 || 0==idxd;
}
 
inline void Process()
{ 
  x = clk;

  if((x==0) && (reset==1))
  { 
  z=1;
  z=0; 
  next_state=IDLE; } 
  else if(((x==1) && ddd1(reset))==0)
  { 
  z=1;
  z=0; 
  next_state=S1
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


alu_clk_proc -> (: sm_only #1   
    if reset -1 & \out=mem(0,0)
        { /IN=0 & OUT=mem(0,0) & \tq
          wait 100ns; 
          reset idle; 
        }
        else if ( x < 1 & \out=mem(0,0) ));
        else if ( x < 1 & \out=mem(0,0) & IN = 0 ); 
        else if (x > 0 & \out=mem(0,0) & IN = 1 ); 
        else if ( x > 0 & \out=mem(0,0) & IN = 0);
    end 
    ); 

[RT] AND q=!(reset);
[RT] if rset -1 > -1 & IF q == 1 & \out!
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) //S1 or S10 or S101
{
    now_state = IDLE;
    if (x == 1 && master) //S1:
    {
       next_state = S1;
         wait();
    }
    if (x == 0 && master) //S10:
    {
       next_state = S10;
         wait();
    }
    if (x == 1 && slave)  //S101:
    {
       next_state = S101;
         wait();
    }
      present_state <= next_state;
}

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

   /* Presence Transition Vector
        | 0 | 1 | 2 | 
        |    |    |    |
V01 V10 S10  S1
 */


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


    always_comb   
    entity accept_indicator() {
      input [7:0] send_val;
      input [7:0] recv_val;
      reg cf;
      reg [7:0] delayedge_cnt;
      fu_accept_indicator // number of 0's in byte
      // 1LBL  = 0           <<1
      // 000h  = 2           <<6
      // 0000h = -1/2       <<11
      // 005h  = 2           <<11
      // 00ffh = -1/4       <<16
      // 01ffh = 3           <<16
      // ut256 is 64-bits -- 8 bytes */
      fu_accept_indicator = sequence_decoder();  
      return 1L << 16;
    }
    
    always@ (clk )   
    void
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin:
reg [2:0] p2;   // P2 indicates what square can a square is next: S1(4\'h3), S10(2\'h2)
			  // Note: Where the fourth nibble of a word is in the carry bit.
			  //       The third nibble is the MSB or LSB of the operand and the
			  //       remaining bits are then cleared anyway.
reg [7:0] present_state;

always @(posedge clk or posedge reset) begin
  z <= 0;
  next_state <= IDLE;
  switch( ( p2 >>4)&0xF )       // bitwise and with a 31-bit mask combines the four bits
  {                    // for p2 with the lsb nibble (PC bits 4-7)
    case  0u: 
      next
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    z = ~(x);
    x = x or z;
    b1 = x lsb;
    convert_b1_to_next_state( b1 );
    p = present_state;
end 

always @(posedge clk)
    if (reset) begin
        next_state = IDLE;
    end else if (p == IDLE)
        begin 
            x = x and z;
            b2 = x lsb;
            convert_b2_to_next_state( b2 );
            p = next_state; 
        end else if (p == S1 and b1 == 1)
            begin 
                x = x or z;
                b3 = x lsb;
                convert_b3_to_next_state( b3 );
                p = next_
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

   reg [1:0] current_state = IDLE;

   always @ (posedge clk) begin
         if (current_state == IDLE){
         z <= 0;
         current_state <> IDLE;
         }   
         else if( current_state == S10 && x == 1)  or

         current_state == S1 && x == 0 else if 
         current_state == S101 && x == 1  or
         current_state == IDLE () else 
         current_state == S10;

  END;
   
   always @ (posedge clock) begin
             if(rst ==1){
             z <= 0;
             current_state <> IDLE;
             }
             else if (reset == 1)

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  initial begin
     	  if (x == 101)
     		  present_state <= S101
 
      z <= present_state
 
      if ((present_state > S10) && (not rst) & (next_state > IDLE) & (x == 0))
              next_state <= IDLE
          else if ((present_state > S1) & (not rst) & (next_state > IDLE) & (x == 1))
              next_state <= S10
              z <= 1
          else
              next_state <= IDLE
  end
          

 
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @* begin
    next_state <= (x?'S10':(x?'S1':S101));
    if ((reset || !(present_state='IDLE')) && clk)
        next_state := IDLE;
end

always @* begin
    clk := ~clk;
    present_state <= 'IDLE';
end


================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    const reg [3:0] next_state = (present_state == IDLE, present_state == S10, present_state == S101);

always @*
    // clock and reset
    
      `if (reset == '0')
    T_USER_SHOW( 'A' );

// Hold on here if someone sets an input that is acessible externally 
//led0=0
//T_USER("0");
  if (present_state == IDLE){
    if(clk == '0'){
      T_USER_SHOW( 'B' );
    }
   }
// Hold on here if someone sets an input that is da accessible externally  
//led4=1
//  if (present_state == IDLE){
//    if(clk == '0'){
//      T_USER_SHOW(
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk [ != (S1 or S10) or force_sink ]) 
begin
if (force_sink) begin
    jump [ IDLE ];
end
present_state <= S1; 
present_state between S1 and S10
next_state <= present_state; 
next_state between S10 and S101
z <= 0; 
always @(posedge clk) begin
    // Set 134 to 1 when IDLE is violated
    if (!mux_clock[1]) 
        z <= 0;
    else 
        if (~present_state[1]) 
            //exc_o if x is 1, else =0, which means see if excepting already
if (mux_clock[2]) then begin
    if ((x[1] or not (x[1])) and not (x[1
================================================================
