example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == IDLE) ? SAB : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = cur_state;
    if (cur_state == SAB)
        z = 1;
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : IDLE;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : (cur_state == SB) ? IDLE : cur_state;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// This is an FSM module abro(
// input clk,
// input reset,
// input a,

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : (cur_state == SB) ? IDLE : SAB;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = cur_state;
    if ((a == 1) && (b == 1))
        next_state = SAB;
    if ((a == 1) && (b == 0))
        next_state = SA;
    if ((a == 0) && (b == 1))
        next_state = SB;
    if ((a == 0) && (b == 0))
        next_state = IDLE;
    cur_state = next_state;
    z <= cur_state;
end

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = cur_state;
    if ((a == 1) && (b == 1))
        next_state = SAB;
    if ((a == 1) && (b == 0))
        next_state = SA;
    if ((a == 0) && (b == 1))
        next_state = SB;
    if ((a == 0) && (b == 0))
        next_state = IDLE;
    cur_state = next_state;
    z <= cur_state;
end
);

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : (cur_state == SB) ? IDLE : cur_state;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : (cur_state == SB) ? IDLE : cur_state;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z = next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
