example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
{
  cur_state = IDLE;
  next_state = IDLE;
  if (a == 1 && b == 1) next_state = SAB;
  if (a == 1) next_state = SA;
  if (b == 1) next_state = SB;
  if (next_state == SA && next_state != cur_state)
  {
    next_state = IDLE;
    z = 1;
  }
  if (next_state == SB && next_state != cur_state)
  {
    next_state = IDLE;
    z = 1;
  }
  if (next_state == SAB && next_state != cur_state)
  {
    next_state = IDLE;
    z = 1;
  }
  cur_state = next
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge a or b)
    if (cur_state == IDLE)
        cur_state = a & b ? SAB : SA;
    else
        cur_state = next_state;
    next_state = cur_state;
    if (cur_state == SAB)
        z = 1;
    else
        z = 0;

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
    end
    else begin
        if (a) begin
            cur_state <= SA;
        end
        else if (b) begin
            cur_state <= SB;
        end
        else begin
            cur_state <= SAB;
        end
    end
end
// The following is an RTL model of the above FSM
module abro_model(
input clk,
input reset,
input a,
input b,
output z );
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
   if (cur_state == IDLE and a == 1 and b == 1) next_state = SAB;
   else if (cur_state == IDLE and a == 1) next_state = SA;
   else if (cur_state == IDLE and b == 1) next_state = SB;
   else if (cur_state == SA and b == 1) next_state = SAB;
   else if (cur_state == SA) next_state = IDLE;
   else if (cur_state == SB and a == 1) next_state = SAB;
   else if (cur_state == SB) next_state = IDLE;
   else if (cur_state == SAB) next_state = IDLE;
   else next_state = IDLE;
   cur_state <=
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (next_state == IDLE)
    cur_state <= IDLE;
  else if (next_state == SA)
    cur_state <= SA;
  else if (next_state == SB)
    cur_state <= SB;
  else if (next_state == SAB)
    cur_state <= SAB;
  else
    assert false;
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
    if(next_state == IDLE)
        cur_state = IDLE;
    else if(next_state == SA)
        cur_state = SA;
    else if(next_state == SB)
        cur_state = SB;
    else if(next_state == SAB)
        cur_state = SAB;
    else
        assert false;
    next_state = next_state;
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
    if (cur_state == IDLE and a and b) begin
        next_state = SAB;
    end
    if (cur_state == IDLE and a) begin
        next_state = SA;
    end
    if (cur_state == IDLE and b) begin
        next_state = SB;
    end
    if (cur_state == SA and b) begin
        next_state = SAB;
    end
    if (cur_state == SA) begin
        next_state = IDLE;
    end
    if (cur_state == SB and a) begin
        next_state = SAB;
    end
    if (cur_state == SB) begin
        next_state = IDLE;
    end
    if (cur_state == SAB)
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
z <= (a == 1) && (b == 1);

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(posedge clk or negedge reset)
next_state <= cur_state;

always @(
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    next_state <= IDLE;
    cur_state <= IDLE;
  end else begin
    next_state <= cur_state;
    cur_state <= next_state;
    z <= a & b;
  end
end

// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is S
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (next_state == IDLE)
  begin
    if (a == 1)
    begin
      cur_state = SA;
    end
    else if (b == 1)
    begin
      cur_state = SB;
    end
    else if (a == 1 and b == 1)
    begin
      cur_state = SAB;
    end
    else
    begin
      cur_state = IDLE;
    end
    next_state = cur_state;
  end
  else if (next_state == SA)
  begin
    if (b == 1)
    begin
      cur_state = SAB;
    end
    else if (a == 1)
    begin
      cur_state = SA;
    end
    else if (b ==
================================================================
