// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "reg [1:0] b;\nalways @(posedge clk) begin\n  if (in[0]) begin\n    b <= 1;\n    case(in[1])\n      case(in[2])\n        case(in[3])\n          b <= 2;\n        endcase\n      endcase\n    end\n  else\n    b <= 0;\n  pos <= b;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\n// When sel=0, assign a to out\nalways @(posedge clk) {\n  if (sel == 1) {\n    pos <= in;\n  } else if (sel == 0) {\n    pos <= in;\n  } else {\n    pos <= 0;\n  }\n}\n\nalways @(posedge clk) {\n  out <= pos;\n}\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways @(posedge in) begin\n\tif (in[0]) pos <= 1;\n\telse if (in[1]) pos <= 2;\n\telse if (in[2]) pos <= 3;\n\telse pos <= 0;\n\tif (pos==3) pos <= 2;\n\tif (pos==2) pos <= 1;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "  always @ (posedge in)\n  begin \n    case(in)\n      0: pos <= 0;\n      1: pos <= 1;\n      2: pos <= 2;\n      3: pos <= 3;\n      4: pos <= 4;\n      5: pos <= 5;\n      6: pos <= 6;\n      7: pos <= 7;\n    endcase\n  end\n"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways @(posedge clk) begin\n  if(in[0] | in[1]) { pos <= 2; }\n  else begin\n    pos <= 0;\n  end\nend\n\n/////////////////////////////////////////////////////////////////////////////\n// This is a priority encoder with 3-bit input. If none of the input bits are high, output is zero.\n// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.\nmodule priority_encoder( \ninput [3:0] in,\noutput reg [1:0] pos ); \n// When sel=1, assign b to out\n// When sel=0, assign a to out\nalways @(posedge clk) begin\n  if(in[0] | in[1] | in[2]) { pos <= 3; }"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways @(posedge clk) begin\nif (in[0]) \n    pos <= 1;\nelse if (in[1]) \n    pos <= 2;\nelse\n    pos <= 0;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "// When sel=0, assign ~b to out\nalways @(posedge clk)\nif (sel==1) {\n    pos <= in;\n} else {\n    pos <= ~in;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\n// When sel=0, POS is 1\n// When sel=1, POS is 0\nalways @(posedge clk) begin\n    if (sel==0)\n    {\n        pos <= a;\n    }\n    else\n    {\n        pos <= b;\n    }\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n if(sel) begin\n   pos <= {in[0], in[1], in[2]};\n end else begin\n   pos <= 0;\n end\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "// When sel=2, assign a to out\n// When sel=3, assign b to out\nalways @(posedge clk) begin \nif (in[2]) pos <= 2;\nelse if (in[1]) pos <= 1;\nelse if (in[0]) pos <= 0;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways @(posedge DC3) begin\n  if ( (in[0] | in[1] | in[2]) == 1 ) {\n    pos <= sel;\n  }\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "reg [1:0] sel;\nalways begin\nif ((in[0]|in[1])==0) sel <= 0;\nelse if ((in[0]==1) and (in[1]==0)) sel <= 1;\nelse if ((in[0]==0) and (in[1]==1)) sel <= 2;\nelse if ((in[0]==1) and (in[1]==1)) sel <= 3;\nend\nif (sel==0) pos <= 0;\nelse if (sel==1) pos <= 1;\nelse if (sel==2) pos <= 2;\nelse if (sel==3) pos <= 3;\nend \n"
    },
    {
      "finish_reason": "length",
      "index": 12,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways @(posedge clk) begin\n  if (sel==0) pos <= in;\n  else if (sel==1) pos <= in + 1;\nend\nend\n// 1-bit priority encoder (w/ 3-bit priority)\nmodule priority_encoder_with_3_bits( \ninput [2:0] in,\noutput reg [1:0] pos,\ninput [3:0] sel ); \n// When sel=0, assign a to out\n// When sel=1, assign b to out\n// When sel=2, assign c to out\nalways @(posedge clk) begin\n  if (sel==0) pos <= in;\n  else if (sel==1) pos <= in + 1;\n  else if (sel==2) pos <= in + 2;"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "// When sel=0, clear b\nalways @(posedge clk) begin\n    pos <= {sel, ~in[2], in[1], in[0]} & 0x3;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nalways begin\n    pos <= ~in; \nend\n"
    }
  ],
  "created": 1663535367,
  "id": "cmpl-MxnpNNKU9JqwdX6jr85PXV2j5PJtv",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1400,
    "prompt_tokens": 65,
    "total_tokens": 1465
  }
}