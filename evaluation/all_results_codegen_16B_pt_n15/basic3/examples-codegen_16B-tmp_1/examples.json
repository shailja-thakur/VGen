// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always #(INTR_DISABLED,ISERDES_2,LATENCY_3,ID_1,RSTN,ALLCONFIG) go();\n             \n    return pos;\nend\n\nreg [7:0] ser;\n            \n            input initial_E1A0;\n            input initial_E1CA;\n            input initial_E0FA;\n            input initial_E0BA;\n            \n            input initial_E0BA_m;\n            \n            input [7:0] initial_ser;\n            \n            reg [7:0] rec;\n            \n            input new_ser;\n            input s2a;\n            \n            input ser_extract;  // is a 8-bit priority encoder that consolidates four bit streams into a \n                        // byte which is written to SEROUT01 to trigger the carts.\n            \n            input"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "reg [3:0] b, sel;\nalways@(posedge clk) begin\n    if (in[0]) begin        // When in[0]=1, go to output high\n        sel <= 2-pos;\n    end else begin           // When in[0]=0, go to output low\n        sel <= 1;\n    end \n    b <= sel;\nend           \n\nalways @(posedge clk) begin\n    pos <= 0;\n    if (sel == 3)             // If decode_marker=1, carry b and insert into out\n        out <= b | priority_encoder_out_si; \n    else if (sel == 2) \n        out <= b; \n    else if (sel == 1) \n        out <= priority_encoder_fs_si;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "if ( in[1:0] == '0') begin\n        pos := 0;\n    end\nelse if ( in[1:0] == '1') begin\n        pos := 1;\n    end\nelse begin\n        pos := 2;\n    end\nend\n`\n\n#define FEEDBACK_PRIORITY 1\n\nstatic int osc1_get_frequency()\n{\n\treturn FREQ_OSC1;\n}\n\n// Only output when given\nstatic int wavebuf[BUFFER_SIZE];\nvoid pitch_osc_callback()\n{\n\t// Increment buffer position\n\t// Always 8 bytes aligned\n\tuint32_t fl = rxDev.pitch_frequency/30;\n\tfl = (fl >> 1) + (fl & 0x200 ? 2:0);\n\tuint32_t c = rxDev.pitch_pulses"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @* begin \nbit order (if sel == 1 && in[pos-1] = 0)\nbegin \n   pos = pos - 1;\n   out = b;\nend else \nbegin \n   bit posMask;\n   if (sel = 2) \n   posMask = 4-b;  \n   else \n   posMask = 4;  \n   pos = pos + 1 & posMask;\n   b = in[pos-1];\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always_seq( sel=1 ) begin\n    if (in[0])\n    pos <= 1'b0;\n    else if (in[1])\n        pos <= 1'b1;\n    else if (in[2])\n        pos <= 1'b2;\n    else\n        pos <= 1'b3;\n    pos;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "// When sel=0, and all inputs are low, assign a to out\nalways @(posedge stb) begin\n  if(in != 3'b011) pos <= 3'b000;\n  else if((in[0]) || (in[1]) || (in[2]) || (sel == 1)) pos <= 3'b010;\n  else pos <= 3'b000;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "reg [1:0] sel;\nreg [3:0] out;\nalways @* f(in, pos) begin\n    if ((in | ~in) & 1'b0) {\n        pos = pos + 1;\n    } else if ((~in | in) & 1'b0) {\n        pos = pos - 1;\n    }\n    p = pos > 2 ? [] : [2]; \n    sel = pos > 2 ? p[3] : sel; \n    out =  sel;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "priority_encoder( 1'b0, 1'b1, pos );\n// When sel=2, assign 0b to out. w=1 => out='1'\npriority_encoder( 1'b1, 1'b1, pos, 1'b1 );\n// When sel=3, assign 0b to out. w=0 => out=0\npriority_encoder( 1'b1, 1'b1, pos, 1'b0 );\n`;\n\ndefault_weights('../test/books/ieeee/matt/sec_3B72.TXT', 'bin', 258, 32, 10, process_bldr);\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "// When sel=0, assign a to out\nassign out = (sel & in) | (~sel & ~in);\n\n// The three inputs are labeled differently though\n11\n10\n00\n\n1 1 3 <= 3 2 1 = 2\n\n'''\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @* begin\n  if (in[0]) pos <= 1'b0;\n  else if (in[1]) pos <= 1'b1;\n  else\n  {\n    pos <= 1'b0;\n  }\nend\n\nalways @(posedge clock) begin\n  // Code for the individual bit\n  if (posedge[clock]) {\n#pragma debug transparent( clock, start, reset, in, helper, pos )\n  } else begin\n    pre_reset <= dea;\n    reset <= 0;\n    helper <= -1;\n    start <= 1;\n    _process_a <= 1;\n    start <= 0;\n  end\nend\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "// when sel=0, assign r to out (yields one of r, g, b)\n// when sel=2, assign r to out (yields three r)\nalways @(posedge clk) \nbegin  // when the clock finishes, pos is assigned\n  if (in) pos <= pos + 1;\nend  \n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @ (posedge clk) begin\n\tif (sel)\n\t\tpos = in;\nend\n\n// When sel=0, assign ~0 to out\nalways @ (posedge clk) begin\n\tpos <= ~in;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge sel) begin\n   pos <= in<<1;\nend\n\n// Sel selects the top 3 bits, and triggers on falling edge transitions \n// Decodes one bit of a position n inputs and n outputs.\n// Indices are listed below :\n//\n// Modules : s01s02\n// Function : ifsel\n// Indices : n0x23\n// Bit order : 3xxx2\nsimilarity_match_to_left( \ninput [7:0] in,\noutput [3:0] out ); \n// Assigns out2 = in2_bits\n//\n// Exports :\n//\n// Inputs :\n//\n// Outputs :\n//\n// Module : mm\n// Function : namematch\n// Indices : nm4xnm6xnm8x50\n// Bit order : nx50nm8x6nm4"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk or negedge rst)\n  if (rst) \n    pos <= {sel{1'b0}};\n    else if (in[3])\n      pos <= {sel{1'b0},plain{b}};\n  else if (in[2])\n    pos <= {sel{1'b1}};\n  else if (in[1])\n    pos <= {sel{1'b0},inh{b}};\n  else if (sel)\n    pos <= {sel{sel},plain{b}}; \n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "// when sel=0, assign a to out\nalways @* begin\n    pos <='1';\n    pos <='0';\n    pos <='Z';\n    pos <='W';\n    pos <='V';\n    pos <='U';\n    pos <='T';\n    pos <='S';\n    pos <='R';\n    pos <='Q';\n    pos <='P';\n    pos <= a;\n    pos <= b;\nend\n\nalways @* begin \n    output<b;\n    output<a;\nend"
    }
  ],
  "created": 1663535374,
  "id": "cmpl-vSeEHgXUwLkhkeLzQvCVtWzZlpfax",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1989,
    "prompt_tokens": 65,
    "total_tokens": 2054
  }
}