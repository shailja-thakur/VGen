example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always #(INTR_DISABLED,ISERDES_2,LATENCY_3,ID_1,RSTN,ALLCONFIG) go();
             
    return pos;
end

reg [7:0] ser;
            
            input initial_E1A0;
            input initial_E1CA;
            input initial_E0FA;
            input initial_E0BA;
            
            input initial_E0BA_m;
            
            input [7:0] initial_ser;
            
            reg [7:0] rec;
            
            input new_ser;
            input s2a;
            
            input ser_extract;  // is a 8-bit priority encoder that consolidates four bit streams into a 
                        // byte which is written to SEROUT01 to trigger the carts.
            
            input
================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [3:0] b, sel;
always@(posedge clk) begin
    if (in[0]) begin        // When in[0]=1, go to output high
        sel <= 2-pos;
    end else begin           // When in[0]=0, go to output low
        sel <= 1;
    end 
    b <= sel;
end           

always @(posedge clk) begin
    pos <= 0;
    if (sel == 3)             // If decode_marker=1, carry b and insert into out
        out <= b | priority_encoder_out_si; 
    else if (sel == 2) 
        out <= b; 
    else if (sel == 1) 
        out <= priority_encoder_fs_si;
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
if ( in[1:0] == '0') begin
        pos := 0;
    end
else if ( in[1:0] == '1') begin
        pos := 1;
    end
else begin
        pos := 2;
    end
end
`

#define FEEDBACK_PRIORITY 1

static int osc1_get_frequency()
{
	return FREQ_OSC1;
}

// Only output when given
static int wavebuf[BUFFER_SIZE];
void pitch_osc_callback()
{
	// Increment buffer position
	// Always 8 bytes aligned
	uint32_t fl = rxDev.pitch_frequency/30;
	fl = (fl >> 1) + (fl & 0x200 ? 2:0);
	uint32_t c = rxDev.pitch_pulses
================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @* begin 
bit order (if sel == 1 && in[pos-1] = 0)
begin 
   pos = pos - 1;
   out = b;
end else 
begin 
   bit posMask;
   if (sel = 2) 
   posMask = 4-b;  
   else 
   posMask = 4;  
   pos = pos + 1 & posMask;
   b = in[pos-1];
end
end

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always_seq( sel=1 ) begin
    if (in[0])
    pos <= 1'b0;
    else if (in[1])
        pos <= 1'b1;
    else if (in[2])
        pos <= 1'b2;
    else
        pos <= 1'b3;
    pos;
end

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, and all inputs are low, assign a to out
always @(posedge stb) begin
  if(in != 3'b011) pos <= 3'b000;
  else if((in[0]) || (in[1]) || (in[2]) || (sel == 1)) pos <= 3'b010;
  else pos <= 3'b000;
end

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [1:0] sel;
reg [3:0] out;
always @* f(in, pos) begin
    if ((in | ~in) & 1'b0) {
        pos = pos + 1;
    } else if ((~in | in) & 1'b0) {
        pos = pos - 1;
    }
    p = pos > 2 ? [] : [2]; 
    sel = pos > 2 ? p[3] : sel; 
    out =  sel;
end

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
priority_encoder( 1'b0, 1'b1, pos );
// When sel=2, assign 0b to out. w=1 => out='1'
priority_encoder( 1'b1, 1'b1, pos, 1'b1 );
// When sel=3, assign 0b to out. w=0 => out=0
priority_encoder( 1'b1, 1'b1, pos, 1'b0 );
`;

default_weights('../test/books/ieeee/matt/sec_3B72.TXT', 'bin', 258, 32, 10, process_bldr);

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
assign out = (sel & in) | (~sel & ~in);

// The three inputs are labeled differently though
11
10
00

1 1 3 <= 3 2 1 = 2

'''

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @* begin
  if (in[0]) pos <= 1'b0;
  else if (in[1]) pos <= 1'b1;
  else
  {
    pos <= 1'b0;
  }
end

always @(posedge clock) begin
  // Code for the individual bit
  if (posedge[clock]) {
#pragma debug transparent( clock, start, reset, in, helper, pos )
  } else begin
    pre_reset <= dea;
    reset <= 0;
    helper <= -1;
    start <= 1;
    _process_a <= 1;
    start <= 0;
  end
end


================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// when sel=0, assign r to out (yields one of r, g, b)
// when sel=2, assign r to out (yields three r)
always @(posedge clk) 
begin  // when the clock finishes, pos is assigned
  if (in) pos <= pos + 1;
end  

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk) begin
	if (sel)
		pos = in;
end

// When sel=0, assign ~0 to out
always @ (posedge clk) begin
	pos <= ~in;
end

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge sel) begin
   pos <= in<<1;
end

// Sel selects the top 3 bits, and triggers on falling edge transitions 
// Decodes one bit of a position n inputs and n outputs.
// Indices are listed below :
//
// Modules : s01s02
// Function : ifsel
// Indices : n0x23
// Bit order : 3xxx2
similarity_match_to_left( 
input [7:0] in,
output [3:0] out ); 
// Assigns out2 = in2_bits
//
// Exports :
//
// Inputs :
//
// Outputs :
//
// Module : mm
// Function : namematch
// Indices : nm4xnm6xnm8x50
// Bit order : nx50nm8x6nm4
================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or negedge rst)
  if (rst) 
    pos <= {sel{1'b0}};
    else if (in[3])
      pos <= {sel{1'b0},plain{b}};
  else if (in[2])
    pos <= {sel{1'b1}};
  else if (in[1])
    pos <= {sel{1'b0},inh{b}};
  else if (sel)
    pos <= {sel{sel},plain{b}}; 

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// when sel=0, assign a to out
always @* begin
    pos <='1';
    pos <='0';
    pos <='Z';
    pos <='W';
    pos <='V';
    pos <='U';
    pos <='T';
    pos <='S';
    pos <='R';
    pos <='Q';
    pos <='P';
    pos <= a;
    pos <= b;
end

always @* begin 
    output<b;
    output<a;
end
================================================================
