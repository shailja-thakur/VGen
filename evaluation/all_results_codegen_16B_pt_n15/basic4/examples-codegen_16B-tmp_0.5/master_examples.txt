example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel ? b : a;

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, do nothing.
// When sel=3, do nothing.
assign out = a;

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
  if (sel==0) begin
    out <= a; 
  end else begin
    out <= b; 
  end
end

// Test the multiplexer.
// $display(a, "a");
// $display(b, "b");
// $display(sel, "sel");
// $display(out, "out");
// $finish;

// Initialize the signals.
a <= 1;
b <= 2;
sel <= 0;
out <= 0;

// Run the verilog code.
// $dumpfile("test.vcd");
// $dumpvars(0, "a");
// $dumpvars(1, "b");
// $dumpvars(2, "sel");
// $dumpvars(3, "out");

// $
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk)
begin
  if (sel==0)
    out <= a;
  else
    out <= b;
end

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out. 
// When sel=3, assign b to out.
// The rest of the outputs are don't care.
assign out = (sel==0) ? a : b;
assign out = (sel==1) ? a : b;
assign out = (sel==2) ? a : b;
assign out = (sel==3) ? a : b;

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// We need to do this since we are directly connecting a and b to out.
assign out = (sel==0) ? a : b;

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign high to out.
// When sel=3, assign low to out.
always @(posedge clk) begin
  if (sel==0) out <= a;
  else if (sel==1) out <= b;
  else if (sel==2) out <= 1'b1;
  else if (sel==3) out <= 1'b0;
end

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign both a and b to out.
always @(posedge clk) begin
  if (sel == 0) out <= a;
  if (sel == 1) out <= b;
  if (sel == 2) out <= a | b;
end

================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a * 2 to out. 
// When sel=3, assign b * 2 to out. 
always @(posedge clk) begin
	case(sel)
		out <= a;
		out <= b;
		out <= a * 2;
		out <= b * 2;
	endcase
end

// Example where a and b are integers.
// This is equivalent to the above mux.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a * 2 to out. 
// When sel=3, assign b * 2 to out. 
always @
================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = (sel==0) ? a : b;

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign 0 to out. 
// When sel=3, assign 1 to out.
assign out = (sel==0) ? a : b;

================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
