example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reg [3:0] q;
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// count up to 12 and output that value on the q output
always @(posedge clk) begin
    if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    case(q)
        2'b00 : q <= 1;
        2'b01 : q <= 1;
        2'b10 : q <= 1;
        2'b11 : q <= 1;
        2'b00 : q <= 1;
        2'b01 : q <= 1;
        2'b10 : q <= 1;
        2'b11 : q <= 1;
        2'b00 : q <= 1;
        2'b01 : q <= 1;
        2'b10 : q <= 1;
        2'b11 : q <= 1;
        2'b00 : q <= 1;
        2'b01 : q <= 1;
        2'b10 : q <= 1;
        2'b11 : q <= 1;
        2'b
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 1) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset)
        q <= 0;
    else if (q == 12)
        q <= 1;
    else
        q <= q + 1;
end
// write q to the output
assign q = q;

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset) 
        q <= 1;
    else if (q == 12) 
        q <= 1;
    else
        q <= q + 1;
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = q + 1;
// on the rising edge of clk, assign q to 0, reset q
always @(posedge clk) begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reg [3:0] q_tmp;
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q_tmp + 1;
    q_tmp <= q;
end
// q_tmp is a value that is used to keep track of the last value of q
// in order to check if the counter is currently at its max value.
reg [3:0] q_tmp;
always @(posedge clk or posedge reset) begin
    if (reset) q_tmp <= 0;
    else if (q == 12) q_tmp <= 1;
    else q_tmp <= q_tmp + 1;
end
// assign the value of q to q_tmp
assign q_tmp = q;
end

// create the counter instance
================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if(reset) q <= 0;
    else if(q == 12) q <= 0;
    else q <= q + 1;
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = ( 
    (reset == 0) ? 1 :
    (q == 12) ? 1 :
    (q + 1)
);
// assign q to q + 1 on the positive edge of the clock
always @(posedge clk) begin
    q <= q + 1;
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 1) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end
// assign q to 0 on the positive edge of a reset
always @(posedge reset) begin
    q <= 0;
end
// assign q to 0 on the negative edge of a clk
always @(posedge clk) begin
    q <= 0;
end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1; 
end
// This is a counter that counts from 0 to 12
module counter( 
    input clk,
    input reset,
    output reg [12:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 0
// else if q is 12, assign q to 0
// else, decrement q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q - 1; 
end
// This is a counter that counts from 0 to 12
module
================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// this implementation is a bit hacky as we do not use the actual clock signal


always @(posedge clk or posedge reset) begin
   if (reset) q <= 0;
   else if (q == 12) q <= 1;
   else q <= q + 1;
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// always assign q to 12 at the end of each cycle
always @(posedge clk or posedge reset)
    if (reset == 1) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
    q <= 12;    
// end

================================================================
