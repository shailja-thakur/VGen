example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// always assign q to 12 on the positive edge of the clock
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
    q <= 12;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// output q

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    case (reset)
        q <= 1;
        case (q == 12) begin
            q <= 1;
        end
    else begin
        q <= q + 1;
    end
end
// output q

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = (reset == 0) ? 1 : (q + 1) % 13;
// always assign q to the next value on the clock
always @(posedge clk) q <= q;

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// display q on the positive edge of the clock
always @(posedge clk) begin
    if (q == 12) q <= 1;
    else q <= q;
end
// initial value of q
assign q <= 0;

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// The value of q is the number of months in the current year
always @(posedge clk or posedge reset)
begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) begin
        q <= 1;
    end else if (q == 12) begin
        q <= 1;
    end else begin
        q <= q + 1;
    end
end
// output q

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    q <= q + 1;
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    case(q)
        case(reset) begin q <= 1; end
        case(q == 12) begin q <= 1; end
        default begin q <= q + 1; end
    endcase
end

// this is the array that will be used to drive the counter
reg [3:0] counter_array [3:0];
// this is the output signal
output reg [3:0] q;

// this is the block that will drive the counter
counter_array <= {counter_array[3], counter_array[2], counter_array[1], counter_array[0]};

// this is the counter block
always @(posedge clk) begin
    q <= counter_array;
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// assign q to 0 on the positive edge of the clock
always @(posedge clk) begin
    q <= 0;
end

// This is a counter that counts from 1 to 12
module counter_12( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q ==
================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 1) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
