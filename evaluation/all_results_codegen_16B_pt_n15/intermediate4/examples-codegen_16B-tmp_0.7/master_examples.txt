example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if (reset) begin
		next_state <= 0;
		out <= 0;
	end
	else begin
		present_state <= next_state;
		next_state <= present_state;
		if (present_state == 0) out <= 1;
		else if (present_state == 1) out <= 0;
	end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg states[2][2]={{1,0},{0,1}};
always @(posedge clk)
begin
  if(reset) begin
    present_state <= 0;
    next_state <= 0;
  end
  else begin
    if(in) begin
      next_state <= 1;
    end
    else begin
      present_state <= next_state;
    end
  end
  out <= present_state;
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset == 1) begin
    present_state <= 0;
  end
  else begin
    switch (present_state) {
      case 0: case 1:
        if (in == 1) begin
          next_state <= present_state;
          present_state <= 1;
        end else begin
          next_state <= present_state;
          present_state <= 0;
        end
      end
    end
    out <= present_state;
  end
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
// Present states: 0, 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
  end else begin
    present_state <= next_state;
    next_state <= present_state;
  end
end
assign out = present_state;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always_ff(clk) begin
	case (present_state)
		0: if (in) begin
			next_state <= 0;
			out <= 1;
			end else begin
			next_state <= 1;
			out <= 0;
			end
		1: if (in) begin
			next_state <= 1;
			out <= 1;
			end else begin
			next_state <= 0;
			out <= 0;
			end
		end
	endcase
	present_state <= next_state;
end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if(reset)
    next_state <= 0;
  else
    next_state <= present_state;
  if(in)
    present_state <= next_state;
  else
    next_state <= present_state;
  if(present_state == 0)
    out <= 1;
  else
    out <= 0;
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if (reset == 1) begin
		present_state <= 0;
		out <= 0;
	end
	else if (present_state == 0) begin
		if (in == 1) begin
			next_state <= 0;
			out <= 1;
		end
		else begin
			next_state <= 1;
			out <= 0;
		end
	end
	else begin
		if (present_state == 1) begin
			if (in == 1) begin
				next_state <= 1;
				out <= 1;
			end
			else begin
				next_state <= 0;
				out <= 0;
			end
		end
	end
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
next_state <= 0;
else
if (present_state == 0 and in == 1)
next_state <= 0;
else
if (present_state == 1 and in == 1)
next_state <= 1;
else
next_state <= 0;
// assign output
out <= next_state;
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
  end else begin
    next_state <= (present_state == 0) ? 1 : 0;
    // out=1 in state 0 and out=0 in state 1
    out <= present_state;
    present_state <= next_state;
  end
end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset)
  begin
    present_state <= 0;
    next_state <= 0;
  end
  else if (present_state == 0)
  begin
    if (in)
    begin
      next_state <= 0;
    end
    else
    begin
      next_state <= 1;
    end
  end
  else if (present_state == 1)
  begin
    if (in)
    begin
      next_state <= 1;
    end
    else
    begin
      next_state <= 0;
    end
  end
  present_state <= next_state;
  out <= present_state;
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

simple_fsm S (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out),
    .present_state(present_state),
    .next_state(next_state)
);

initial begin
    present_state = 0;
    next_state = 0;
    out = 0;
end

// The above is equivalent to:
// initial begin
//    present_state = 0;
//    next_state = 0;
//    out = 0;
// end

always @(posedge clk or posedge reset) begin
    if (reset) begin
        present_state <= 0;
        next_state <= 0;
        out <= 0;
    end else if (present_state == 0) begin
        if (in) begin
            next_state <=
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
  end
  else begin
    case(present_state)
      0: begin
        if (in) begin
          present_state <= 1;
          next_state <= 0;
          out <= 1;
        end
        else begin
          present_state <= 0;
          next_state <= 0;
          out <= 0;
        end
      end
    endcase
  end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  present_state: case(present_state)
    0: begin
    	next_state <= 0;
    	out <= 1;
    end
    1: begin
    	next_state <= 1;
    	out <= 0;
    end
  end
end

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset)
    present_state <= 0;
  else if (in)
    next_state <= present_state;
  else
    next_state <= present_state + 1;
  out <= next_state == present_state;
  present_state <= next_state;
end
// Every clock cycle, go to next state, keeping the output
// high if present_state is 1 and low if present_state is 0
always @(posedge clk)
begin
  next_state <= present_state + 1;
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
state 0 {
	case (in) [0, 1]
		next_state = 0;
		out = 1;
		break;
	default
		next_state = 1;
		out = 0;
}
state 1 {
	case (in) [0, 1]
		next_state = 1;
		out = 1;
		break;
	default
		next_state = 0;
		out = 0;
}

================================================================
