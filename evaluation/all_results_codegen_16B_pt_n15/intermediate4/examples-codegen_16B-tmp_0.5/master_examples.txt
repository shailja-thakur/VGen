example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) begin
    present_state <= 0;
    out <= 0;
  end
  else begin
    next_state <= present_state;
    present_state <= next_state;
    out <= present_state;
  end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
  end else begin
    present_state <= next_state;
  end
end
always @(posedge clk) begin
  next_state <= present_state;
  if (present_state == 0) begin
    if (in) out <= 1;
  end else begin
    if (in) out <= 1;
  end
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) begin
		present_state = 0;
		next_state = 0;
	end
	else begin
		present_state = next_state;
		if (in) begin
			next_state = present_state;
		end else begin
			next_state = present_state;
		end
	end
	out = next_state;
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset) begin
        present_state <= 0;
        next_state <= 0;
        out <= 0;
    end
    else begin
        if (present_state == 0) begin
            if (in == 1) begin
                next_state <= 0;
            end else begin
                next_state <= 1;
            end
        end else begin
            if (in == 1) begin
                next_state <= 1;
            end else begin
                next_state <= 0;
            end
        end
        if (present_state == 0) begin
            if (in == 1) begin
                out <= 1;
            end else begin
                out <= 0;
            end
        end else begin
            if (in == 1) begin
                out <= 1;
            end else begin
                out <=
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (reset) begin
        present_state <= 0;
        next_state <= 0;
    end else begin
        present_state <= next_state;
        next_state <= present_state;
        if (present_state == 0) begin
            out <= in;
        end else begin
            out <= present_state;
        end
    end
end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset == 1) begin
present_state <= 0;
next_state <= 0;
out <= 0;
end
else begin
if (present_state == 0) begin
if (in == 1) begin
present_state <= 1;
next_state <= 1;
out <= 1;
end
else begin
if (in == 0) begin
present_state <= 0;
next_state <= 0;
out <= 0;
end
end
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset) begin
	if (reset) begin
		present_state <= 0;
		next_state <= 0;
	end else begin
		present_state <= next_state;
		next_state <= present_state;
		out <= present_state;
	end
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset) begin
present_state <= 0;
next_state <= 0;
out <= 0;
end
else begin
if (present_state == 0 and in == 1) begin
next_state <= 0;
end
else if (present_state == 0 and in == 0) begin
next_state <= 1;
end
else if (present_state == 1 and in == 1) begin
next_state <= 1;
end
else if (present_state == 1 and in == 0) begin
next_state <= 0;
end
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (reset) begin
        present_state <= 0;
        next_state <= 0;
        out <= 0;
    end else begin
        if (present_state == 0) begin
            if (in) begin
                present_state <= 1;
            end else begin
                next_state <= 0;
            end
        end else begin
            if (in) begin
                present_state <= 0;
            end else begin
                next_state <= 1;
            end
        end
        out <= present_state;
    end
end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) present_state <= 0;
  else if (present_state == 0) begin
    if (in) present_state <= 0;
    else present_state <= 1;
  end
  else if (present_state == 1) begin
    if (in) present_state <= 1;
    else present_state <= 0;
  end
  next_state <= present_state;
  out <= present_state;
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if (reset) begin
		next_state <= 0;
		out <= 0;
	end else if (present_state == 0) begin
		if (in) begin
			next_state <= 0;
		end else begin
			next_state <= 1;
		end
	end else if (present_state == 1) begin
		if (in) begin
			next_state <= 1;
		end else begin
			next_state <= 0;
		end
	end
	present_state <= next_state;
	out <= present_state;
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset == 1) begin
		present_state <= 0;
		next_state <= 0;
	end else begin
		present_state <= next_state;
		next_state <= present_state;
		if (present_state == 0) begin
			if (in == 1) begin
				next_state <= 0;
			end else begin
				next_state <= 1;
			end
		end else begin
			if (in == 1) begin
				next_state <= 1;
			end else begin
				next_state <= 0;
			end
		end
		out <= present_state;
	end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if (reset == 1) begin
		present_state <= 0;
		next_state <= 0;
	end else begin
		present_state <= next_state;
		next_state <= present_state;
		out <= present_state;
	end
end

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset) begin
        next_state <= 0;
        out <= 0;
    end
    else begin
        if (present_state == 0) begin
            next_state <= in;
            out <= in;
        end
        else begin
            next_state <= present_state;
            out <= next_state;
        end
    end
    present_state <= next_state;
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset) begin
present_state <= 0;
next_state <= 0;
out <= 0;
end
else begin
if (present_state == 0) begin
if (in) begin
next_state <= 0;
out <= 1;
end
else begin
next_state <= 1;
end
end
end

================================================================
