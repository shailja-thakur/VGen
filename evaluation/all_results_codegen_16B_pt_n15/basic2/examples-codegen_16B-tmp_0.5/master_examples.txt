example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, a && b ); 


================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate(a, b) );

    // define the ports of the and gate
    input in[2];
    output out;


================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and( a, b ) );
    
    // implement the AND gate
    always @(posedge clk)
    begin
        if (rst)
            out <= 0;
        else
            out <= a & b;
    end


================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( $out, and( a, b ) );


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign   out = a && b;


================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate( a, b ) );


================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate( a, b ) );

    // the above module should be instantiated as follows:
    // and_gate my_and_gate( a, b, out );

// -------------------------------------------------------------------

#include <iostream>
using namespace std;

// -------------------------------------------------------------------

// This module is instantiated as follows:
// and_gate my_and_gate( a, b, out );

// -------------------------------------------------------------------

// This module is instantiated as follows:
// and_gate my_and_gate( a, b, out );

// -------------------------------------------------------------------

// The instantiation of the module is done in the main program

// -------------------------------------------------------------------

void main() {
    int a = 0;
    int b = 1;
    int out = 0;

    and_gate my_and_gate( a, b, out
================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate(a, b) );


================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate( a, b ) );


//------------------------------------------------------------------------------
// Implement the AND gate
//------------------------------------------------------------------------------
module and_gate( 
    input a, 
    input b, 
    output out )
{
    // logic for the AND gate
    if ( a == 1 && b == 1 ) {
        out = 1;
    } else {
        out = 0;
    }
}

================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate( a, b ) );


================================================================
example-10: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate( a, b ) );

    // Define a task that will run the and_gate module
    task t1( my_and_gate, a, b, out );
    t1.start();
    t1.join();
    
    // Define a task that will run the and_gate module
    task t2( my_and_gate, a, b, out );
    t2.start();
    t2.join();
    
    // Define a task that will run the and_gate module
    task t3( my_and_gate, a, b, out );
    t3.start();
    t3.join();

// --------------------------------------------------------------------

int
main()
{
    // Create a system of tasks
    task_system ts;

    // Create a task that will run the and
================================================================
example-11: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = a && b;


================================================================
example-12: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and_gate.a  )
    assign( and_gate.b, a )
    assign( and_gate.out, and_gate.a && and_gate.b )


================================================================
example-13: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, a && b );

    // end of module and_gate


================================================================
example-14: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign( out, and( a, b ) );


================================================================
