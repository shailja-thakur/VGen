example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0x7F
// The output s = 0x7F and the overflow = 0

signed_adder(0x80, 0x7F, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0xFF
// The output s = 0xFF and the overflow = 1

signed_adder(0x80, 0xFF, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x80
// The output s = 0x80 and the overflow = 1

signed_adder(0xFF, 0x80, s, overflow);

// The following test case shows the signed adder for a and b
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x00
// The output s = 0x00 and the output overflow = 0x01

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF
// The output s = 0xFF and the output overflow = 0x01

signed_adder(0x00, 0xFF, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF
// The output s = 0xFF and the output overflow = 0x00

signed_adder(0xFF, 0xFF, s, overflow);

// The following test case shows the signed
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two numbers a = 0xFF and b = 0xFF. 
// The output s = 0xFF and the output overflow = 0x1. 

a = 0xFF;
b = 0xFF;
s = 0xFF;
overflow = 0x1;

// The following test case shows the signed adder for two numbers a = 0x00 and b = 0x00. 
// The output s = 0x00 and the output overflow = 0x0. 

a = 0x00;
b = 0x00;
s = 0x00;
overflow = 0x0;

// The following test case shows the signed adder for two numbers a = 0x00 and b = 0xFF. 
// The output s
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the input b. 
// The input a is assigned to the output b. 
// The input b is assigned to the output s. 
// The input overflow is assigned to the output overflow. 

signed_adder(a, b, b, a, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the input b. 
// The input a is assigned to the output b. 
// The input b is assigned to the output s. 
// The input overflow is assigned to the output overflow. 

signed_adder(a, b, s, a, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The signed adder is implemented as a 4-stage pipeline. 
// The inputs a and b are first sign extended to 32 bits. 
// The sign extended values are then added to the output s. 
// The result is then sign extended to 32 bits and the most significant bit of the result is set to 1 if the most significant bit of s is 1 and to 0 if the most significant bit of s is 0. 
// The result is then sign extended to 32 bits and the most significant bit of the result is set to 1 if the most significant bit of overflow is 1 and to 0 if the most significant bit of overflow is 0. 
// The result is then sign extended to 32 bits and the most significant bit of the result is set to 1 if the most significant bit of s is 1 and to 0 if the most significant bit of s is 0. 

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF
// The output s = 0x00 and the overflow = 0x00

signed_adder(0x00, 0xFF, 0x00, 0x00);

// The following test case shows the signed adder for a and b = 0xFF and 0x00
// The output s = 0xFF and the overflow = 0x01

signed_adder(0xFF, 0x00, 0xFF, 0x01);

// The following test case shows the signed adder for a and b = 0x00 and 0x00
// The output s = 0x00 and the overflow = 0x00

signed_adder(0x00, 0x00, 0x00, 0x00);

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are unsigned numbers.
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is high
// unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is low


unsigned_adder(a, b, s, overflow
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two positive numbers. 
// The output s is 0x00, the output overflow is 0x00. 

a = 0x00;
b = 0x01;

signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two negative numbers. 
// The output s is 0xFF, the output overflow is 0x01. 

a = 0xFF;
b = 0x00;

signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two positive numbers. 
// The output s is 0x01, the output overflow is 0x00. 

a = 0x00;
b = 0x01;

signed
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the expected output for the signed adder.
// The expected output is shown in the comments.

// Inputs: a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// Output: s = 0x00, overflow = 0x00

// Inputs: a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// Output: s = 0x00, overflow = 0x00

// Inputs: a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// Output: s = 0x00, overflow = 0x00

// Inputs: a = 0x00, b = 0x00, s = 0x00, overflow = 0
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two positive numbers. 
// The output s is 0x00, the output overflow is 0x00. 

a = 0x00;
b = 0x00;

s = signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two negative numbers. 
// The output s is 0xFF, the output overflow is 0x01. 

a = 0xFF;
b = 0xFF;

s = signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two positive numbers. 
// The output s is 0x01, the output overflow is 0x00. 

a = 0x01;
b = 0x01
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume that a and b are in the range [-128, 127]. 
// Assume that s is in the range [-128, 127]. 
// Assume that overflow is in the range [0, 1]. 
// Assume that a and b are not both zero. 
// Assume that a and b are not both negative. 
// Assume that s is not negative. 
// Assume that overflow is not 1. 
// Assume that overflow is not 0. 
// Assume that a and b are not both negative. 
// Assume that a and b are not both zero. 
// Assume that s is not negative. 
// Assume that overflow is not 1. 
// Assume that overflow is not 0. 
// Assume that a and b are not both negative. 
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test cases will be used to test your adder. 
// Note that the inputs to the adder are 8-bit 2's complement numbers. 
// The outputs are also 8-bit 2's complement numbers. 
// The overflow output is a binary value. 
// The inputs to the adder are in the range [-128, 127]. 
// The outputs are in the range [-128, 127]. 
// The overflow output is in the range [0, 1]. 

signed_adder(0, 0, 0, 0);
signed_adder(0, 1, 0, 1);
signed_adder(1, 0, 1, 0);
signed_adder(1, 1, 1, 0);
signed_adder(127, 127, 127, 0);
signed_adder(127, 128, 127,
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test vectors are provided for you to test your adder. 
// The adder should add the numbers in a and b to the output s, and the overflow bit should be set to 1 if a and b overflow. 

// a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// a = 0x01, b = 0x00, s = 0x01, overflow = 0x00
// a = 0x00, b = 0x01, s = 0x01, overflow = 0x01
// a = 0x01, b = 0x01, s = 0x00, overflow = 0x01
// a = 0x80, b = 0x7F, s = 0x80, overflow = 0x01
// a = 0x7F
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x00, respectively. 
// The output s = 0x00 and the overflow = 0x00. 

signed_adder(0xFF, 0x00, 0x00, 0x00);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF, respectively. 
// The output s = 0xFF and the overflow = 0x01. 

signed_adder(0x00, 0xFF, 0xFF, 0x01);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF, respectively. 
// The output s = 0xFF and the overflow = 0x01. 

signed_adder
================================================================
