example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  assign s = a + (s & ~b);
  assign overflow = 
    s[0:7] == (s & ~b) && s[0:7] != (s | b) &&
    s == a && (s[0:7] == (s | b)) && s[8:16'] == (s & ~a) && s[8:16'] != (s | a) &&
    s[11:15] == (s | a);
  assign overflow = 
    ((s == ~b) || (s == ~a)) && s[0] == 1 && ((a&b)[0] == ((s+b)[0] ));

  // if the most significant bits of b are low an overflow occurs when the most significant bit of s is high;
  assign overflow = 
    ((~a^b) & s[0
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder signed_adder(
    input [7:0] a,
    input [7:0] b,
    output [7:0] sig,
    output overflow
)
{
    signed_adder result;

    signed_adder_checking_assignment assignment; 

    assignment = signed_adder(a,b,sig, overflow); 
    return result;
}
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  // Check for overflow in s
  if (b[7] + ~ s[7] < ~ (0) + ~ (0) 
     or 
      b[7] + s[7]  >  (1 << 7) + (1 << 7)) {
    overflow = true;
  }
       
  // add b to s
  s[7]  +=  (1) + b[7];

  // check for s overflow
  if ( s[7] <=  (1) + b[7]) {
    overflow = true;
  }
  
  // add a to s
  s[7]  +=  a[7];

  // check for an unsigned overflow is the result > 2's complement of return value
  // We need to remove the 7th bit
  if (~s[70] < ~(0) ) {
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



//In order to add two numbers b and c where b(b[7:0]) and c(c[7:0])
//are of the form (-)2's complen, the unsigned addition of b and c
//can be implemented in the following steps:
//1. Realloding the MSBs of to c, b into b', and c' respectively, such
//that 2's complement of b' and c' are zero and replacing the 0 MSBs of b' and c'
//by 1's such that the signs of b and c are inverted
//2. Convert b' to two's complement by flipping all MSBs on the number b' and
//and adding 1 to the other MSBs if b' is negative and subtracting 1 from
//the other MSBs if b' is positive.
//3. Subtract c' from the result by adding 1 to as many MSBs on
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    initial $plus = 0;
    $plus = $plus + $a;       if ($a[12:9] == 0b111 && $a[8:0] == 0b111 && $s[7] == 0 && $overflow              
                     $plus = $plus + $b;       if ($b[12:9] == 0b111 && $b[8:0] == 0b111 && $s[7] == 0 && $overflow
                     assign final $s[7] = min($a[7] or $b[7],2) + $plus;
                     assign final $overflow

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// both a and b are set to zero at the start of each addition cycle.
// The most significant bit of s is always zero, and the carry out from one addition cycle is passed on to the carry out of next cycle.

signed_adder(a,b,s,overflow);


//************* Test code starts here ******************

 
a = 10;
a = 9;


b = 9;



s = 9;

// Expected output s = 18 and overflow = 0
// Expected output s = 19 and overflow = 1

print("a = " + a + " b = " + b + " s = " + s + " overflow = " + overflow + "\n");



//************* Test code ends here ******************



================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    begin
        if a[8] > s[8]    // if (a[8] ==0 and s[8] == 1) return ASTALL
            s[7] = s[7] + 1; // switch logical representation of sign bit

        if a[7] > s[7]
            s[6] = s[6] + 1;
        
        s[5] = s[5] + b[5]; // add a[sign-exponent-7:sign-exponent-6]  and b[sign-exponent-7:sign-exponent-6]
        s[4] = s[4] + b[4]; 
        s[3] = s[3] + b[3]; // add a[sign-exponent-5:sign-exponent-4] and b[sign-exponent-5:sign-exp
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The numbers a and b are added to the output s and an extra logical carry bit is added to s. 
// assign the logical carry of a and b to the overflow. a logical carry occurs if the most significant bit of both a and b is low.
// a logical cory is also set in the case when the most serivce bit of s is low and the most significant bit of both are high
// a logical carry is also set in the case when the most significant bit of both a and b and s are high and the most significant bit of s is low.

// a logical carry may also be set if a or b is a negative number 
  assign [7:0] carry = IF s[7]='1' THEN '0' ELSE '1'; 

// Add a[7:0] to s[7:0] with logical carry from input carry
assign s = ((
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


(* inputs *)
    // Initial state
    a [7:0] = 0b00000111;
    b [7:0] = 0b00000111;
    overflow = 0;

(* outputs *)
    s [7:0] = 0;
    overflow = 0;


// check i for overflows
    while(b [7] == 0)
    {
        // if b is still at most 7 half bits we can just make a = a + b
        s [7] = a [7] + b [7];
        // check if there has been an overflow in s
        if(a [7] < s [7] )
            overflow = 1; 

        a [7] = a [6:0];
        b [7] = b [6:0];
    }
    
// carry the last bit

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always @(posedge clk or negedge reset)
    if (reset)
      s <= 0;
    else {
      s <= a + b;
      overflow <= ((a[7:0] + b[7::0] < a[7:0]) && (s[7] == 1)) | (s[7] == 0);
    }

================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder_v1:
    assign  overflow {0}    //zero out the overflow bit, set overflow to 0
    assign  s  { a + b[7:0] }     
    assign  overflow { a == -128 || b == -128 ||
                      a == -127 || b == -127 ||
                      a == 128 || b == 128 ||
                      s == -128 || s == -127 ||
                      s == 128 || s == 129 }

================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign strt_add = ( // a always positive and b never negative, s is positive
        a[7] + b[7] >= 128 && (!(s[7])))
        |
        (!(s[7]) && a[7] >= 128 && b[7] != 128) // a >= 128, b != 128, s never high but may be low
    );

    // always true
    assign s[7:6] = (((a[7:6] + b[7:6] + strt_add) < 128) & (!(a[7:0] + b[7:0] + strt_add + s[7:6]))) & 0xc0 & (~strt_add); 


================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder     s00
 
assign            s[31:8] =  b[31:16] + b[15:0]
assign            keep_overflow = (a[31:16] > 15 and b[15:0] > 15) or (a[31:16] <= 15 and b[15:0] > 15)
assign            s[15:0] =  b[31:16] + b[15:0]
assign            overflow = keep_overflow or (a[31:16] > 15 and s[15:0] > 15) or (b[31:16] > 15 and s[15:0] > 15)
assign            s[31:16] =  a[31:16] + a[15:0]
assign            outputover = overflow
      

================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// We are the highest level sim operator and thus can enable the sim halt signal
assign #halt = 1;

s = (a > s) | (
  ((a == ~s and b >= s) or (a >= b and a != ~s)) and overflow) | overflow == 1;
    
// All visible signals and state variables are simulated


// BOOT
always @() begin
  signed_adder.s0 <= s;
  signed_adder.ovf <= overflow;

  // When using boot designs using the existing sim_main environment, the period of the oscillator is specified. However,
  // using the on_cycle_end signal, the period can be set to any number of cycles.
  // In simulation, a delay from the rising edge to the start of a period is the number of cycles that can be simulated
  // before the oscillator starts oscillation.

================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  assign s = IF((!(a[7]), a[6:0]) + (!(b[7]), b[6:0]) 
                + s[8],   
                  s[8]);      
  overflow = IF(SIG_OVERFLOW,  
                  0);
// end adder 




// Implementation is modelled after the design, located in ~/src/ediferense/adder_without_overflow.v

assign signed_adder_outputs = signed_adder(a,b,s,overflow);

================================================================
