example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z_state;
always @* begin
    cur_state <= get_state(a, b);
    z_state <= get_next_state(z_state);
end
function get_state(d_a, d_b)
    if (d_a and d_b) return (SB, A);
    if (d_a) return (SA, B);
    if (d_b) return (SB, B);
    return (IDLE, IDLE);
end
function get_next_state( z_state)
    // only z_state is changed by this FSM
    case z_state()
        case 0:case 1: return IDLE;
        case 2: case 3: return A;
        endcase
    end
end
"""
        v.add_module(fsm_module)

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;


always @(posedge clk, posedge reset, posedge A, posedge B) begin
	if @(posedge reset) begin
	  cur_state <= IDLE;
	  z <= 0;
	end
	else if @(posedge A) begin
	  if @(posedge A) cur_state <= SA;
	  z <= 1;
	end
	else if @(posedge B) begin
	  if @(posedge B) cur_state <= SB;
	  z <= 1;
	end
	else if @(posedge B) cur_state <= SAB;
	  z <= 1;
	end
	else if @(posedge A) cur_state <= SAB;
	  z <= 1;
	  // This is the function that run in every clock cycle
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z = 1;
always@(inty [4,4] a,inty [4,4] b) begin
    case("(a[0])?8\'bxxxx:((b[0])?8\'bxxxx:(((a[1] ?1\'b1:0\'b0) ?1\'b1:0\'b0) ?0\'bx:0\'b0) ?0\'bx:0\'b0)"
                    "(a[1])?8\'bxxxx:(((b[1])?8\'bxxxx:(((a[2] ?1\'b1:0\'b0) ?1\'b1:0\'b0) ?0\'bx:0\'b0) ?0\'bx:0\'b0)"
                    "(a[2])?8\'bxxxx:(((b[2])?8\'b
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @((a)!=b) {
	case (cur_state) {
		case IDLE:
			if (a) cur_state = SA;
			if (b) cur_state = SB;
			break;
		case SA:
			if (b) cur_state = SAB;
			break;
		case SB:
			if (a) cur_state = SAB;
			break;
		case SAB:
			if (a!=b) z = 1;
			cur_state = IDLE;
		}
	case next_state: next_state = cur_state;
	}

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
begin
if (reset) begin
  cur_state <= IDLE;
z <= 0;
end else begin
  if (a && b) begin
    cur_state <= SAB;
  elsif (a) begin
    cur_state <= SA;
  elsif (b) begin
    cur_state <= SB;
  end
  next_state <= cur_state;
  case(next_state)
  SAB begin
    z <= 1;
  end
  SA begin
    z <= 1;
  end
  SB begin
    z <= 1;
  end
  IDLE begin
    z <= 0;
  end
end
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// next_state is assigned based on the current signal inputs and cur_state.
// cur_state can only bounce between what is in:
// IDLE - A & B both low
// SA - A low and B high
// SB - B low and A high
// SA/B - A and B both high
// SAB  - A,B & clk '1'
always @(posedge clk || posedge reset) begin
    if (rst) next_state <= IDLE;
    else next_state <= cur_state;
    if(next_state == IDLE && (a && b)) next_state <= SA;
    if(next_state == IDLE && a) next_state <= SB;
    if(next_state == IDLE && b) next_state <= SB;
    if(next_state != IDLE && a && a) next_
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always begin
    if ((reset == 1'b1) && !a && !b) begin
        cur_state <= IDLE;
    end
    else begin
        if (clk == 1'b1) begin
            next_state <= cur_state;
            if (cur_state == IDLE && a != b)
                next_state <= SAB;
            if (a == 1 && b == 1)
                next_state <= SA;
            if (b == 1 && a == 1)
                next_state <= SB;
            if (a == 1 && b == 0)
                next_state <= SAB;
            if (b == 1 && a == 0)
                next_state <= SAB;
            if (a == 0 && b == 1)
                next_state <= SAB;
            if (a == 0 && b == 0)

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = buf[4];
always begin clk = ~clk;

if (a and b and not(reset)) begin
case (cur_state):
cur_state <= IDLE;
next_state <= IDLE;
break;
case (IDLE):
if (a and not(b) and (bfz(reset) or not(a))) begin
cur_state <= SA;
next_state <= IDLE;
end
elsif (not(a) and b and (bfz(reset) or not(a))) begin
cur_state <= SB;
next_state <= IDLE;
end
elsif (b and not(a) and (bfz(reset) or not(a))) begin
cur_state <= SB;
next_state <= IDLE;
end

case (SA):
if (b and reset) begin
cur_state
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign y = z & cur_state[0];
always @(posedge clk or posedge reset)
    case(cur_state)
        case(rreg(cur_state, 0),SB)
            cur_state <= SB;
        case(rreg(cur_state, 0),SA)
            cur_state <= SA;
        case(rreg(cur_state, 0),SAB)
            cur_state <= SAB;
        default
            cur_state <= IDLE;
    endcase

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk, posedge reset, rising_edge a)
begin
if( reset == 1 ) begin
	z <= 0;
	cur_state <= IDLE;
end else if a == 1 && b == 1 begin
	z <= a or b;
	next_state <= SAB;
end else if a == 1 begin
	z <= 1;
	next_state <= SA;
end else begin
	z <= b;
	next_state <= SB;
end
end
always @(posedge clk, rising_edge b)
begin
if( reset == 1 ) begin
	z <= 0;
	z <= 0;
	cur_state <= IDLE;
end else begin
	if cur_state == IDLE begin begin
	if a == 1 begin
		z <= 0;
		cur_state <= SA;
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z,d,pin_a,pin_b;

always
 begin
     if (clk) begin
         pin_a <= a;
         pin_b <= b;
         if (a && b) begin
             z <= 1;
         end else
         begin
             if (pin_a && pin_b) begin
                 z <= 1;
             end else if (pin_a) begin
                 next_state <= SA;
             end else if (pin_b) begin
                 next_state <= SB;
             end else begin
                 next_state <= cur_state;
             end
                 cur_state <= next_state;
         end
    end else
        begin
            if (reset) begin
                cur_state <= IDLE;
            end else
            begin
                // This is a special case for dealing with a reset
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z = 1;
assign next_state = cur_state + 1;
always @ (posedge clk or posedge reset) begin
      case (cur_state)
      case (SAB)
      case (IDLE)
        if (a && b) begin
          case (IDLE)
          case (SAB)
            next_state <= SA;
            next_state <= SB;
            next_state <= SAB;
        end
        case (SA)
          if (b) begin
            next_state <= SAB;
            z <= 1;
          end
        case (SB)
          if (a) begin
            next_state <= SAB;
            z <= 1;
          end
      end
      case (SA)
        next_state <= SA;
      end
      case (SB)
        next_state <= SB
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = cur_state;
always @ (posedge clk) begin
    // We reset the FSM when there is a fourth edge on any of clk,ra,rb.
    case (cur_state)

        // cur_state = IDLE and a and b both high
        case IDLE & (a | b) :
            cur_state = (b ? SB : (a ? SA : SAB)), next_state = cur_state;
            break;

        // cur_state = IDLE, a high, b low
        case IDLE & a :
            cur_state = (b ? AB : SB), next_state = cur_state;
            break;

        // cur_state = IDLE, b high, a low
        case IDLE & b :
            cur_state = (a ? AB : SB), next_state = cur_state;
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
module FSCGC(input clk,input reset, *gen,input a,input b,output z);
#(p::i3153997(idle001,SAB),e,3(set(1,1,idle001,SB),set0(1,idle001,SA),
	set(1,0,idle001,SA),set0(99,idle001,SAB)),e2,
	p::sb01(clk,reset,SA,SB,e2),p::sb01(a,b,e2),e3(gen->SB,z)) begin
# (1) Initialize x to stateIDLE
p::init(cur_state,IDLE);
# (2) Repeatedly process z according to e
# (3) When x::input <- changed, the bitgroup for this pbitgroup is calculated
#	
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is other than SAB
unsigned long loops;
assign z = cur_state[0] == 1;
assign cur_state = next_state;
  always @(posedge clk or posedge reset)
        begin
        if (reset) begin
        next_state <= IDLE;
        end else begin
        case (a)
        1'b0 : next_state <= SA; end
        1'b1 : next_state <= SB; end
        case (b)
        1'b0 : next_state <= SB; end
        1'b1 : next_state <= SAB; end
        default: next_state <= IDLE;
        end
        end
endabro_tb;
macro abro_latch:
        latch begin
        case (a)
        1'
================================================================
