example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 0x01;
    end
    else begin
        r_next <= r_reg;
        // r_next <= r_reg;
        feedback_value <= ~(r_reg[2] ^ r_reg[4]);
        q <= (r_reg[3] ^ feedback_value) & 0x1F;
    end
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 0;
    end
    else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ feedback_value;
        feedback_value <= r_reg[2] ^ r_reg[4];
    end
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 1'd0;
    end else begin
        r_reg <= r_reg_next;
    end
end
assign r_next { r_reg[5], r_reg[3] ^ r_reg[2] };
assign feedback_value { r_reg[2] ^ r_reg[4], r_reg[4] ^ r_reg[0] };
assign r_reg_next { r_reg, r_next };
assign q { r_reg[0], r_reg[1], r_reg[2], r_reg[3], r_reg[4] };

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= (r_reg[2] ^ r_reg[4]);
    r_reg <= r_reg[4] ^ r_reg[2];
    q <= r_next;
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk)
    if (reset) r_reg = 1;
    else if (r_reg)
    {
        feedback_value = r_reg & 2;
        r_next = (r_reg >> 2) ^ r_reg;
    }
    else
    {
        feedback_value = r_next & 2;
        r_reg = (r_reg >> 2) ^ r_next;
    }

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always_comb begin
    if (reset)
        r_reg = 1;
    else
        r_next = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    if (r_reg[2] == 1 && r_reg[4] == 1)
        feedback_value = ~r_reg[3];
    else
        feedback_value = 0;
    q = r_next;
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin 
  if (reset == 1) begin
    r_reg <= 1;
  end else begin
    r_reg[4:0] <= r_reg[4:0] ^ (r_reg[2] and 1);
    r_next <= r_reg [(2) + 1];
    feedback_value <= r_reg[4:0] ^ (r_reg[2] and 1) ^ (r_reg[4] and 1);
    q <= r_next;
  end
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
  if (reset) begin
    r_reg <= 1;
  end else begin
    r_next <= r_reg xor feedback_value;
    feedback_value <= r_reg[2] xor r_reg[3];
    q <= r_next[4:0];
  end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;

// configure reset and clock signals
// always assign these inputs to the input bits
// inputs: clk, reset, q
// outputs: r_reg[5:0], r_next[2:0], feedback_value
// reset and clock signals are inputs to our lfsr
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
        r_next <= 0;
        feedback_value <= 0;
    end
    else begin
        // define the LFSR as a shift register with a feedback
        // input and a clock input
        // our LFSR only has a clock input.
        // input clk, reset, q
        // outputs: r_reg[5:0], r_next[2:0], feedback_value
        // clock signal
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if( reset )
        r_reg <= 1;
    else {
        r_next <= r_reg;
        feedback_value <= xor(bit(2), bit(4))(r_reg);
        r_reg <= r_next & {0, 2, 4};
    }
end

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
    r_reg <= 0;
    else
    r_next <= r_reg;
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_next[4:0] ^ feedback_value;
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= (r_reg >> 2) ^ (r_reg >> 1);
    feedback_value <= (r_reg >> 2) ^ (r_reg >> 4);
    q <= r_next;
end

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_reg = feedback_value;
assign r_next = (r_reg ^ ((r_reg >> 2) & 1)) << 3 | (r_reg >> 4) & 0xF;
assign q = r_reg;
assign clk = clk & ~reset;
assign reset = reset & ~clk;

// Design a Galois LFSR with taps at bit positions 5 and 3
module lfsr2( 
    input clk,
    input reset,
    output [4:0] q
); 
// define the internal state registers
reg [4:0] r_reg;
reg [4:0] r_next;

// define the main state register
reg state;
// define the internal state registers
reg [4:0] s_reg;
reg [4:0] s_next;


================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
q = r_next;

// Initialize the register to 1
r_reg = 1;

// Logical shift right

// Assign r_next to r_reg
// Shift right by 1 bit
r_next = r_reg >> 1;
// If the most significant bit is a 1
// XOR bit position 2 of r_reg with bit position 3 of r_reg
r_next = r_next ^ (r_reg >> 3);
// Assign r_next concatenated with 4 most significant bits of r_reg to r_reg
r_reg = r_next << 3;
// Assign r_reg to the output q
q = r_reg;

// This is the feedback line
// Assign r_next to r_reg
r_next = r_reg;
// Shift left by 1 bit
r_next = r_next <<
================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) r_reg <= 0;
    else {
        r_next <= r_reg;
        feedback_value <= (r_reg[2] ^ r_reg[4]);
        q <= (r_reg[4] ^ feedback_value[0]);
        r_reg <= r_reg[2:0] & 0xf;
    }
end

================================================================
