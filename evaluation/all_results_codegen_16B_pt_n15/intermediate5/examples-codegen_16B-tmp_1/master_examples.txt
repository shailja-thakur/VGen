example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
initial begin
  if (load) begin
    if (!reset) begin
      out <= (data << amount);
    end else begin
      out <= 0;
    end
  end else begin
    if (!reset) begin
      out[0] <= (data[0] << amount);
      out[1] <= (data[1] << amount);
    end else begin
      out <= 0;
    end
  end
end
rep #52{
  config adj downshift = left;
  config adj larger = left;
}


================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* { if (load) { if (amount[0] == 0) data[1:0] = data[1:0] + amount[0]; else amount[1:0] = amount[1:0] + 1; } }
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or negedge reset) begin
if (reset == 0) begin
if (~load) begin
out <= data;
end else begin
out <= data << (amount select [0:2] data);
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* begin
	if (load > 0) begin
		out = data & LSB;
		data = data >> 1;
		amount = amount - 1;
	end
	else begin
		out = out_srl(data,amount);
		out = out_lsb(out);
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [23:0] temp;
reg out_register;
always @* begin
// when load is high, load data to temporary register
// if amount is zero, load data directly to output register
// else load data to left shifted temp register
	if ((!load) && (amount <= 48)) begin
    	temp = data;
 	end else begin
    	temp = data << amount;
	end
	out_register = (temp >> 1) | (temp[1:0] << 23);
 	out = out_register;
end


================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg out_temp;
always @(posedge clk) begin
	if (load) begin
		out_temp = data;
		data = data << (amount + 1);
		if(reset) begin
			out = out_temp;
		end else begin
			out = out_temp<<(amount+1);
		end
	end else begin
		out_temp = out
		out = out << (amount+1)
		out = out_temp
	end
end
task isp_left_rotate(){
	while(1){
		wait for question;
		out = out_temp;
	}
}
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// both left_shift and left_rotate are done parallelly
reg [2:0] rotate;
always @(posedge clk)
if(reset == 1) begin
  rotate <= 0;
end
else begin
  if (load == 1) begin
    out <= data;
  end
  else begin
    rotate <= rotate + amount;
    if ((rotate >= 8) || (rotate < 0)) begin
      out <= 0;
    end else begin
      out <= data;
      out = data << rotate; //shift
      out = out >> (8 - rotate); //right shift
    end
  end
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
	if(load == 1) begin
		out <= data;
	end else begin
		out <<= amount;
		out[0:7] = out[amount:0];
	end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
void startup()
{
	if(!load)
	{
		out = data;
        out <<= amount;
        out |= out >> (8*sizeof(out[0]) - amount);
    }
}
// tick function implemented using this module
{
    startup();
}

















// left turn on chip
smart chip;
//sysCtl module
scl k_mode,sclk_in,b_mode,rst;
//nor module
nor chiplatchedD=a,chiplatchedE=b,chiplatchedT=START;
assert(a and b and START);
//1111111111
@(^$) //just a module which waits until CARRY is set
//80000000
@(b) //a module forwarding any OUT_CARRY value to a latch
reg a=0;
================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
 if (reset) begin
  out <= data;
 end else begin
  if (load) begin
    out <= data;
  end else begin
    if (amount == 0) begin
      out <= data;
    end else begin
      out <= data[31:8];
    end
  end
end 

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always #(!load) begin // this is so a clock cycle is necessary when loading data to out
	if(reset) begin // reset only works as a translational shift operation
		out = 0;
	end
	else if(~load) begin // left shift
		out = out << amount;
		out = out | data;
	end else begin // rotation
		// filling up rotational b shift register
		// repeatedly shift out by 2 and add current value to it
		// the amount variable is changed to carry the extra lest significant bit
		amount = amount - 1;
		out = data;
		out = out << amount;
		out = out | out >> 1;
		out = out | data >> 1;
	end
end

// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk
================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
    if (load)
    begin
        out := data;
    end
    else begin
        out := out << amount;
        out[(amount>=8)?2:0] := out[7];
        amount := shift_left(8);
    end
end

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg[7:0] temp;
always @(posedge reset) begin
	if(reset) begin
		out <= 0;
		temp <= 0;
	end
	else begin
		temp <= data;
		case(amount)
			0 : begin
				out <= 1;
				out[0] := temp[1:0]
			end
			1 : begin
				out <= (temp[5:4] && pow2(3-load) && !amount_negative);
				out[0] := temp[7:6];
				out[1] := temp[3:2]
			end
			2 : begin
				out <= (0 && (temp[4] || pow2(3-load) && !amount_negative));
				out[0] := temp[6];
			end
			3 : begin
				out <= !(0 && (
================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge(clk))
begin
  if (!load) begin
    //left_shift = data << amount;
    left_shift = data << (amount);
    end
  else begin
    //out = left_shift
    out = left_shift;
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift
    //out = left_shift

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always
begin
  if (load == 1'b1)
  begin
    if (reset == 1'b1)
      out <= 0;
    else
      out <= (data << amount) | ((data & ([2:0]:1'b0)), 0);
  end
  else
  begin
    if (reset == 1'b1)
      out <= {data | 0};
    else
      out <= (data >> amount) | ((data << amount)?(out << (amount%8)):0);
  end
end

// shift left operation
module lshift(clk,reset,left,right,active,result,load,out);
input [1:0] left;
input [1:0] right;
input [1:0] active;
input [1:0] result;
input clk,reset;
input [7
================================================================
