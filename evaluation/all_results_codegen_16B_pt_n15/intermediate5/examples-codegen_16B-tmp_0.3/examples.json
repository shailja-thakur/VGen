// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset) begin\n  if (load) begin\n    out <= data;\n  end else begin\n    out <= (data << amount) | (out >> (8 - amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (reset) begin\n    out <= 0;\n  end else begin\n    if (load) begin\n      out <= data;\n    end else begin\n      out <= (data << amount) | (out >> (8-(amount)));\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (load) begin\n    out <= data;\n  end else begin\n    out <= (data << amount) | (out >> (8-amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n\tif(load) begin\n\t\tout <= data;\n\tend else begin\n\t\tout <= (data << amount) | (out >> (8-amount));\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n\tif(load) begin\n\t\tout <= data;\n\tend else begin\n\t\tout <= (data << amount) | (out >> (8-amount));\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (load) begin\n    out <= data;\n  end else begin\n    out <= (data << amount) | (out >> (32 - amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\nif(reset) begin\nout <= 0;\nend\nelse begin\nif(load) begin\nout <= data;\nend\nelse begin\nout <= (out << amount) | (out >> (32 - amount));\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (reset) begin\n    out <= 0;\n  end else begin\n    if (load) begin\n      out <= data;\n    end else begin\n      out <= (data << amount) | (out >> (8 - amount));\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n\tif(reset == 0) begin\n\t\tout <= data;\n\tend\n\telse begin\n\t\tif(load) begin\n\t\t\tout <= data;\n\t\tend\n\t\telse begin\n\t\t\tout <= (data << amount) | (out >> (8 - amount));\n\t\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset) begin\n  if (reset) begin\n    out <= 0;\n  end else if (load) begin\n    out <= data;\n  end else begin\n    out <= (data << amount) | (out >> (32 - amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (load) begin\n    out <= data;\n  end else begin\n    out <= (data << amount) | (out >> (8-amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset) begin\n\tif(reset) begin\n\t\tout <= 0;\n\tend else begin\n\t\tif(load) begin\n\t\t\tout <= data;\n\t\tend else begin\n\t\t\tout <= (out << amount) | (out >> (32-amount));\n\t\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tout <= 0;\n\tend\n\telse begin\n\t\tif (load) begin\n\t\t\tout <= data;\n\t\tend\n\t\telse begin\n\t\t\tout <= (out << amount) | (out >> (32 - amount));\n\t\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (load) begin\n    out <= data;\n  end else begin\n    out <= (data << amount) | (out >> (8-amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tout <= 0;\n\tend else if (load) begin\n\t\tout <= data;\n\tend else begin\n\t\tout <= (out << amount) | (out >> (32 - amount));\n\tend\nend\n"
    }
  ],
  "created": 1663535287,
  "id": "cmpl-2AATHcRJMA0auvTzCenGdG1fAIF4d",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1016,
    "prompt_tokens": 94,
    "total_tokens": 1110
  }
}