example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

begin

sum = a + b;
cout = sum[1:0];

end
"""

def half_adder(a, b, cout, sum):
    sum = a + b
    cout = sum[1:0]
    return cout

def half_adder_test(a, b, cout, sum):
    half_adder(a, b, cout, sum)
    return cout == 0

#print half_adder_test(2, 1, 0, 3)
#assert half_adder_test(2, 1, 0, 3) == True

print half_adder_test(1, 1, 1, 2)
assert half_adder_test(1, 1, 1, 2) == True

print half_adder_test(1, 1, 1,
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// The carry-in is set to 1 if a or b is 0.
wire carry_in;

// The carry-out is set to 1 if the sum has overflowed.
wire carry_out;

// The sum is the sum of a and b.
wire sum;

always @(posedge clk) {
	// Set carry-in to 1 if a or b is 0.
	carry_in = (a_in == 0 || b_in == 0);

	// Set carry-out to 1 if the sum has overflowed.
	carry_out = (sum > 1);

	// Set sum to the sum of a and b.
	sum = (a_in + b_in);

	// Set a_out to the sum, and b
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input  a, b;
output cout, sum;

reg [2:0] carry;
reg [1:0] sum;

always @(posedge clk) begin
  if (a == 1 && b == 1)
    sum <= carry;
  else
    carry <= carry;
  cout <= sum;
end

half_adder(a, b, cout, sum)
  carry <= 1;
  sum <= 0;
end


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg A, B, Sum;
reg [1:0] Carry;

always @(posedge clk)
begin
  Sum <= a + b;
  if( Carry )
    Cout <= {a, b};
  else
    Cout <= Sum;
end

half_adder( a, b, cout, sum );


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder with carry-in.
module full_adder_with_carryin( 
input a, b,
output cout, sum, carryin );

// This is a full adder with carry-in and carry-out.
module full_adder_with_carryin_and_carryout( 
input a, b,
output cout, sum, carryin, carryout );

// This is a full adder with carry-in and carry-out.
module full_adder_with_carryin_and_carryout_and_borrow( 
input a, b,
output cout, sum, carryin, carryout, borrow );

// This is a full add
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, cin, carry_out;

assign a_in = a;
assign b_in = b;
assign sum_out = a_in + b_in;

assign cout = sum_out;
assign carry_out = sum_out[7];


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out;

// The carry bit is the same as the carry_in input
wire carry = carry_in;

// This is the half adder function
// It takes two bits as input and produces a sum and carry-out
// The sum bit is the same as the sum output
// The carry-out bit is the same as the carry_out input
void half_adder( 
input a, b,
output cout, sum ) {
    // The first bit is added to the carry-in bit.
    // If carry-in is 1, then the value of the first bit is added to the carry-out bit.
    // If carry-in is 0, then the value of the first bit is added to the sum bit.
    // The carry-out bit is the same as the carry_in bit.
    // The sum bit is the same
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two numbers and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-out.
module half_subtractor( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts two numbers and produces a difference and carry-out.
module full_subtractor( 
input a, b,
output cout, diff );

// This is a half multiplier. A half multiplier multiplies two bits and produces a product and carry-out.
module half_multiplier( 
input a, b,
output cout, prod );

// This is a full multiplier. A full multiplier multiplies
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, cin;
wire sum_out, cout_out;

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

wire a_in, b_in, c_in, d_in, cout_out, sum_out;

// This is a half adder with carry-in. A half adder adds two bits and produces a sum and carry-out.
module half_adder_with_carryin( 
input a, b, c_in,
output cout, sum );

wire a_in, b_in, cin, cout_out, sum_out;

// This is a full adder with carry-in. A full adder adds three bits
================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

assign a_in = a;
assign b_in = b;

assign sum_out = (a_in + b_in) | carry_out;
assign carry_out = (a_in ^ b_in) & (a_in ^ sum_out);


================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is the carry-out bit.
output carry_out;

// This is the sum bit.
output sum;

// This is the carry-in bit.
input carry_in;

// This is the control signal.
input clk;

// This is the input signal a.
input a;

// This is the input signal b.
input b;

// This is the output signal cout.
output cout;

// This is the output signal sum.
output sum;

// This is the output signal carry_out.
output carry_out;

// This is the output signal carry_in.
output carry_in;

// This is the clock signal.
input clk;

// This is the input signal a.
input a;

// This is the input signal b.
input b;

// This is
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg a, b, cout, sum;

always @(posedge clk) begin
  if (rst) begin
    a <= 0;
    b <= 0;
    sum <= 0;
  end else begin
    if (a) begin
      b <= b + 1;
      cout <= a;
      sum <= sum + a;
    end else begin
      a <= a + 1;
      cout <= b;
      sum <= sum + b;
    end
  end
end


================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Wire up the inputs and outputs
wire a_in, b_in, cout_out, sum_out;

// Create a wire instance for the output signal
wire cout;

// Create the logic block
half_adder( a_in, b_in, cout_out, sum_out )
{
  // If both bits are 1, then the sum is 1 and the carry-out is 0.
  if (a_in == 1 && b_in == 1)
  {
    cout = 1;
    sum = 1;
  }
  // If both bits are 0, then the sum is 0 and the carry-out is 1.
  else if (a_in == 0 && b_in == 0)
  {
    cout = 0;
    sum = 0;
  }
  // If only one bit is 1, then the sum
================================================================
