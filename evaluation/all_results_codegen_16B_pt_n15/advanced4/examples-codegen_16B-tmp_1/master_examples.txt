example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// 32-bit operations are not done in ringing out.
//   The most significant bit is assumed to be for wrapping around.
//   e.g. a[31:0] are way too high, and in the higher number.

always{q == 32768'h0;}
always {if(!ena) q = 32'h0;}
always {if(!ena) q = 32'h0}

#2 regslw(clk, ena, wr, rd, dat, q)
regslw #5 rd, dat, ena, 'b0 rd, clk, ena, dat, q
#3 regslr(clk, ena, wr, rd, dat, q)
regslr #5 rd, dat, ena, 'b0 rd, clk, ena, dat, q

#
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
		if(load == 1 && ena == 1) q <= data;
		if(amount == 2'b10) q = sign_extend(q, 63);
		if(amount == 2'b00) q = q << 1;
		if(amount == 2'b11) q = q >> 1;
		if(amount == 2'b01) q = q >> 7;
		if(ena == 1) q = q + 1;
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


 reg [31:0] shiftmode = 2'b10; // shiftright
 // shiftleft, shiftright, shiftright, shiftleft by 1bit, 
 // shiftright by 1bit, shiftright by 8bit, shiftleft by 8bit


reg q = 16'b0; // get value at leading edge of clk
flow logic [7:0] next = shiftmode & 3; // get right value for shiftmode & 3

always @(posedge clk) begin
  if (ena) begin
    if (ena) begin
      if ((load) && (next <= 2 )) q <= data [63:0]; // select value for just loaded register
      end
    else begin
      if ((zero) && (next == 3)) q <= data [63:0]; // return all-zeros
      if ((one) && (next == 2)) q
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


assign  s   = {(1?{en:2,reg: data[63:62], input_values:[0:0]},
{reg: data[61:56],output_enable: ena,output_val: data[55:]+data[57:]})};
assign  r   = {(1?{en: 2, reg:data[61:52], input_values:[64:64]},
{ reg:data[51:48],output_val: clk.or_unique(ena,data[47:48]{por(data[47:{dn}],load)}})};
assign  la  = {en,r: iff(ena, data[63:0] ,{output_val:0}),s: iff(ena,data[63:0]:{output_val:0})};


script
        
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




assign loadmsb = {!load};
assign load15bit = load {!loadmsb, 1'b0};

assign q = {data, !load};

reg [63:0] r = 0;
reg [1:0] op = 3'h0;
reg [15:0] temp = 0;
reg [1:0] amtr =0'b0;

always @[clock] begin
    if(ena && !load[0]) begin 
        #(Q ? 1'b0 : 1'b1) = amtr;
        #(Q ? 1'b1 : 1'b0) = lsab; 
        #(r) = (Q ? 2'b01 : 2'b10) + (r); 
    end else begin
        lt = op[2:0];
        sa
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// C interface to the library
#include "Sim_lib.h"

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	//writes 0 to 2'b00, writes 1 to 2'b01, writes 2 to 2'b20, writes 3 to 2'b21
	//writes 4 to 2'b00, writes 5 to 2'b01, writes 6 to 2'b20, writes 7 to 2'b21
	//writes 8 to 2'b00, writes 9 to 2'b01, writes A to 2'b20, writes B to 2'b21
	//writes C to 2'b00, writes D to 2'b01, writes E to 2'b20, writes F to 2'b21
	//writes G to 2'b00, writes H to 2'b01, writes I to 2'b20, writes J to 2'b21
	//writes K to 2'b00, writes L to 2'b01, writes M to 2'b
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

































================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  loop
    begin
      case (amount)
        0'b00:  // 2'b00, shift perform left shift by 1 bit.
          q = 0;
        2'b01:  // 2'b01, shift perform left shift by 8 bits.
          q = data[(62 - amount) - 1:62];
        2'b10:  // 2'b10, shift perform right shift by 1 bit.
          q = data[(62 - (amount+1)) + 1:62];
        2'b11:  // 2'b11, shift perform right shift by 8 bit.
          q = data[0:62] >> amount;          
      endcase
      if(ena = '1')
        begin
          if(load = '1')
            q <= data[63:62];        
        end
  end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    int i; // internal counter
    always
    if(ena==1)
        if(load==1 && ena==1) 
            data[63:0] = data[63:0] << amount[0]; // shift by 1 bit
            // same for 8-bit shift;
        // else
            i=i+1;
            //q=data[63:0]

    always
    if(ena==1)
        if(load==1 && ena==1) 
            data[63:0] = data[63:0] >> amount[1]; // shift by 8 bits
            // same for 1-bit shift;
        else 
            q = data[63:0]; // same as above for q == data[63:0]


================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    if (ena && load)
	    q = data;
    else
    {
	    reg offset = (amount > 1)?8:1;
	    int i = 0;
	    int j = 0;
	    if (amount > 1) i = 64-amount*offset;
	    if (amount < 1) i = data+amount-1;
	    for (j = 0; j < offset; j++)
		  {
		      if (j < 1 || 8 < j)
			  // converting [7:0] to [63:61] and [00] to [62].
			  if (%amount==1) q[i-1+j] = q[i-1];
			  else q[i-1+j] = %result;
		  }
    }

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(posedge clk) 
  if(ena){
    q = ((amount == 2'b00) ? (q << 1) : --q) | start;	//shift left by 1 bit
    q = ((amount == 2'b01) ? (q << 8) : --q);	//// shift left by 8 bits
    q = ((amount == 2'b10) ? (q >> 1) : ++q); // shift right by 1 bit
    q = ((amount == 2'b11) ? (q >> 8) : ++q); // shift right by 8 bits
    if (load){ // sync 
      q = data;
    }
  }  

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


assign b = ~ena & ena & ~load;
assign a = clk ^ ~ena & ~load;

always @(posedge clk)
	if $delay$(ena)
	if b
	#(i_setup)
	if $delay$(a)
	q <= 8'b0;
	else
	q <= 8'b0 & data[63:62];  // load first
	end
end

always @(posedge clk)
	#(i_ambient)

	if ena

	#(shift_reg)
	q <= 8'b00 & data[63:62]; // select which direction and how much to shift
	end

end

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg flags;
reg rr, aa, ff;			// refresh registers
reg ww, zz, p0;

always @(posedge clk) begin
        if(!load && ena && !rr) rr = data;
        if(!ena) begin
                // Inverter aliasing 2'b0(refazer arrivando a 0)	
                if(amount == 2'b01) aa = ~aa;
                if(amount == 2'b10) ff = ~ff;
                if(amount == 2'b00) p0 = ~p0;
                if(amount == 2'b11) ww = ~ww;	
        end else begin
                // LET'S ALWAYS ENABLE FF AND PW
                flags = ena | ff | ~ww | ~p0 | ~rr;
        end
end

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg Q;
reg FSHIFT; // shift register (int64)
reg LSHIFT; // shift register (int64)


initial begin
// Instantiate clocks, regs, and interfaces.
// Set asynch signals and generate conversion times.
reg clk_period = 11;
reg [1:0] clk_step = 0;
//2012_6_29 17:00
inputs clk_i;
inputs load_i;
inputs ena_i;
input  clk_p_i;
inputs clk_s_i;
reg [0:0] q_out_i;


__reg q_out = 0;
__reg q_load = 0;
__reg q_ena = 0;

always @posedge clk_i or clk_p_i
begin

q_out_
================================================================
