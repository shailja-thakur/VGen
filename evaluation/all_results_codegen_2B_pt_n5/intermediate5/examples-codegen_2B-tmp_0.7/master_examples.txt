example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
assign load_high = (load == 1);
assign out = (load_high?&data:&out);
assign out_load = (load_high?&out:&data);
assign out_shift = (load_high?&data:&data);
assign out_shift_out = (load_high?&out:&out);
// when load is low, load the data register with the loaded data
if (load == 1) {
    assign out_load_data = (out_load == &data);
    assign out_load_load = (out_load_data?&data:&out_load);
    assign out_load_data_data = (out_load_data?&out_load:&data);
    assign out_load_load_data = (out_load_data?&out_load:
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
  if (reset) begin
    out = 0;
  end else begin
    out = data;
    load = 1;
  end else begin
    out = load_reg(load);
    load = 0;
  end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset) begin 
    load = (clk' == clk) & (reset' == reset);
    // pop data out of data register
    out = data;
    // shift the data register left by amount bits
    data = data << amount;
    // write the data register to output
    out = out << amount;
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
    if (load)
    {
        out = data;
        load = 0;
    }
    else
    {
        if (amount == 0)
        {
            out = data;
        }
        else
        {
            out = (data << amount) | (data >> (32 - amount));
        }
    }
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
  if (load)
  {
    out=data;
    load=0;
  }
  else
  {
    out=(out >> amount) | (out << (32-amount));
    out=out << amount;
  }
end
end
""")

s = simulator.Simulator()
s.reset(0)

a = 0
b = 0
for i in range(4):
    a = i
    s.expect(a)
    b = i
    s.expect(b)
    s.run(3)
    assert s.state.registers[a] == 1
    assert s.state.registers[b] == 1
    assert s.state.registers[2] == 2
    assert s.state.registers[3
================================================================
