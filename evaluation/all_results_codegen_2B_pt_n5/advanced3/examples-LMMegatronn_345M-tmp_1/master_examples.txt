example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk)
  begin
    if (!reset) begin
      // initialize
      sm0<=1'b0;
      sm1<=1'b0;
      sm10<=1'b0;
      sm100<=1'b0;
      sm1000<=1'b0;
      sm100_x<=1'b0;
      sm100_y<=1'b0;
      sm100_z<=1'b0;
      sm100_s1_x<=1'b0;
      sm100_s10<=1'b0;
      sm
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


assign z = ( States DownToDown <= 7 ) ? ( ( (x>0 || y==0) ? ( (x - 1) : (x + 1) ) * 10) : y;
assign ones = (clear_state_change_flag) ? 1'b1 : 1'b0; 

always@(posedge clk, posedge reset)
begin
  if(reset) begin
    x<=0;
  end else if( x == 1 && ones ) begin
    x<= xcount-1;
  end else if( x == 2 )begin
    x<= xcount;
  end 
end

always@(posedge clk, posedge reset)
begin
  if(reset) begin
    go_setting_state <= S2;
    go_target_history
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 assign z = present_state == S1 ? 1 : 0;// 0 if no changes keep y ISZZ input, output state only starts 
 
always@(x or y or go,present_state)
//    
// x = x + 3 + x + 3 - x - 3
// the arct_en_l 0 can be taken from denom to denom
// 0 = no changes
// 0 = clear down

always @* 
begin // default all x
    case(present_state) 
        S0: begin
            veto = 1'b0;
            if (beg == 3'b100) // no change /* true*/ 
                next_state
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


reg [1:0] present_state_d;
reg [1:0] next_state_d;
reg [2:0] q_d;

always @(posedge clk) begin
    if(reset) begin
       present_state_d <= IDLE;
    end
    else begin
       present_state_d <=present_state;
    end
end

always @(present_state) begin
    case(present_state)
        IDLE: begin
            if(x) begin
                next_state = S1; // Free run
            end
 
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


assign z = x & ~present_state ;
assign z = ~present_state ;


//always @ (x)
always @ (x or y or z) begin
  case (xx)
    x:
      if (!x && x)
         next_state <= S1;
        else
         next_state <= S13;
     S1:
      if (!x && !y)
         next_state <= S11;
        else if (x)
         next_state <= S6;
        else if (y)
         next_state <= S1
================================================================
