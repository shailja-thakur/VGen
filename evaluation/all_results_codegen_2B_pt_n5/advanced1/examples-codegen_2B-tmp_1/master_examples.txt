example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

   assign s = a + b;

   // overflow bit selection
   assign overflow = s[7:0] == 0b111<<7; 
   assign overflow_bit = s had overflow ? 1 : 0; 


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


def check_s_overflow(a, b, s, overflow, o ,i, c_i):
    if(o):
       yield i 
       o=False
     
    sValidation = int(s)
    if(i == 0):return
    aValidation = int(a)
    bValidation = int(b)

    if(c_i == 1):
        if aValidation[-3 : -1] == bValidation[-3 : -1]:
            c_i = 0
            
    sValidation += aValidation[-3 : -1] + bValidation[-3 : -1]

def check_s_equals_0(a, b, s, overflow, o ,i, c_i):
    if(o):
       yield i 
       o=False
    
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder bins( a[7:0],
                   b[7:0],
                   s[7:0],
                     ov[1:0] == '1');


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder output ;

reg a ;
reg b ;
reg out ;
reg overflow ;
 
always @n esc_dumped_to_display = @n debug('in0')$;
always @n esc_dumped_to_serial = @n debug('in0')$;
always @n esc_dumped_to_alarm = @n debug('in0')$;
alert( in$ + '@n' + in );
  
always
begin
#copy a[words] reg a[words]
#copy b[words] reg b[words]
#assign s[words] reg out
#assign overflow flag reg overflow

#ref SDo contention with IN0
@n SReadCONTAllIN;

#lsb of s[words] valid when overflows occured
not  lsb (y3.d);

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

      T logic carry, C logic overflow_flag; 
      if\^(a < b)
        overflow <= carry; 
      end;

      s <= a + b;
      C := (s [7:0] & 0100)...0;    // carry flag for overflow of the addition of a and b
      carry <= carry;   
      overflow <= overflow;

      if\^(carry)
        overflow <= '1' else overflow <= '0';

      // output overflow cause (0 = 0)
      output overflow
';


================================================================
