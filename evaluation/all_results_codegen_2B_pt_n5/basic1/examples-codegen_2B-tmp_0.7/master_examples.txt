example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
//   out = in

// Design a module that outputs a number as a string
module print_number( input number in );
// output the output in a string
//   out = "the number is " + number

// Design an interface for the number_writer
interface number_writer {
  // Write a number to a file
  void write( int number );
};

// Design a module that writes numbers to a file
module number_writer_file( input number in, output file );
// Write a number to a file
//   file.write( number );

// Design a module that reads numbers from a file
module number_reader_file( input file, output numbers );
// Read numbers from the file
//   numbers = file.read();

// Design a module that prints the numbers
module print_numbers( input numbers in );
// output the output in a string
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// Design a module that outputs the product of the input numbers
module product_assign( input in[2], output out[2] );
// fire up the product module, which returns the product of the inputs

// Design a module that has two input pins, which are input, and output
module private_assign( input in1, input in2, output out );
// input pins are private

// Design a module that outputs the sum of the input numbers
module sum_assign( input in[2], output out[2] );
// fire up the sum module, which returns the sum of the inputs

// Design a module that returns the sum of the input numbers
module sum_return( input in[2], output out[2] );
// fire up the sum return module, which returns the sum of the inputs

// Design a module that outputs the sum of the input numbers
module sum_
================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign[~](in, out);
// assign out to in
module assign( input in, output out );
// assign in to out
assign[~](in, out);
// assign in to out
module assign_assign(input in, output out);
// assign in to out
assign_assign[~](in, out);
// assign in to out
module assign_assign2(input in, output out);
// assign in to out
assign_assign2[~](in, out);


// module wire_assign( input in, output out );
// assign out to in
wire_assign[~](in, out);
// assign out to in
module assign(input in, output out);
// assign in to out
assign[~](in, out);
// assign in to out
module assign_assign(input
================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// assign in to out using a global variable

// Design a module that increments a global variable
module increment( input in_, output out_ );

// assign out to in using a global variable
module assign( input in, output out );

================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// in: [0:0]
// out: [0:0]
//
// *(out[0:0]) = in[0:0]
//
// The above pattern is called a "wire assign"

// Design a module that checks if the array contains a particular item
module check_contains( input in, output out );
// check in to out
// in: [0:0]
// out: [0:0]

// *(out[0:0]) = (in[0:0] == 100)
//
// The above pattern is called a "check contains"

// Design a module that counts the number of times an item is present in the array
module check_count( input in, output out );
// check in to out
// in: [0:0]
// out: [0:0]
//
// *(out
================================================================
