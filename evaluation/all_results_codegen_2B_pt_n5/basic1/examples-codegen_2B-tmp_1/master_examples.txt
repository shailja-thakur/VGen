example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire2vector( wire in,wire2vector out );
// determine the standard cells to each input
using CellStruct = vector<Cell>,;
vector<CellStruct> standardcells(vector<unsigned> src,vector<unsigned> dst);
// determine a vector of wires that has all the standard connections
using ChCellStandardFormConn = vector<Transformer>;
vector<ChCellStandardFormConn> standard_cellslist(vector<unsigned> src,vector<unsigned> dst);



// Main program
auto main() -> int
{
  // Possibilty to swap the inputs and outputs addresses
  using Input = wires2vectors_inptr, Ouputs = vector<wires2vectors_outptr>;
  using PyoMapping = wires2vectors_mapptr;
  
  // Ada net flow modifier computes the net flow of the inputs cells 
  
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// Let's add this to the module fir this manner:
wire_assign
    in 
    out;

// Write a test case to simulate the input and output outputs:
wire_assign
    in = 4;
    out = 5;

================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module routes(inputs{source_pll, source_phy, source_spd_out}, outputs{pxl, phy, spd_out});
module phys(inputs{pxl_path}, outputs{physical_path});
module inputs(inputs{pxl, phy, spd_out});
module outputs(outputs{source_pll, source_phy, source_spd_out, phy_rate});

// Load needed NIT files
load ("/app/load/nit/phys_interface.nel");
load ("/app/load/nit/phys_list.nel");

// Proc inputs and outputs and assign them conditionally
module_func phys_inputs = {
    .pxl = inputs{pxl_path},
    .file = edges(phys_interface_table["pxl"))
};
module_func phys_
================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// wecon out( in, last )
void wire_assign( wire in, output out ) {
	wire out_seg			= freeze(out);
	wire out_version	= output_port<3>(out).connect(in);
	wire last_bit		= output_port<4>(out).connect(
									output_port<final>(out_seg));
	wire nf(OUT,out_version,
				OUT,out_seg,
				OUT,last_bit,
				0,last_bit );

		nf				<= in;
		out				<= nf;
}
// assert( working, if not, we fix it up )
void assert_working( output out ) {
	if( !working(out) ) {
		print "WTF? isn't working :/\n";
		wacky_assert
================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// to implement
module wire_assign( int[] in_fields, input[] out_fields );
// as
module wire_assign( int[][] in_fields, input out_fields[ ] );

================================================================
