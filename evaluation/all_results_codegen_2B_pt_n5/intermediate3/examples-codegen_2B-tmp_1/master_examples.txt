example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always@ clock posedge clk;
assign feedback_value = r_reg ^ (0b11 << ((clk >> 1) & 4));
assign r_next = r_reg, r_reg.read = ((r_reg ^ r_next) & feedback_value) + 4;
assign q[4] = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
wire lfsr_sig;
always @(posedge clk) 
  // decrement bit values at output
  if (r_next[0] != 128) {
    feedback_value = r_reg[0] >> 1;
    // FXn is (FULL_DISPLAY|DISABLED|2nd FRAME|3RD_FRAME|PREVIOUS_BIT_SHIFTED)
    switch ((uint8_t)(r_reg[0] & THREE_QUARTER_MASK))
{

      case FULL_DISPLAY : for (i = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; i < 64; i = i + 1) 
        r_reg[i] = r_reg[i] & (~ONE_BIT) | (0b1 << 7
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

// automata

always @(posedge clk)
    if(reset)
        r_next = 0;
    else
	{
	// on rising clock value of feedbram will always result in the 1
	// this allows the system to process input and output with any clock
		r_next = r_reg ^ feedback_value;
		r_reg = (r_reg >> 1) | (r_next << 3);
	}

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

// clock 20 forwarded from clk 16
always @(dx)
begin
    // clock 20 for 1ms
begin
  if (clk == in_clk) // test for clk rising edge
    begin // store the CRS bits and advance the pointer
      r_reg = r_reg>>1 | (r_next & 0x80);
      r_next = r_reg<<3;
      if ((r_next is bit2) or (r_next is bit4)) {
        feedback_value = r_reg;
        r_reg = 0;
        if (not reset) r_reg = r_reg | (r_next & 0x80);
      }
    end else begin //clk rate is too slow, we are awake
      r_reg = r_reg>>1 | (r_next & 0x180); // copy 4 most
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

begin

    // code from GF(2^5) generator function of 
    // the generator circuit can draw the table below
    // check if this is what you want to use it
    // see http://manual.gamedev.net/topic/46616-the-certification-certificate-and-doxygen/index.html
    
    case (0b100001)
    {
        feedback_value = r_reg ^ (clk ? 0b11 : 0);
        if (reset != 0)
        {
            r_reg = r_next = 1;
        }
        else
        {
            r_reg = r_next;
            r_next--;
            r_next = r_next & 1 ? 293 : itr(clk);
        }
        q:output[4:0] = r_reg;
================================================================
