// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\nbegin\npresent_state <= 0;\nend\nelse\nbegin\npresent_state <= next_state;\nend\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0:\nbegin\nif(in)\nbegin\nnext_state <= 0;\nend\nelse\nbegin\nnext_state <= 1;\nend\nend\n1:\nbegin\nif(in)\nbegin\nnext_state <= 1;\nend\nelse\nbegin\nnext_state <= 0;\nend\nend\nendcase\nend\nassign out = (present_state == 1)? 1:0;\n"
    }
  ],
  "created": 1663333312,
  "id": "cmpl-ZU2Akvhiu2LUvSdFN6k7kzpjtJCXq",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 158,
    "prompt_tokens": 148,
    "total_tokens": 306
  }
}