// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n    reset = 0;\n  if (reset == 1)\n    present_state = 0;\n  else\n    present_state = in;\n  next_state = present_state;\n  out = next_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        reset = 0;\n    else\n        reset = 1;\n    if (reset == 1)\n        out = 0;\n    else\n        out = 1;\n    if (in == 1)\n        next_state = 0;\n    else\n        next_state = 1;\n    present_state = next_state;\n    if (present_state == 0)\n        out = 1;\n    if (present_state == 1)\n        out = 0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        next_state = 0;\n    else if (reset == 0)\n        next_state = 0;\n    else if (in == 1)\n        next_state = 0;\n    else if (in == 0)\n        next_state = 1;\n    else\n        next_state = 0;\n    if (next_state == 0)\n        out = 1;\n    else\n        out = 0;\n    present_state = next_state;\n"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "\nalways @(posedge clk)\n{\n  // If reset=1, go to state 0\n  if (reset == 1)\n  {\n    next_state = 0;\n  }\n  // If reset=0, go to state 1\n  else\n  {\n    next_state = 1;\n  }\n  // If in=1, go to state 0\n  if (in == 1)\n  {\n    out = 0;\n  }\n  // If in=0, go to state 1\n  else\n  {\n    out = 1;\n  }\n  present_state = next_state;\n}\n\nalways @(posedge clk)\n{\n  // If reset=1, go to state 0\n  if (reset == 1)\n  {\n    next_state = 0;\n  }\n  // If reset=0, go"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "initial begin\n    out = 0;\n    next_state = 0;\n    present_state = 0;\n    if (reset == 1'b1) begin\n        next_state = 0;\n        present_state = 0;\n    end else begin\n        next_state = 1;\n        present_state = 1;\n    end\n    if (clk == 1'b0) begin\n        if (in == 1'b0) begin\n            next_state = 0;\n            present_state = 0;\n        end else begin\n            next_state = 1;\n            present_state = 1;\n        end\n    end\nend\nend\n"
    }
  ],
  "created": 1663539974,
  "id": "cmpl-0VV5INF3G4xnCixfMClzrg0AQUUUv",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 674,
    "prompt_tokens": 148,
    "total_tokens": 822
  }
}