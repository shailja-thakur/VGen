example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// (z)
initial begin
  out = (clk = 1)Â ||Â ~reset;
  next_state = (~in - clk) & 1;
end
always begin
  out <=(next_state);
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
begin
new fsm("InitSimpleFSM_0","FSM_0", in, out, reset);
wait
new fsm("FSM0_0","FSM_0", in, out, reset);
{
  if (present_state == 1) {
    wait 10ns;
  } 
}



================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  wait(1);
  in = clk;
  {
    if (~last > reset)
      self->reset = last;
  }
#define LAST1\
  present_state.read = ~in;\
  if (~in > reset)
#define PRINT_PRESENT_STATE\
  out = (present_state == next_state?1:0);
  if (~in_stable > reset)
    {
      in_stable = reset;
      out_stable = reset;
    }
  else
    {
      {LAST} {PRINT_PRESENT_STATE}
      present_state.write = ~in;
      state_changed.read = present_state == next_state;
      if (state_changed.read)
	{
	  next_state.read = state
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg state  ={1'db,3'db,7'db}; // bit 0 = transition to next state
reg input_in     ={8'db,3'db,7'db};

initial begin
clk <= clk;
reset <= reset;
in <= in;
  next_state <= reg(0);
end

// process input
begin
if (state'X == 1 and input_in'X = 1)
{
  next_state <= 1;
}
else
{
  out <= 1'b1;
}
end

// next/final state conditions
wire state_changed;
reg state_ = next_state;

assign next_state = ~next_state;



reg WritableState[6]
begin(
   .in1 = in,
   .out = out
)
{
  clk
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// input state 0 -> state 1
assign next_state = (reset==1 && in==1 ? present_state : (reset==0 && in==0 ? present_state : next_state));
// state 0 -> state 1
assign previous_state = (reset==1 && in==0 ? present_state : previous_state);
assign causes_back_to_state1 = (reset==0 && in==1 ? out==1 : out==0 && in==1 ? 1 : prev_state==next_state ? 0 : 2);
// transition function
assign outputs = (reset==0 && in==1 ?  out==1 : out==0 && in==1 ? next_state : previous_state);
`

================================================================
