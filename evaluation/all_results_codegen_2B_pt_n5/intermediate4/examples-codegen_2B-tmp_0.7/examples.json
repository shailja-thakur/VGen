// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "reg [1:0] state_transition;\n\nalways @(posedge clk)\n    if (reset == 1)\n    {\n        reset = 0;\n    }\n    present_state <= in;\n    next_state <= state_transition[present_state];\n    if (in == 1)\n    {\n        if (present_state == 0)\n        {\n            out <= 1;\n            next_state <= 1;\n        }\n        else\n        {\n            out <= 0;\n            next_state <= 0;\n        }\n    }\n    else\n    {\n        if (present_state == 1)\n        {\n            out <= 1;\n            next_state <= 1;\n        }\n        else\n        {\n            out <= 0;\n            next_state <= 0;\n        }\n    }\n"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "// In state 0, if clk=1, reset state\n// In state 0, if clk=0, set next_state = 0\nassign next_state[(reset==1)?'1':'0'] = reset;\nassign next_state[(in==1)?'1':'0'] = in;\nassign next_state_fsm(next_state, present_state, clk, out);\n\nalways @(posedge clk)\n    if (reset == 0)\n    {\n        present_state = 0;\n    }\n    else\n    {\n        if (in == 1)\n        {\n            if (present_state == 0)\n            {\n                present_state = 1;\n            }\n        }\n        else\n        {\n            if (present_state == 1)\n            {\n                present_state = 0;\n"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\nalways @(posedge clk)\n{\n  next_state = (present_state == 0 ? 1 : 0);\n  out = !!(next_state & in);\n  if (present_state == 0 && in == 1) {\n    present_state = 1;\n  }\n  else if (present_state == 1 && in == 0) {\n    present_state = 0;\n  }\n}\n\nalways @(posedge reset)\n{\n  next_state = 0;\n  out = 1;\n}\n\n// Integer version of the above\n#pragma vector=T1_VECTOR\nINTERRUPT(T1_VECTOR)\n{\n  next_state = (present_state == 0 ? 1 : 0);\n  out = !!(next_state & in);\n  if (present_state == 0 && in == 1"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "initial begin\n  reset = 1;\n  present_state = 0;\n  next_state = 0;\n  out = 0;\n  clk = 0;\n  wait <= reset;\n  clk <= clk;\n  wait <= clk;\n  in <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <= in;\n  wait <="
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 0)\n    present_state = 0,\n    next_state = 0;\n  else if (reset == 1)\n    present_state = (in == 1) ? 1 : 0,\n    next_state = 0;\n  else if (out == 1)\n    present_state = (in == 1) ? 1 : 0,\n    next_state = (in == 1) ? 0 : 1;\n  else\n    present_state = 0,\n    next_state = 0;\n  out = present_state;\n}\n"
    }
  ],
  "created": 1663539978,
  "id": "cmpl-ubklGlpcxLo9OkSueIauQl0c1wMW2",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 936,
    "prompt_tokens": 148,
    "total_tokens": 1084
  }
}