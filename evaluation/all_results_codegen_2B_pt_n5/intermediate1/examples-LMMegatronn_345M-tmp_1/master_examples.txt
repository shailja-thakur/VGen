example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
wire xorin1, xorin2;
xor XOR1(xorin1, a, b);
xor XOR2(xorin2, a, xorin1);

assign cout = xorin1 ^ xorin2;


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire[3:0] g, p;

assign {cout,sum} = ({a, b}&{4'b0000});


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

   // This module contains all AND gate module for the arithmeticasion
   // and an AND gate whose inputs are propagating for inputs.
   //
   // This module does NOT merge the two numbers together Subtract exponents
   //

   wire   A_;
   wire   B_;
   wire   C_;
   wire   D_;
   wire   E_;
   wire   F_;
   wire   G_;
   wire   H_;
   wire   I_;
   wire   J_;
   wire   K_;

   // This block computes the ADD/SUBTRACT SELECTOR
   full_adder op1 (A_, A, B_, C_, D_, F_, G
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
wire c1, c2;
xor (c1, a, b);
xor (c2, a, b);
and (c, a, c1);
and (c3, a, c2);
or (c4, in1[3], c3); 
and (cin, sum[3], cout);
xor (c5, in1[4], carry_out);
and (c6, in1[5], sum[4]);
and (c7, in1[6], sum[5]);
and (c8, in1[7], sum[6]);
or (c9, in1[8], cout_out);
and (c10, in2[9], carry_out);
and (out, sum[9], cout_out);
or (c11, out[10], c4); 
and (out,
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
wire int0, int1;

xor (sum0, aa, b);
and (int1, sum0[0], int0);
or (cout, sum1[0], int1);


================================================================
