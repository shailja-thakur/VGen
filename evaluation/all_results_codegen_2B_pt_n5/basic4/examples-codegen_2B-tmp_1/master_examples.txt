example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=0|2, assign a to a. 
//When sel=0|2|4, select a.
// When sel=0|2|4|8, select a.
//When sel=0|2|4|8|16, four selectable outputs.

wire [6:0] onp, ofp;

wire [3:1] idx = (8&a);    
reg [5:0] dest, cnt;

mux_s mux1 = (
mux(a[7], 0b01)

or
mux(a[6:5], 0b10)

or
mux(a[4:3], 0b11)
);

wire [0:3] b[n+1:0];
 
always @ (mux_s)
begin
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
component multiplex
{
    parameter out_s = 4;
    parameter b_s = 2;
    wire [b_s::value] outb, [out_s::value] outa;
    pulse sla;
    pulse sra;
    assign outa[out_s::rs] = ina[ina[a[0]:1]];
    assign outb[out_s::d:0] = inb[inb[b[0]]];
    reg c; // Logic chanel;
    assert a<=b;
    slaaw #(1) aa;
    sla #(1) a0; 
    sla #(1) a1;
    sla #(1) a2;
    sla #(1) a3;
    sla #(1
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When a=b and sel=0, assign a to out. 
// When a=b and sel=1, assign b to out.
// When a=b and sel=1, assign a to out. 
// When a=b and sel=0, assign b to out. 
  
out = a;  //
              // For usually generated multiplexers, the "b" input
              // field is sometimes not available, in which case
              // we have to read some data from the C environment.
  
  
// This muxer does not exist on ARCA2 paper. 
// Reading from any signal from the multiplexer will disable the 
// total pins. Other muxers, e.g. ABCNE645M Nudgy5iR2 will work similarly,
// but for different input signals.

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
  */
  void mux::thread_a () {
    while(true) {
      if (sel == 0) a[0]  = 0 ;
      if (sel == 1) a[0]  = 0 ;
    }   
  }
    
  void mux::thread_out0() { 
    while(true) {
      if ((sel ==0)&&(a[1]==1)) b[0] = 0;
      else b[0] = 0 ;
    }
    
  }
    
  void mux::thread_b () {
    while(true) {
      if ((sel ==1)&&(a[1]==1)) b[0] = 1;
      else b[0] = 0 ;
    }
  }
  
  

  /******* Erlang memory example ******/
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
`);
  }
});

================================================================
