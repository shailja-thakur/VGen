example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin
case(present_state)
IDLE:
begin
if(x==1)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end 
end
S1:
begin
if(x==0)
begin
next_state = S10;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end 
end
S10:
begin
if(x==1)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end 
end
S101:
begin
next_state = IDLE;
z = 0;
end
default:
begin
next_state
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset)
	present_state <= IDLE;
else 
	present_state <= next_state;
end


always @(*)
begin
case(present_state)
	IDLE: 
	begin
	if( x == 1)
	 next_state = S1;
	else
	 next_state = IDLE;
	end
	S1: 
	begin
	 if( x == 0)
	 next_state = S10;
	else
	 next_state = IDLE;
	end
	S10:
	begin
	 if( x == 1)
	 next_state = S101;
	else
	 next_state = IDLE;
	end
	S101:
	begin
	 next_state = IDLE;
	end
	default
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// state transition
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end 
// next state logic
always @(x or present_state)
begin
case (present_state)
IDLE : 
begin
if(x)
 next_state = S1; 
else 
next_state = IDLE;
end
S1 : 
begin
if(x)
 next_state = S10; 
else 
next_state = IDLE;
end
S10 :
begin
if(x)
 next_state = S101; 
else
next_state = IDLE;
end
S101 :
begin
if(x)
 next_state = IDLE; 
else
next_state = IDLE;
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
// next state logic
always @ (present_state or x)
case (present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: next_state = IDLE;
default: next_state = IDLE;
endcase

// output logic
assign z = (present_state == S101);

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk) begin
if (reset) present_state <= IDLE; 
else present_state <= next_state;
end

always @(present_state or x) begin
case(present_state)
IDLE: begin
if (x) next_state <= S1; 
else next_state <= IDLE; 
end
S1: begin
if (x) next_state <= S10; 
else next_state <= IDLE; 
end
S10: begin
if (x) next_state <= S101; 
else next_state <= IDLE; 
end
S101: begin
if (x) next_state <= IDLE; 
else next_state <= IDLE; 
end
default: next_state <= IDLE; 
endcase
end

assign z = (present_
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always@(*)
begin
case(present_state)
IDLE: 
begin
if(~x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(~x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end
assign z = (present_state == S101)? 1 : 0;

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or reset)
begin
if (reset == 1) 
present_state <= IDLE;

else 

present_state <= next_state;
end
// next state logic
always @(present_state or x)
begin
case(present_state)
IDLE : begin
if (x==1) 
next_state = S1;
else 
next_state = IDLE;
end
S1 : begin
if (x==0) 
next_state = IDLE;
else 
next_state = S10;
end
S10 : begin
if (x==1) 
next_state = S101;
else 
next_state = IDLE;
end
S101 : begin
if (x==1) 
next_state = IDLE;
else 
next_state =
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
	present_state <= IDLE;
else
	present_state <= next_state;
end

always @(*)
begin
case(present_state)
IDLE: 
begin
if(x)
	next_state = S1;
else
	next_state = IDLE;
end
S1: 
begin
if(~x)
	next_state = S10;
else
	next_state = IDLE;
end
S10: 
begin
if(x)
	next_state = S101;
else
	next_state = IDLE;
end
S101: 
begin
next_state = IDLE;
end
endcase
end

always @(posedge clk)
begin 
case(present_state)

================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//always block to assign values to present state and next state
always @(present_state, x)
begin
	case (present_state)
	IDLE:begin
	if(x)
	next_state = S1;
	else
	next_state = IDLE;
	end
	S1:begin
	if(~x)
	next_state = S10;
	else
	next_state = IDLE;
	end
	S10:begin
	if(x)
	next_state = S101;
	else
	next_state = IDLE;
	end
	S101:begin
	next_state = IDLE;
	end
	default: next_state = IDLE;
	endcase
end
	assign z = (present_state == S101) ? 1 : 0;
always @(
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(negedge clk)
	if(reset)
	present_state = IDLE;
	else
	present_state = next_state;
	
always @(present_state,x)
	case(present_state)
	IDLE:if(x)
	next_state = S1;
	else
	next_state = IDLE;
	S1:if(~x)
	next_state = S10;
	else
	next_state = IDLE;
	S10:if(x)
	next_state = S101;
	else
	next_state = IDLE;
	S101:next_state = IDLE;
	default:next_state = IDLE;
	endcase

assign z = (present_state == S101)?1:0; 

================================================================
