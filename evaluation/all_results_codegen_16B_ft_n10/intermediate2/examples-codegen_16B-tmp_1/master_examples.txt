example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
	if(reset)
	begin
	 q<= 4'b0000;
	 end
	else if(q == 4'b0111)
	begin
	 q<= 4'b0100;
	 end
	else
	 begin
	 q <= q + 4'h01;
	 end
end



================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset) 
	q <= 4'd1;
else 
	case(q)
	4'd1:
	begin
	q <= 4'd2;
	end
	4'd2:
	begin
	q <= 4'd5;
	end
	4'd5:
	begin
	q <= 4'd8;
	end
	4'd8:
	begin
	q <= 4'd11;
	end
	4'd11:
	begin	
	q <= 4'd12;
	end
	4'd12:
	begin
	q <= 4'd1;
	end 
	endcase
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 case ({resetn,q})
	{0,1} : 
	begin q = 2;
	end 
	{0,2} : 
	begin q = 3;
	end 
	{0,3} : 
	begin q = 4;
	end 
	{0,4} : 
	begin q = 5;
	end 
	{0,5} : 
	begin q = 6;
	end 
	{0,6} : 
	begin q = 7;
	end 
	{0,7} : 
	begin q = 8;
	end 
	{0,8} : 
	begin q = 9;
	end 
	{0,9} : 
	begin q = 10;
	end 
	{
================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk )begin
if ( reset )
q <= 4'b0000;
else if ( 4'b1110 == q )
q <= 4'b0000;
else begin
q <= q + 4'd1;
end
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
 case (reset)
 1'b0 : q <= 4'd1;
 1'b1 : begin
 if (q == 4'd12) q <= 1'b0; 
 else q <= q + 1'b1;
 end
 endcase
end 

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
if (reset)
q <= 1; 
else case (q)
 4'd12: q <= 1;
// display the following numbers 
// on integer increments
default: q <= q + 1;
endcase 
end 

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk )
begin
if (reset)
 q = 4'b0000;
 else if (q == 12'hF00)
 q = 4'b0000; 
else
 q = q + 1;
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
 if ( reset )
 begin
 q <= 1;
 end
 else
 case(q)
 4'd12:
 q <= 1;
 default:
 q <= q + 1;
 endcase
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
if (reset)
	q <= 4'b0000; 
else if (q == 12)
	q <= 4'b0000;
else
	q <= q + 4'b0001; 

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b1;
	else if (q == 12)
	q <= 4'b1;
	else
	q<= q + 1;
	end

================================================================
