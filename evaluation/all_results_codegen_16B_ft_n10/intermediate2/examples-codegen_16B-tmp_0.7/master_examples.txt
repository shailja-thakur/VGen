example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
	if (reset)
	begin
	//	q <= 4'b1;
	end
	else if (q == 12)
	begin
	//	q <= 4'b1;
	end
	else
	begin
	//	q <= q + 4'b1;
	end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) 
begin
	if(reset) q <= 0;
	else if(q == 12) q <= 1;
	else q <= q + 1;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset == 1'b1)
q <= 4'd1;
else case(q)
4'd12: q <= 4'd1;
default: q <= q + 4'd1;
endcase
end
// update the LED's on the seven segment display
// when q is 0, turn off the LED
// when q is not 0, turn on the LED
always @(q) begin
case(q)
4'd0: led <= 3'b110;
4'd1: led <= 3'b011;
4'd2: led <= 3'b101;
4'd3: led <= 3'b111;
4'd4: led <= 3'b000;
4'd5: led <= 3'b100;
4'd6: led <= 3'b010;
4'd7: led <= 3'b110
================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk or posedge reset ) 
begin
if ( reset == 1'b1 )
	q <= 4'd1;
else if ( q == 12 )
	q <= 4'd1;
else
	q <= q + 4'd1;
end 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
if (reset) 
q <= 4'd1; 
else if (q == 4'd12)
q <= 4'd1; 
else 
q <= q + 4'd1; 
end 

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if(reset) 
q <= 4'b1;
else if(q == 12) 
q <= 4'b1;
else
q <= q + 1;
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) begin 
if (reset)
q <= 4'd1;
else if (q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
if(reset)
q <= 4'b0000;
else
begin
if(q == 4'd12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	case(q)
	4'b0000: q <= 4'b0001;
	4'b0001: q <= 4'b0010;
	4'b0010: q <= 4'b0011;
	4'b0011: q <= 4'b0100;
	4'b0100: q <= 4'b0101;
	4'b0101: q <= 4'b0110;
	4'b0110: q <= 4'b0111;
	4'b0111: q <= 4'b1000;
	4'b1000: q <= 4'b1001;
	4'b1001: q <= 4'b1010;
	4'b1010: q <= 4'b1011;
	4'b1011: q <=
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
	if (reset)
	q <= 1
	else
	begin
	if (q == 12)
	q <= 1
	else
	q <= q + 1
	end
end

================================================================
