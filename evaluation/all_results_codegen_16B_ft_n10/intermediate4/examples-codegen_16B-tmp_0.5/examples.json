// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(in, present_state)\nbegin\ncase(present_state)\n0: if(in)\nnext_state <= 0;\nelse\nnext_state <= 1;\n1: if(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nendcase\nend\nassign out = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @ (posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 1;\nelse\npresent_state <= next_state;\nend\nalways @ (present_state or in)\nbegin\ncase(present_state)\n0:\nif(in)\nnext_state <= 0;\nelse\nnext_state <= 1;\n1:\nif(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nendcase\nend\nassign out = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\nbegin\npresent_state <= 0;\nend\nelse\nbegin\npresent_state <= next_state;\nend\nend\nalways @(in or present_state)\nbegin\ncase(present_state)\n0:\nbegin\nif(in)\nbegin\nnext_state <= 0;\nend\nelse\nbegin\nnext_state <= 1;\nend\nend\n1:\nbegin\nif(in)\nbegin\nnext_state <= 1;\nend\nelse\nbegin\nnext_state <= 0;\nend\nend\nendcase\nend\nassign out = (present_state == 1)?1:0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "parameter S0 = 0, S1 = 1;\nalways @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= S0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\nS0: if(in)\nnext_state <= S0;\nelse\nnext_state <= S1;\nS1: if(in)\nnext_state <= S1;\nelse\nnext_state <= S0;\ndefault: next_state <= S0;\nendcase\nend\nassign out = (present_state == S1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "// out=1 in state 1 and out=0 in state 0\nparameter state0 = 0, state1 = 1;\nalways @(posedge clk)\nbegin\nif(reset)\npresent_state <= state0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\nstate0:\nbegin\nif(in)\nnext_state <= state0;\nelse\nnext_state <= state1;\nend\nstate1:\nbegin\nif(in)\nnext_state <= state1;\nelse\nnext_state <= state0;\nend\nendcase\nend\nassign out = (present_state == state1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "parameter S0=0, S1=1;\nalways @(posedge clk)\nbegin\nif(reset)\npresent_state <= S0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\nS0:\nif(in)\nbegin\nnext_state = S0;\nout = 1;\nend\nelse\nbegin\nnext_state = S1;\nout = 0;\nend\nS1:\nif(in)\nbegin\nnext_state = S1;\nout = 1;\nend\nelse\nbegin\nnext_state = S0;\nout = 0;\nend\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "parameter state0 = 0, state1 = 1;\nalways @(posedge clk)\nbegin\nif(reset)\npresent_state <= state0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\nstate0:\nbegin\nif(in)\nnext_state <= state0;\nelse\nnext_state <= state1;\nend\nstate1:\nbegin\nif(in)\nnext_state <= state1;\nelse\nnext_state <= state0;\nend\nendcase\nend\nassign out = (present_state == state1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "assign out = (present_state == 0 && in == 1) || (present_state == 1 && in == 0);\nalways @(posedge clk)\nbegin\n\tif (reset == 1'b1)\n\tbegin\n\tpresent_state <= 0;\n\tnext_state <= 0;\n\tend\n\telse\n\tbegin\n\tpresent_state <= next_state;\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "parameter state0 = 0, state1 = 1;\nalways @(posedge clk)\nbegin\nif(reset) //when reset goes high\npresent_state <= state0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\nstate0:\nbegin\nif(in)\nnext_state <= state0;\nelse\nnext_state <= state1;\nend\nstate1:\nbegin\nif(in)\nnext_state <= state1;\nelse\nnext_state <= state0;\nend\nendcase\nend\nassign out = (present_state == state1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always@(posedge clk)\nbegin\nif(reset)\n\tpresent_state <= 0;\nelse\n\tpresent_state <= next_state;\nend\nalways@(in, present_state)\nbegin\ncase(present_state)\n\t0: if(in)\n\tbegin\n\tnext_state <= 0;\n\tout <= 0;\n\tend\n\telse\n\tbegin\n\tnext_state <= 1;\n\tout <= 0;\n\tend\n\t1: if(in)\n\tbegin\n\tnext_state <= 1;\n\tout <= 0;\n\tend\n\telse\n\tbegin\n\tnext_state <= 0;\n\tout <= 1;\n\tend\nendcase\nend\n"
    }
  ],
  "created": 1663543997,
  "id": "cmpl-TMz9M5gsElKc3n5o82Wf5BKvrMSkH",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1453,
    "prompt_tokens": 148,
    "total_tokens": 1601
  }
}