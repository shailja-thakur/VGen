example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk) begin
	if (reset)
	begin	
	present_state <= 0;
	out <= 0;
	end
	else 
	begin
	present_state <= next_state;
	out <= 0;
	end
end

always@(present_state) begin
case (present_state)
0: begin
	if (in==1'b1) 
	begin
	next_state <= 0;
	out <= 0;
	end
	else begin
	next_state <= 1;
	out <= 0;
	end
end
1: begin
	if (in==1'b0) 
	begin
	next_state <= 0;
	out <= 1;
	end
	else begin
	next_state <= 1;
	out <= 0;
	end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// present state logic
always_ff @ (posedge clk or negedge reset)
if (!reset)
	present_state <= 0;
else
	present_state <= next_state;
// Next state logic
always_comb
case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
endcase
// Output logic
assign out = (present_state == 0 && next_state == 1);


================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(present_state, in)
begin
	case(present_state)
	0: if (in) next_state=0; else next_state=1;
	1: if (in) next_state=1; else next_state=0;
	default: next_state=0;
	endcase
end
always @(posedge clk)
begin
	if (reset)
	begin
	next_state=0;
	end
	else
	begin
	present_state=next_state;
	end
end
assign out = present_state;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter RST=0, LOAD=1;
always @(present_state, in)
case (present_state)
RST: if(in) next_state = LOAD;
else next_state=RST;
LOAD: if(~in) next_state = RST;
else next_state=LOAD;
endcase
//Out = (present state == LOAD)? 1:0
assign out = (present_state==LOAD)? 1:0;
always @(posedge clk)
if(reset) present_state = RST;
else present_state=next_state;


	


================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk or negedge reset)
begin
if (reset)
present_state <= reset0; // changing this random variable
else
present_state <= next_state; //changing this random variable
end
// State transition logic
always@(in or present_state or reset0)
begin
if (reset || reset0)
next_state <= reset0; 
else
begin
case(present_state)
reset0: begin
if(1)
next_state <= reset0;
else
next_state <= reset1;
end
reset1: begin
if(in) 
next_state <= reset0; 
else 
next_state <= reset1;
end
endcase
end
end
assign out = (present_state == reset0) ? 1:0;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always@(posedge clk)
begin
if (reset) 
	present_state <= 0;
else 
	present_state <= next_state;
end
always@(*)
begin
case(present_state)
	0:begin
	next_state = in;
	out = 0;
	end
	1:begin
	next_state = in;
	out = 1;
	end
endcase
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0 = 1'b0, state1 = 1'b1;

// The code goes here
always @ (in or present_state or next_state)
begin
if(present_state == state0 & in == 1)
next_state = state0;
else if(present_state == state0 & in == 0)
next_state = state1;
else if(present_state == state1 & in == 1)
next_state = state1;
else if(present_state == state1 & in == 0)
next_state = state0;
else
next_state = present_state;

end

// Output logic of FSM goes here
// assigns out = (present_state == state1) ? 1:0; 
subor asdf(out, present_state == state1, in);
always @ (present_state or
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always_ff @(posedge clk)
begin
if(reset==1)
begin
	present_state <= 0;
	next_state <= 0;
end
else
begin
	present_state <=next_state;
end
end
always_comb
begin
	out = (present_state == 1 && in ==1 ) ? 1 : 0;
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or next_state or reset)
begin
if (reset) // Active-low reset
 present_state <= 0;
else
 present_state <= next_state;
end
always @ (present_state or in or reset)
begin
case (present_state)
0 : begin
if (in)
 next_state <= 0;
else
 next_state <= 1;
end
1 : begin
if (in)
 next_state <= 1;
else
 next_state <= 0;
end
endcase
end
assign out = (present_state == 1); // Go to zero in state 0, and stay in state 1

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// defparam state0.a=0, state0.b=0, state1.a=0, state1.b=1
state_0 state0 (in, clk, reset, 0, 0, present_state); 
state_1 state1 (in, clk, reset, 0, 1, next_state);
dff df[1:0] (present_state, next_state, clk, out);

================================================================
