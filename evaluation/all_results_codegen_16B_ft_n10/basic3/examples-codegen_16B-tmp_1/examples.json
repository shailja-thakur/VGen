// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @ ( in or sel)\nbegin\ncase (sel)\n3'b000: pos = 2'b00;\n3'b001: pos = 2'b01;\n3'b010: pos = 2'b10;\n3'b011: pos = 2'b11;\n3'b100: pos = 2'b00;\n3'b101: pos = 2'b01;\n3'b110: pos = 2'b10;\n3'b111: pos = 2'b11;\ndefault: pos = 2'b00;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @* begin\ncase (in)\n3'd0: begin pos = 2'b00; end\n3'd1: begin pos = 2'b01; end\n3'd2,3'd3: begin pos = 2'b10; end\n3'd4,3'd5,3'd6,3'd7: begin pos = 2'b11; end\nendcase\nend \n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(*)\nbegin\n\tcase (in)\n\t3'b000: begin\n\t pos=2'b11;\n\tend\n\t3'b001: begin \n\t pos=2'b10;\n\tend\n\t3'b010: begin \n\t pos=2'b01;\n\tend\n\t3'b011: begin \n\t pos=2'b00;\n\tend\n\tdefault: pos = 2'b00;\n\tendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @ (in or pos) begin\ncase (in)\n3'b000: pos = 2'b00;\n3'b001: pos = 2'b01;\n3'b010: pos = 2'b10;\n3'b011: pos = 2'b11;\n3'b100: pos = 2'b10;\n3'b101: pos = 2'b11;\n3'b110: pos = 2'b11;\n3'b111: pos = 2'b11;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always@(in or negedge pos)\n if(pos==0) begin\n\tpos=2'b11;\n \tend else begin\n \tif(in[2])\n \tpos=2'b00;\t\n\telse if(in[1])\n\tpos=2'b01;\n\telse if(in[0])\n \tpos=2'b10;\n \t\n\t if(in[2] & in[1])\n\t pos=2'b00;\t\n\t else if(in[1] & in[0])\n\t pos=2'b01;\n\t else if(in[2] & in[0])\n \t pos=2'b10;\n \t else pos=2'b11;\n \tend\n"
    },
    {
      "finish_reason": "length",
      "index": 5,
      "logprobs": null,
      "text": "always @*\ncase (in)\n3'd0\t:\tpos = 2'd0;\t// inputs are cheerful and sunny\n3'd1\t:\tpos = 2'd0;\n3'd2\t:\tpos = 2'd1;\n3'd3\t:\tpos = 2'd0;\n3'd4\t:\tpos = 2'd2;\n3'd5\t:\tpos = 2'd0;\n3'd6\t:\tpos = 2'd3;\n3'd7\t:\tpos = 2'd0;\n3'd8\t:\tpos = 2'd4;\n3'd9\t:\tpos = 2'd0;\n3'd10\t:\tpos = 2'd6;\n3'd11\t:\tpos = 2'd0;\n3'd12\t:\tpos = 2'd8;\n3'd13\t:\tpos = 2'd0;\n3"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @ (in or negedge pos[1]) begin\nif ( (pos[1] == 1'b0) *& (in != 3'b000)) begin\npos[0] <= 1'b1;\npos[1] <= 1'b1;\nend else begin\npos[0] <= 1'b0; // Set high impedance\npos[1] <= 1'b0;\nend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 7,
      "logprobs": null,
      "text": "// When sel=0 & 0 in=1, assign 1 to out\n// When sel=0 & 0 in=0, check the other input bits\n// When sel=0 & 1 in=1, assign 2 to out\nalways @ ( in or sel) begin\n\t// don't need pos= ( (in[0]&sel) | (in[1]&sel) |(in[2] &sel))\n\t // Can also use for pos:\n\t // \tassign pos = (sel) ? (~in[2:0] +2'b01) : (in[2:0]); \n\tif (sel)\n\t// this is writing a function inside an always block.\n\t// 'pos' will change whenever in changes value, but not when sel changes.\n\t// Thus, the output is always equal to (in[2:0] xor 2"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(*) begin\n case(in)\n 3'b000: pos <= 2'b00; // 000 > 2 > 00\n 3'b001: pos <= 2'b01; // 001 > 5 <= 01\n 3'b010: pos <= 2'b10; // 010 > 12 <= 10\n 3'b011: pos <= 2'b11; // 011 > 19 <= 11\n 3'b100: pos <= 2'b10; // 100 > 50 <= 20\n 3'b101: pos <= 2'b11; // 101 > 77 = 61\n 3'b110: pos <= 2'b11; // 110 > 90 = 71\n 3'b111: pos <= 2'b11; // 111 > 99 = 79\n endcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @* begin\npos <= 0;\ncase(in)\n\n3'b000 : pos = 2'b00;\n3'b001 : pos = 2'b01;\n3'b010 : pos = 2'b11;\n3'b011 : pos = 2'b10;\n3'b100 : pos = 2'b01;\n3'b101 : pos = 2'b10;\n3'b110 : pos = 2'b11;\n3'b111 : pos = 2'b00;\n\nendcase\nend\n"
    }
  ],
  "created": 1663544167,
  "id": "cmpl-3CkL7TgPlNWFwgzlprJ1NycF0hM4S",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1446,
    "prompt_tokens": 65,
    "total_tokens": 1511
  }
}