example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = ((cur_state == SB)&&(a)) || ((cur_state == SAB)&&(ba));
always@(posedge clk,negedge reset)
if(!reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always@(a,b,cur_state)
case(cur_state)
IDLE : if((a==1) && (b==1))
next_state = SA;
else
next_state = IDLE;
SA : if((b==1))
next_state = SB;
else
next_state = IDLE;
SB : if((a==1))
next_state = SAB;
else
next_state = IDLE;
SAB : next_state = IDLE;
default : next_state = IDLE;
endcase

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk or posedge reset) begin
if(reset) begin
cur_state <= IDLE;
z <= 0;
end
else begin
cur_state <= next_state;
z <= 0;
end
end
always @(*) begin
case(cur_state)
IDLE: begin
if(a==0 && b==0)
next_state = IDLE;
`ifdef ABRO_VERBOSE
else
next_state = IDLE;
`endif
end
SA: begin
if(a==1 && b==0)
next_state = SAB;
`ifdef ABRO_VERBOSE
else
next_state = SA;
`endif
end
SB: begin
if(a==0 && b==1)
next_state = SAB;
`ifdef ABRO_VERB
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is not SAB
always @ ( cur_state or a or b or reset )
begin
case ( cur_state )
IDLE : begin
if ( a == 1 && b == 1)
begin
next_state = SAB;
z = 1;
end
else if ( b == 1 )
begin
next_state = SA;
z = 0;
end
else if ( a == 1 )
begin
next_state = SB;
z = 0;
end
else
next_state = IDLE;
end
SA : begin
if ( a == 1 )
begin
next_state = SAB;
z = 0;
end
else
next_state = SA;
end
SB : begin
if ( b == 1 )
begin
next_state = SAB;
z = 0;
end
else
next
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk)
begin
	if (reset)
	// Resetting the machine
	cur_state <= IDLE;
	else
	begin
	 	if (a == 1 && b == 1)
	 	cur_state <= SAB;
	 	else if (a == 1 && b==0)
	 	cur_state <= SA;
	 	else if (a == 0 && b == 1)
	 	cur_state <= SB;
	 	else
	 	cur_state <= IDLE;
	 end
end
always @ (cur_state)
begin
	case(cur_state)
	IDLE:
	begin
	//Edit the code so that cur_state changes to SB when b = 0 and a = 0. Remember that a = 0 and b = 1 is equivalent to b = 1 and a
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @ (posedge clk )
begin
if (cur_state == IDLE && a && b)
begin
cur_state <= SAB;
end
else if (cur_state == IDLE && a)
begin
cur_state <= SA;
end
else if (cur_state == IDLE && b)
begin
cur_state <= SB;
end
else if (cur_state == SA && b)
begin
cur_state <= SAB;
end
else if (cur_state == SB && a)
begin
cur_state <= SAB;
end
else if (cur_state == SAB && a && b)
begin
cur_state <= IDLE;
end
else
begin
cur_state <= cur_state;
end
end
always @ (posedge clk )
begin
next_state <= cur_state;
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// Otherwise, z is assigned zero
always@(posedge clk) 
begin
	if(reset) 
	cur_state <= IDLE;
	else 
	cur_state <= next_state;
end
always@(reset or cur_state or a or b) 
begin
	next_state = IDLE;
	if (cur_state == IDLE) 
	begin
	if(reset) 
	begin 
	next_state = IDLE;
	end 
	else if(a==1'b1) 
	begin
	next_state = SA;
	end 
	else if (b == 1'b1) 
	begin
	next_state = SB;
	end
	else 
	begin
	next_state = IDLE;
	end
	end
	else if(cur_
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is untassigned whenever other combinations for a or b can occur too
always @(posedge clk or negedge reset)
begin
if(reset == 1'b1)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b )
begin
next_state = IDLE;
casex({cur_state,a,b})
IDLE : if(b)
next_state = SB;
else if(a)
next_state = SA;
endcase
casex({cur_state,a,b})
SA: if(b)
next_state = SAB;
else
next_state = SA;
SAB: if(a)
next_state = IDLE;
else
next_state = SAB;
SB: if(b)
next_
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ ( cur_state or b or a )
begin
case (cur_state)
IDLE:
begin
if(a && b)
next_state = SA;
else
next_state = IDLE;
end
SA:
begin
if(a)
next_state = SA;
else if (b)
next_state = SB;
else
next_state = IDLE;
end
SB:
begin
if(a)
next_state = SAB;
else
next_state = SB;
end
SAB:
next_state = IDLE;
endcase
end
always @ ( a or b )
begin
case (cur_state)
ID
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise
assign z = (cur_state == SAB);

always @ (cur_state)
begin
if (cur_state == SB && a == 0)
next_state = SA;
else
next_state = cur_state;
end

always @ (posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(*)
begin
	case(cur_state)
	IDLE: begin
	z = 0;
	if(a)	next_state = SA;
	else if(b)	next_state = SB;
	end
	SA: begin
	z = 0;
	if(b)	next_state = SAB;
	else if(a)	next_state = SA;
	end
	SB: begin
	z = 0;
	if(a)	next_state = SAB;
	else if(b)	next_state = SB;
	end
	SAB: begin
	z = 1;
	if(a)	next_state = SA;
	else if(b)	next_state = SB;
	end
	endcase

end

always @(posedge clk,posed
================================================================
