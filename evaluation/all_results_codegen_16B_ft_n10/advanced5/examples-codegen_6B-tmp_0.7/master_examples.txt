example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a == 1) {
    if (b == 0) {
      next_state <= SA;
    } else {
      next_state <= SAB;
    }
  } else if (b == 1) {
    if (a == 0) {
      next_state <= SB;
    } else {
      next_state <= SAB;
    }
  }
  if (cur_state == SA && a == 1) {
    next_state <= SAB;
  }
  if (cur_state == SB && a == 1) {
    next_state <= SAB;
  }
  if (cur_state == SAB && a == 1) {
    next_state <= IDLE;
  
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  cur_state <= next_state;
  if (a == 1 && b == 1) next_state <= SAB;
  if (a == 1) next_state <= SA;
  if (b == 1) next_state <= SB;
  if (cur_state == IDLE && a == 1 && b == 1) next_state <= SAB;
  if (cur_state == IDLE) next_state <= SA;
  if (cur_state == IDLE) next_state <= SB;
  if (cur_state == SA && b == 1) next_state <= SAB;
  if (cur_state == SB && a == 1) next_state <= SAB;
  if (cur_state == SAB) next_state <= IDLE;
  z <= 1;
end

// This is an
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
initial begin
cur_state = IDLE;
next_state = IDLE;
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= SA;
    if (cur_state == SA && a == 1 && b == 1) next_state <= SAB;
    if (cur_state == SA && a == 1) next_state <= SB;
    if (cur_state == SA && b == 1) next_state <= SAB;
    if (cur_state == SB && a == 1) next_state <= SAB;
    if (cur_state == SB && b == 1) next_state <= SA;
    if (cur_state == SAB) next_state <= IDLE;
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= cur_state;
  z <= (cur_state == SAB);
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
z <= a or b or (cur_state == SAB and a and b);

always @(posedge clk)
if (cur_state == IDLE) begin
	next_state = next_state^1;
	cur_state = next_state;
end


================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE)
    begin
        if (a == 1 and b == 1)
            if (next_state == IDLE)
                next_state = SAB;
                if (next_state == SAB)
                    next_state = IDLE;
            end
        else if (a == 1 and b == 0)
            if (next_state == IDLE)
                next_state = SA;
                if (next_state == SA)
                    next_state = IDLE;
            end
        else if (a == 0 and b == 1)
            if (next_state == IDLE)
                next_state = SB;
                if (next_state == SB)
                    next_state = IDLE;
            end
        else if (a == 0 and b == 0)
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  z <= a & b;
always @(negedge clk)
  cur_state <= next_state;

// The following is non-deterministic.
// The inputhesis is a constraint
always @(posedge clk)
  begin
    if (cur_state == next_state)
      next_state = next_state + 1;
    else if (cur_state == IDLE)
      next_state = SA;
    else if (cur_state == SA)
      next_state = SB;
    else if (cur_state == SB)
      next_state = SAB;
    else if (cur_state == SAB)
      next_state = IDLE;
  end
end

module tb_abro(
input clk,
input reset,
input a,

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  cur_state = IDLE;
  next_state = IDLE;
  if (a == 1) {
    cur_state = SA;
  }
  if (b == 1) {
    cur_state = SB;
  }
  if (a == 1 && b == 1) {
    cur_state = SAB;
  }
  next_state = next_state;
end

// The module outputs signal z whenever the FSM transitions
always @(posedge clk) begin
  if (cur_state == IDLE && next_state == SA) {
    z = 1;
  } else if (cur_state == IDLE && next_state == SB) {
    z = 1;
  } else if (cur_state == IDLE && next_state == SAB) {
    
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (reset)
  begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else if (a)
  begin
    cur_state <= SA;
  end
  else if (b)
  begin
    cur_state <= SB;
  end
  else if (cur_state == IDLE and a and b)
  begin
    next_state <= SAB;
  end
  else if (cur_state == IDLE and a)
  begin
    next_state <= SA;
  end
  else if (cur_state == IDLE and b)
  begin
    next_state <= SB;
  end
  else if (cur_state == SA and b)
  begin
    next_state <= SAB;

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge rst) begin
	if (rst) cur_state = IDLE;
	else if (cur_state == IDLE)
		if (a==1 and b==1)
			next_state = SAB;
		else if (a==1)
			next_state = SA;
		else if (b==1)
			next_state = SB;
	else if (cur_state == SA)
		if (b==1)
			next_state = SAB;
		else
			next_state = IDLE;
	else if (cur_state == SB)
		if (a==1)
			next_state = SAB;
		else
			next_state = IDLE;
	else if (cur_state == SAB)
		next_state = IDLE;
	else
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  {
    next_state = (a == 1 && b == 1) ? SAB : ((cur_state == IDLE) ? ((b == 1) ? SB : IDLE) : ((a == 1) ? SA : IDLE));
    cur_state = next_state;
  }

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (a == 1 and b == 1)
    z = 1;
  if (a == 1) {
    next_state = SA;
    cur_state = IDLE;
  }
  if (b == 1) {
    next_state = SB;
    cur_state = IDLE;
  }
  switch (next_state) {
  case SA:
    if (cur_state == IDLE and a == 1) {
      next_state = SAB;
      cur_state = SA;
    }
    break;
  case SB:
    if (cur_state == IDLE and b == 1) {
      next_state = SAB;
      cur_state = SB;
    }
    break;
  case SAB:
    cur_
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (SB == 1) next_state <= SB;
  if (SA == 1) next_state <= SA;
  if (SAB == 1) next_state <= SAB;
  if (SB == 1 and SA == 1) next_state <= SAB;
  if (SB == 1 or SA == 1) next_state <= SAB;
  if (SB == 1 or SA == 1) next_state <= SAB;
  if (SB == 1 and SA == 1) next_state <= SAB;
  if (SB == 1 or SA == 1) next_state <= SAB;
  if (SB == 1 or SA == 1) next_state <= SAB;
  if (SB == 1 and SA
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	cur_state <= next_state;
begin
	if (cur_state == IDLE and a in {1,1} and b in {1,1}) next_state <= SAB;
	if (cur_state == IDLE and a in {1,1}) next_state <= SA;
	if (cur_state == IDLE and b in {1,1}) next_state <= SB;
	if (cur_state == SA and b in {1,1}) next_state <= SAB;
	if (cur_state == SB and a in {1,1}) next_state <= SAB;
	if (cur_state == SAB) next_state <= IDLE;
end

================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if(reset == 1)
    begin
        cur_state = IDLE;
        next_state = IDLE;
        z = 0;
    end
    else if(cur_state == IDLE)
    begin
        if (a == 1 && b == 1)
        begin
            next_state = SAB;
            cur_state = SAB;
        end
        else if(a == 1)
        begin
            next_state = SA;
            cur_state = SA;
        end
        else if(b == 1)
        begin
            next_state = SB;
            cur_state = SB;
        end
    end
    else if(cur_state == SA)
    begin
        if(b == 1)
        begin
            next_state = SAB;
            
================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  if(a == 1 && b == 1)
  begin
    next_state <= SAB;
    z <= 1;
  end
  else if(a == 1)
  begin
    next_state <= SA;
    z <= 1;
  end
  else if(b == 1)
  begin
    next_state <= SB;
    z <= 1;
  end
  else
  begin
    next_state <= IDLE;
    z <= 1;
  end
end

================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  begin
    if (cur_state == IDLE)
      next_state = a & b ? SAB : IDLE;
    else if (cur_state == IDLE && a)
      next_state = SA;
    else if (cur_state == IDLE && b)
      next_state = SB;
    else if (cur_state == SA && b)
      next_state = SAB;
    else if (cur_state == SA)
      next_state = IDLE;
    else if (cur_state == SB && a)
      next_state = SAB;
    else if (cur_state == SB)
      next_state = IDLE;
    else if (cur_state == SAB)
      next_state = IDLE;
    else
      next_state
================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= SA;
  next_state <= SA;
  if(a == 1 and b == 1) {
    next_state <= SAB;
  } else if(a == 1) {
    next_state <= SA;
  } else if(b == 1) {
    next_state <= SB;
  } else {
    next_state <= IDLE;
  }
  if ((next_state != IDLE) and (cur_state == IDLE)) {
    next_state <= next_state;
  }
  z <= next_state;
end

================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
	cur_state <= IDLE;
	if (a == 1) then begin next_state <= SA; end
	if (b == 1) then begin next_state <= SB; end
	if (a == 1 && b == 1) begin next_state <= SAB; end
	if (a == 0) begin next_state <= SA; end
	if (b == 0) begin next_state <= SB; end
	if (next_state == SAB) begin next_state <= IDLE; z <= 1; end
end
end

================================================================
