example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	begin
	case(amount)
	2'b00:
	q <= q << 1;
	2'b01:
	q <= q << 8;
	2'b10:
	q <= q >> 1;
	2'b11:
	q <= q >> 8;
	default:
	q <= 64'b0;
	endcase
	end
	end
	end
end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	q <= data;
	else if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	else if (amount == 2'b01) 
	q <= q << 8;
	else if (amount == 2'b10)
	q <= {q[55:0], q[63]};
	else if (amount == 2'b11)
	q <= {q[63:1], q[63]};
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	
	if (ena)
	begin
	
	if(amount == 2'b00)
	begin
	
	q[63:1] <= q[62:0];
	
	end
	
	if(amount == 2'b01)
	begin
	
	q[63:8] <= q[55:0];
	
	end
	
	if(amount == 2'b10)
	begin
	
	q[63:1] <= q[62:0];
	
	end
	
	if(amount == 2'b11)
	begin
	
	q[63:8] <= q[55:0];

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin 
	if(load) begin
	q <= data[63:0];
	end
	if(ena) begin
	if(amount == 2'b00) begin
	q <= q << 1;
	end
	else if(amount == 2'b01) begin
	q <= q << 8;
	end
	else if(amount == 2'b10) begin
	q <= q >> 1;
	end
	else if(amount == 2'b11) begin
	q <= q >> 8;
	end
	end
	
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) begin
	// if load is high, load shift register with data[63:0]
	// if ena is high, shift q.
	case(amount)
	2'd0: 
	begin
	q[0] <= data[0];
	q[63] <= data[63];
	end
	2'd1:
	begin
	q[1] <= data[1];
	q[62] <= data[62];
	end
	2'd2:
	begin
	q[2] <= data[2];
	q[61] <= data[61];
	end
	2'd3:
	begin
	q[3] <= data[3];
	q[60] <= data[60];
	end
	2'd4:
	begin
	q[4] <= data
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	// assign data to q
	q <= data;
	// shift left or right
	if(ena)
	begin
	// shift left
	if(amount == 1)
	begin
	// shift left by 1 bit
	q <= q << 1;
	end
	else
	begin
	// shift left by 8 bits
	q <= q << 8;
	end
	end
	else
	begin
	// do not shift
	q <= q;
	end
	end
end

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if (load)
	 begin
	q[63:0] <= data;
	end
	if (ena)
	 begin
	 case (amount)
	 2'b00:
	 begin
	 q[0] <= q[1];
	 q[63:1] <= q[62:0];
	 end
	 2'b01:
	 begin
	 q[1:0] <= q[9:0];
	 q[63:2] <= q[62:0];
	 end
	 2'b10:
	 begin
	 q[2:0] <= q[11:0];
	 q[63:3] <= q[62:0];
	 end
	 2'b11:
	 begin
	 q[3:0] <= q[19:0];
	
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	//	if(load) begin
	//	q <= data; 
	//	end
	//	if(ena) begin
	//	q <= q[63:amount]; 
	//	end
	end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk) 
 begin
 	if(load == 1'b1)
 	begin
 	q <= data[63:0];
 	end
 	else if(ena == 1'b1) 
 	begin
 	if(amount == 2'b00)
 	begin
 	q <= q << 1;
 	end
 	else if(amount == 2'b01)
 	begin
 	q <= q << 8;
 	end
 	else if(amount == 2'b10)
 	begin
 	q <= q >> 1;
 	end
 	else if(amount == 2'b11)
 	begin
 	q <= q >> 8;
 	end
 	end
 end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin 
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	else if(amount == 2'b11)
	begin
	q <= q >> 8;
	end 
	end
end

================================================================
