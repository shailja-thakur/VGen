example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b01101 : (r_reg[4] ^ r_reg[2]);
assign feedback_value = r_reg[3] ^ r_reg[4];
assign q = r_reg;
always @ (posedge clk)
begin
r_reg <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
// follow the following state machine
// state 0 -> state 1 -> state 2 -> state 3 -> state 4 -> state 5 -> state 6 -> state 7 -> state 8
parameter state0 = 3'b000,
	state1 = 3'b001,
	state2 = 3'b010,
	state3 = 3'b011,
	state4 = 3'b100,
	state5 = 3'b101,
	state6 = 3'b110,
	state7 = 3'b111;
// define the next state as a function of current state and inputs
// q_bit_in is the concatenation of all q_bits
assign feedback_value = q_bit_in[2] ^ q_bit_in[4];
assign r_next = state0 == state ? r_reg : // state 0 -> state
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[3:0], feedback_value};

always @(posedge clk)
begin
	if(reset)
	begin
	r_reg <= 5'b01011;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4]; 
assign r_next = r_reg;
assign q = r_next;
always @ (posedge clk, posedge reset)
begin
if(reset)
 r_reg <= 5'b10000;
else
begin
 r_reg <= r_next;
end
end 

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @ (posedge clk or posedge reset)
if (reset)
r_reg <= 5'b10000;
else
r_reg <= r_next;
// concatenate the output of the lfsr to 4 most significant bits of r_reg
assign r_next = {r_reg[4],r_reg}; //{r_reg[4],r_reg,feedback_value};

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = ^{r_reg[2], r_reg[4]};
assign r_next = {feedback_value, r_reg[4:1]};
always @ (posedge clk, posedge reset) begin
if (reset) begin 
r_reg <= 5'b1; 
end
else begin
r_reg <= r_next;
end
end
assign q = r_reg;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset == 1) ? 0 : r_reg; 
assign feedback_value = 
 (~r_reg[2] & r_reg[4]) ^ r_reg[2] ^ r_reg[4];
assign q = r_reg;
always @ (posedge clk) 
begin
r_reg <= r_next;
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q=(r_reg[4]&r_reg[3])^(r_reg[2]&r_reg[4])^(r_reg[2]&r_reg[3])^(r_reg[4]&r_reg[2])^(r_reg[4]&r_reg[3])^(r_reg[4]&r_reg[0]);
always @ (posedge clk, posedge reset)
begin
	if(reset)
	begin
	r_reg <= 5'b01100;
	end
	else
	begin
	r_reg <= r_next;
	end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset)
begin
if (reset)
begin
r_reg <= 1;
end
else
begin
r_reg <= r_next;
end
end
// calculate r_next
// start with r_reg and set r_next to r_reg
// for all bits that have feedback
// XOR bit positions 2 and 4 with the feedback value
// concatenate the most significant bit of the bit position 2 and 4 XORs and 
// assign that value to r_next
// for all bits that do NOT have feedback
// assign the bit position 0 to r_next
// for all bits that have 1 or more leading zeros
// concat the bit position 0 with itself and assign that value to r_next
// for all bits that have 2 or more leading zeros
// concatenate the
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = (reset)? 5'h1 : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
// instantiate two shift registers as fshift1 and fshift2
// instantiate three muxes as mux1, mux2 and mux3
// instantiate r_next as fshift1
// instantiate r_reg as mux3
generate
if (LFSR_TAP == 5)
begin: tap1
assign r_next[0] = feedback_value;
assign r_next[4:1] = r_reg[4:1];
end
else if (LFSR_TAP == 3)
begin: tap2
assign r_next[0] = feedback_value;
assign r_next[3:1] = r_reg[4:1
================================================================
