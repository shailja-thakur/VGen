example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// clk clock to write the data
always @(posedge clk) begin
 if(we) begin
 ram[addr]<=data;
 end
end
assign q=ram[addr];

================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@ (posedge clk) begin
 if (we)
 ram[addr]=data; 
end
assign q=ram[addr]; // from memory

================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
if(we) 
ram[addr] <= data;
end
assign q = ram[addr];

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q.
always @(posedge clk) begin
	// Write only when ram[addr] is 0. Not when addr is 0.
	if (we & (ram[addr] === 8'hzz)) begin
	goverwrite := (addr == ADDR_WIDTH-1)?1:0;
	ram[addr] <= data;
	ram[ADDR_WIDTH-1:0] <= {(ADDR_WIDTH-1){goverwrite}};
	end
end
assign q[0] = (clk)?24'hzz:ram[0];
assign q[1] = (clk)?24'hzz:ram[1];
assign q[2] = (clk)?24'hzz:ram[2];
assign q[3] = (clk)?24'hzz:ram[3];
================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
reg [ADDR_WIDTH-1:0] addr_reg;
always @ (posedge clk ) begin
if (we) begin 
ram[addr] <= data;
end
addr_reg <= addr;
end
// this is the q output
assign q = ram[addr_reg];

================================================================
example-5: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q for address/value pairs
generate*/
begin:ram_gen
always @(posedge clk) begin
if(we) ram[addr] <= data;
assign q = ram[addr];
end
end
/*endgenerate*/

================================================================
example-6: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q.
assign q=ram[addr];
always@(posedge clk)begin
if(we)
ram[addr]<=data;
end

================================================================
example-7: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q

always @(posedge clk) begin
	if (we)
	 ram[addr] <= data;
end
assign q = ram[addr];

================================================================
example-8: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q. 
always @ (posedge clk)begin
assign q = ram[addr];
// if we is high, perform the write.
if(we)begin
ram[addr] = data;
end
end 
// instantiate the stimulus (inputs are output of DUT and inputs to design)

================================================================
example-9: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// when is high, writes data to address where addr is high
// to clear all values, call with reset
always @(posedge clk) begin
if(~we)
 ram[addr] <= data;
else begin
q=ram[addr];
end
end

================================================================
