example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module output_to_input( output pin_out ) in {
	pin_out = in;
}
'''

tb = myhdl.build_model(module_top, wire_assign)
w = myhdl.Wire()
s = tb.name
ctx.addClass(w, "wire")
myhdl.activate(w, 1)
ctx.dumpElements()
print("<end of module %s>" % (ctx.getModuleName(),))

================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
return out = in;

================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module assign( input in, output out ) {
  out <= in;
}

================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_hann( output out, input in ) {
	assign( out, in );
}
// create an alternate wire system with all requlired Wire named connection operator.
wire_id ann_cwir_auto( cwir_register *signal_wires, cwir_register *counttomod );
// Basic configuration of configurable wire 
wire_id ann_cwir_decl1( reg_expressor0 reg, wire_id idindex );
void ann_cwir_load0( cwir_register *cwir, long size );
bool ann_cwir_load1( cwir_register *cwir );
void ann_cwir_report1( cwir_register *cwir, std::ofstream &StrStream );

================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_func( input in, output out );

always @(posedge clk or (1'b0 & p_g)) {
  out = in;
}

module test_module(input in)_wire_assign {
  wire_assign_func br;

  br = in + 3; // Warning: undefined behavior depends on the current value of the input (non-compliant)
  br = 2 - in.dat; // Warning: undefined behavior depends on the current value of the input (non-compliant)
  br = br + in;; // Warning: undefined behavior depends on the current value of the input (non-compliant)
  br = br - in.dat;; // Warning: undefined behavior depends on the current value of the input (non-compliant)

  buffer sys_buf = {1'; };
  output out = (sys_
================================================================
example-5: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
out = in;

================================================================
example-6: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
return out = in;

================================================================
example-7: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign( input in, output out )
{
  out = in;
  return out;
}
// Intended to be used like this: wire_process(input_wire, signal());
wire_assign( double signal() ) {
  return 0.0;
}

//------------
// Compiler- generated sync variables
#define clock_period _3-1 //Your clock_period should be 3-1 = 2
#define F(x) (x)

#define Await 3
#define Apply 3
#define Results 3
//------------

// Cluster-generated sync variables
#define compensate_delay _2-1 //This should add 2 clock periods (about the defined clock_period2) to the pipeline
#define ordered_causal_act_act_delay _3-1 // top pipeline
#define ordered_causal_act_act_
================================================================
example-8: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
----------
// Compile and run the module.
module r_assign( input in, output out ) {
    assign( out, in );
}


================================================================
example-9: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign2( input in, output out )

================================================================
example-10: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign( in, out );

================================================================
example-11: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
};

================================================================
example-12: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_4( input in );
// in blocks the output of wire_assign_4 as input to input_a
module wire_assign_4_2( input in );
// in blocks the output of wire_assign_4 as input to input_b
module wire_assign_4_3( input in );
// in blocks the output of wire_assign_4 as input to input_c
module* wire_assign_4_b( input in );
// unblock wire_assign_4

module* wire_assign_4_out = 0;
// the module
module wire_assign_4_int( input in )
{
  in == 1 ? input_a : input_d;
  in == 2 ? input_b : input_d;
  in == 3 ? input_c : input_d;
  
================================================================
example-13: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
var wire_assign_2 = input;
// setup
wire_assign_2 = out;

function add_wire( FLAT, n1, n2, res ){	// return a wiretype of wire_assign_2 * n1 + n2
	var wiretype_input = n1 * wire_assign_2 * n2;
	var wiretype_output = wiretype_input;
	return wiretype_output;
}

// experiment with flatwire and wire
var flatten = add_wire( FLAT, "11111111", 1, "11000000");
*/

Searching with flat wire types }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Flattened 0 Wire (f*) = { // flatten wire_assign_2
										 // flatten wire_assign_2 yields
										 // flatwire of wire_
================================================================
example-14: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_bitassign( input in, output out );

int foo(int input) {
  out += input;
}

int foo(int input) hexagon::codegen::{
  out.a += input;
  return out.a;
}


int foo(int input) tri::hexagon::task::{
  out.a += input;
}

//bi->ii partial
// ii->ii whole
// i->ii partial

int foo(int input, int output, int input1, int input2) {
  out += input;
  out += output;
}

int foo(int input,int input1,int input2) {
  out += input;
  out += input1;
}

int foo(int input, int output) {
  out += input;
  return output;
}



================================================================
example-15: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// out = in
wire_assign(1, 2);
module wire_assign2(input in, output out, input *marker=int(2), int &mark=int(2) );
module wire_assign3(int **a, int **b, int **c, int &d);
module test_func( int &s=0 );
test_func();

module array()
{
    int x[];
    int i;
    double *y;
}

module array2()
{
    int[10];
    int[5,10];
}

def _mem_proc_spec(int *loc, int size, enum mtx_update_mode mode);
int *a[10];

class array_init (int **loc, int value, int *arr[10])
{
    int i;
    for
================================================================
example-16: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign( input in )( out );

'''

================================================================
example-17: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// input could be a wire, or a concat output
//          wire_assign( in ,out )


function begin_board( input )
{
	init_board();
	outputs="";
	while( 1 )
	{
		inputdbm=1;
        while( inputdbm )
        {
        	// repeat to all outputs
			// do c/h style moved_board
        	// only one counter
			outputs=outputs+"1";
			if(NUMW>=H) index_out=0;
			else index_out=8;
        	// only 1 clock
			on_out=1;
			clk_out=1;
        	// copy string
			bcd_out=bcd_out+"0";
			strings_per_digit=NUMW*H;
			index_out
================================================================
example-18: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
output out = in;

================================================================
example-19: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
write_buf wb;
{
    write( out, in );
    // always recompute output
    // see the explicitly rebuilt built-ins as examples
    wb.reinit();
    p_fs_write(&in, fsendPF); // for analysis
    wb.swap();
    fx_listecl_2( &wb, fsendPF );
    out = wb.get( 0 );
}
"""

================================================================
