example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    always @(posedge clk) begin
      if (!reset) begin
        present_state <= next_state;
      end else begin
        present_state <= IDLE;
      end
    end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



public function run()
{
      fpga_delay(clk,1,x,z);          // Delay the FPGA input signal for one clock cycle 
      next_state=IDLE; 
      case S1 : 
      	if (x == 1) { next_state=S10; }
      	else { next_state=IDLE; }; break;
      	// Fallthrough 
      case S10: 
      	if (x == 0) { next_state=S1; }
      	else { next_state=IDLE; }; break;
      	// Fallthrough 
      case S101: 
      	if (x == 1) { next_state=S101; }
      	else { next_state=IDLE; }; break;
      // Fallthrough 
      
      default: break;
   }

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    // states
    always@reset if (reset) begin
            next_state = IDLE;
    end
    always@clk begin next_state = fsm(present_state, next_state, x); 
    end
    adv_fsm() driving_fsm(
        input clk,
        input reset,
        input x,
        output z
     );
`

// A driving FSM that prints the output when S1 S10 S101 is asserted in a sequence.
// init(v) adds a signal, y, with value v.
// inv(a) sets a before it returns.
`
// wrapper functions to unpack signal value logic
//DriverNode_inputs_DriverNode_init(214)
//DriverNode_inputs_DriverNode_inv(215)
//DriverNode_inputs_DriverNode_outputs_DriverNode
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
begin
  assign next_state = (x==1) ? IDLE : present_state;
  if ( reset && present_state='IDLE')
    assign next_state = S1;
  if ( present_state='IDLE')
  begin
    if (x==1) then
      if (present_state='S1') then
        assign next_state = S10;
      begin
        if (x==0) then
          assign next_state = IDLE;
      end
    end
  end
end


================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


module 
 adv_uart(
input clk,
input = clk,
input reset,
output data,
output rst );        
 

module timer_0 (
   input clk,
   input addr,
   input prgr,
   output load,
   output not_done,
   output load_dummy,
   output dummy_judge,
   output logmy
);
 
module 
 logmy(
input clk,
input addr,
input load,
input load_dummy,

input not_done,
input load_dummy,
input dummy_judge
 );

// #######################################
// module for Manual Filing
// #######################################

module manual_filing(
 input clk,
 output f1,
 output f2,
 output f3
 );

 
 enum Fmt
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    initial next_state = IDLE;
    always @(posedge clk or negedge reset) begin
        
        if (next_state == IDLE) begin
        if(x == 1) begin
            next_state = S1;
        end
        
        if(next_state == S1) begin
            next_state = S101;
        end
        
        if(next_state == S101) begin
            next_state = S10;
        end
        
    end
    
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    always constrain clk=0;
    always constrain reset=1;
    always constrain adi=0;
    always constrain x=1;
    always constrain x=0;
    initial begin
        
        next_state = IDLE;         // start up in IDLE state with standard reset value
        algorithm 
	if(reset = 1) begin
                next_state = IDLE;
	end
	else begin
                if( present_state = Idle ){
                    next_state = next_state = S1;
                    z = 1;
                } else if ( present_state = S1 ) {
                    if (x = 1) {
                    next_state = next_state = S10;
                    } else {
                        next_state = IDLE;
                    }
                } else if ( present_state = S10 ) {
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(/* clk */posedge clk )
  begin
    if (reset == 1)
      begin
        next_state = IDLE;
        present_state = IDLE;
      end
    else if (x == 1)
    begin
        next_state = S1;
    end
  end 
  

================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk)
	begin
		if (x)
			if (IDLE) z <= 1;
			else if (present_state == S1) next_state <= S10;
			else if (present_state == S10) next_state <= S101;
			else if (present_state == S101) next_state <= IDLE;
			else 	 next_state <= IDLE;
		else
			if (IDLE) z <= 0;
			else if (present_state == S1) next_state <= IDLE;
			else if (present_state == S10) next_state <= S101;
			else if (present_state == S101) next_state <= IDLE;
			else 	next_state <= IDLE;

	end


================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk or negedge reset)
schedule
	if(x) begin
    next_state = S1;
	  else if(x==1 && present_state==S10) next_state = S101;
		else	 next_state = IDLE;
		if (next_state == S1 && present_state == IDLE) begin
			present_state = S1;
		}
			else begin
				next_state = IDLE;
				if (next_state == S1 && present_state == S2 && present_state == IDLE) begin
					present_state = S1;
				}
					else begin
						next_state = IDLE;
						if (next_state == S1 && present_state == S4 && present_state == IDLE) begin
							present_state = S1;
						
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    always @(posedge clk)
    begin
        int temp = x;
        select case (temp)
            case S1:
                    next_state=IDLE;
                    break;
            case S10:
                next_state=S101;
                break;
            case S101:
                next_state=IDLE;
                break;
        endcase
    end


    always @(posedge clk)
    begin
        if (next_state==IDLE)
        {
                if (present_state==S1) {
                       // only one at a time (presence of 1 for S1, x is logic 1) 
                        pr_monitor(S1);
                        z = 1;
                        present_state=S10;
                        next_state=S101;
                }

                else if (present_state==S101
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 logic begin // logic ties z to x after the FSM is started up
 	   present_state <= IDLE;
	 send next_state to next_state;
	 begin
		 TXE <= '0' and clk;
		 if RXF = '1' AND present_state<> IDLE => and x
		 present_state <= x 'wrkld';
		 next_state <= x 'wrkld' AND IDLE;
		 if present_state = IDLE = next_state then next_state <= S1;
		 rep
			 next_state <= x != x 'wrkld' AND present_state <> IDLE;
		end ;
		 RST <= '1' and CLK <= '1' when rs <> '0' AND x = '1'
		 and 'wrkld' = 0;
		 S1 <= '1' and CL
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
  present_state <= IDLE;
  next_state <= IDLE;
end

================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin : main

    wait .01;
barrier ck:;

    wait reset;
    wait clk;
    present_state = IDLE;
    next_state = IDLE;

    dutadv_fsm_w( next_state, x );
    
end
end

module dutadv_fsm_w( input current );
    begin : main
        if (current == 1) begin //fsm1 transition
            present_state = S1;
            next_state = IDLE;
            next( S101 );
        end else begin //fsm2 transition 
            present_state = S10;
            next_state = IDLE;
            next( S101 );
        end else begin
            present_state = IDLE;
            next_state = IDLE;
        endif
    end 
end








================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// macros and conrtrols
always(clk or reset)
 begin
	present_state <= IDLE;
	next_state <= IDLE;
	if (x!=0) then
		next_state <=       S1 // first bit of x is 1, so go to S1
	 	 
	 else if (x!=1) then
		next_state <= next_state << 1; // if x is 0, shift it by one bit
		
	else
		next_state <= next_state << 10; // if x is 1, shift it by ten bits
		
	present_state <= next_state;

end

// this function finds the kth bit from x after k bits are subtracted from it
// bit is calculated from MS char basis
// use no of subtractions in macros for better structuring of inputs/outputs
int k
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge @clk)
	begin
		if( next_state==IDLE && x==0 && reset==1 )
			next_state=IDLE;
		else if( next_state==IDLE && x==0 && reset==0 )
			next_state=S1;
		else if( next_state==IDLE && x==1 && reset==0 )
			next_state=S10;
		else if( next_state==IDLE && x==1 && reset==1 )
			next_state=IDLE;
		else if( next_state==S1 && x==1 && reset==0 )
			next_state=S10;
		else if( next_state==S1 && x==0 && reset==0 )
			next_state=IDLE;
		else if( next_state==S1 && x==
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
	if(reset == 1'b1) present_state = IDLE;
	if(reset == 1'b10) next_state = IDLE;
	if(next_state == IDLE)
	 begin
		if(x == 1'b1) next_state = S1;
		if(x == 1'b0) next_state = IDLE;
	 end
	 if(next_state == S1)
	 begin
		if(x == 1'b1) next_state = S10;
		if(x == 1'b0) next_state = SIDLE;
	 end		
	 if(next_state == S10)
	 begin
		if(x == 1'b1) next_state = S101;
		if(x == 1'b0) next_state = IDLE;
	 end

================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or negedge reset)
begin
if (reset) begin
    next_state <= IDLE;
    present_state <= IDLE;
endend
else if (x) begin
    next_state <= IDLE;
    present_state <= IDLE;
endelse if(next_state==IDLE) begin
    if (x) begin
        next_state <= S1;
        present_state <= S1;
    endelse if (x) begin
        next_state <= S10;
        present_state <= S10;
    endelse if (x) begin
        next_state <= S101;
        present_state <= S101;
    endelse if (x) begin
        next_state <= IDLE;
        present_state <= IDLE;
    end
end
end





// This
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

        always @(posedge clk or negedge reset)
        begin
            if(next_state == IDLE)
                present_state <= S1;
            else if(next_state == S1)
                present_state <= S10;
            else if(next_state == S10)
                present_state <= S101;
            else if(next_state == S101)
                present_state <= IDLE;
            x <= present_state;
            z <= next_state;
        end

================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


end adv_fsm;
end architecture;

file declaration_adv_fsm: adv_fsm_student: declaration_adv_fsm_student; //@@463
end file declaration_adv_fsm;

file declaration_tb1: tb_student: declaration_tb1_student; //@@463
end file declaration_tb1;

file declaration_tb2: tb_student: declaration_tb2_student; //@@463
end file declaration_tb2;

file declaration_tb3: tb_student: declaration_tb3_student; //@@463
end file declaration_tb3;

file declaration_fsm: fsm: declaraton_fsm_student; //@@463
end file declaration_fsm;

file  declaraton_adv_fsm:adv_fsm
================================================================
