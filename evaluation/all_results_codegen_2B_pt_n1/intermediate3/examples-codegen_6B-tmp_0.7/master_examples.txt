example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always(clk or reset) begin
    r_next <= r_reg;
    if (reset) r_next = 0;
    else r_reg <= r_next;
    r_reg[3] <= r_next[3];
    r_reg[2] <= r_next[2];
    r_reg[1] <= r_next[1];
    if (((r_reg[0] & 0b0100010) == 0b0100010) and ((r_next[0] & 0b0100010) == 0b0100010)) {
        feedback_value = r_reg[0] & 0b00001000;
    } else {
        feedback_value = r_next[0];
    }
    q <= feedback_value;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
begin
    if (reset)
    begin
        r_next <= 0;
        r_reg <= 0;
    end
    else
    begin
        if ( r_next == 0 )
        begin
            r_next <= r_reg;
            r_next[3] <= r_next[2] ^ r_reg[4];
            r_next[3] ^= r_reg[3];
            r_next[2] ^= r_reg[2];
            r_next[1] <= r_next[0];
            r_next[1] ^= r_reg[1];
            r_next[0] ^= r_reg[0];
            feedback_value <= r_reg[3];
            r_reg <= r_next;
        end
    end
end


================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always(clk)
begin
    if (reset)
        r_reg = 1;
    else
        r_reg = r_reg & ~int('1' <> r_reg[4:2]);
    r_next = r_reg;
    feedback_value = r_next[4:0] xor r_next[2:0] xor r_next[6:4];
    q = feedback_value;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
always begin
    r_reg <= r_next ^ (r_next << 5) ^ (r_next << 3);
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// always set r_next to r_reg after each reset
always(clk and reset) begin
    r_reg <= 1;
    case(r_reg)
        if (r_reg) begin r_next <= (r_reg << 4) ^ (r_reg << 5) ^ (r_reg >> 3); 
        else begin r_next <= r_reg << 4; 
        end
    end
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
if (reset)
begin
    r_reg <= 1;
    r_next <= r_reg[3:0] | feedback_value << 4;
    q <= r_next;
end
else
begin
    if (r_next[3:0] == 1)
        r_reg <= (r_next ^ (feedback_value << 4) ^ r_next[2:0]);
    else
        r_reg <= r_next;
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always(clk or reset) begin
    if (reset) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg;
        r_reg <= feedback_value ^ (r_next[4:0] << 4);
        q <= r_reg;
    end
end


================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always (r_reg == 1'b1) begin
    r_reg <= (clk == 1'b1 ? reset : r_next);
    if (r_reg==1'b1) begin
        q <= (4'h0x33 << 5);
    end else begin
        q <= (4'h0x3B << 5) xor r_next[4:0];
    end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg[5];
    feedback_value <= r_next & r_reg[3];
    q <= r_reg[4];
  end
end

module lfsr_b( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset ) begin
    if ( reset ) begin
        r_reg <= 0;
        r_next <= r_reg[4:0];
        feedback_value <= r_reg[3:0];
        q <= r_next;
    end
    else begin
        r_next <= r_reg & feedback_value;
    end
end


================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always (clk or reset) begin
    r_reg <= 1; 
    feedback_value <= (r_reg[3] ^ (r_reg[2] << 1)); 
    case (r_reg[2]): 
        case (r_reg[2] and not(clk)): 
            r_next <= (r_reg[3] ^ (r_reg[2] << 1));
            case (r_reg[2] and clk): 
                case (r_reg[2] and not(r_reg[3])): 
                    r_next <= (feedback_value << 4) | r_reg[3];
                    r_reg <= r_next;
            endcase
            r_reg <= (r_reg[3] << 4) | r_reg[2];
    endcase
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  r_next <= r_reg[4:0] ^ (r_reg[4] & (r_reg[5] << 4));
end


================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  r_next = r_reg;
  r_reg = r_next ^ xor(r_next[1:4], feedback_value);
  q <= r_reg;
end

// Data for message to be processed
#ifdef CONFIG_XPS_DEMO_XPS_TEST_VECTOR_DATA
#include "xps_demo_xps_test_vector_data.h"
#endif

// Main function
int main()
{
    // instantiate LFSR
    lfsr lfsr_inst;
    
    // reset the LFSR
    lfsr_inst.reset = 1;
    
    // process 5 bit message
    lfsr_inst.process(5, &xps_demo_xps_test_vector_data[0]);
}

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always (
    r_reg != 1 
    ||
    !clk
) begin
    r_next <= (
        r_reg 
        & (
            r_reg 
            ^ (
                bit(r_reg, 2) 
                ^ 
                bit(r_reg, 4) 
            )
        ) 
    );
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
 begin
   if ( reset = 1 ) then
      r_reg <= 1;
   end
   if ( clk = 1 ) then
      r_next <= ( ( r_reg[4] XOR feedback_value ) AND r_reg[5] );
      r_reg <= r_next;
   end
end

module lfsr_filter(
    input clk,
    input reset,
    output [4:0] q,
    output [4:0] q_last,
    output [4:0] q_tap
);

reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2
================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) 
    r_next <= (r_reg[4:0] ^ ((feedback_value & 0b1100000000) << 1) & 0b1100000000) & r_reg[4:0];
always @(posedge clk) 
    if (reset)
        r_reg <= 0b11111111;
    else
        r_reg <= r_next;

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
    if (reset) begin
        r_reg <= 1;
        r_next <= r_reg ^ feedback_value;
        q <= r_next;
    end else begin
        feedback_value <= r_reg[4:0] ^ r_reg[3:0];
        r_next <= r_reg;
        q <= r_next;
    end
end

#define MAX_BITS 5
#define M 5

// LFSR Magic Factor: 0x4d0f
#define GF_M 0x4d0f
#define GF_S 8

// generate a random string
const int magic_seed = 0x4d0f;
const int magic_seed_len = 32;
int magic_seed_string[32];
int i;
for (
================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  r_next <= (r_reg[4:0] >> 1) Xor r_reg[4:0] 
         Xor (r_reg[0] << 5)
         Xor (r_reg[1] << 5)
         Xor (r_reg[2] << 5)
         Xor (r_reg[3] << 5);

always @(negedge clk)
  q <= (r_next[4:0] >> 1) Xor r_next[4:0] 
         Xor (r_next[0] << 5)
         Xor (r_next[1] << 5)
         Xor (r_next[2] << 5)
         Xor (r_next[3] << 5);

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always (clk or reset) // reset is active low
begin
    r_reg <= (reset and 0) or (r_next and r_reg[4:0]);
    if (clk)
    begin
        r_next <= (r_reg[4:0] xor (r_reg[3:0] << 5) and r_reg[3:0] << 4);
        feedback_value <= (r_reg[3:0] xor r_next[3:0] << 4);
        q <= (r_next[4:0] << 5);
    end
end

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg ^ (((r_reg[4] and (not q[3:0])) or (q[3:0] and r_reg[2]) and (not q[2]) and r_reg[1])) 
        		and (not q[1]) and (not q[0]);
    end
end

================================================================
