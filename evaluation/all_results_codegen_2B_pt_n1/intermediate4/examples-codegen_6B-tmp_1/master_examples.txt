example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset)
begin
    if(reset)
    begin
        p0 <= 1;
    end
    else if(next_state)
    begin
        p1 <= uniform(0,1);
    end
    else
    begin
        next_state <= 1-(prod(in,clk==0) or prod(in,clk==1));
        p2 <= 1-(prod(in,clk==0) or prod(in,clk==1));
        p2 <= next_state or next_state <= present_state;
        p0 <= out;
        p1 <= out;
    end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk and not reset)
    next_state <= present_state;
// Synchronize with clock
always @(posedge clk)
    out <= next_state;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset)
begin
  if (reset) begin
    begin
      present_state = 0;
      next_state = 0;
      out = 0;
    end
  end else begin
    if (in) begin
      present_state = next_state;
      next_state = (present_state == 1) ? 1 : 0;
      out = next_state;
    end
  end
end

// Or model it with one state, instead of two, and make out synchronous output
// Hold an instantiation of this FSMs when the module is instantiated. This leads to
// the maximum degree of freedom to the user when not strictly required.
#include "simple_fsm.v"
// Now define state assignments, leading to the 2 FSMs:
FSM fsm1(clk, reset, in,
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
  out <> present_state;
  if (reset | present_state) begin
    next_state <= 0;
  end else begin
    if (in == next_state) next_state <= 1 - next_state;
    else next_state <= 0;
  end
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

begin default_logic:
    case present_state, next_state <= 1'b0:
	      when reset=1\'b1,next_state=1'b0,out=1'b0;
	      when clk='1\'b1\'b1\'b0\'b0 out=unchanged;
	      when clk='1\'b1\'b1\'b0\'b1 out=next_state;
	      when clk='1\'b1\'b1\'b1\'b0 out=next_state;
	      when clk='1\'b0\'b0\'b1\'b0 out=out;
	      when clk='1\'b0\'b0\'b1\'b1 out=out;
	      when clk='1\'b0\'b1\'b1\'b0 out=out;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk) next_state <= present_state & if (in != 1) present_state < 1;
always @ (posedge clk or reset) in <= present_state & next_state != 0;
// we need to wait for a rising edge on 'clk' so we can select 'out'
always @ (posedge clk or not reset) out <= next_state;

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 if in=0 in state 0 or in=1 in state 1
always @ (posedge clk or negedge reset)
    begin
        present_state = in ? 0 : 1;
        next_state = OR(AND(in, present_state), OR(NOT(in), XOR(in, present_state)));
        out < next_state;
    end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset)
        present_state := 0;
    else
        present_state := in;
    out <= present_state;
end // end simple_fsm
// ${simple_fsm}

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) if (reset) next_state <= 0;
always @(posedge clk) if (next_state) next_state <= 1;
always @(negedge clk) if (!next_state) present_state <= !in;
always @(negedge clk) if (next_state) present_state <= in;
Assign out = present_state or default;
end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
begin
	if reset='1' then
		present_state=0;
		next_state=1;
	end
	if in='1' then
		present_state=next_state;
	end
	if clk='1' then
		if present_state=1 then
			next_state=0;
		else()
			next_state=1;
		end
		out='1';
	end
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  begin
    present_state <= (~in & next_state & 1) ? 0 : 1;
    next_state <= (~in & present_state) ? (in & 1) : next_state;
  end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk) begin
    if(reset) begin
        next_state <= 0;
    end else begin
        next_state <= in;
        if(next_state == 0 and in == 1) begin
            next_state <= 0;
        end else if(next_state == 1 and in == 1) begin
            next_state <= 1;
        end else if(next_state == 0 and in == 0) begin
            next_state <= 1;
        end else if(next_state == 1 and in == 0) begin
            next_state <= 0;
        end
    end
end
end

$display(simple_fsm, "simple_fsm");
$display(simple_fsm, "next_state");
$display(simple_fsm, "present_state");
$display(simple_fsm, "out
================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset)
        next_state <= 0;
    else
        if (next_state == 0 and in)
            next_state <= 1;
        else
            next_state <= 0;
end

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) if (reset == 0) next_state <= 1;
    else next_state <= present_state && in;
    lastout <= out && next_state != present_state;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always(clk.posedge)
begin
  if (reset) begin
    next_state = 0;
  end else begin
    if (in) next_state = next_state;
    else next_state = (next_state + 1) % 2;
  end
end
// It emit out=1 in state 0, out=0 in state 1
always_comb begin
  out <= next_state ? present_state : out;
end
end

*/

// This is established from the example long before any outputter has decided
// whether this FSM can pass an input or not.

// The grouping is meant to serve as a forcing element. If there's no match,
// then the group cannot deal with that input.

// The matcher and outputter are both explicit and hoisted, allowing basic
// (freely recursed) testing.

import
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
//  if (reset && in)
//  begin
//    next_state = reset;
//  end
if (present_state != next_state)
begin
	if (in)
		next_state = next_state ? 0 : 1;
end
end
`

func TestFSM(t *testing.T) {
	src, err := ioutil.ReadFile(fSM_string)
	if err != nil {
		t.Errorf("file read failed")
		return
	}
	exp, err := ioutil.ReadFile(fSM_expected_output)
	if err != nil {
		t.Errorf("file read failed for expected output")
	}
	ast, err := kytheuri.Parse(map[string]string{
		"tests": fSM
================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
out <= (present_state ? in : next_state);
always @(posedge clk)
next_state <= in;

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always first_clk_and_reset: process(clk, reset) {
    if (reset) next_state <= 1; else next_state <= 0;
}
always out_1_if_0: process(clk, in, out) {
    out <= in;
}
always out_0_if_1: process(clk, in, out) {
    out <= 1'b0;
}
always out_1_if_1: process(clk, in, out) {
    out <= 1'b1;
}

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  out = if(in==present_state) then 1 else 0;
always @(railclk)
 if(reset)
   next_state = 0;
else if(in)
   next_state = 1;
else next_state = 0;

attribute stimulus start
	equivalent_stimulus
		[1] clk=1, reset=0, in=1, out=1;
	equivalent_stimulus
		[1] clk=1, reset=1, in=1, out=0;
end


================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  if (reset ^ 1)
    next_state <= 0;
  else
    next_state <= in && present_state != next_state;

reg record_record; // saves the current state
always @(posedge clk)
  if ((in == 0 && next_state) !="exception") next_state<=0;
  if ((in == 1 && next_state) !="exception") next_state<=1;
  if ((next_state != record_record) || (next_state == "exception"))
  {
    record_record <= next_state;
    out <= next_state;
  }


================================================================
