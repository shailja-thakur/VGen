example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always(clk or reset)
begin
    if reset or (q = 1) then begin q <= 1; end
    else if q >= 12 then begin q <= 1; end
    else begin q <= q + 1; end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always(clk)
begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end


================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
q <= (~reset & q) | (q < 12 & q > 1);
// endmodule

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
q <= (reset & q == 12) ? (1) : q + 1;

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
    if (reset)
        q <= 1;
    else if (q == 12)
        q <= 1;
    else
        q <= q + 1;
end


================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
    q <= (reset ? 1'b0 : if(q==12'b11) q'=1'b0 else q'=next_q);


================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

module tb_clk_cnt(
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1
================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
  q <= (reset ? 0 : q + 1);

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

// This is a counter that increments from 0 to 4 every clock cycle
module counter_increment( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 0
// else if q is 4, assign q to 0
// else, increment q by 1 
always @(posedge clk) begin
    if (reset) begin
        q <= 0;
    end
    else if (q == 4) begin
        q <= 0;
    
================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) q <= counter(clk, reset);

// The following tests are not intended to be part of a real simulation,
// but are used to test the correctness of the simulation

// This test verifies that a value of 1 is extracted from the 3-bit register
// after reset.
test_behavior(
    counter(clk, 1),
    input clk,
    input [3:0] q,
    output reg [3:0] q_out,
    input reset
)
begin
    counter(clk, reset); 
    assert q_out == 1;
end

// This test verifies that values of 1, 2, and 3 are extracted from the 3-bit
// register after the rising edge of the clock.
test_behavior(
    counter(clk, 2),
    input clk,
    input
================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset)
begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1; 
    end
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always(clk)
begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q+1;
    end
end

// counter_inc: Increment the counter by one
process (counter_inc) begin
    if (counter_inc) begin
        counter <= counter+1;
    end
end

module test_counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
    // update q on the positive edge of the clock according to the following cases:
    // on reset, assign q to 1
    // else if q is 12, assign q to 1
    // else, increment q by 1
    always(clk)
    begin
        if (reset)
================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always( clk or reset )
begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
{
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
}

// Here is the measured input
// This is a counter that counts from 1 to 12
module input_counter(
    input clk,
    output reg [4:0] q
);

// This is a counter that counts from 1 to 28
module input_counter_2(
    input clk,
    output reg [4:0] q
);

// This is a counter that counts from 1 to 44
module input_counter_3(
    input clk,
    output reg [4:0] q
);

// This is a counter that counts from 1 to 56
module input_counter_4(
    input clk,
    output reg [4:
================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always ( clk and reset and q ) begin 
    case(q) begin 
        if( reset ) then 
            q <= 1; 
        when ( q = 12 ) then 
            q <= 1; 
        else begin 
            q <= q + 1; 
        end; 
    end; 

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
    q <= (~reset & q) | ((12 - q + 1) & q);

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset) begin
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

net_mod usr_net = counter(1, 1, 1);


================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset)
begin
    if (reset) begin 
        q <= 1;
    end
    else if (q == 12) begin
        q <= 1;
    end
    else begin
        q <= q + 1;
    end
end

int main()
begin
    // assign the q output to the mux input
    q <= counter(clk, rst, q);
end


================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset) begin 
        q <= 1;
    end else if (q == 12) begin
        q <= 1;
    end else begin 
        q <= q + 1;
    end
end

module boundary( 
    input clk,
    input reset,
    input [1:0] in,
    output reg [3:0] out
); 
// count from 1 to 12
always @(posedge clk) begin
    if (reset) begin 
        out <= 1;
    end else if (in == 0) begin
        out <= in;
    end else begin 
        out <= in + 1;
    end
end

module clk_gen( 
    input clk,
    input reset,
    output reg out
); 
// count up on positive
================================================================
