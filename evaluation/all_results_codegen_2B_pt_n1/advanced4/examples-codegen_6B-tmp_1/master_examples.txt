example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module adc async_ram2adc(input clk,
					input ADC_sam,
					input CAPTURE_port,
					output TA_min,
					output CAPTURE_max,
					input ADC_en,
					output adout);

module adc1(): advshift(clk<2> >, load<2> >, ena<2> >, [7:0] < );

module 
adc1_ref(): advshift(clk<2> >, load<2> >, ena<2> >, [15:0]< );

// we want this ref for ADC samples for electrical measurements.
module sh128(input clk,
			input load,
			input ena,
			[63:0] reg); 

module intr(input clk,
			input load,
			input en
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


-- To reset register: clk toggle, then clear it.
-- To synchronize load, invert clk.
-- To write data: write_data
-- To read data: r <= any bits of debug_data; r <= any bits of q.


reg r;
reg debug_y_bit;
reg debug_x_bit;
signal clk;
signal ena;
signal load_y;
signal load_x;
signal debug_bit;
signal debug_q_bit;

function write_data(int data) {
	r <= data_carry(data); 
	if(ena)r <= data << amount;
}

function advshift_interrupt()
group loads = {load_x, load_y, debug_y_bit, debug_x_bit};
group leaks = {debug_bit, debug
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




module adc(input clk, input data); 
 module adc(clk, data);

module tcms(input clk, input data);

module tdcms(input clk, input data);

module tpmem(input clk, input rst);

module clockack();

/*
(b) = b'11100000 | *b'10000000 | b0'1010 *
(a) = a'11100000 | b'00101100 <--- *(31,2) = a'00001010
  | a0'1100,000 | a1'1110,000
  | a2'1111,111 | a3'1110,001
  | a4'1100,11  | a5'1000,01
  | a6'0001,11  | a7'0100,10
  | a
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift_clk(long_reset, clk, arbresetn_clk, ena, load, enaload, loadcomplete, vlatch, q, agg_value_cycleclk, Vtask);
// vlatch are the valid bits extracted from register q when writes happen.
// agg_value_cycleclk is the cycle the register shift register is 
// signedlhaq_lane to generate a clock based on valid bits.
// 5'b100:  VLATCH & ARBRESETN inactive. 
// 5'b101:  64=MAX 2 pulses of write clock cycles to generate new sys clk. 
// 5'b110:  Bus synchronous if available. 
// 5'b111:  SYNC_ON WAIT if avail. 
// 64=ARGLENGTH =. 32 for adv arb shift reg.
//
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


tff = advance;

delay n.1 ns;

output prev_ply = active;

reg delay_r0 = 0;
reg delay_r1 = 0;
reg delay_r2 = 1;
reg delay_r3 = 0;
reg delay_r4 = 0;
reg delay_r5 = 8;
case

  (f3c, 9);
  if (ada41()) {
    until clk.write.load == 1'b1;
      goto DelaySetUp;
  } else goto TWCE;
 	  
  // STARTED
  @(f3c, 10);
  if (ada41()) {
    until clk.write.load == 1'b1 && prev_ply == 'z;
      goto DelaySetUp;
  } else goto TWCE;
					 
  // START
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


behavior dsenser()
  {
        real_output<advshift(clk, load, ena, 1, data, q)>();
  }


    





================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module combinatorial(input clk,
			   input reset,
			   input shift);
module adv_mux(input clk,
		     input ena,
		     input [4] b3,
		     input [4] b2,
		     input [4] b1,
		     input [4] b0,
		     output reg [3:1] b3,
		     output reg [2:0] b2,
		     output reg b1,
		     output reg b0);
module iqr_merge(input i1,
		 input i2,
		 input i3,
		 input i4,
		 input i5,
		 input i6,
		 input i7,
		 input i8);
intitex valproc, debug, debug_qvalue;


function compute_q_signals
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



  always @(posedge clk) begin
    if (load && ena) begin
      q <= data;
    end else begin
      q <= {0, case amount of 1 else 8'-24'th};
    end: if (message_full() or load) begin
      q <= {0, case amount of 1 else 8'-24'th};
    end;
  end


================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



 





================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module issue(input clk, input load, input ena, input send, output reg [63:0] q);
module gsem(input clk, output reg [63:0] q);
// wait at least one clock cycle to see changes in stored values.
module stallguard(input clk);
// check possibly stale values.
// only simple III/4 counter example, not real delay. 
module counter(input clk, output reg [63:0] a);
// count timer.

module intfc(input clk, sum find, sum swap, a_int i, cmd c, busy busy_or, push, end [63:0] e);
interface intfc_busybusy_or(input clk, input busy);
// or busy with input dispatch, else error, error occurs under load.
interface intfc_cmdbusy(input clk
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The shift value is not pipelined to in any way, so if the data is recieved out of the &Data port
// at exactly the same time when a shift is started, the shift will fail.
reg [63:0] shift_out_reg = load?'0':'';
// remember the shift registerever, since tuple de-sequencer/pipeline may be active.
always_comb
begin
  if (load) $dumpfile("shiftersim_small.vcd");
  if (ena) q = shift_out_reg;
end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module duplikator();
	control wire alt_ena;
	control wire alt_load;
	control wire alt_shift_amount;
	clock 640kHz;
	reg 7bits ['0' = 0, '1' = 1];
	output reg [0-10] reg_glitch;
	dsc always_comb.all else control alt_load => (alt_load && !ada_rs), reset nand advshift => (ena && !load, !nand advshift [1:0]);
	always_comb : reg_glitch = |q & ((0 = .and(advshift.data[0]) ) | (1 = .and(advshift.data[7:6])));
		read_nand(alt_data, advshift.input[0]);

	let base_clock([1'b1]);
// Design a synchronous load control
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// ----------------------------------------------------------------------------
#include "sys/alt_irq.h"
#include "alt_log-cv_sm_register.h"
alt_u32 advshift_p = io_load;
alt_u32 advshift_v1 = ena;
alt_u32 advshift_v2 = io_load;
alt_u32 advshift_phase = 0; // 1st edge
alt_u32 advshift_mask = amount << (amount==0 ? 0 : amount-1);
#param log_cpu_id cpu_id; // ALT_LOG_CPU_SM_REGISTERS_FUSED

void advshift_proc(void)
#if defined(ALT_NR_TRACE_ENABLED)
  ALT_EVENT (ALT_EVENT_HW_ADVSHIFT_PROC)
#endif
{
  
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// requadgenamed is the same as requadgated
advshift requadgenamed(advshift(clk,load,ena,amount,requadgated(clk,load,ena,status)));// note the [63:0] clause

// Upper register for OrC. 
reg [63:0] advshift orc(advshift(clk,load,ena,amount,status));

// Store and Load
q <= advshift(clk,load,ena,amount,decload,address, lo);

// Upper register for Store
store(address,q);

// The following is pretty much the 'requestor' in the SystemC manual. 
// Just assume there's a register which has the data transferred to it. 
// Then the assignator and assignator can do the same with the port. 
requadgated begin(clk
================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


*/

#include "avr.h"
static const uint64_t mask = (uint64_t)-1LL;

static int64_t __attribute__((noinline)) 
     gcd_core(unsigned int a, unsigned int b)
{        
	int64_t m = a*b;
	unsigned int m1 = m&mask;
	if (m1) {
		if (!(b & m))
			return m; /* gcd is not 1, return mask instead */
		while (--a) {
			m -= a*b;
			if ((m&mask)) { if (!(b & m)) return m; /* gcd is not 1, return mask instead */ }
		}
	}
	return m;
}

// for troubleshooting
int64_t
#pragma GCC diagnostic ignored "-Ws
================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module genclock(input clk, /$clock/);
(
always @(posedge clk or negedge clk) begin
	$clock <= 1'b0;
end
);

module shift(input clk,
input load,
input ena,
input amount,
input [63:0] data,
output reg [63:0] q,
output reg [63:0] r);
(
always @(posedge clk or negedge clk) begin
	$clock <= 1'b0;
	if (load) begin
		uint32_t i = 0;
		$clock <= 1'b1 & $clock <= 1'b0;
		if (ena == 1'b1) begin
			if (amount == 0) begin
				uint32_t old = q;
				q <= data[63-1
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.





variable timing;


// -----------------Main---------------------------------------//

always @(posedge clk) begin
  timing = rising_edge(cnt) ? -1 : 1; 
  if (timing < 0)
    timout <= 1'b0;
  else if (timing == 1) {
//     follow(termine);
    switch(ena) {
      //Case 1: shift right by 1 bit     
      case 1'b0:
        q <= data[63:0] >> 1; 
        break; 
      //Case 2: shift right by 8 bits    
      case 1'b1:
        q <= data[63:0] >> 8;
        break; 
    }
  }
  else {
    cumulative_counter <= 0;
  }
  cnt <= cnt + 1'b
================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.





================================================================
