example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//=====================================================================
always @(posedge clk or posedge reset)
begin
    q <= q + 1;
    if reset = 1
    begin 
        q <= 1; 
    end 
    else if q == 12
    begin 
       q <= 1; 
    end 
    else
    begin 
       q <= q + 1; 
    end; 
end

                    
#1  =>  hot connection of {q, clk} {to define a start cycle and the counter increments by 1}
#2  =>  cold connection of {clk } {to define a cycle for the counter for starting counting}
#3  =>  hot connection of {reset} {to define a cycle for the counter and full reset after counting to 1}
#4  =>  connect {O} with the output of the counter {this is the output counter}


================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
    if (reset == 0) q <= 1;  // default value on power-up 
    else if (q == 12) q <= 1;
    else q <= q + 1;  // increment on each clock

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk | posedge reset)
    if (reset == 0) q <= 0
    else if (q == 13) q <= 0
    else q <= q + 1; 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign  q = (2==(reset==1))?q:((1==clk)?1:((q+1)%3)+1 );

// a clock cycle
always @(posedge clk) begin
    case(reset == 1)
        q <= 0;
        //q <= ??
    casez(reset == 0 && q == 1)
        q <= 0; 
        //q <= ??
    casez(clk == 1 && (q == 2 || q == 3))
        q <= q-1;
        //q <= q-1
end
// output pins

assign  d0 = "q == 1";
assign  d1 = "i == 2";
assign  d2 = "q";
assign  d3 = "i == 2 & q >= 2";

#pragma XPS_ASTOR_
================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
gate 
    clk.RST, 
    reset.first, 
    q <=3{
        q( 3'b001, 1'b1 ),
        q <= 2{
            q <= 1{
                q <= 0{
                    q( 3'b000, 1'b1 ), q := 1};
                q <= 1{
                    q <= 2{
                        q <= 3{
                            q := 1;    
                        } else {
                            q := 2;    
                        }
                    } else {
                        q <= 1{
                            q <= 0{
                                q( 3'b000, 1'b1 ), q := 1};
                            q <= 1{
                                q <= 2{
                                    q <= 3{
                                        q := 2;    
                                    } else {
                                        q := 1;    
                                        q<
================================================================
