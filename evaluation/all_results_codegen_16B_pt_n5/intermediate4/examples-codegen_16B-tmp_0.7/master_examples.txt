example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
  end else begin
    present_state <= next_state;
    next_state <= present_state;
    out <= present_state;
  end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset == 0) begin
		present_state <= 0;
		next_state <= 0;
		out <= 0;
	end
	else begin
		if (reset == 1) begin
			present_state <= 0;
			next_state <= 0;
			out <= 0;
		end
		else begin
			case (present_state)
				0: begin
					if (in == 1) begin
						present_state <= 1;
						next_state <= 1;
						out <= 1;
					end
					else begin
						present_state <= 0;
						next_state <= 0;
						out <= 0;
					end
				end
				1: begin
					present_state <= 1;
					next_state <= 1;
					out <= 1;
				end
				2: begin
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) present_state <= 0;
  else if (present_state == 0)
    begin
      if (in) next_state <= 0;
      else next_state <= 1;
    end
  else if (present_state == 1)
    begin
      if (in) next_state <= 1;
      else next_state <= 0;
    end
  out <= next_state;
  present_state <= next_state;
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if(reset) begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
  end
  else begin
    if(present_state == 0) begin
      if(in == 1) begin
        next_state <= 0;
      end else begin
        next_state <= 1;
      end
    end else begin
      if(present_state == 1) begin
        if(in == 1) begin
          next_state <= 1;
        end else begin
          next_state <= 0;
        end
      end
    end
    present_state <= next_state;
    out <= present_state;
  end
end

// second example using PortMap to construct the same FSM
module simple_fsm_2(clk, reset, in, out);
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  case(present_state)
    0:
      if(in) present_state <= 0;
      else present_state <= 1;
      next_state <= present_state;
      if(reset) present_state <= 0;
    1:
      out <= next_state;
  endcase
end

================================================================
