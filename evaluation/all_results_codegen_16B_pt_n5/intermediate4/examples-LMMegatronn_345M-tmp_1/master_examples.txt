example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
//Ğ± directï¿½ 1 in case. back to state 1 doesn't have any effect.
always @(state) begin
  next_state = (present_state == 1'b0) ? 1'b1 : 1'b0;
  case(present_state)
    1'b0: begin
      if(in)
        next_state= 1'b1;
    end
    1'b1: begin
      next_state = 1'b0;
    end
  endcase
end
// If the state changes, reset next_state is 10 or when the "next_state" is 0010,
// Any "reset_Delay" is 1.
always @(posedge clk) begin
  if(reset) begin
   present_state
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set 0 in=1 when in=0. Otherwise, stay in state 0.
always@(state or in)
begin
STATE <= (present_state!=STATE) ? state : current_state;
// Set default, inputs as specified in the shift register.
end

assign out = (present_state==STATE) ? in : present_state;
assign changed = (present_state==STATE && next_state!=STATE);
assign another = (present_state!=STATE && next_state!=STATE && next_state==STATE);

// and state output control. Continuous off when the current state enable is 1.
// concurrently guaranteed by the virtual event.
assign evup = (present_state==STATE) ? 0 : 1;
assign exit = ~present_state;

always@(posedge clk)
begin
case(present_state)
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(present_state or in) begin
case(present_state)
0 : if(present_state==0)
		begin
			next_state=1;
			present_state=3;
			next_state [0]=1;
		end
	1 :
		begin
			next_state=2;
			present_state=3;
			next_state [0]=1;
		end
2 :
		begin
			if(in==1)
				begin
					next_state=3;
					present_state=1;
					next_state [0]=1;
				end
			else if(in==0)
				begin
		
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always@(posedge clk)
begin
  if(reset)
    present_state<=0;
  else
    present_state<=next_state;
end

always@(*)
begin
  case(present_state)
    0:
    begin
      if(in)
        begin
          next_state=1;
        end
      else
        begin
          next_state=0;
        end
    end
    1:
    begin
      next_state=0;
    end
endcase
end
// Logica
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set in=1 to in:

// Add input because allowed to address (in)
// are 1 at the default. First clock cycle at the input.
// A was returned to start 0 in state 0 so that we don't
// the previous state.
// A enter in state 1 depends on state 0 and no transition at the next state
// of 1.
// A means that we know the state==1 (in) or in transition. The computation in
// the computation could come on an earlier choice.

always @(posedge clk)
begin
  if (reset)
    present_state <= 1'd1;
  else if (i)
    present_state <= 1'd0;
  else if (!next_state && !present_state) // A rising edges on previous clock
    present_state <= 1'd1;
  else if (!present
================================================================
