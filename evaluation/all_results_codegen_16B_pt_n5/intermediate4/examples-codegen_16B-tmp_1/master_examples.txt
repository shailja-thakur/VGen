example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk){
  out = present_state;
  present_state = ~present_state & 1;
  if (present_state == 0) 
    next_state = 0;
  else
    next_state = 1;
  
  if (current_state) present_state = 0;
  else present_state = 1;
}
assign present_state = out;
assign next_state = present_state;
always @(posedge clk or reset) begin
  present_state == 0? 
  next_state == 0?
  out = 0:
  out = 1;
  active? 
  out = present_state:
  out = 1;
  reset?
  out = 0:
  out = 1:
    in?
    next_state = 0:
    next_state =
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
main()
{
	in = 'a';
	clk = p2 = p3 = p4 = p3 = 0;
	while (1) begin
	if (reset = '1') begin
		next_state = present_state = 0;
	end else begin
		while (clk = '1') // Sample clk
		begin
			if (in = '1') begin
				next_state = present_state; // stay in state 0
			end else begin
				next_state = present_state = 1; // go to state 1
			end // in = '0'
		end // while clk = '1'
		if (in = '1') begin
			out = 1; // out is 1 when in is 1
		end else begin
			out = 0; // out is 0 when in is 0
		end // in = '0'
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset) begin
        case(present_state)
        case(0) begin
                if(reset) present_state=0; else present_state=1;
                next_state=present_state;
                if((!reset) && in) out=1;
        end
        case(1) begin
                if(reset) present_state=0; else present_state=1;
                next_state=present_state;
                if((!reset) && in) out=1;
        end
        endcase
        next_state = next_state;
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// input_present :  inputs present from the input wire
presence input_present;
// internal calculate ps function
void calculate_state();
begin: present_state(0), next_state(0);
// reset state
if (reset == 1) begin calculate_state()
end
else begin calculate_state();
// When input is present, stay in state 1
if (input_present == 1) begin next_state = 1
end
// If input is not present, go to state 0
else begin next_state = 0
end
assign out = next_state;
always @(posedge clk) begin calculate_state();
end
`;
const test_fc = `
`;

QueriedMillsAsyncDriver = {
    Cas: {
        queries: {
            addrs: {
                [`read`]: {
                    op:
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset) begin
    if (reset) present_state <= 0;
    else if (in)    present_state <= 1;
    else            present_state <= 0;

    // Reset state to 0 on posedge reset
    if (reset)     next_state <= 0;
    // present_state never transitions to 0
    else if (present_state == 0)             next_state <= present_state;
    // present_state = 1 -> 1
    else if (present_state == 1 and in)     next_state <= 1;
    // present_state = 1 -> 0
    else if (present_state == 1 and not in) next_state <= 0;
    // present_state = 0-> present_state + 1
    else if (present_state == 0 and present_state + 1 > 1) next_state <=
================================================================
