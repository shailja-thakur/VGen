example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (negedge reset) begin
    if (reset) begin
        r_reg = 1;
    end else begin
        q = r_reg >> 1;
        r_next = {7, negedge(clk) & ~res & ~resshift(r_reg[2],1), feedback_value, r_reg[2] << 1};
        q = q | r_next[3];
        r_next = {5, negedge(clk) & ~res & ~resshift(r_reg[4],1), feedback_value, r_reg[3] << 1};
        q = q | r_next[2];
        feedback_value = (r_reg[2] | r_reg[3]) & (res << 2);
        r_reg = r_next;
    end
end
"""

args
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;

(* lfsr_internal  *)
	in d (clk,reset), 
	p # 12,a,b (2),r_reg(b23{5,3}), q
	(* watchdog setup  *)
	pn a begin while ((q != 0) | d) end pn b less than a*8
	(* register target  *)
	constant d = a*8 - p + 15 = {19,15,13,11, 9, 8, 7}
	(* register declarations  *)
	constant p = 12
	constant a = 2
	(* macros for writing regs  *)
	always @(p) begin 1'd0 r_reg = 1'd0; end  // initial value for <reset>
	always @(a) begin r_reg = r_reg<<1 | 1'd0
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk || posedge reset)
    if (reset) r_reg <= 1;
    else r_reg <= r_next;
    r_next <= {feedback, (r_reg[1:0] != r_reg[3:2]) && (r_reg[3:2] != r_reg[4:0})};
    feedback_value <= {r_reg[2:0], r_reg[4:0][11:8]};
    q <= {r_reg[4:3], r_reg[4:0], feedback_value[2:1], feedback_value[0]};

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
parameter low_limit = 32;
parameter high_limit = 94;

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin 
    // TODO: Need to find the correct logic within single statement to generate 2 in-order
    if (reset) begin 
        q <= 0;
        r_reg <= 1;
        r_next <= 0;
    end else begin
        r_next <= (r_reg >> 2) ^ (r_reg >> 4);
        q <= r_next ^ (r_reg >> 5);
        feedback_value <= r_reg = (r_reg << 1) ^ ((r_reg >> 2) ^ (r_reg >> 4));
    end
end

================================================================
