example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk or posedge reset)
begin
    if(reset)
    begin
        cur_state <= IDLE;
    end
    else begin
        cur_state <= SA;
        next_state <= SB;
    end
    case(cur_state)
    // State IDLE
    begin
        if(a) begin cur_state <= SA; end else begin cur_state <= SB; end
        if(b) begin cur_state <= SAB; end else begin cur_state <= IDLE; end
        if(a && b) begin cur_state <= SAB; end
    end
    case(SA)
    begin
        if(b) begin cur_state <= SAB; end else begin cur_state <= IDLE; end
        if(a && b) begin cur_state <= S
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
assign z = cur_state[0] & cur_state[1];
always @(posedge clk)
begin
	casez
	cur_state <= cur_state;
	next_state <= next_state;
	if cur_state == IDLE and a and b then
		next_state <= SAB;
	if cur_state == IDLE and b then
		next_state <= SB;
	if cur_state == IDLE and a then
		next_state <= SA;
	if cur_state == SA and b then
		next_state <= SAB;
	if cur_state == SB and a then
		next_state <= SAB;
	if cur_state == SAB then
		next_state <= IDLE;
end

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk or posedge reset) begin
if (reset) begin
	cur_state <= IDLE;
end else begin
	cur_state <= IDLE;
	if ((a && b)) begin
		cur_state <= SAB;
	end else if (a) begin
		cur_state <= SA;
	end else if (b) begin
		cur_state <= SB;
	end
end
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [2:0] z;

always @(posedge clk or posedge reset) begin
  if(reset == 1) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end
  else begin
    if(a == 1 and b == 1) begin
      cur_state <= SAB;
      next_state <= SAB;
      z <= 1;
    end
    else if(a == 1) begin
      cur_state <= SA;
      next_state <= SA;
      z <= 1;
    end
    else if(b == 1) begin
      cur_state <= SB;
      next_state <= SB;
      z <= 1;
    end
    else begin
      cur_state <= IDLE;
      next_state <= IDLE;
      z <= 0
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] a_or_b,a_or_b_pending,a_or_b_prev,a_or_b_prev_pending,a_or_b_prev_prev_pending;
reg a_or_b_valid;
reg z_pending;
always @(posedge clk) begin
  a_or_b_prev_prev_pending <= a_or_b_pending;
  a_or_b_prev_pending <= a_or_b;
  a_or_b_pending <= a_or_b;
  if(reset == 0) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    a_or_b_valid <= 0;
    z_pending <= 0;
  end else begin
    a_or_b
================================================================
