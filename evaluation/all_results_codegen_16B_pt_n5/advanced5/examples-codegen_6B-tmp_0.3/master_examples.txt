example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end else begin
        cur_state <= next_state;
        next_state <= next_state;
    end
end

module abro_out(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  if (cur_state == IDLE)
  {
    if (a == 1)
    {
      next_state = SA;
    }
    else if (b == 1)
    {
      next_state = SB;
    }
    else
    {
      next_state = IDLE;
    }
  }
  else if (cur_state == SA)
  {
    if (b == 1)
    {
      next_state = SAB;
    }
    else
    {
      next_state = SA;
    }
  }
  else if (cur_state == SB)
  {
    if (a == 1)
    {
      next_state = SAB;
    }
    else
    {
      next_state = SB
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
    next_state <= cur_state;
    next_state <= IDLE;
    if (cur_state == IDLE)
    begin
        if (a == 1)
        begin
            next_state <= SA;
        end
        if (b == 1)
        begin
            next_state <= SB;
        end
    end
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a == 1) {
    next_state <= SA;
  }
  if (b == 1) {
    next_state <= SB;
  }
  if (cur_state == IDLE && a == 1 && b == 1) {
    next_state <= SAB;
  }
  if (cur_state == IDLE && a == 1) {
    next_state <= SA;
  }
  if (cur_state == IDLE && b == 1) {
    next_state <= SB;
  }
  if (cur_state == SA && b == 1) {
    next_state <= SAB;
  }
  if (cur_state == SB && a == 1) {
    next_
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
        z <= 0;
    end else begin
        cur_state <= IDLE;
        next_state <= IDLE;
        if (a) begin
            cur_state <= SA;
        end
        if (b) begin
            cur_state <= SB;
        end
        if (a && b) begin
            cur_state <= SAB;
        end
    end
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= (a == 1 && b == 1) ? SAB :
              (a == 1 && cur_state == IDLE) ? SA :
              (b == 1 && cur_state == IDLE) ? SB : IDLE;
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	if (reset)
		cur_state <= IDLE;
	else if (a)
		cur_state <= SA;
	else if (b)
		cur_state <= SB;
	else if (cur_state == SA && b)
		cur_state <= SAB;
	else if (cur_state == SB && a)
		cur_state <= SAB;
	else if (cur_state == SAB)
		cur_state <= IDLE;
	next_state <= cur_state;
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  begin
    if (next_state == IDLE)
      next_state = cur_state;
    else
      next_state = cur_state;
    switch(next_state)
    begin
      case IDLE:
        if (a && b)
        begin
          next_state = SAB;
          z = 1;
        end
        break;
      case SA:
        if (a)
        begin
          next_state = SAB;
          z = 1;
        end
        break;
      case SB:
        if (b)
        begin
          next_state = SAB;
          z = 1;
        end
        break;
      case SAB:
        next_state = IDLE;
        z = 1;
        break;
    end
  end
end
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else if (a && b) begin
    cur_state <= SAB;
  end
  else if (a) begin
    cur_state <= SA;
  end
  else if (b) begin
    cur_state <= SB;
  end
  else begin
    cur_state <= IDLE;
  end
end
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high,
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (a) begin
      cur_state <= SA;
    end
    else if (b) begin
      cur_state <= SB;
    end
    else begin
      cur_state <= SAB;
    end
  end
end


================================================================
