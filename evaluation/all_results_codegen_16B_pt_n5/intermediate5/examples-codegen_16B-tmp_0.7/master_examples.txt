example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* begin
  if (load) begin
    out = data;
  end else begin
    out = data << amount;
    out = out | (out >> (8 - amount));
  end
end

// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @* begin
  if (load) begin
    out = data;
  end else begin
    out = data >> amount;
    out = out | (out << (8 - amount));
  end
end
"""

# instant
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
	if(reset == 0) begin
		out <= 0;
	end
	else begin
		if(load) begin
			out <= data;
		end
		else begin
			out <= (out << amount) | (out >> (32 - amount));
		end
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
	if(load) begin
		out <= data;
	end else begin
		out <<= amount;
		out |= data & ((1<<amount)-1);
	end
end

// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @(posedge clk) begin
	if(load) begin
		out <= data;
	end else begin
		out >>= amount;
		out |= data & ((1<<amount)-1) << (8
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
  if (load) begin
    out <= data;
  end
  else begin
    out = (out << amount) | (data & ((1 << amount) - 1));
    if (reset) begin
      out = 0;
    end
  end
end
// return result
function [7:0] return_result();
begin
  return return_result;
end
// return result function
function bit [7:0] return_data();
begin
  return_data = out;
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or negedge reset) begin
  if (load) begin
    out <= data;
  end else begin
    out <= data << amount;
    out[7] <= out[0] <= out[6] <= out[5] <= out[4] <= out[3] <= out[2] <= out[1] <= out[0];
  end
end

// right rotation and shift operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @ (posedge clk or negedge reset)
================================================================
