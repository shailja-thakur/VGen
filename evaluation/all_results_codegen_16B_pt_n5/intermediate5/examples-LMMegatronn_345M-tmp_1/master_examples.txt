example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
always@(posedge clk)
begin
    if (reset)
        shift_reg <= 0;
    else
    begin
        shift_reg[0] <= data[7];
        // 00 -- if 00 -- else load 11 -- else load 00
        if (load)
            shift_reg[7:1] <= data[6:0];
        else
            shift_reg <= {shift_reg[6:0],1'b0};
    end
end
assign out = shift_reg[7:1];
// After reset, initialize flag in 1
================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shifted_data;
reg [7:0] shifted_data_shift;
reg [7:0] out_shr;
  // the output to "shift" is 0
  // the remaining bits are "0" which is "1"
  // are "2" that is "3" which is "4" which is "5" in "6" which is
  // "7" in "8" and is "9" for "10" in "11" in "12" which is
  // "9" in "12" in "13" in "14" in "15" in "16" in "17" in "18"
  // "A" internal signals are '1' in the three are considered outputs in the lower
  // bits.
  wire [7:0] shifted_data;
  wire shifted_direction;
  // the
================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
always@(posedge clk) begin
if(reset) 
	//if(shift_reg==7'd0)
		begin
			shift_reg<=data;
		end
else
if(load)
	shift_reg<=data;
end

// take control stuff a signals associated with unit 3(rotate)
always@(shift_reg or data or shift_reg)
begin
	case(shift_reg)
		3'd0:
			begin 
				out=data[7]^shift_reg[7];
				out_valid=~load & (data[7]&shift_reg[7]);
			end
		3'd1:
			begin 
				out=data[7]^
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift=0;
// also takes a 31 for all bits shifting
wire [7:0] shifted1;
// reg [7:0] shifted2 = 0;
reg [7:0] shifted=0;
reg [7:0] shifted2;
reg [3:0] four=0;
// which to shift we are shifted left
// (first shifting)
always@(posedge clk) begin
//  if (reset) begin
//    shift1={data[2:0],1'b0}^2'b00
//    previousResult=0;
//    // else
//    if (load && !zero)
//    begin
//        shift<=~data;
//        increment<=0;
//   
================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shuf [7:0];
wire [7:0] shifted_middle = data >> amount;
reg [7:0] shifted_left;

initial
begin
    // shift right arithmetic
    shuf[0] = 0;
   shuf[1] = 1;
   shuf[2] = 2;
   shuf[3] = 3;
   shuf[4] = 4;
   shuf[5] = 5;
   shuf[6] = 6;
   shuf[7] = 7;
   shuf[8] = 8;
end

always @(posedge clk)
begin
    if (!reset)
    begin
        out  <= 0;
================================================================
