// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\nif(load) begin\n\tout <= data;\nend else begin\n\tout <= ((out << amount) | (out >> (32-amount)));\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n if(load) begin\n  out <= data;\n  if(reset == 0) begin\n   out <= data << (amount+1);\n  end\n end else begin\n  out <= out << amount;\n end\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\n  if (load) begin\n    out <= data;\n  end else begin\n    out <= (out << amount) | (out >> (32 - amount));\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\nif(reset)\n  out <= 0;\nelse if(load)\n  out <= data;\nelse\n  out <= (out << amount) | (out >> (32 - amount));\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset) begin\nif(reset) begin\nout <= 0;\nend else begin\nif(load) begin\nout <= data;\nend else begin\nout <= (out << (amount - 1)) | (out >> 1);\nend\nend\n"
    }
  ],
  "created": 1663534343,
  "id": "cmpl-6WFeCXVGQbA2q05BPB05DOaMm6Rzv",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 305,
    "prompt_tokens": 94,
    "total_tokens": 399
  }
}