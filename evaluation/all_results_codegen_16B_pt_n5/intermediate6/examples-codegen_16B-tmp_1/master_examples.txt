example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q, and export the symbol
initial inline begin
    CAssistant.high_to_low(ram[addr]);
    CAssistant.low_to_high(ram[addr]);
    q = ram[addr];
end
// reset address to zero
initial begin
    CAssistant.low_to_high(ram[0]);
end

================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q and apply we, clk
assign q = ram[addr];
// #line 1 "ram.ys"

// ram data changes from output to input
// clk drives we
// data is at addr
// clk is low, load command to ram (we = 0, clk = 0)
// on clk = 1, load ram value at 
// clk = 0, write to ram
// on clk = 1, if we = 1, clk=1 else clk=0
// read command wakes us up, clk = 0, we = 0, load command
// clk = 1, read ram value at addr to q
// 
always sequence [3:0] ;
// #line 5 "ram.ys"

void ram_write( datam &addr, datam &data )
{
    if ( we == 1 ) {
        // immediate
================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or posedge (we & ~ram[addr]))
    if (we)
    {
        q <= ram[addr];
    }
    else
    {
        ram[addr] <= data;
    }

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or negedge reset) begin
  case (we)
    q <= ram[addr];
    case (addr)
      ram[2**ADDR_WIDTH-1 : addr] <= data;
      ram[addr] <= data;
      // make sure the address is preserved when falling
      ram[addr+11:addr] <= ram[addr];
      default: q <= 0;
  endcase
end

// This is a ROM module
module rom #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr
);
uint8 [DATA_WIDTH-1:0] rom[2**ADDR_W
================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or we) begin
    ram[addr] <= data;
    q <= ram[addr]; end

// This is a ROM module
module rom #(
    parameter ADDR_WIDTH=5,
    parameter DATA_WIDTH=8
) (
    input [ADDR_WIDTH-1:0] addr, // address sensor takes
    input  w,      // write signal (GOOD write)
    input clk,     // clock
    output [DATA_WIDTH-1:0] rom,
    output [7:0] q // inverted rom value
);
reg [DATA_WIDTH-1:0] rom[2**ADDR_WIDTH-1:0];
always @(posedge clk or w) begin
    rom[addr] <= rom[addr];
    q
================================================================
