example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s[7:0] = a + b;
	s[15:8] < "0" when a[7] < "0" and b[7] < "0"
		and 
		a[7] <= a[7:0] and b[7] <= b[7:0]; 
		
	assign s[15:8] = (high(the_msb(a) == "0") and low(the_msb(b))) && (high(the_msb(a)) == ("0") or low(the_msb(b)))
	s[15:0] < "-1" when 
		align(s[15:8],high(s[15:8])) != (high(the_msb(a)) == "1" and low(the_msb(b))) && 
		align(
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder: signed_adder ( a, b, s, overflow )

// Design a pipe line adder, a,b,s,o, that copies each input letter to the next output letter

//a: output[0] = input[0], otherwise a = 0
//b: output[0] = input[1], otherwise b = 0
//s: output[0] = input[2],

// Any individual input letter can only be added to the signal once.
// We can pass any number of inputs to this adder.
// The input to the adder will never go to the same register more than once,
// but it may go to the same register but not the same letter more than once. 

// overflow input is always an unused input. Inputs are 7-bit wide.

// so we can calculate this from the s and a in forward traversal


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implementation

signed_adder(a,b,s,var);

// function outer {

//     function inner{}

//     tight {

//         var unsigned_a = {11111 a[1] 111};
//         var unsigned_b = {None b[1] 111}

//         s = (unsigned_a + unsigned_b)

//         if high bit(s) == 1 {
//             overflow = 'a'
//         } else {
//             overflow = 'b'
//         }


//         signed_adder(a,b,s,overflow)


//     }

// }

// </ act_unit>

signed_adder(a,b,s,ov) {
    b = b + 0
    s = a + b
    if high bit(s) == 1
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow) {
    if($signed(a) && $signed(b) = '1')  { 
                   decrement(s); 
                   }
                   if ($signed(a) = '0' && $signed(b) = '1')  {
                   increment(s);
                   }
                   if $signed(a) = $signed(b) = '0'
                   {nothing(s);
                   overflow = '1'
                   }
                   
}
#------------------------------- assemble code -------------------------------
function top(input [7:0] a,
    input [7:0] b
    output [7:0] s
	output overflow
 );
 set_interrupt_enable_register(0);
 begin: 
 
 a=0;
 b=0;
 m0: clr
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a + b);
    
assign overflow =	a_sign != b_sign && ((s >= 0x100 && a_sign)							// signed overflow occurs if the most significant bits of {a, b} are low and the most significant bit of s is high

// or if {a, b} > 0x80 and the most significant bits of s are low
                ||   ((s >= 0x100 || a >= 0x80) && !a_sign)        
                ||   ((s >= 0x100 || b >= 0x80) && !b_sign) 	
       );
'''

    return "\n\n".join(wrap_code(asm_code,line_width=1024, indent=0,
                                          tab="    "))


if __name__ == "__main__":
    print(add_code("0000
================================================================
