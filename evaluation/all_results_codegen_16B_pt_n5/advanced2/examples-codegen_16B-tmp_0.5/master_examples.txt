example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the enable input, set q to 0.

always @(posedge slowena)
    q <= 0;

// On the negative edge of the enable input, set q to 9.

always @(negedge slowena)
    q <= 9;


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the slowena signal:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge ena or negedge reset)
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset) q <= 0;
    else if (q != 9) q <= q + 1;
end

// On the positive edge of the slow clock:
// if slowena is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge slowclk) begin
    if (slowena) q <= 0;
    else if (q != 9) q <= q + 1;
end

always @(posedge clk or posedge slowclk) begin
    q <= q + 1;
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if (reset) q <= 0;
    else if (slowena) {
        if (q < 9) q <= q + 1;
    }
end

// On the positive edge of the slowena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena) begin
    if (reset) q <= 0;
    else if (slowena) {
        if (q < 9) q <= q + 1;
    }
end

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, only increment the output q if the ena input is low.

always @(posedge clk or negedge reset) begin
    if (reset) q <= {0, 1, 2};
    else if (slowena && q != 9) q <= q + 1;
    else if (!slowena && q != 9) q <= q + 1;
end

// The output should be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= {0, 1, 2};
    else if (slowena && q != 9) q <= q + 1;
    else if (!slowena && q != 9) q <= q + 1;
end

always @(posedge clk or negedge reset) begin
    if
================================================================
