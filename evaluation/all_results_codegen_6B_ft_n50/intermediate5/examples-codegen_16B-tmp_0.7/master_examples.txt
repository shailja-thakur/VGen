example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
if (reset)
	out = 8'b0000_0000;
else if (load)
	out = data;
else begin
	left_shift(out,amount);
	out = out << amount;
end
end
function [7:0] left_shift(in,shift);
input [7:0] in;
input [2:0] shift;
begin
left_shift = in << shift;
end
endfunction

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
	if(reset)
	begin
	out <= 0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0], out[7]};
	out[7:1] <= {out[7], out[7:1]};
	end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
if(reset)
begin
out <= 8'b00000000;
end
else
begin
if(load)
begin
out <= data;
end
else
begin
out <= {data[7],data[7:amount]};
end
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,negedge reset)
begin
if(reset==0)
begin
out<=0;
end
else if(load==1)
begin
out<=data;
end
else
begin
out<=(data<<amount) + (out>>amount);
end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
	begin
	if (reset)
	out=0;
	else
	begin
	if(load)
	out=data;
	else
	begin
	out = {out[6:0], out[7] ^ amount[2]};
	out = {out[5:0], out[7] ^ amount[1]};
	out = {out[4:0], out[7] ^ amount[0]};
	end
	end
	end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
if (reset) begin
	out = 8'b00000000;
end else if (load) begin
	out = data;
end else begin
	// rotate data to the left
	out = {data[7],data[7:1]};
	// shift the data to the left by the amount
	out = out << amount;
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,negedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<={out[6:0],out[7]};
	out<=out<<amount;
	end
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
begin
if(reset) begin
	out<=8'b0;
	end
else if(load) begin
	out <= data;
	end
else begin
	out<= out << amount;
	end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[7:amount], out[6:0]};
	end
	end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out=0;
	end
	else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	case(amount)
	3'b000 : out <= {out[6:0], out[7]};
	3'b001 : out <= {out[5:0], out[7:6]};
	3'b010 : out <= {out[4:0], out[7:5]};
	3'b011 : out <= {out[3:0], out[7:4]};
	3'b100 : out <= {out[2:0], out[7:3]};
	3'b101 : out <= {out[1:0], out[7
================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	if (load)
	begin
	out = data;
	end
	else
	begin
	case(amount)
	1: out = {out[6:0],out[7]};
	2: out = {out[3:0],out[7:4]};
	3: out = {out[0],out[7:1]};
	endcase
	// to left shift the output by amount
	end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	out = 8'b0;
	end
	else if(load)
	begin
	out = data;
	end
	else
	begin
	out ={out[6:0],out[7]};
	out = {out[7:0],out[7:1]};
	out = {out[7:0],out[7:1]};
	end
	end

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	// when reset is high, assign 0 to out
	out = 0;
	end
	else if(load)
	begin
	// when load is high, load data to out
	out = data;
	end
	else
	begin
	//when load is not high, perform rotation and left shift
	out = {out[6:0], out[7]}; // left shift
	out = {out[5:0], out[7:6]}; // rotate
	out = {out[4:0], out[7:5]};
	out = {out[3:0], out[7:4]};
	out = {out[2:0], out[7:3]};
	out = {out[1:0], out
================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
if (reset) out <= 8'b0;
else if (load) out <= data;
else begin
	left_shift rotation(clk,reset,amount,out,out);
	//rotation macro
	//
	//shift left 8 times
	//xor with input
	//and with data
end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
if(reset)
begin
out[7:0] <= 0;
end
else if(load)
begin
out[7:0] <= data[7:0];
end
else
begin
	out[7:0] <= {out[6:0],out[7]};
	out[7:0] <= (out[7:0] << amount);
end
end

================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or negedge reset)
begin
if (reset == 1'b0)
begin
out <= 8'd0;
end
else if (load == 1'b1)
begin
out <= data;
end
else
begin
out <= {out[6:0], out[7]};
end
end

================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
	if(reset)
	begin
	out <=8'b0;
	end
	else if(load)
	begin
	out <= data;
	end
	else if(amount == 3'b111)
	begin
	out <= {out[6:0],out[7]};
	end
	else
	begin
	out <= left_rotate_out;
	end
end
// implementation of left rotate
// both shift and rotate take place withing a single shift instruction
// amount is the rotation amount
always @(*)
begin
	case(amount)
	3'b000: left_rotate_out <= data;
	3'b001: left_rotate_out <= {data[7],data[7:1]};
	3'b010: left
================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
	else
	begin
	if(load)
	out <= data;
	else
	begin
	out <= {out[6:0],out[7]};
	out[7:0] <= out[7:1];
	end
	end
end

================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	out <= 0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	out[7-amount:0] <= out[7];	// shift left
	out[7:amount] <= 0;	// zero fill
	end
	end

================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
begin
out <= 8'b0;
end
else
begin
if(load)
out <= data;
else
begin
out <= {out[6:0],out[7]};
out <= out << amount;
end
end
end

================================================================
example-20: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
	if(reset)
	begin
	out=0;
	end
	else
	begin
	if(load)
	begin
	out=data;
	end
	else begin
	out = ( (data << amount) | out);
	end
	end
end

================================================================
example-21: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if (reset) begin
	// reset
	out <= 0; 
	end
	else begin
	if (load)
	// when load is high, load data to out
	out <= data;
	else
	// when load is low, rotate the out register followed by left shift the out register by amount bits
	out <= {out[6:0],out[7:1]};
	end
end

================================================================
example-22: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	out <= 0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7:1]};
	out[7] <= out[0];
	end
end

================================================================
example-23: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
	if(!reset)
	begin
	// reset
	out=0;
	end
	else
	begin
	if(load)
	begin
	// load data
	out=data;
	end
	else
	begin
	// rotate
	out= {data[7:amount],data[7:8]};
	end
	end
end

================================================================
example-24: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
	if (reset) begin
	out<=0;
	end
	else if(load) begin
	out<=data;
	end
	else begin
	out<={out[6:0],out[7]};
	end
end

================================================================
example-25: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
if (reset)
begin
out <= 0;
end
else
begin
if(load)
out <= data;
else
begin
out <={out[6:0],out[7]};
out[7:1] <= out[6:0];
end
end
end

================================================================
example-26: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
	else
	begin
	if(load)
	out <= data;
	else begin
	out <= {out[6:0],out[7]};
	out[7:0] <= out[7:0] << amount;
	end
	end
end

================================================================
example-27: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,reset)
begin
	if(reset)
	begin
	 out=0;
	 end
	else if(load)
	begin
	 out=data;
	 end
	else
	 begin
	 out = {out[6:0],out[7]};
	 out = {out[0],out[7:1]};
	 out = {out[1],out[7:2]};
	 out = {out[2],out[7:3]};
	 out = {out[3],out[7:4]};
	 out = {out[4],out[7:5]};
	 out = {out[5],out[7:6]};
	 out = {out[6],out[7]};
	 end
	end

================================================================
example-28: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
	if(reset) begin
	// reset statement: out = 8'b0;
	out <= 8'b0;
	end
	else begin
	if(load)
	begin
	// load statement: out = data;
	out <= data;
	end
	else begin
	// rotate statement: out = {out[6:0],out[7]};
	out <= {out[6:0],out[7]};
	// shift statement: out = out << amount;
	out = out << amount;
	end
	end
end

================================================================
example-29: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset == 1)
begin
out <= 0;
end
else
begin
if(load == 1)
out <= data;
else
begin
out <= out << amount;
end
end
end

================================================================
example-30: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<=left_shift(out,amount);
	end
	end

module left_shift(clk,reset,in,out);
input [7:0] in;
input clk;
input reset;
output reg [7:0] out;
// when reset is high, out is cleared
always @ (posedge clk, posedge reset)
	begin
	if(reset)
	begin
	out<=0;
	end
	else
	begin
	out<=in;
	end
	end

================================================================
example-31: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<=out>>amount;
	out<=out<<amount;
	end
end

================================================================
example-32: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	out[7:1] <= out[6:0];
	end
	end
end

================================================================
example-33: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,negedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else
	begin
	if(load)
	out<=data;
	else
	 out<=(data<<amount) + out;
	end
end

================================================================
example-34: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
begin
if (reset)
out<=0;
else if (load)
out<=data;
else begin
	out<={out[6:0],out[7]};
	out[7:1] <= out[6:0];
end
	
end

================================================================
example-35: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=8'b0;
	end
	else
	begin
	if(load)
	out<=data;
	else
	begin
	out<=out<<amount;
	out<=out>>amount;
	//out<=(data<<amount)^(data>>amount);
	end
	end
end

================================================================
example-36: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
if(reset)
begin
out<=0;
end
else
if(load)
out<=data;
else
begin
out<=reg_out[2:0];
out<=reg_out[7:3] << amount;
end

================================================================
example-37: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
	if(load)
	begin
	out=data;
	end
	else
	begin
	out={data[6:0],data[7]};
	out=out<<amount;
	end
	end

================================================================
example-38: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, negedge reset)
begin
	if (reset == 0)
	begin
	assign out = 0;
	end
	else if (load == 1)
	begin
	assign out = data;
	end
	else if (load == 0)
	begin
	//rotate register
	out = {out[6:0],out[7]};
	//left shift
	out = {out[6:0],out[7:1]};
	end
end

================================================================
example-39: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
	if(reset==0)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<={out[6:0],out[7]};
	out<={out[7:0],out[7]};
	end
end

================================================================
example-40: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
begin
out <= data;
end
else if (load)
begin
out <= data;
end
else
begin
out <= {out[6:0],out[7]};
end
end

================================================================
example-41: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,negedge reset)
if(reset==0)
begin
out<=0;
end
else if(load==1)
begin
out<=data;
end
else
begin
	case(amount)
	3'b000:
	begin
	out<=out;
	end
	3'b001:
	begin
	out<={out[0],out[7:1]};
	end
	3'b010:
	begin
	out<={out[1:0],out[7:2]};
	end
	3'b011:
	begin
	out<={out[2:0],out[7:3]};
	end
	3'b100:
	begin
	out<={out[3:0],out[7:4]};
	end
================================================================
example-42: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk, negedge reset)
	begin
	if(reset == 1'b0)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load == 1'b1)
	out <= data;
	else
	begin
	out <= {out[6:0],out[7]};
	out[7:0] <= out[7:(6+amount)];
	end
	end
	end

================================================================
example-43: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
	if(reset)
	begin
	out = 0;
	end
	if(load)
	begin
	out = data;
	end
	else begin
	out = {out[6:0],out[7]};
	out = out << amount;
	end
end

================================================================
example-44: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
	if(reset)
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	out = {out[6:0],out[7]};
	out[7:1] = out[6:0];
	end
	end
end

================================================================
example-45: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
begin
if(reset)
	begin
	out<=0;
	end
else if(load)
	begin
	out<=data;
	end
else
	begin
	out<={out[6:0],out[7]};
	out<=out<<amount;
	end
end

================================================================
example-46: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)	
begin
	if(reset) begin
	out <= 0;
	end
	else if(load) begin
	out <= data;
	end
	else begin
	out <= {out[6:0],out[7:7]};
	out[7] <= out[0];
	out[6:0] <= out[7:1];
	end
end

================================================================
example-47: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	 out<={out[7:amount],out[7:0]};
	end
end

================================================================
example-48: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	 out = 0;
	end
	else if(load)
	begin
	 out = data;
	end
	else begin
	 out = (out << amount) | out[7:1]; // 1st left shift
	 out = out >> 1; // 2nd right shift
	end
end

================================================================
example-49: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	//reset
	out <= 'b0;
	else
	begin
	if(load)
	//load
	out <= data;
	else
	begin
	out <= {out[6:0],out[7]};
	out <= {out[5:0],out[7:6]};
	out <= {out[4:0],out[7:6]};
	out <= {out[3:0],out[7:6]};
	out <= {out[2:0],out[7:6]};
	out <= {out[1:0],out[7:6]};
	end
	end
	end

================================================================
