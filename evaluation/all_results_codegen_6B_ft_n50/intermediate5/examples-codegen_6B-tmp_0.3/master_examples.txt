example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out = 0;
	end
	else if(load)
	begin
	out = data;
	end
	else
	begin
	out = {out[6:0],out[7]};
	end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 0;
	else if (load)
	out <= data;
	else begin
	//$display("amount: %d",amount);
	//$display("out: %d",out);
	out <= {out[6:0],out[7]};
	//$display("out: %d",out);
	end
	end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'd0)
	begin
	out<=out;
	end
	else if(amount==3'd1)
	begin
	out<=out>>1;
	end
	else if(amount==3'd2)
	begin
	out<=out>>2;
	end
	else if(amount==3'd3)
	begin
	out<=out>>3;
	end
	else if(amount==3'd4)
	begin
	out<=out>>4;
	end
	else if(amount==3'd5)
	begin
	out<=out>>5;
	end
	else if(
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	//$display($time," L %d ",amount);
	out<={out[6:0],out[7]};
	case(amount)
	3'b110: out<={out[5:0],out[6]};
	3'b101: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b011: out<={out[2:0],out[3]};
	3'b010: out<={out[1:0],out[2]};
	3'b001: out<={out[0
================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else if(amount==3'b110)
	begin
	out<=out;
	end
	else if(amount==3'b101 || amount==3'b100)
	begin
	out<={out[6:0],out[7]};
	end
	else if(amount==3'b011 || amount==3'b010)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if(amount==3'b001 || amount==3'b000)
	begin
	out<={out[4:0],out[5
================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else if(amount==3'b110)
	begin
	out<=out;
	end
	else if(amount==3'b101 || amount==3'b100)
	begin
	out<={out[6:0],out[7]};
	end
	else if(amount==3'b011 || amount==3'b010)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if(amount==3'b001 || amount==3'b000)
	begin
	out<={out[4:0],out[5
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b111)
	out<=out;
	else if(amount==3'b110)
	out<={out[6:0],out[7]};
	else if(amount==3'b101)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b100)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[3:0],out[4],out[5],out[6]};
	else if(amount==3
================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if (reset)
	out<=0;
	else if (load)
	out<=data;
	else begin
	// do the left shift first
	out<={out[6:0],out[7]};
	// then rotate
	out<={out[5:0],out[6],out[7]};
	end
	end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 0;
	else if (load)
	out <= data;
	else begin
	case(amount)
	3'b000: out = out;
	3'b001: out = {out[6:0],out[7]};
	3'b010: out = {out[5:0],out[6]};
	3'b011: out = {out[4:0],out[5]};
	3'b100: out = {out[3:0],out[4]};
	3'b101: out = {out[2:0],out[3]};
	3'b110: out = {out[1:0],out[2]};
	3'b111: out = {out[0
================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else if(amount==3'b110)
	begin
	out<=out;
	end
	else if(amount==3'b101 || amount==3'b100)
	begin
	out<={out[6:0],out[7]};
	end
	else if(amount==3'b011 || amount==3'b010)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if(amount==3'b001 || amount==3'b000)
	begin
	out<={out[4:0],out[5
================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	out<={out[6:0],out[7]};
	end
end

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 8'b00000000;
	else if (load)
	out <= data;
	else begin
	// out = {out[6:0],out[7]};
	out[7:1] = out[6:0];
	out[0] = out[7];
	end
	end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if (reset)
	out<=0;
	else
	begin
	if (load)
	out<=data;
	else
	begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111:
================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={out[0],
================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out<=0;
	else if (load)
	out<=data;
	else begin
	//$display("amount: %d",amount);
	//$display("out: %d",out);
	out<={out[6:0],out[7]};
	//$display("new out: %d",out);
	end
	end

================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	//$display($time,": %d %d %d",out,amount,data);
	out<={out[6:0],data[7]};
	end
	end

================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(load)
	out<=data;
	else begin
	//$display("amount is %d",amount);
	//$display("out is %d",out);
	out<={out[6:0],out[7]};
	//$display("out is %d",out);
	end
	end

================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if (reset)
	out <= 8'b00000000;
	else if (load)
	out <= data;
	else begin
	// do the rotation
	// shift left by 2^(3-amount)
	out[amount-1:2]<=out[5:3];
	out[2:0]<=out[7:3];
	end
	end

================================================================
example-20: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 8'b00000000;
	else if (load)
	out <= data;
	else begin
	// do the rotation
	// shift left by 2^(amount-1)
	// rotate right by 2^(amount-1)
	out <= {out[6:0],out[7]};
	end
	end

================================================================
example-21: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 0;
	else if (load)
	out <= data;
	else begin
	// do the left shift first
	out = {out[6:0],out[7]};
	// then rotate
	out = {out[2:0],out[3:3],out[4:4],out[5:5],out[6:6],out[7:7]};
	end
	end

================================================================
example-22: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if (reset)
	begin
	out = 0;
	end
	else if (load)
	begin
	out = data;
	end
	else begin
	// shift the out value and at the same time rotate the out value by amount
	// i.e. out = {a3,a2,a1,a0}
	// rotate the above 4-bit value by {amount[2:0]}
	out = {out[6:0],out[7]};
	end

================================================================
example-23: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if (reset)
	begin
	out<=0;
	end
	else if (load)
	begin
	out<=data;
	end
	else begin
	out<={out[6:0],out[7]};
	end

================================================================
example-24: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	end
end

================================================================
example-25: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if (reset) begin
	out <= 0;
	end
	else if (load) begin
	out <= data;
	end
	else begin
	out <= {out[6:0],out[7]};
	end

================================================================
example-26: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else if(amount==3'b110)
	begin
	out<=out;
	end
	else if(amount==3'b101 || amount==3'b100)
	begin
	out<={out[6:0],out[7]};
	end
	else if(amount==3'b011 || amount==3'b010)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if(amount==3'b001 || amount==3'b000)
	begin
	out<={out[4:0],out[5
================================================================
example-27: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	out<=0;
	end
	else if (load)
	begin
	out<=data;
	end
	else if (amount==3'b110)//rotate right
	begin
	out<={out[6:0],out[7]};
	end
	else if (amount==3'b101) //shift left
	begin
	out<={out[5:0],out[6]};
	end
	else if (amount==3'b100) //shift right
	begin
	out<={out[3:0],out[4]};
	end
	else if (amount==3'b011) //shift left
	begin
	out<={out[2:0],out[3]};

================================================================
example-28: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
example-29: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out = 0;
	else if (load)
	out = data;
	else begin
	// do right shift and rotate
	out = {out[6:0],out[7]};
	end
	end

================================================================
example-30: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else if(amount==3'b110)
	begin
	out<=out;
	end
	else if(amount==3'b101||amount==3'b100)
	begin
	out<={out[6:0],out[7]};
	end
	else if(amount==3'b011||amount==3'b010)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if(amount==3'b001||amount==3'b000)
	begin
	out<={out[4:0],out[5
================================================================
example-31: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 0;
	else if (load)
	out <= data;
	else begin
	// shift the out value and at the same time rotate the out value
	// the shift is accomplished by negating the amount
	out = {out[6:0],out[7]};
	out[7-:amount] = out[7-:amount];
	end
	end

================================================================
example-32: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 0;
	else if (load)
	out <= data;
	else begin
	out <= {out[6:0],out[7]};
	end
	end

================================================================
example-33: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={
================================================================
example-34: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101||amount==3'b100)
	out<={out[6:0],out[7]};
	else if(amount==3'b011||amount==3'b010)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b001||amount==3'b000)
	out<={out[4:0],out[5],out[6],out[7]};
end
end

================================================================
example-35: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out <= 0;
	else if (load)
	out <= data;
	else begin
	case(amount)
	3'b000: out = out;
	3'b001: out = {out[6:0],out[7]};
	3'b010: out = {out[5:0],out[6]};
	3'b011: out = {out[4:0],out[5]};
	3'b100: out = {out[3:0],out[4]};
	3'b101: out = {out[2:0],out[3]};
	3'b110: out = {out[1:0],out[2]};
	3'b111: out = {out[0
================================================================
example-36: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
example-37: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out <= 8'b00000000;
	else if(load)
	out <= data;
	else begin
	case(amount)
	3'b000: out = out; // no change
	3'b001: out = out << 1; // shift left
	3'b010: out = out >> 1; // shift right
	3'b011: out = out << 1; // shift left
	3'b100: out = out >> 1; // shift right
	3'b101: out = out << 1; // shift left
	3'b110: out = out >> 2; // shift right
	3'b111: out = out << 2; // shift left
	endcase
	end
	end

================================================================
example-38: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<={out[6:0],out[7]};
	end
end

================================================================
example-39: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
example-40: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if (reset)
	begin
	out = 0;
	end
	else if (load)
	begin
	out = data;
	end
	else begin
	out = {out[6:0],out[7]};
	end

================================================================
example-41: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={
================================================================
example-42: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
	if(!reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<={out[6:0],out[7]};
	end
end

================================================================
example-43: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out <= 8'b00000000;
	else if(load)
	out <= data;
	else begin
	// do the rotate
	out = {out[6:0],out[7]};
	// do the left shift
	out = {out[7:1],1'b0};
	end
	end

================================================================
example-44: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={
================================================================
example-45: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out<=0;
	else if (load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={
================================================================
example-46: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	//$display("amount: %d",amount);
	//$display("out: %d",out);
	out<={out[6:0],out[7]};
	//$display("out: %d",out);
	end
	end

================================================================
example-47: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'd0)
	out<=out;
	else if(amount==3'd1)
	out<={out[6:0],out[7]};
	else if(amount==3'd2)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'd3)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'd4)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if(amount==3'd5)
	
================================================================
example-48: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	//$display("amount=%d",amount);
	//$display("out=%d",out);
	out<={out[6:0],out[7]};
	//$display("out=%d",out);
	end
	end

================================================================
example-49: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
