example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
out<=0;
else if (load)
out <= data;
else begin
out[0] <= data[0];
out[1] <= out[0];
out[2] <= out[1];
out[3] <= out[2];
out[4] <= out[3];
out[5] <= out[4];
out[6] <= out[5];
out[7] <= out[6];
end
end

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
if (reset)
out <= 8'h00;
else if (load)
out <= data;
else begin
case(amount)
3'b000 : out = out << 1;
3'b001 : out = {out[0],out[7:1]};
3'b010 : out = {out[7:1],out[7:1]};
3'b011 : out = {{out[7]},out[7:1]};
3'b100 : out = {{out[6:0]},out[7:1]};
3'b101 : out = {{out[7],out[7:1]};
3'b110 : out = {{out[7:1]},out[7:1]};
3'b111 : out = out;
default:out = 8'h00
================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always@(posedge clk)
if (reset) begin
	out <= 8'b0;
end
else if (load) begin
	out <= data;
end
else if (amount) begin
	//out[0] <= data[0];
	out <= {data[7:1]};
	//shift left by one bit and set the MSB to 0
	$display("%b %b %b",data,load,out);
end

================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always@(posedge clk) 
begin
if(reset) 
out <= 8'd0;
else if(load) begin
out <= data;
end
else if(amount != 0) begin
out <={data[6:0],data[15:7]};
out <= out << (7 - amount);
end
end

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always@(posedge clk)
begin
	 out <=
	 ((load)?data:{amount, out[1],out[2],out[3],out[4],
	 out[5],out[6],out[7],out[8]}) &
	 {8{(^amount)}};
end
//when reset is high, reset all to initial values
reg [7:0] reg_a;
always@(posedge clk)
begin
	 if (reset)
	 begin
	 reg_a <= 8'h2D;
	 out <= 8'h2D;
	 end
	else
	 wr <= (load)?data:reg_a;
end


================================================================
