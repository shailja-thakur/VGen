example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end 
	end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 begin
	if (reset) q <= 0;
	else if (slowena) begin
	 if (q == 9) q <= 0;
	 else q <= q + 1;
	end
	

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 0;
	else if (slowena)
	begin
	if (q == 9)
	q <= 0;
	else
	q <= q+1;
	end
	end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q = 0;
	else if(slowena) begin
	if(q == 9) q = 0;
	else q = q+1;
	end
end


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin 
	if (reset) q <= 0;
	else if (slowena) begin
	if (q == 9) q <= 0;
	else q <= q + 1;
	end
	end

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if(reset)
	q=0;
	else if(slowena)
	begin
	if(q==9)
	q=0;
	else
	q=q+1;
	end
	end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q <= 4'b0;
 else if (slowena) begin
	if (q == 9) q <= 4'b0;
	else q <= q + 1;
 end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if (reset) q = 0;
	else if (slowena) begin
	if (q == 9) q = 0;
	else q = q + 1;
	end
end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Note that you should not use both the slowena and reset inputs at the same time.


always @ (posedge clk)
	begin
	if (reset)
	q<=0;
	else if (slowena)
	begin
	if (q == 9) 
	q<=0;
	else
	q<=q+1;
	end
	end

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
begin
	if(reset) q = 0;
	else if(slowena) begin
	if(q == 9) q = 0;
	else q = q + 1;
	end
end


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	
	if (reset)
	q <= 0;
	
	else
	
	if (slowena)
	
	if (q == 9)
	q <= 0;
	
	else
	q <= q + 1;
	
	end
	

================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q <= 4'b0;
 else if (slowena) begin 
	if (q == 4'b1001) q = 4'b0;
	else q = q + 1;
	end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The counter should count to 10, but does not wrap to 0 to 10.

	always @(posedge clk or posedge reset)
	begin
	
	if (slowena == 1'b1 && q < 9) q <= q + 4'b1;
	
	if (reset == 1'b1) q <= 4'b0;
	
	end
	

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if (reset) q = 0;
	else if (slowena) begin
	if (q == 9) q = 0;
	else q = q + 1;
	end
end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q <= 4'b0;
 else if (slowena) q <= q + 1;


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
always @(posedge clk or posedge reset)
	if (reset)
	begin 
	q <= 4'b0000;
	end
	else if (slowena)
	begin
	if (q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if (reset)
	q <= 0;
	else if (slowena)
	begin
	if (q == 9)
	q <= 0;
	else
	q <= q + 1;
	end
	end

================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin 
	if(slowena) 
	begin 
	if(reset) 
	q <= 0; 
	else if(q < 9) 
	q <= q + 1; 
	else 
	q <= 0; 
	end 
	else 
	q <= q; 
	end 

================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin 
	if(slowena) 
	begin 
	if(reset) 
	q <= 4'b0000; 
	else 
	if(q < 4'b1001) 
	q <= q + 1; 
	end 
	end 


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end
	end

================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if(reset)
	q <= 4'b0000;
	else if(slowena)
	begin
	if(q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1;
	end
	end

================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	if(reset) q <= 0;
	else if(slowena)
	begin
	if(q == 9) q <= 0;
	else q <= q+1;
	end

================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin 
	if (reset) q = 0;
	else if (slowena) begin 
	if (q == 9) q = 0;
	else q = q + 1;
	end
	end

================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if (reset) q <= 0;
	else if (slowena) begin
	if (q == 9) q <= 0;
	else q <= q + 1;
	end
end


================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if(reset)
	q <= #`D0 4'b0000;
	else if(slowena)
	begin
	if(q == 9'b1111_1111_11)
	q = 4'b0000;
	else
	q <= #`D1 q + 1'b1;
	end
	end


================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if(reset)
	q <= 0;
	else if(slowena) 
	begin
	if(q == 9)
	q <= 0;
	else
	q <= q+1;
	end
	end

================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= #1 4'b0;
	else if (slowena)
	begin
	if (q == 9)
	q <= #1 4'b0;
	else
	q <= #1 q + 1;
	end
	end

================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if(reset)
	q <= 4'b0000;
	else if(slowena)
	begin
	if(q == 9'b1111_1111_1111_1111)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end 
	end

================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1;
	end
	end


================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset) q <= 4'b0000; // Should set reset state to state A
	else if (slowena) begin
	if (q == 9) q <= 4'b0000; // If q == 9, reset q to 0
	else q <= q + 1'b1; // Otherwise, increment q
	end

================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if(slowena)begin
	if(reset)
	q <= 4'b0;
	else begin
	if(q == 9)
	q <= 4'b0;
	else
	q <= q + 1;
	end
	end
	
================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// In all cases, the output q is loaded on the next positive edge of the clock.

always @(posedge clk or posedge reset)
 if (reset) q <= 4'b0000;
 else if (slowena) begin
	if (q == 9) q<=4'b0000;
	else q<=q+1;
 end



================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if (reset) q <= 4'b0000;
	else if (slowena) begin
	 	if (q == 4'b1001) q <= 4'b0000;
	 	else q <= q + 1'b1;
	end
end


================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= #1 4'b0000;
	else if (slowena)
	begin
	if (q == 9)
	q <= #1 4'b0000;
	else
	q <= #1 q + 1;
	end
	end

================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin 
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001) 
	q = 4'b0000;
	else
	q <= q + 1'b1;
	end
	end

================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q <= 4'b0000; 
 else if (slowena) begin 
	if (q == 4'b1001) q = 4'b0000;
	else q[3:1] <= q[2:0];
 end


================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q = 0;
	else if(slowena) begin
	if(q == 9) q = 0;
	else q = q + 1;
	end
end

================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 0;
	else if (slowena)
	begin
	if (q == 9)
	q = 0;
	else
	q = q + 1;
	end
	end

================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1;
	end
	end

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q = 4'b0;
	else if(slowena) begin
	if(q == 9) q = 4'b0;
	else q = q + 1;
	end
end


================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// In any of these cases, slowena is the one that controls the timing of the counter.

always @(posedge clk or posedge reset)
	begin
	if (reset) q <= 4'b0000;
	else if (slowena) begin
	if (q == 9) q <= 4'b0000;
	else q <= q + 1'b1;
	end
	end

================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	 	if (reset)
	 	 	q <= 0;
	 	else if (slowena)
	 	 	begin
	 	 	 	if (q == 9)
	 	 	 	 	q <= 0;
	 	 	 	else
	 	 	 	 	q <= q + 1;
	 	 	 end
	 	end


================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q = 4'b0;
 else if (slowena) begin
	if (q == 9) q = 4'b0;
	else q = q+1;
 end


================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q = 0;
	else begin
	if(slowena) begin
	if(q == 9) q = 0;
	else q = q + 1;
	end
	end
	end

================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	 q <= 4'b0000;
	else if (slowena) begin
	 if (q == 4'b1001) 
	 q <= 4'b0000;
	 else 
	 q <= q + 1'b1;
	 end
	end

================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 9'b1111_1111_1111)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end
	end

================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin 
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end
	end

================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if(reset)
	q <= 4'b0000;
	else if(slowena)
	begin
	if(q == 9'b1111_1111_1111_1111)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end
	end

================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if (reset)
	q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001)
	q = 4'b0000;
	else
	q <= q + 1;
	end
	end


================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	
	if(reset)
	q <= 0;
	
	else if(slowena)
	
	if(q == 9)
	q <= 0;
	
	else
	q <= q+1;
	
	end
	

================================================================
