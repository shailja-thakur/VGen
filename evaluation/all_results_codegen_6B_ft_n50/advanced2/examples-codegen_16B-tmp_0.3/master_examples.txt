example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 4'b1;
	end
	end
	end
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q < 9)
	begin
	q <= q + 1'b1;
	end
	else
	begin
	q <= 4'b0;
	end
	end
	end
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	
	q <= 4'b0;
	
	end
	else begin
	
	if (slowena) begin
	
	if (q == 9) begin
	
	q <= 4'b0;
	
	end
	else begin
	
	q <= q + 1'b1;
	
	end
	
	end
	
	end
	

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	else begin
	q <= q;
	end
	end
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 4'b1;
	end
	end
	end
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) q <= 4'b0;
	else begin
	if (slowena && (q < 4'b1001)) q <= q + 4'b1;
	end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1;
	end
	end
	end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena && (q != 9)) begin
	q <= q + 1;
	end
	end
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(negedge clk) begin
	if (reset) begin
	q <= 4'b1001;
	end
	else begin
	if (slowena && (q != 0)) begin
	q <= q - 1;
	end
	end
end

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 4'b1;
	end
	end
	end
end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	// if reset is high, reset the output q to 0. 
	q <= 4'b0;
	end
	else begin
	// if reset is low, only increment the output q if the ena input is high and q is not 9.
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	end
end


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1;
	end
	end
	end
end


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
if (reset)
q <= 4'b0;
else
begin
if (slowena)
begin
if (q != 4'd9)
q <= q + 4'd1;
end
end
end

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q != 4'd9) begin
	q <= q + 1'b1;
	end
	end
	end
	end

================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	// if (slowena)
	// begin
	// 	if (q != 9)
	// 	begin
	// 	q <= q + 1;
	// 	end
	// 	else
	// 	begin
	// 	q <= 0;
	// 	end
	// end
	// else
	// begin
	// 	q <= 0;
	// end
	end
	else
	begin
	// if (slowena)
	// begin
	// 	if (q != 9)
	// 	begin
	// 	q <= q + 1;
	// 	end
	// 	else
	// 	begin
	// 	q <= 0;
	// 	end
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
if (reset)
q <= 4'b0;
else if (slowena && q < 4'b1001)
q <= q + 4'b0001;
end


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q != 9) begin
	q <= q + 1;
	end
	end
end


================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset) begin
 q <= 4'b0;
 end
 else begin
 if (slowena) begin
 if (q != 9) begin
 q <= q + 1;
 end
 else begin
 q <= 0;
 end
 end
 end
end


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'd0;
	end
	else begin
	if (slowena && q < 4'd9) begin
	q <= q + 4'd1;
	end
	end
end


================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	
	q <= 4'b0;
	
	end
	
	else begin
	
	if (slowena) begin
	
	if (q == 9) begin
	
	q <= 4'b0;
	
	end
	
	else begin
	
	q <= q + 1;
	
	end
	
	end
	
	end
	
	end
	
	
================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 4'b1;
	end
	end
	end

================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset)
 q <= 4'b0;
 else begin
 if (slowena) begin
 if (q == 4'd9)
 q <= 4'b0;
 else
 q <= q + 1;
 end
 end
 end


================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	
	// if reset is high, reset the output q to 0. 
	q <= 4'b0;
	
	end else begin
	
	// if reset is not high and the output q is 9, reset the output to 0.
	if (q == 4'b1001) begin
	
	q <= 4'b0;
	
	end else begin
	
	// if reset is not high and the output q is not 9, increment the output.
	if (slowena) begin
	
	q <= q + 1;
	
	end
	
	end
	
	end
	
	
================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	end
end
// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @ (negedge clk) begin
	if (reset) begin
	q <= 4'b1001;
	end
	else begin
	if (slowena && q > 4'b0) begin
	q <= q - 1;
	end
	end
end
// On the positive edge of the clock:
// if reset is high, reset the output q to 0.
================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk) begin
	if (reset) begin
	
	// if reset is high, reset the output q to 0. 
	q <= 4'b0;
	
	end
	else begin
	
	// if reset is high, reset the output q to 0. 
	if (slowena) begin
	
	if (q != 4'b1001) begin
	
	// if q is 9, then reset the count.
	q <= q + 1;
	
	end
	
	end
	
	end
	

================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	end
end


================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001)
	begin
	q <= q + 4'b1;
	end
	end
end


================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	// if reset is high, set output to 0
	q <= 4'b0000;
	end
	else begin
	// if reset is low, only increment if slowena is high and q is not 9
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	else begin
	q <= q;
	end
	end
end


================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1;
	end
	end
	end
end


================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 4'b1;
	end
	end
	end
end

================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset) begin
q <= 4'b0000;
 end
 else begin
 if (slowena) begin
 if (q < 4'b1001) begin
q <= q + 1;
 end
 else begin
q <= 4'b0000;
 end
 end
 end
end

================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001)
	q <= q + 1'b1;
	end
	end


================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	else begin
	q <= q;
	end
	end
end


================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'd0;
	end
	else begin
	if (slowena && q < 4'd9) begin
	q <= q + 4'd1;
	end
	else begin
	q <= q;
	end
	end
end


================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset) begin
q <= 4'b0;
end
else begin
if (slowena) begin
if (q < 4'b1001) begin
q <= q + 1;
end
else begin
q <= 4'b0;
end
end
end

================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
if (reset)
q <= 4'b0;
else begin
if (slowena)
if (q != 9)
q <= q + 1;
end
end

================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset)
q <= 4'b0;
else begin
if (slowena) begin
if (q < 4'b1001)
q <= q + 1;
end
end
end


================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q < 4'b1001)
	q <= q + 4'b0001;
	end
	end
	end

================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	
	end
	else begin
	
	end
end


================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1'b1;
	end
	end
	end
end

================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 4'b1;
	end
	end
	end
end

================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena && (q != 9))
	begin
	q <= q + 1;
	end
	end
end

// On the negative edge of the clock, set the output q to its maximum value (9)
// when the reset input is high.

always @ (negedge clk)
begin
	if (reset)
	begin
	q <= 9;
	end
	else
	begin
	q <= q - 1;
	end
end


================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1;
	end
	end
	end
end

================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset) begin
	// if (reset)
================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1;
	end
	end
	end

================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk)
begin
	if (reset)
	begin
	// if (reset)
	// begin
	// 	q <= 4'b0;
	// end
	// else begin
	if (slowena && q < 4'b1001)
	begin
	// if (slowena && q < 4'b1001)
	// begin
	// 	q <= q + 1'b1;
	// end
	// else begin
	// 	q <= 4'b0;
	// end
	q <= q + 1'b1;
	end
	else
	begin
	// else begin
	// 	q <= 4'b0;
	// end
	q <= q;
	end
end


================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0;
	end
	else begin
	q <= q + 1;
	end
	end
	end

================================================================
