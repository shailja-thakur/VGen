example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 begin 
	if (reset) 
	q = 0;
	else if (slowena) begin 
	if (q == 9)
	q = 0;
	else 
	q = q + 1;
	end
end
// End of the module.
`timescale 1ns/100ps // arbitrary rule separated_data_unit and functional_level_rule by halph delays
module ird_least_squares_tb();
	reg signed [8:0] data_in_stream;
	reg signed [8:0] data_cov_in_stream;
	wire signed [8:0] data_out_stream;
	
	integer i;
	initial 
	begin
	for (i=1; i<10; i=i+2)
	begin
	data
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
begin
 if(reset) q=0; //if we are reset, then set back to 0
 else if (slowena) if (q == 9) q=0; //if q == 9, then if we are incrementing, then set back to 0
 else q=q+1; //if q is not 9 and we are incrementing, then just add 1
 
end
 endmodule
// Design a decade counter that counts from 0 through 9, inclusive for + and -
// incluse reset and up counting and reset and down counting.
//
//Do not count with enable at falling edge after as we use initial event to clear the counter.

module count_TB();

reg clk;
reg rst;
reg clr;
wire [3:0] q;

initial 
begin
$dumpfile("count
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) 
	begin
	//if(reset)
	if(slowena)
	begin
	if (q < 9)
	begin
	
	q=q+1;
	end
	else q<=0;
	end
	else q<=q;
	end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset )
 begin
	if( slowena == 1'b1) begin//if 
	if (reset == 1'b1)
	 q <= 4'd0;
	else if (q == 4'd9) 
	 q <= 4'd0;
	else if (ena == 1'b1) begin //otherwise if
	 q <= q + 4'd1;
	end
end //end of always



================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk or posedge reset) begin 
//	if (reset)
//	 	q <= 4'd0;
//	else if (slowena) begin
	if (reset)
	 	q <= 4'd0;
	else if (slowena) begin
	 	if (q == 4'b1001) q <= 4'd0;
	 	else q <= q + 1'd1;
	end
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) 
	begin
	if(slowena)
	begin
	 if(q == 9) // set the counter to 0 if it reaches the maximum value of 9.
	 	q <= 0;
	 else if(reset) // if the counter is reset, then set it to 0.
	 	q <= 0;
	 else
	 	q <= q + 1; // increment the counter
	end
	end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) 
begin 
	if (slowena == 1'b1 && reset == 1'b0 && q == 10'b0000000000)
	begin
	
	q = 10'b0000000001; // set max q to 1
	end 

	else if (reset == 1'b1) //if (reset)
	begin

	q = 10'b0000000000; //reset q to 0
	end
	else if (slowena == 1'b1 && q == 10'b0000000000) //if (slowena)
	begin
	
	q= q + 1'b1; // increment output q by 1
	end
end //always

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin 
	if(reset) q <= 0;
	else begin
 	if(slowena) begin //not enabled
 	if(q == 9) q <= 0;
 	else q <= q+1;
 	end
	end
end



================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
	begin
	
	if (slowena) begin
	
	if (reset) 
	
	q <=0;
	
	else if (q < 9) q <= q + 1;
	
	
	end //end if slowena
	
	else begin
	
	q <= 0;
	
	end //else
	
	end //always posedge clk
	

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset or posedge slowena) 
	begin
	
	if (slowena == 1'b1) 
	begin
	
	if(reset == 1'b1) //A reset signal is made to test the changes in that affects other parts
	
	q <= 4'b0000;
	
	else if (q == 4'b1001) //the counter is set to 9
	
	q <= 4'b0000;
	
	else if (ena == 1'b1) //the counter is incremented if and only if the ena/slowena signals are high
	
	q <= q + 1'b1;
	
	end
	end
	

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Slow count is in 25,000,000 clock cycles per seconds.

 
always @(posedge clk or posedge reset)
begin	
	if(reset)
	begin
	 q <= 4'd0;
	end
	
	else if(slowena)
	begin
	if(q == 4'd9)// fix this
	
	q <= 4'd0;
	else
	q <= q + 1;
	end
	end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (slowena) begin
	if (reset) q <= 4'b0000;
	else case (q) 
	4'b0000: q <= 4'b0001;
	4'b0001: q <= 4'b0010;
	4'b0010: q <= 4'b0011;
	4'b0011: q <= 4'b0100;
	4'b0100: q <= 4'b0101;
	4'b0101: q <= 4'b0110;
	4'b0110: q <= 4'b0111;
	4'b0111: q <= 4'b1000;
	4'b1000: q <= 4'b1001;
	4'b1001: q <= 4'b1010;
	4'b101
================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin
	if (slowena == 1'b1 & reset == 1'b0 & q == 4'd9)
	q <= 4'd0;	// reset q to 0 if the counter is maxed out. This is the reset behaviour.

	// The counter counts up incrementing q at the positive edge of the clock.
	else if (slowena == 1'b1 & reset == 1'b0)
	q <= q + 1'd1; // Counts up the counter.

	// If the counter is reset, then set it back to 0.
	else if (slowena == 1'b0 & reset == 1'b1)
	q <= 4'd0;
	end // always posedge clk

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if (reset) 
	begin
	 	q <= 4'b0000;
	end 
	else 
	begin
	 	if (slowena)
	 	begin
	 	 	if (q == 4'b1001) 
	 	 	begin
	 	 	 	q <= 4'b0000;
	 	 	end
	 	 	else 
	 	 	begin
	 	 	 	q <= q + 1'b1;
	 	 	end
	 	end
	 	else 
	 	begin
	 	 	q <= q;
	 	end
	end
end



================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if (slowena)
	begin
	if (reset) 
	q <= 4'd0;
	else 
	begin
	if (q == 4'd9)
	q <= 4'd0;
	else
	q <= q + 1'b1;
	end // if (q == 4'd9)
	end //slowena
	end //always posedge clk

================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 
 if (reset)
 
 q <= 4'b0;
 
else if (slowena) 
 
 if (q == 4'd9)
 
 q <= 4'b0;
 
else
 q <= q+1;


================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin 
	if(reset)
	q <= 0;
	
	else if (slowena) begin
	if(q == 9)
	q <= 0;
	
	else
	q <= q + 1;
	end
	end

================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q <= 4'b0000;
 else if(slowena)
 case(q)
 4'b0000: q <= 4'b0001;
 4'b0001: q <= 4'b0010;
 4'b0010: q <= 4'b0011;
 4'b0011: q <= 4'b0100;
 4'b0100: q <= 4'b0101;
 4'b0101: q <= 4'b0110;
 4'b0110: q <= 4'b0111;
 4'b0111: q <= 4'b1000;
 4'b1000: q <= 4'b1001;
 4'b1001: q <= 4'b1010;
 default: q <= 4'b1010;
endcase

//Define a 40-bit binary
================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q <= 4'b0000;
	else	if(slowena) begin
	
	if(q == 9) q <= 4'b0000;
	else q <= q + 1'b1;
	end
end


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk or posedge reset)
	begin
	if(reset)
	q <= 4'b0000;
	else 
	begin
	if(slowena) //NLW
	begin
	if(q == 4'b1111)
	q <= 4'b0000;
	else
	q <= q + 1; //NLB
	end
	end
	end


================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 q <= {q[2:0], ((reset) ? 0 : ((slowena) ? (q[3:4] + 2'd1) : q[3:4]))}; 
 

================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The slowena input is active iff the counter is 0;

always @(posedge clk or negedge reset) begin 
	if (reset == 0) begin //if reset is 0, nothing will happen, then the counter falls, and we'll have 1 count (q=4)
	 	q <= 4'b0000; 
	end
	else if (slowena == 0) begin // if the slowena input is 0, then if the counter ($q) is 9 (already max), then reset it.
	 	if (q == 4'b0110) //count only sends 7,2,5,4,7,2,5,4,7,2,5,4,7,2,5,4,7, but we start at 0 count, which means we'll have to start decrement from if we want to simulate that.
	 	 
================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// When the counter is 1, then q is enable to be decremented.
// When the counter is 0, then q is enable to be incremented.
// Detects slow, large (positive edge) transitions (like ones with time between transition and reset).

always @(posedge clk or posedge reset)
begin 
 if(reset)
 q <= 4'd0;
 else if(slowena) begin
 if(q == 9)
 q <= 4'd0;
 else begin
 if(sdir)
 q <= q - 1;
 else
 q <= q + 1;
 end
end
	

================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk)
	begin 
	case ({q[3],q[2],q[1],q[0]})
	4'b0000:	q <= q;	
	4'b0001:	q <= q + 1'b1;	
	4'b0101:	q <= 2'd2;	
	4'b0110:	q <= 2'd3;	
	4'b0111:	q <= 2'd4;	
	4'b1011:	q <= 2'd5;	
	4'b1100:	q <= 2'd6;	
	4'b1101:	q <= 2'd7;	
	4'b1110:	q <= 2'd8;	
	4'b1111:	q <= 2'd9;	
	default:	q <= q;
================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
if (reset)
	q <= 4'd0;
else if (slowena) begin
	if (q == 4'd9) 
	
	q <= 4'd0; 
	else 
	q <= q + 4'd1;
end 
end


================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk or posedge reset) begin
//	if (reset) q <= 4'b0001; // I'm gonna set it to 0
	if (reset) q <= 4'b1111; // I'm gonna set it to 9
	else if (slowena) begin // Increment when ena is on
	if (q == 4'bz)
	q <= 4'b0000;
	else
	q <= q + 4'b0001;
	end
	end

================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge slowena or posedge reset) //(*!)
	begin
	
	if (reset)
	q <= #`D0 4'b0;
	
	else if (slowena) // (*)
	q <= #`D1 q + 4'b1;
//(*)	
	else 
	q <= #`D0 q; 

end // always (*)



================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) //posedge reset often has no effect because q is registered
begin
	if (slowena) begin //also serves as reset
 	if (reset) 
 	q <= 4'b0;
 	else
 	if (q<4'b1001)
	
	q<= q + 1;
	end
end

================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
	begin 
 	 	if(reset) q <= 4'b0000; 
 	 	else if(slowena) begin 
 	 	 	if(q == 4'b1111) q = 4'b0000; 
 	 	 	else q <= q + 1'b1;
 	 	end 
 	 	else q <= q;
	end 

================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 begin
	if(reset)
	 q <= 4'b0000;
	else begin
	if (slowena) begin //This may be incorrect, because comments refer to q as only changing when slowena changes
	 if (q == 4'b1001) 
	 	q <= 4'b0000;
	 else //Increment q if it is 2 digits away from 9.
	 begin
	 if(q == 4'b1110) 
	 	q <= 4'b0000;
	 else 
	 	q <= q + 1'b1;
	 end
	end 
	end

// Whenever the output q changes, set a flag.

always @(q)
	countQ[0] = q[0];

always @(posedge clk or posedge reset)

================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// I expect this to work regardless of the clock polarity, e.g. you never count q==9. 
// So you will need to match the latency of slowena (positive edges only)."


always @(posedge clk) 
	begin 
	if (slowena==1'b1) 	
	begin
	if (reset==1'b0)	
	q <= #1 4'b0;
	else
	begin
	if (q==9'b1111_1111_1111_1111)
	q <= #1 4'b0;
	else
	q <= #1 q + 1'b1;
	end //end else slowena
	end //end if slowena 
	end //end of always









================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
always @(posedge clk) 
	begin
	if reset is high or q is 9, q <= 0;
	else begin // if ena is not high, decrement the counter.
	if (slowena is high q <= q+1;
	end
	end
	

================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
	always @(posedge clk)
	begin 
	
	if(slowena)
	begin
	
	if(reset)
	q <= 4'h0;
	
	else if(q < 4'hA)
	q <= q+1;
	
	else
	q<=4'h0;
	end
	
	
================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
always @(posedge clk or posedge reset)
	case #1 
	({reset, slowena}) : q = ({reset, slowena})? 4'b0 : ((q == 9'b1110000) ? {q[2:0],1'b0} : q+{q[2:0],1'b0});
	endcase



================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if (reset) q<=0;
 else if (slowena) 
	begin 
	if(q==9) q<=0; 
	else q<=q+1; 
	end 

================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
always @(posedge clk or posedge reset)
begin
	if (reset) // if (reset) for structural modeling
	begin 
	q = 0;	// I'm declaring all of them to be 0, blankets and stars.
	end
	else if (slowena)
	begin
	if (q != 9) 	// I'm gonna have this make sure the counter doesn't count to 10.
	q = q + 1;
	// why are we going to do this instead of if(q == 9)?
	// because if it is an input I'm gonna have a random number for a while. 
	// This is owing to random in effect of the asycchronous reseting of the counter
	end
	
end	


================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q <= 0;
	else if(slowena) begin
	 	if(q == 9) q <= 0;
	 	else q <= q + 1;
	end
end


================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) 
begin
	if (reset) q = 0;
	else begin 
	if (slowena) begin 
	if (q == 9) q = 0;
	else q = q + 1;
	end
	end

================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
always @(posedge clk) 
	begin
	
	if(reset)
	q <= 4'b0000;
	
	else if(slowena) 
	begin
	
	if(q == 4'b1001)
	q <= 4'b0000;
	
	else
	q <= q + 1;
	
	end
	
	end
	

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	 q <= 0;
	end
	else
	begin
	if (slowena) 
	begin
	 if (q == 9)	 
	 q <= 0;
	 else 
	 q <= q + 1;
	end
	end
	end

================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//	In this posedge case, the only time q could be 9 is if we have 
//	incremented the counter to 9.

	always @(posedge clk or posedge slowena or posedge reset) begin
 	if (reset) q = 4'd0;
	
	//if (slowena) begin
	if (ena) begin
	if (q == 4'd9) q = 4'd0; // If q is 9, then we are already in the 10s digit
	else q = q + 1; // Otherwise, if we have reached the end of the current digit, then increment to the next digit. (q+1 because q is 4 bits.)
	end 
	
	end
	

================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if (reset) q<=0;
	else 
	begin
	if(slowena) begin
	if(q == 9) q<=1; 
	else q<= q+1;
	end
	end
end

================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin 
	if(reset)
	q <= #`D0 4'b0000;
	else if(slowena) begin
	//q <= #`D1 q + 4'd1; THIS WORKS
	if(q == 10'b101000000000)
	q <= 4'b0000;
	else
	q <= #`D1 q + 4'd1;
	//else
	//q <= #`D1 q;
	end
	end//slowclock

================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
always @(posedge clk or posedge slowena or posedge reset)
	if(reset)
	 	q <= #1 4'b0; else
	if(slowena) 
	 	begin 
	 	if(q == 9) 
	 	 	q <= #1 2'b0; 
	 	else 
	 	 	q <= #1 q+1; 
 	 end

================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)

begin
	if (reset) q =	4'b0000;
	else if (slowena) begin
	if (q == 4'b1001) q = 4'b0000;
	else q = q + 1'b1;
	end
end

================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Note that you must declare the q output as a register (.q(q)) instead of using the assign statement to set the output.


always @(posedge clk or posedge reset)
 begin
	if (reset) 
 	q<=0;
	else if (slowena) begin
 	if (q == 9)
 	q<=0;
 	else
 	q<=q+1;
	end
end

================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//In summary:
// A clock enable signal tells which digits to output. 
// A clock enable which is too fast (multiples of the 100mhz clock) is ignored.
// A clock enable which is too slow (multiples of the 1mhz clock) dumping the digits to save power. 
// If the enable times is 1msec, then the digits will be displayed for 500ms. 

always @(posedge clk or posedge slowena or posedge reset)
begin
	if (reset)
	begin 
	case (q) 
	4'b0000: q = 4'b1000; 
	4'b0001: q = 4'b1001; 
	4'b0010: q = 4'b1010; 
	4'b0011: q = 4'b1011; 
	4'b0100: q = 4'
================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	 
	if(reset) q = 4'b0000; 
	
	else if(slowena&&q<9) q=q+1;
	
	else q=0;
end
	

================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
 if(reset) 
 q = 4'b0;
 else if(slowena) begin	
	if(q == 4'b1001)
	q = 4'b0;
	else
	q = q + 1'b1;
	end
end


================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
 always @(posedge clk)
	begin
	
	if(slowena) 
	begin
	
	if(reset) 
	begin
	
	q <= 4'b0000;
	
	end 
	
	else 
	begin
	
	if(q < 4'b1001) 
	
	q <= q + 1'b1;
	
	else 
	
	q <= 4'b0000;
	
	end
	
	end
	

================================================================
