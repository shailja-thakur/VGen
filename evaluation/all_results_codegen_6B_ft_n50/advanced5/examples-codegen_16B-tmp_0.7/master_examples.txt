example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = (cur_state == SAB);
always @(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(a,b,cur_state)
begin
case(cur_state)
IDLE:
begin
if(a == 1 && b == 1)
next_state = IDLE;
else
next_state = SA;
end
SA:
begin
if(b == 1)
next_state = SB;
else
next_state = IDLE;
end
SB:
begin
if(a == 1)
next_state = SAB;
else
next_state = IDLE;
end
SAB:
begin
next_state = IDLE;
end
endcase
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk, posedge reset) begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b) begin
case(cur_state)
IDLE: begin
z = 0;
if(a & b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
z = 0;
if(a) next_state = SA;
else next_state = IDLE;
end
SB: begin
z = 0;
if(b) next_state = SB;
else next_state = IDLE;
end
SAB: begin
z = 1;
next_state = IDLE;
end
default: next_state = IDLE;
endcase
end

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @ (posedge clk) begin
	if(reset) begin
	cur_state <= IDLE;
	z <= 0;
	end
	else begin
	cur_state <= next_state;
	z <= 0;
	end
end

always @ (a,b,cur_state) begin
	case(cur_state)
	IDLE: begin
	if(a && b) next_state = SAB;
	else next_state = IDLE;
	end
	SA: begin
	if(b) next_state = SB;
	else next_state = SA;
	end
	SB: begin
	if(a) next_state = SAB;
	else next_state = SB;
	end
	SAB: begin
	next_state = IDLE;
	end
	endcase
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	if (reset) cur_state <= IDLE;
	else cur_state <= next_state;
end
always @(cur_state or a or b)
begin
	case (cur_state)
	IDLE : 
	begin
	z = 0;
	if (a == 1'b1 && b == 1'b1) next_state = SA;
	else if (a == 1'b1 && b == 1'b0) next_state = SB;
	else if (a == 1'b0 && b == 1'b1) next_state = SA;
	else next_state = IDLE;
	end
	SA : 
	begin
	z = 0;
	if (a == 1'b1 && b == 1'b1) next_state = SAB;

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ (cur_state or a or b)
begin
case(cur_state)
IDLE: begin
z = 1'bz;
if(a==1'b1 && b==1'b1)
next_state = SAB;
else if(a==1'b1)
next_state = SA;
else if(b==1'b1)
next_state = SB;
end
SA: begin
z = 1'bz;
if(b==1'b1)
next_state = SAB;
else
next_state = SA;
end
SB: begin
z = 1'bz;
if(a==1'b1)
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk )
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE :
begin
if(a == 1'b1 && b == 1'b1)
next_state = SAB;
else if(a == 1'b1 && b == 1'b0)
next_state = SA;
else if(a == 1'b0 && b == 1'b1)
next_state = SB;
else
next_state = IDLE;
end
SA :
begin
if(a == 1'b1 && b == 1'b0)
next_state = SAB;
else
next_state = SA;
end
SB :
begin
if(a
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
reg z;
always @(posedge clk, posedge reset)
begin
if (reset)
cur_state <= IDLE;
else begin
cur_state <= next_state;
z <= 0;
end
end
always @(*)
begin
case (cur_state)
IDLE:
begin
if (a && b)
begin
next_state = SAB;
z = 1;
end
else if (a && !b)
begin
next_state = SA;
z = 0;
end
else if (!a && b)
begin
next_state = SB;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
end
SA:
begin
if (b)
begin
next_state = SAB;

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// Otherwise, z is assigned zero.
always @(posedge clk or posedge reset)
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
// This is a Moore state machine, since it does not have
// a reset. However, a reset signal is still included
// to for the completeness of the problem statement.
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
	if(a==1 && b==1)
	next_state = SAB;
	else
	next_state = IDLE;
SA:
	if(a==1 && b==0)
	next_state = SB;
	else
	next_state = IDLE;
SB:
	if(a==0 && b==1)
	next_
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(a or b)
begin
case(cur_state)
IDLE:
begin
if (a == 1'b1 && b == 1'b1)
next_state = SA;
else if (a == 1'b1 && b == 1'b0)
next_state = SB;
else if (a == 1'b0 && b == 1'b1)
next_state = SA;
else next_state = IDLE;
end
SA:
begin
if (b == 1'b1)
next_state = SAB;
else
next_state = SA;
end
SB:
begin
if (a == 1'b1)
next_state = SAB
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned three when cur_state is SA
// z is assigned two when cur_state is SB
// z is assigned zero when cur_state is IDLE
always @(cur_state)
begin
case(cur_state)
IDLE: if (a)
	begin
	next_state = SA;
	z = 3;
	end
	else if (b)
	begin
	next_state = SB;
	z = 2;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
SA: if (b)
	begin
	next_state = SAB;
	z = 3;
	end
	else
	begin
	next_state = SA;
	z = 2;
	end
SB: if (a)
	begin
	next_state = S
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if(reset)
cur_state <=IDLE;
else
cur_state <=next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:if(a && b)
begin next_state=SA;
z=1;
end
else
begin next_state=IDLE;
z=0;
end
SA:if(b)
begin next_state=SB;
z=1;
end
else
begin next_state=SA;
z=0;
end
SB:if(a)
begin next_state=SAB;
z=1;
end
else
begin next_state=SB;
z=0;
end
SAB:begin next_state=IDLE;
z=1;
end
end
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always@(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE : begin
if(a==1 && b==1) 
begin
next_state = SAB;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
end
SA : begin
if(b==1)
begin
next_state = SB;
z = 0;
end
else
begin
next_state = SA;
z = 0;
end
end
SB : begin
if(a==1)
begin
next_state = SAB;
z = 0;
end
else

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise
// The state is IDLE when both a and b are low
always @ (cur_state or a or b)
begin
case (cur_state)
IDLE : begin
z = 0;
if (~a & ~b)
next_state = IDLE;
else if (a & ~b)
next_state = SA;
else if (~a & b)
next_state = SB;
else
next_state = SAB;
end
SA : begin
z = 0;
if (~a & b)
next_state = SAB;
else if (a & ~b)
next_state = IDLE;
else
next_state = SA;
end
SB : begin
z = 0;
if (~a & b)
next_state = SAB;
else if (a & ~b)
next_state =
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or b or a)
begin
case(cur_state)
IDLE:
begin
if(a==1 && b==1)
begin
next_state <= SAB;
z <= 1;
end
else
begin
next_state <= IDLE;
z <= 0;
end
end
SA:
begin
if(b==1)
begin
next_state <= SAB;
end
else
begin
next_state <= SB;
end
end
SB:
begin
if(a==1)
begin
next_state <= SAB;
end
else
begin
next_state <= IDLE;
end
end
SAB:

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
// If there are errors such that cur_state is undefined, z is assigned one.
// If cur_state is IDLE and a and b are both zero, z is assigned zero.
always @(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE: begin
z = 1'b0;
if(a == 1'b1 && b == 1'b1)
next_state = SA;
else if(a == 1'b1 && b == 1'b0)
next_state = SB;
else if(a == 1'b0 && b == 1'b1)
next_state =
================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk,posedge reset)
if (reset)
begin
cur_state <= IDLE;
z <= 0;
end
else
cur_state <= next_state;
always @(cur_state)
begin
case (cur_state)
IDLE:
begin
if (a == 1 && b == 1)
begin
next_state = SAB;
z <= 0;
end
else if (a == 1 && b == 0)
begin
next_state = SA;
z <= 0;
end
else if (a == 0 && b == 1)
begin
next_state = SB;
z <= 0;
end
else
begin
next_state = IDLE;
z <= 0;
end
end
SA:
begin
if (b == 1)
begin
next_state = SAB;
z <= 0;
================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk, posedge reset)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(cur_state,a,b)
case(cur_state)
IDLE: if(a && b)
next_state = SAB;
else if(a)
next_state = SA;
else if(b)
next_state = SB;
SAB: if(a && b)
next_state = IDLE;
else // a and b are both high
next_state = SAB;
SA: if(!a && b)
next_state = SB;
else if(a && !b)
next_state = IDLE;
else // a is high but b is low
next_state = SA;
SB
================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always@(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a && b)
next_state = SA;
else
next_state = IDLE;
end
SA:
begin
if(b)
next_state = SB;
else
next_state = IDLE;
end
SB:
begin
if(a)
next_state = SAB;
else
next_state = IDLE;
end
SAB:
begin
next_state = IDLE;
end
endcase
end
// FSM outputs
assign z = ((cur_state == SAB) && a && b);

================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise
reg z;
// Set the value of the output signal z based on the current state
always @(posedge clk, posedge reset)
begin: FSM
case(cur_state)
IDLE: begin
z = 0;
if (a==1 && b==1)
next_state <= SA;
else if (a==1)
next_state <= SA;
else if (b==1)
next_state <= SB;
end
SA: begin
z = 0;
if (b==1)
next_state <= SAB;
else if (a==1)
next_state <= IDLE;
end
SB: begin
z = 0;
if (a==1)
next_state <= SAB;
else if (b==1)
next_state <= IDLE;
end
SAB: begin

================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always@(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
if(a && b)
next_state = SAB;
else if(a)
next_state = SA;
else if(b)
next_state = SB;
end
SA: begin
if(b)
next_state = SAB;
else
next_state = SA;
end
SB: begin
if(a)
next_state = SAB;
else
next_state = SB;
end
SAB: begin
next_state = IDLE;
end
endcase
end

================================================================
example-20: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a == 1 & b == 1)
next_state = SA;
else if(a == 1)
next_state = SB;
else if(b == 1)
next_state = SAB;
else
next_state = IDLE;
z = 0;
end
SA:
begin
if(b == 1)
next_state = SAB;
else
next_state = SA;
z = 0;
end
SB:
begin
if(a == 1)
next_state = SAB;
else
next_state = SB;
z
================================================================
example-21: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a == 1 && b == 1) next_state = SAB;
else next_state = IDLE;
end
SA:
begin
if(a == 1) next_state = SA;
else next_state = IDLE;
end
SB:
begin
if(b == 1) next_state = SB;
else next_state = IDLE;
end
SAB:
begin
next_state = IDLE;
end
default:
begin
next_state = IDLE;
end
endcase
end
// if a and b are both high, z is assigned to
================================================================
example-22: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = (cur_state==SAB);
always @(posedge clk,negedge reset)
begin
if(reset)
cur_state <= IDLE;
else
begin
cur_state <= next_state;
end
end
always @(a,b,cur_state)
begin
case(cur_state)
IDLE:
begin
if(b==1 && a==1)
next_state = SA;
else if(a==1)
next_state = IDLE;
else if(b==1)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if(b==1)
next_state = SAB;
else
next_state = IDLE;
end
SB:
begin
if(a==1)
next_state = SAB;
else
================================================================
example-23: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise.
always @(posedge clk) begin
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(cur_state or a or b) begin
	case (cur_state)
	IDLE: begin
	if (a == 1'b1 && b == 1'b1)
	next_state = SAB;
	else if (a == 1'b1)
	next_state = SA;
	else if (b == 1'b1)
	next_state = SB;
	else 
	next_state = IDLE;
	end
	SA: begin
	if (a == 1'b1 && b == 1'b1)
	next_state = SAB;
	else if (a == 1'b1
================================================================
example-24: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	cur_state <= IDLE;
	end
	else
	begin
	cur_state <= next_state;
	end
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
	if(a==1 && b==1)
	begin
	next_state = SAB;
	end
	else
	begin
	next_state = IDLE;
	end
end
SA:
begin
	if(a==1 && b==0)
	begin
	next_state = SB;
	end
	else
	begin
	next_state = IDLE;
	end
end
SB:
begin

================================================================
example-25: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state)
begin
case(cur_state)
IDLE:
begin
z = 0;
if(a==1 && b==1)
next_state = SAB;
else if(a==1 && b==0)
next_state = SA;
else if(a==0 && b==1)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
z = 0;
if(a==1 && b==0)
next_state = SAB;
else if(a==1 && b==1)
next_state = IDLE;
else if(a==0 && b==
================================================================
example-26: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
// If state changes to SB, then output a is assigned the value of b
// If state changes to SA, then output b is assigned the value of a
// If state changes to SAB, then both output a and b are assigned the value of the other
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b )
begin
case(cur_state)
IDLE:
begin
if(a == 1 && b == 1)
begin
next_state <= SA;
end
else if (a == 1)
begin
next_state <= SB;
end
else if (b == 1)
begin
next_state <= SAB;
end
else
begin
next_
================================================================
example-27: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = (cur_state == SAB);
always @(*)
begin
case(cur_state)
IDLE:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SAB;
else if (a == 1'b1)
next_state <= SA;
else if (b == 1'b1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if (b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SB:
begin
if (a == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SAB:
begin
next_state <= IDLE;
end
default:
next_state <= ID
================================================================
example-28: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1 && b==1)
begin
next_state = SA;
z = 1'b0;
end
else if(a==1 && b==0)
begin
next_state = SB;
z = 1'b0;
end
else if(a==0 && b==1)
begin
next_state = SB;
z = 1'b0;
end
else
begin
next_state = IDLE;
z = 1'b0;
end
end
SA:
begin
if(
================================================================
example-29: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk )
begin
	if (reset == 1'b1)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(cur_state or a or b)
begin
	case (cur_state)
	IDLE : begin
	z = 1'b0;
	if (a == 1'b1 && b == 1'b1)
	next_state = SAB;
	else if (a == 1'b1)
	next_state = SA;
	else if (b == 1'b1)
	next_state = SB;
	else
	next_state = IDLE;
	end
	SA : begin
	z = 1'b0;
	if (a == 1'b1 && b == 1'b1)
	next_
================================================================
example-30: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk )
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ ( cur_state or a or b )
begin
case(cur_state)
IDLE : begin
if(a && b)
next_state = SAB;
else if(a)
next_state = SA;
else if(b)
next_state = SB;
else
next_state = IDLE;
end
SA : begin
if(b)
next_state = SAB;
else
next_state = SA;
end
SB : begin
if(a)
next_state = SAB;
else
next_state = SB;
end
SAB : begin
next_state = IDLE;
end
endcase
end
// FSM output logic
assign
================================================================
example-31: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
// z is assigned zero when cur_state is SB 
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a == 1 && b == 1)
next_state <= SAB;
else if(a == 1)
next_state <= SA;
else if(b == 1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(b == 1)
next_state <= SAB;
else
next_state <= SA;
end
SB:
begin
if(a == 1)
next_state <= SAB;
else
next_state <= SB;
end
SAB:
begin
next_state <= IDLE;
end
default:
begin
next_state
================================================================
example-32: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always@(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state,a,b)
begin
case(cur_state)
IDLE: begin
if(b)
next_state = IDLE;
else if(a)
next_state = SA;
end
SA: begin
if(b)
next_state = SA;
else if(a)
next_state = SB;
end
SB: begin
if(b)
next_state = SAB;
else if(a)
next_state = IDLE;
end
SAB: begin
if(a)
next_state = SAB;
else if(b)
next_state = IDLE;
end
endcase

================================================================
example-33: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk)
begin
 if(reset == 1)
 cur_state <= IDLE;
 else
 cur_state <= next_state;
end
always @(a or b or cur_state)
begin
 case (cur_state)
 IDLE:
 begin
 next_state = IDLE;
 if (a == 1 && b == 1) 
 begin
 next_state = SAB;
 end
 else if (a == 1 && b == 0)
 begin
 next_state = SA;
 end
 else if (a == 0 && b == 1)
 begin
 next_state = SB;
 end
 else
 begin
 next_state = IDLE;
 end
 end
 SA:
 begin
 next_state = IDLE;
 if (b == 1)
 begin
 next_state = S
================================================================
example-34: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk) begin
if(reset) begin
cur_state <= IDLE;
end
else begin
cur_state <= next_state;
end
end
always @(cur_state,a,b) begin
case(cur_state)
IDLE: begin
if(a && b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if(b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if(a) next_state = SAB;
else next_state = IDLE;
end
SAB: begin
next_state = IDLE;
end
default: next_state = IDLE;
endcase
end
assign z = (cur_state == SAB
================================================================
example-35: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(cur_state,a,b) begin
case(cur_state)
IDLE : begin
 if(a == 1 & b == 1) begin
	next_state <= SA;
 end
 else if (a == 0 & b == 1) begin
	next_state <= SB;
 end
 else begin
	next_state <= IDLE;
 end
 end
 SA : begin
	if(a == 0 & b == 0) begin
	next_state <= SAB;
	end
	else if (a == 1 & b == 0) begin
	next_state <= SAB;
	end
	else begin
	next_state <= IDLE;
	end
 end
 SB : begin
	if(a == 1 & b == 0) begin
	next_state <= SAB;
	end
	else if (a == 0 & b == 1)
================================================================
example-36: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1 && b==1)
next_state = SAB;
else
next_state = IDLE;
end
SA:
begin
if(b==1)
next_state = SAB;
else
next_state = SA;
end
SB:
begin
if(a==1)
next_state = SAB;
else
next_state = SB;
end
SAB:
begin
next_state = IDLE;
end
default:
begin
next_state = IDLE;
end
================================================================
example-37: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise 
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
if(a && b) begin
next_state <= SAB;
end
else begin
next_state <= IDLE;
end
end
SA: begin
if(a) begin
next_state <= SA;
end
else if(b) begin
next_state <= SAB;
end
else if(a && b) begin
next_state <= SAB;
end
else begin
next_state <= IDLE;
end
end
SB: begin
if(b) begin
next_state <= SB;
end
else if(a) begin
================================================================
example-38: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk )
begin
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @ (cur_state or a or b)
begin
next_state = cur_state;
case (cur_state)
IDLE:
	if (a && b)
	next_state = SAB;
	else if (a && !b)
	next_state = SA;
	else if (!a && b)
	next_state = SB;
SA:
	if (!b)
	next_state = IDLE;
	else
	next_state = SAB;
SB:
	if (!a)
	next_state = IDLE;
	else
	next_state = SAB;
SAB:
	if (a && b)
	
================================================================
example-39: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
case(cur_state)
IDLE:
begin
if (a & b)
next_state <= SAB;
else if (a)
next_state <= SA;
else if (b)
next_state <= SB;
end
SA:
begin
if (b)
next_state <= SAB;
else
next_state <= IDLE;
end
SB:
begin
if (a)
next_state <= SAB;
else
next_state <= IDLE;
end
SAB:
begin
next_state <= IDLE;
end
default:
next_state <= IDLE;
endcase
end
always @(posedge clk)
begin
case(cur_state)
IDLE:
begin
z <= 0;
end
SA:
begin
z <= 0;

================================================================
example-40: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(cur_state or a or b)
begin
case (cur_state)
IDLE: begin
	if(a==1&&b==1) begin
	next_state = SAB;
	end
	else if(a==1) begin
	next_state = SA;
	end
	else if(b==1) begin
	next_state = SB;
	end
	else begin
	next_state = IDLE;
	end
	end
SA: begin
	if(b==1) begin
	next_state = SAB;
	end
	else if(a==1) begin
	next_state = SA;
	end
	else begin
	next_state = SA;
	end
	end
SB: begin
	if(a==1) begin
	next_state = SAB;
	end
================================================================
example-41: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @ (posedge clk or negedge reset)
begin
if(reset==1'b0)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ (a or b or cur_state)
begin
case(cur_state)
IDLE : begin
a_and_b = a & b;
a_not_b = ~a;
next_state = IDLE;
if(a_and_b)
next_state = SAB;
if(a_not_b)
next_state = SA;
if(b_not)
next_state = SB;
end
SA : begin
a_and_b = a & b;
a_not_b = ~a;
next_state = SA;
if(a_
================================================================
example-42: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case (cur_state)
IDLE:
begin
if (a)
begin
next_state <= IDLE;
z <= 0;
end
else
begin
next_state <= SA;
z <= 0;
end
end
SA:
begin
if (~b)
begin
next_state <= SB;
z <= 0;
end
else
begin
next_state <= SAB;
z <= 1;
end
end
SB:
begin
if (~a)
begin
next_state <= IDLE;
z <= 1;
end
else
begin
================================================================
example-43: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned one when cur_state is SB
// z is assigned one when cur_state is SA
// z is assigned one when cur_state is IDLE and a and b are high
reg z;
always @(posedge clk) begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b) begin
case (cur_state)
IDLE : begin
if(a == 1 && b == 1)
begin
next_state <= SA;
z <= 0;
end
else
begin
next_state <= IDLE;
z <=0;
end
end
SA : begin
if(a == 1)
begin
next_state <= SB;
z <= 0;
end
else
begin
next_state <= SA;
z <= 0;
end
================================================================
example-44: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk or negedge reset)
begin
if(~reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state or a or b or reset)
begin
case(cur_state)
IDLE: begin
if(~reset)
next_state <= IDLE;
else if(a == 1 && b == 1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA: begin
next_state <= SB;
end
SB: begin
next_state <= SA;
end
SAB: begin
next_state <= IDLE;
end
default: begin
next_state <= IDLE;
end
endcase
end
always@(a or b or cur_state
================================================================
example-45: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise
always @ (cur_state or a or b)
begin
case (cur_state)
IDLE: begin
	if (a == 1 && b == 1) begin
	next_state = SAB;
	end
	else if (a == 1 && b == 0) begin
	next_state = SA;
	end
	else if (a == 0 && b == 1) begin
	next_state = SB;
	end
	else begin
	next_state = IDLE;
	end
	end
SA: begin
	if (b == 1)
	next_state = SAB;
	else
	next_state = SA;
	end
SB: begin
	if (a == 1)
	next_state = SAB;
	else
	next_state = SB;
	end
SAB:
================================================================
example-46: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE 
always @(posedge clk)
begin
 if(reset)
 cur_state <= IDLE;
 else
 cur_state <= next_state;
end
always @(cur_state or a or b)
begin
 case(cur_state)
 IDLE: begin
 if(a==1 && b==1)
 next_state <= SAB;
 else if(a == 1)
 next_state <= SA;
 else if(b == 1)
 next_state <= SB;
 end
 SA: begin
 if(b == 1)
 next_state <= SAB;
 else
 next_state <= IDLE;
 end
 SB: begin
 if(a == 1)
 next_state <= SAB;
 else
 next_state <= IDLE;
 end
 SAB: begin
 next_state <= ID
================================================================
example-47: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero otherwise
always @(cur_state)
begin
case (cur_state)
IDLE:
begin
z = 0;
next_state = a + b ? SAB : IDLE;
end
SA:
begin
z = 0;
next_state = b ? SAB : SA;
end
SB:
begin
z = 0;
next_state = a ? SAB : SB;
end
SAB:
begin
z = 1;
next_state = IDLE;
end
default:
begin
z = 0;
next_state = IDLE;
end
endcase
end
always @(posedge clk,reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end

================================================================
example-48: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg a_val, b_val;
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
a_val <= a;
b_val <= b;
if(a_val && b_val)
next_state = SAB;
else if(a_val && ~b_val)
next_state = SA;
else if(~a_val && b_val)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
a_val <= a;
b_val <= b;
if(a_val && b_val)
next_state = SAB;
else if(a_val && ~b_
================================================================
example-49: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state,a,b)
begin
case(cur_state)
IDLE: begin
z = 0;
if(a)
next_state = IDLE;
else
next_state = IDLE;
end
SA: begin
z = 0;
if(a)
next_state = SA;
else
next_state = SB;
end
SB: begin
z = 0;
if(a)
next_state = SAB;
else
next_state = SB;
end
SAB: begin
z = 1;
next_state = IDLE;
end
endcase
end

================================================================
