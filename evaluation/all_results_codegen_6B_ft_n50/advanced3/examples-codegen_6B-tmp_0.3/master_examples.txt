example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if(reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
end 

always @(x or present_state)
begin 
	case(present_state)
	IDLE: 
	begin 
	if(x) next_state = S1; 
	else next_state = IDLE; 
	end 
	S1: 
	begin 
	if(x) next_state = S10; 
	else next_state = IDLE; 
	end 
	S10: 
	begin 
	if(x) next_state = S101; 
	else next_state = IDLE; 
	end 
	S101: 
	begin 
	
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

assign z = (present_state == S101) ? 1:0;

always @(present_state or x)
begin 
	case(present_state)
	IDLE: if(x) next_state = S1; 
	else next_state = IDLE;
	S1: if(x) next_state = S10; 
	else next_state = IDLE;
	S10: if(x) next_state = S101; 
	else next_state = IDLE;
	S101: if(x) next_state = S1; 
	else next_state = IDLE;
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state<=S1;
else
next_state<=IDLE;
S1: if(x)
next_state<=S10;
else
next_state<=S1;
S10: if(x)
next_state<=S101;
else
next_state<=S1;
S101: if(x)
next_state<=S1;
else
next_state<=IDLE;
default: next_state<=IDLE;
endcase
end

assign z=(
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
z<=0;
if(x)
next_state=S1;
else
next_state=IDLE;
end

S1: begin 
z<=0;
if(x)
next_state=S1;
else
next_state=S10;
end

S10: begin 
z<=0;
if(x)
next_state=S101;
else
next_state=IDLE;
end

S101: begin 
z<=1;
if(x)
next_state
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if (reset)
present_state <= IDLE;
else 
present_state <= next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if (x) next_state = S1;
else next_state = IDLE;
end
S1: begin 
if (x) next_state = S10;
else next_state = IDLE;
end
S10: begin 
if (x) next_state = S101;
else next_state = IDLE;
end
S101: begin 
if (x) next_state = S1;
else next_state = IDLE;
end
default: next_state = IDLE;
endcase
end

assign
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
case(present_state) 
IDLE: begin 
z = 0; 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 

S1: begin 
z = 0; 
if(x) 
next_state = S1; 
else 
next_state = S10; 
end 

S10: begin 
z = 0; 
if(x) 
next_state = S101; 
else 
next_state = S10; 
end 

S101: begin 

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
begin 
case(present_state) 
IDLE: 
begin 
if (x) next_state = S1; 
else next_state = IDLE; 
end 
S1: 
begin 
if (x) next_state = S10; 
else next_state = IDLE; 
end 
S10: 
begin 
if (x) next_state = S101; 
else next_state = IDLE; 
end 
S101: 
begin 
if (x) next_state = S1; 
else next_state =
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: 
begin 
if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
end 
S1: 
begin 
if(x) 
next_state <= S10; 
else 
next_state <= S1; 
end 
S10: 
begin 
if(x) 
next_state <= S101; 
else 
next_state <= S1; 
end 
S101: 
begin 
if(x) 
next_state <= S1
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
S1: if(x) next_state = S10; 
	else next_state = IDLE; 
S10: if(x) next_state = S101; 
	else next_state = IDLE; 
S101: if(x) next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

always @(present_state or x)
begin 
	case(present_state) 
	IDLE: 
	begin 
	if (x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	end 
	S1: 
	begin 
	if (x) 
	next_state = S10; 
	else 
	next_state = IDLE; 
	end 
	S10: 
	begin 
	if (x) 
	next_state = S101; 
	else 
	next_state
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state;

always @(posedge clk) 
if (reset) 
next_state <= IDLE; 
else 
case (present_state) 
IDLE: if (x) next_state <= S1; 
	else next_state <= IDLE;
S1: if (x) next_state <= S10; 
	else next_state <= S1;
S10: if (x) next_state <= S101; 
	else next_state <= S10;
S101: if (x) next_state <= S1; 
	else next_state <= S10;
default: next_state <= IDLE; 
endcase

assign z = (present
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
	if(x) next_state = S1; 
	else next_state = IDLE; 
	end 
S1: begin 
	if(x) next_state = S10; 
	else next_state = IDLE; 
	end 
S10: begin 
	if(x) next_state = S101; 
	else next_state = IDLE; 
	end 
S101: begin 
	if(x) next_state = S1; 
	else next_state = IDLE;
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
S1: if(x) next_state = S10; 
	else next_state = IDLE; 
S10: if(x) next_state = S101; 
	else next_state = IDLE; 
S101: if(x) next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always @(
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
z=0; 
if(x) 
next_state=S1; 
else 
next_state=IDLE; 
end 
S1: begin 
z=0; 
if(x) 
next_state=S1; 
else 
next_state=S10; 
end 
S10: begin 
z=0; 
if(x) 
next_state=S101; 
else 
next_state=IDLE; 
end 
S101: begin 
z=1;
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) next_state=S1; else next_state=IDLE;
S1: if(x) next_state=S10; else next_state=IDLE;
S10: if(x) next_state=S101; else next_state=IDLE;
S101: if(x) next_state=S1; else next_state=IDLE;
default: next_state=IDLE;
endcase
end

assign z=(present_state==S101);

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x) 
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE;
S1: if(x) next_state = S10; 
	else next_state = IDLE;
S10: if(x) next_state = S101; 
	else next_state = IDLE;
S101: if(x) next_state = S1; 
	else next_state = IDLE;
default: next_state = IDLE;
endcase
end 

always @(posedge clk, posedge reset) 
begin 
if(reset) 
present_state = IDLE; 
else 
present_state = next_state; 
end 

assign z = (present_
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end

always @(*)
begin 
case(present_state)
IDLE: begin 
if(x) 
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x) 
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x) 
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x) 
next_state=S1;
else 
next_state=IDLE;
end 
default: next_state=
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
S1: begin 
if(x) next_state = S10; 
else next_state = IDLE; 
end 
S10: begin 
if(x) next_state = S101; 
else next_state = IDLE; 
end 
S101: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
default: next_state
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
default: next_state = IDLE; 
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
S1: begin 
if(x) next_state = S10; 
else next_state = IDLE; 
end 
S10: begin 
if(x) next_state = S101; 
else next_state = IDLE; 
end 
S101: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
default:
================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: 
begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 

S1: 
begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 

S10: 
begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 

S101: 
begin 
if(x) 
next_state
================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
next_state = x ? S1 : IDLE; 
end 
S1: begin 
next_state = x ? S10 : IDLE; 
end 
S10: begin 
next_state = x ? S101 : IDLE; 
end 
S101: begin 
next_state = x ? S1 : IDLE; 
end 
default: next_state = IDLE; 
endcase 
end 

always @(posedge clk or posedge reset) 
begin 
if(
================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: begin 
if(x) 
next_state = S1; 
else
================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin
case(present_state)
IDLE: begin
z<=0;
if(x)
next_state=S1;
else
next_state=IDLE;
end
S1: begin
z<=0;
if(x)
next_state=S1;
else
next_state=S10;
end
S10: begin
z<=0;
if(x)
next_state=S101;
else
next_state=IDLE;
end
S101: begin
z<=1;
if(x)
next_state=S1;
else
================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
endcase 
end 

assign z = (present
================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin
case(present_state)
IDLE: begin
z<=0;
if(x)
next_state=S1;
else
next_state=IDLE;
end
S1: begin
z<=0;
if(x)
next_state=S1;
else
next_state=S10;
end
S10: begin
z<=0;
if(x)
next_state=S101;
else
next_state=IDLE;
end
S101: begin
z<=1;
if(x)
next_state=S1;
else
================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x,present_state)
case(present_state)
IDLE: begin 
if(x)
begin
next_state = S1;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
end
S1: begin 
if(x)
begin
next_state = S10;
z = 0;
end
else
begin
next_state = S1;
z = 0;
end
end
S10: begin 
if(x)
begin
next_state = S101;
z = 0;
end
else
begin
next_state = S1;
z = 0;
end
================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
end
================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state<=S1; 
else 
next_state<=IDLE; 
S1: if(x) 
next_state<=S10; 
else 
next_state<=S1; 
S10: if(x) 
next_state<=S101; 
else 
next_state<=S10; 
S101: if(x) 
next_state<=S1; 
else 
next_state<=IDLE; 

================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

always @(present_state or x)
begin 
	case(present_state) 
	IDLE: 
	begin 
	if (x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	end 
	S1: 
	begin 
	if (x) 
	next_state = S10; 
	else 
	next_state = S1; 
	end 
	S10: 
	begin 
	if (x) 
	next_state = S101; 
	else 
	next_state
================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

always @(present_state or x) 
begin 
	case(present_state) 
	IDLE: 
	begin 
	if (x) 
	begin 
	next_state = S1; 
	end 
	else 
	begin 
	next_state = IDLE; 
	end 
	end 
	S1: 
	begin 
	if (x) 
	begin 
	next_state = S10; 
	end 
	else 
	begin 
	next_state = IDLE; 
	end 
	end 
	S
================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: begin 
if(x) 
next_state = S1; 
else
================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state<=S1;
else
next_state<=IDLE;
end
S1: begin 
if(x)
next_state<=S10;
else
next_state<=IDLE;
end
S10: begin 
if(x)
next_state<=S101;
else
next_state<=IDLE;
end
S101: begin 
if(x)
next_state<=S1;
else
next_state<=IDLE;
end
default:
================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if (reset)
present_state<=IDLE;
else 
present_state<=next_state;
end

always @(x or present_state)
begin 
case(present_state)
IDLE: if (x) next_state<=S1;
	else next_state<=IDLE;
S1: if (x) next_state<=S10;
	else next_state<=IDLE;
S10: if (x) next_state<=S101;
	else next_state<=IDLE;
S101: if (x) next_state<=S1;
	else next_state<=IDLE;
default: next_state<=IDLE;
endcase
end

assign z=(present_state==
================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

assign z = (present_state==S101) ? 1:0;

//x is a 1 if next_state is S1, else 0

always @(present_state or x)
begin 
	case(present_state)
	IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
	S1: if(x) next_state = S10; 
	else next_state = IDLE; 
	S10: if(x) next_state = S101; 
	else next_state = IDLE; 
	S101: if(
================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state;
end 

always @(present_state or x)
case(present_state) 
IDLE: 
begin 
if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
end 

S1: 
begin 
if(x) 
next_state <= S10; 
else 
next_state <= S1; 
end 

S10: 
begin 
if(x) 
next_state <= S101; 
else 
next_state <= S10; 
end 

S101: 
begin 
if(x) 
next_state <= S1;
================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state,x) 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
endcase 

================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
	begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
	end 
	
always @(present_state or x) 
	begin 
	next_state = IDLE; 
	case (present_state) 
	IDLE: 
	if (x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	S1: 
	if (x) 
	next_state = S10; 
	else 
	next_state = IDLE; 
	S10: 
	if (x) 
	next_state = S101; 
	else 
	next_state = IDLE;
================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
S1: begin 
if(x) next_state = S10; 
else next_state = IDLE; 
end 
S10: begin 
if(x) next_state = S101; 
else next_state = IDLE; 
end 
S101: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
default: next_state =
================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: begin
z=0;
if(x)
next_state=S1;
else
next_state=IDLE;
end
S1: begin
z=0;
if(x)
next_state=S1;
else
next_state=S10;
end
S10: begin
z=0;
if(x)
next_state=S101;
else
next_state=IDLE;
end
S101: begin
z=1;
if(x)
next_state=S1;
else
next_state=S10
================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
end

always @(present_state or x)
begin 
	case(present_state)
	IDLE: 
	begin 
	if (x) next_state = S1;
	else next_state = IDLE;
	end
	S1: 
	begin 
	if (x) next_state = S10;
	else next_state = IDLE;
	end
	S10: 
	begin 
	if (x) next_state = S101;
	else next_state = IDLE;
	end
	S101: 
	begin 
	if (x) next_state = S1
================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state;
end 

always @(present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
S1: begin 
if(x) next_state = S10; 
else next_state = IDLE; 
end 
S10: begin 
if(x) next_state = S101; 
else next_state = IDLE; 
end 
S101: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 
default: next_state = IDLE; 
================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x, present_state) 
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
endcase 
end 

always @(posedge clk)
================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state) 
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
S1: if(x) next_state = S10; 
	else next_state = IDLE; 
S10: if(x) next_state = S101; 
	else next_state = IDLE; 
S101: if(x) next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

ass
================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 
	

assign z = (present_state == S101) ? 1:0;

//next state is a case statement which depends on the input signals
always @(*) 
begin 
	case(present_state) 
	IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
	S1: if(x) next_state = S10; 
	else next_state = IDLE; 
	S10: if(x) next_state = S101; 
	else next_state = IDLE; 
	S101: if(x) next
================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x)next_state=S1; 
	else next_state=IDLE; 
S1: if(x)next_state=S10; 
	else next_state=IDLE;
S10: if(x)next_state=S101; 
	else next_state=IDLE;
S101: if(x)next_state=S1; 
	else next_state=IDLE; 
default: next_state=IDLE; 
endcase 
end 

always @(
================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
z<=0; 
if(x) 
next_state=S1; 
else 
next_state=IDLE; 
end 
S1: begin 
z<=0; 
if(x) 
next_state=S1; 
else 
next_state=S10; 
end 
S10: begin 
z<=0; 
if(x) 
next_state=S101; 
else 
next_state=IDLE; 
end 
S101:
================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
	if(reset) 
	begin 
	next_state = IDLE; 
	end 
	else 
	begin 
	case(present_state) 
	IDLE: if(x) next_state = S1; else next_state = IDLE; 
	S1: if(x) next_state = S10; else next_state = IDLE; 
	S10: if(x) next_state = S101; else next_state = IDLE; 
	S101: if(x) next_state = S1; else next_state = IDLE; 
	default: next_state = IDLE; 
	endcase 
	end 
end 

always @(posedge clk) 
begin 
	if(reset) 
	present_
================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state <= S1;
else
next_state <= IDLE;
S1: if(x)
next_state <= S10;
else
next_state <= S1;
S10: if(x)
next_state <= S101;
else
next_state <= S1;
S101: if(x)
next_state <= S1;
else
next_state <= S10;
default: next_state <= IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)next_state=S1;
	else next_state=IDLE;
S1: if(x)next_state=S10;
	else next_state=IDLE;
S10: if(x)next_state=S101;
	else next_state=IDLE;
S101: if(x)next_state=S1;
	else next_state=IDLE;
default: next_state=IDLE;
endcase
end

always @(posedge clk or posedge reset)
begin 

================================================================
