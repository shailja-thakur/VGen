example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: next_state = IDLE;
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state <= S1;
z <= 1;
end
else 
begin
next_state <= IDLE;
z <= 0;
end

S1: if(~x)
begin
next_state <= S10;
z <= 1;
end
else 
begin
next_state <= IDLE;
z <= 0;
end

S10: if(x)
begin
next_state <= S101;
z <= 1;
end
else 
begin
next_state <= IDLE;
z <= 0;
end
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(*)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(!x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
default:
next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101) ? 1 : 0;

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101)? 1:0;

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always@(present_state or x)
begin
case(present_state)
IDLE: if(x)
begin
next_state <= S1;
z <= 1'b0;
end
else
begin
next_state <= IDLE;
z <= 1'b0;
end
S1: if(~x)
begin
next_state <= S10;
z <= 1'b0;
end
else
begin
next_state <= IDLE;
z <= 1'b0;
end
S10: if(x)
begin
next_state <= S101;
z <= 1'b1;
end
else
begin
next_state <= ID
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x, present_state)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end

S1: if(~x)
begin
next_state = S10;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end

S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end

S101: begin
next
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE: begin
if(x)
next_state = S1;
else
next_state = IDLE;
z = 0;
end
S1: begin
if(!x)
next_state = S10;
else
next_state = IDLE;
z = 0;
end
S10: begin
if(x)
next_state = S101;
else
next_state = IDLE;
z = 0;
end
S101: begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
z = 1;
end
end
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(*)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: 
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: 
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: 
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10: 
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101: 
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S1: if(~x)
begin
next_state = S10;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S101: begin

================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(~x)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE: begin
if(x)
next_state = S1;
else
next_state = IDLE;
z = 1'b0;
end
S1: begin
if(~x)
next_state = S10;
else
next_state = IDLE;
z = 1'b0;
end
S10: begin
if(x)
next_state = S101;
else
next_state = IDLE;
z = 1'b0;
end
S101: begin
if(~x)
next_state = IDLE;
else
next_state = IDLE
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state <= S1;
z <= 1;
end
else
begin
next_state <= IDLE;
z <= 0;
end
S1: if(~x)
begin
next_state <= S10;
z <= 1;
end
else
begin
next_state <= IDLE;
z <= 0;
end
S10: if(x)
begin
next_state <= S101;
z <= 1;
end
else
begin
next_state <= IDLE;
z <= 0;
end
S101: begin

================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: next_state = IDLE;
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE : 
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1 : 
begin
if(~x)
next_state <= S10;
else
next_state <= IDLE;
end
S10 :
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101 :
begin
next_state <= IDLE;
end
default :
next_state <= IDLE;
endcase
end

assign z = (present_state == S101) ?
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state, x)
begin
case (present_state)
IDLE : begin
	if (x == 1)
	begin
	next_state = S1;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	end
S1 : begin
	if (x == 0)
	begin
	next_state = S10;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	end
S10 : begin
	if (x == 1)
	begin
	next_state = S101;
	z = 1;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end

================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S1: if(~x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = S10;
z = 1;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S101: if(~x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
endcase
================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( posedge clk or posedge reset )
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @( present_state or x )
begin
case(present_state)
IDLE: if(x)
begin
next_state <= S1;
z <= 1'b0;
end
else
begin
next_state <= IDLE;
z <= 1'b0;
end
S1: if(~x)
begin
next_state <= S10;
z <= 1'b0;
end
else
begin
next_state <= IDLE;
z <= 1'b0;
end
S10: if(x)
begin
next_state <= S101;
z <= 1'b1;
end
else
begin
next_state <= ID
================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(*)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S1: if(~x)
begin
next_state = S10;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S101: begin

================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101) ? 1'b1 : 1'b0;

================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: next_state = IDLE;
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end
default : next_state = IDLE;
endcase
end

always @(present_state)
begin
case(present_state)
IDLE :
================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
begin
next_state <= S1;
z <= 1'b1;
end
else
begin
next_state <= IDLE;
z <= 1'b0;
end
S1: if(~x)
begin
next_state <= S10;
z <= 1'b1;
end
else
begin
next_state <= IDLE;
z <= 1'b0;
end
S10: if(x)
begin
next_state <= S101;
z <= 1'b1;
end
else
begin
next_state <= ID
================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
default:
next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset) 
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else 
begin
next_state = IDLE;
z = 0;
end
S1: if(~x)
begin
next_state = S10;
z = 1;
end
else 
begin
next_state = IDLE;
z = 0;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else 
begin
next_state = IDLE;
z = 0;
end
S101: begin
================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
begin
next_state <= S1;
z <= 0;
end
else
begin
next_state <= IDLE;
z <= 0;
end

S1: if(~x)
begin
next_state <= S10;
z <= 0;
end
else
begin
next_state <= IDLE;
z <= 0;
end

S10: if(x)
begin
next_state <= S101;
z <= 1;
end
else
begin
next_state <= IDLE;
z <= 0;
end

S101: begin
next
================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE: begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10: begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101: begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
end
default : next_state = IDLE;
endcase
end

assign z = (
================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S1: if(~x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = S10;
z = 1;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S101: if(~x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
endcase
================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(*)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end
endcase
end


always @(present_state)
begin
case(present_state)
IDLE : begin
z = 0;
end
S
================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x, present_state)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: next_state = IDLE;
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
next_state <= S1;
else
next_state <= IDLE;
S1: if(!x)
next_state <= S10;
else
next_state <= IDLE;
S10: if(x)
next_state <= S101;
else
next_state <= IDLE;
S101: begin
next_state <= IDLE;
z = 1'b1;
end
default: next_state <= IDLE;
endcase
end

================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1'b0;
end
else
begin
next_state = IDLE;
z = 1'b0;
end
S1: if(~x)
begin
next_state = S10;
z = 1'b0;
end
else
begin
next_state = S1;
z = 1'b0;
end
S10: if(x)
begin
next_state = S101;
z = 1'b1;
end
else
begin
next_state = S
================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = IDLE;
else
next_state = S10;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
end
default : next_state = IDLE;
endcase
end

assign z = (
================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk)
	begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	always @(*)
	begin
	case(present_state)
	IDLE: 
	begin
	if(x)
	next_state = S1;
	else
	next_state = IDLE;
	end
	S1: 
	begin
	if(~x)
	next_state = S10;
	else
	next_state = IDLE;
	end
	S10: 
	begin
	if(x)
	next_state = S101;
	else
	next_state = IDLE;
	end
	S101: 
	begin
	if(~x)
	next_state =
================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: 
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101);

================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE: begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10: begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101: begin
next_state = IDLE;
end
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: begin
next_state = IDLE;
end
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S1: if(~x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = S10;
z = 0;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S101: begin

================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(*)
begin
case(present_state)
IDLE: 
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

================================================================
