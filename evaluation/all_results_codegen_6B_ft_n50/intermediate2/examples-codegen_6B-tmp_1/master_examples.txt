example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always@(posedge clk or posedge reset) 
 if (reset)
 q<=4'b0001;
 else if (q == 4'b1200)
 q<=4'b0001;
 else (q<=q+4'b0001)

//Output in each stage is q[1] to q[3] 


 
 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin 
	q=1'b0;
	end	
	else if(q == 10)
	begin
	q=1'b0;
	end
	else
	begin
	q=q+1;
	end
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk )
begin
 if(reset)
 q <= 1;
 else if(q==12)
 q <= 1;
 else
 q <= q + 1;
end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if(reset|q == 4'b10000)
	q <= 4'b1111;
else if(q == 4'b0101 & q != 4'b1)
	q <= q + 1'b1;
else 
	q <= q;
end 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
	begin
	 	if (reset == 1) 
	 	 	q <= 1 ; //reset the counter to position 1 (i.e. q is 1)
	 	else if (q == 12) //if the counter is maxed out, reset it
	 	 	q <= 1 ;
	 	else 
	 	 	q <= q + 1; //else if the counter is not maxed out, increment the counter
	 end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) 
begin 
	if (reset == 0) 
	begin 
	 q <= 2'b01;
	end 
	else if(q == 12'b000zzzzz) 
	begin 
	 q=2'b01;
	end 
	else 
	begin
	 q<= q + 1;
	end
 end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset) // case of reset
	q <= #1 4'b0001;
	else if(q == 12'b1011111111) // case of q==12
	q <= #1 4'b0001;
	else 
	q <= #1 q + 1'b1; // case of q != 12
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset )
begin	
	if ( reset ) 
	begin 
	q <= 4'd1; 
	end 
	else if ( q == 4'd12 ) 
	begin 
	q <= 4'd1;
	end 
	else 
	begin 
	q <= q + 4'd1; 
	end 
end 

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	 
	if( reset ) 
	 q <=4'b0001; 
	 
	else if( q == 4'b1100 ) 
	 q <= 4'b0001;
	 
	else 
	 q <= q +4'b0001;	
	 
	end 

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) // Non blocking statement
begin
	if (reset) // This non-blocking assignment statement does the reset
 	q <= 4'b0001;
	else if (q == 4'b1111) // This is a blocking assignment statement (blocking)
	q <= 4'b0001;
	else // This is a regular assignment statement
	q <= q + 1; 
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @ (posedge clk or posedge reset)begin 
 if (reset) 
 q <= 1; 
 else if (q == 12) 
 q <= 1; 
 else 
 q <= q +1; 
end 
 

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
 
	begin
 
	if (reset)
 
	q <= 0;
 
	else 
 
	if(q == 12)
 
	q <= 0;
 
	else 
 
	q <= q + 1;
 
	end // end always
 

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	if (reset)
	begin //Case 0
	q <= 1'b0;
	end
	else if(q == 4'b1011)
	begin//Case 12
	q <= 1'b0;
	end
	else
	begin //Cases 1 to 11
	q <= q + 1'b1;
	end
	
================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset == 1'b1) q <= 4'b0001;
	else if (q == 4'b1111) q <= 4'b0001;
	else q <= q + 1'b1;
	end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
 begin
	if ( reset ) q = 0;
	else if ( q == 12 ) q = 1;
	else q = q + 1;
 end 
 

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset) 
	begin
	q = 0;
	end 
	
	else if(q == 12)
	begin
	q = 1;
	end
	
	else 
	begin
	q = q + 1;
	end
	end 

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(*) begin
 case (reset)
 in1: begin 
	q = 4'b1;
	end
 1:begin
	q=q+4'b1;
	end
 default:;
 endcase
end //always


================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always@(posedge clk)
begin
if (!reset)
	begin //Case 01: Reset
	 q <= 4'b0001;	 
	end //BRAC 1
else if(q == 12)
	begin // Case 02: reach the 12th q or q <= q + 1
	 q <= q + 1;	 
	end //BRAC 2
else if(q < 12)
	begin //Case 03: Normal operation
	 q <= q + 1;	 
	end //BRAC 3

end //always

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) 
	begin 
	if( reset ) 
//	assign q = 4'b1;
	else if( q == 4'd12 ) 
	assign q = 4'd1;
	else 
	begin 
	//$$$新增是移位不移位，不是移位不移位
	//$display("%d--->%d",q,q+2'b01);
	q = q + 2'b01;
	end 
	end

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
 	case(q)
 	4'b0:; // NOP 
 	4'b?1:; //Store the input of NO1
 	4'b?1:; //Store the input of NO2
 	4'b1:;
	default: q=4'b0000;
	endcase
 	

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset) 
	q<=1'b0;
	else if (q == 4'b1100) 
	q<= 1'b0;
	else 
	q<= q + 1;
	end

================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
if (reset)
q<=1;
else if (q == 10)
q<=1;
else 
begin
q<=q+1;
end
end


================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset ) 
begin : COUNTER //Block Starts
	if (reset) 
	begin
	q <= 1;
	end 
	else 
	begin
	if (q == 12) 
	begin
	q <= 1;
	end 
	else 
	begin
	q <= q + 1;
	end 
end //Block Ends

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset) q=4'b0001;
	else if(q==12) q=4'b0001;
	else q=q+1;
end

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if(reset)
	q = 4'b1;
else if(q == 4'd12)
	q = 4'b1;
else
	caseq1 <= q + 4'd1;
 endcase
 calc2eq1 <= &(q) ;
 endmodule

module timer
 #(
 //define 2n =(1 =>0)sec
 //n sec
 //parameter nsec = 1000000000
 )
 (
// resolve at the 1000th of A, the ptr and ll register should be incremented
// also the 3 bit low reg
input clk,
input incre,
output timer_over
);
	

// timer counter register
reg [19:0] count;

// time is displayed in 3 digit (HHMM)
reg [8 : 0] time_fmt; //
================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge( clk) or 
	case( reset ) 
	1'b0: q = 1'b0; 
	q[3] <= q[2]; q[2] <= q[1]; q[1] <= q[0]; q[0] <= 1'b1; 
	endcase

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	// on reset, set counter to 4'b0001
	begin
	else if (q == 10)
	// q is 11, so set counter to 4'b0001
	begin
	else 
	// else, increment the counter
	begin
	q = q + 1'b1;
	end
end

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
case(reset)
	1'b1: begin
	q <= 4'b0001;
	end
	1'b0: begin
	if (q == 4'b1001)
	q <= 4'b0001;
	else
	q <= q + 4'b0001;
	end
endcase

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge(clk) or posedge(reset))
	begin
	if (reset)
	begin
	q <= 1;
	end 
	else if (q == 12)
	begin
	q <= 1;
	end
	else 
	begin
	q <= q + 1;
	end
	end

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
case(reset) 
1'b1: q = 4'b0001;
q[12:11]==2'b01&&q[3:0]==4'b0001: q = q[3:0] + 1'b1;
q[12:11]==2'b10&&q[3:0]==4'b1000: q = q[3:0] + 1'b1;
q[12:11]==2'b11&&q[3:0]==4'b1001: q = q[3:0] + 1'b1;
endcase 

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
	if(reset)
	
	else 
	
	case( q )
	0: assign q = 4'd1;
	1: assign q = q + 4'd1;
	2: assign q = q + 4'd1;
	3: assign q = q + 4'd1;
	endcase
end
	

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset) begin
	if (reset)
	q = 4'b0001;
	else if (q == 4'b1111) q = 4'b0001;
	else if (q == 4'b1000) q = 4'b0101;
	else q = q + 4'b0001;
end

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk) 
/*
begin 
	if (reset) 
	begin 
 	q <= 4'b0001; 
	end 
	else if (q == 12'b11000110)
	begin
 	q <= 4'b0001; 
	end
	else 
	begin 
	q <= q + 4'b0001; 
	end
end
*/ 
if (reset) 
	q <= 4'b0001; 
//else if (q == 12'b11000110)
else if (q == 12'b00010001) 
	q <= 4'b0001; 
else if (q == 12'b00010000) 
	q <= 4'b0001; 
else if (~clk && q == 12'b00000100) 
	q <= 4'b
================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
if (reset) 
q <= 1; 
else if(q==12) 
q <= 1;
else 
q <= q+1; 

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk or posedge reset)	
 begin
	if(reset) //hit reset
	q <= .q;
	else if(q == 4'b1111) // if q is 12
	q <= 1;
	else
	q <= q + 1; //increment q
 end

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
case(reset) 
1'b0:
q=4'b0000;
1'b1:
begin
if(q==4'b0110)
q=4'b0000;
else
q=q+4'b0001;
end
endcase

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if ( clk ) begin 
	case(q)
	4'd15: q<=1'd1;
	4'd1: q<=q+1'd1;
	default: q<=q+1'd1;
	endcase
	end
	else if(reset)
	q<=1'd1;
end

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
	//case for initialization
	if(reset)
	begin
	q <= #1 4'h0;
	end
	else if(q == 12'hfff)
	begin
	q <= #1 4'h0;
	end
	else 
	begin
	q <= #1 q + 1;
	end
end 

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin 
	if (reset)
	 	q=0; 
	else if(q == 12)
	 	q = 0;
	else 
	 	q=q+1;
end 

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always@(posedge clk or posedge reset) 
	begin 
	
	if (reset) 
	
	q = 4'd1; 
	
	else if (q == 4'd12) 
	
	q = 4'd1; 
	
	else 
	
	q = q + 1; 
	
end 


================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q = 4'b0111;
	end 
	else if(q == 4'b0001)
	begin
	q = 4'b0000;
	end
	else 
	begin
	q = q + 1;
	end
end

================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) q = 1;
	else begin
	if (q == 12) q = 1;
	else q = q + 1;
	end
end

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
if(reset) // set q to 1
q=1;
 
 
 else if (q == 4'b1111) // set counter to maximum value when q is filled to maximum
q=0;
 
else 
q=q+1; // otherwise, increment q
end

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset) begin
	if (reset)
	begin
	q = 4'b0000;
	end 
	// If q is 12, assign it to 1; 
	else if(q == 4'd12)
	begin
	q = 4'd 1;
	end
	// Increment q, as long as it is less than 13
	else
	begin 
	q = q + 4'd1;
	end
end	



================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) // case 0 
begin 
q = 0; // non-blocking assignment
end
	else if (q == 12) 
begin 
q =1; //non-blocking assignment 
end
	else 
begin 
q = q + 1; // non-blocking assignment
end
end

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end 
	else if (q == 4'b1010) 
	begin 
	q = 4'b0000;
	end 
	else 
	begin
	q <= q + 4'b0001;
	end
end


================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset) q = 4'b0001; 
	else if (q == 4'b1111) q= 4'b0001; 
	else q= q+1;
	end

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset)
// on reset, q<=4'b0001;
begin	
	if (reset)
	begin 
	q =4'b0001;
	end
	else if(q == 12)
	begin
	q=1;
	end
	else 
	begin
	q= q+1;
	end
end

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin 
	if(reset) // on reset
	q <= 1;
	else if (q == 12) // if q is 12, set it to 1
	q <= 1;
	else 
	q <= q + 1; // else, increment q by 1 
end

================================================================
