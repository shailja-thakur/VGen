example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset ) 
begin 
	if ( reset ) 
	begin 
	q = 4'b1; 
	end 
	else if ( q == 4'b1 ) 
	begin 
	q = 4'b0; 
	end 
	else 
	begin 
	q = q + 4'b1; 
	end 
end 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin
	// on reset, set q to 1
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	// if q is 12, set q to 1
	else if(q == 4'b1111) 
	begin
	q <= 4'b0001;
	end 
	//else, increment q by 1
	else 
	begin
	q <= q + 4'b0001;
	end
	end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin 
 	 	q <= 1; 	 
	end 
	else if(q == 12) 
	begin 	 	q = 1; 	
	end 
	else 
	begin	 
	 	q = q + 1; 	 
	end 
end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset) 
	begin 
	q = 4'b0000; 
	end 
	else if(q == 4'b1111) 
	begin 
	q = 4'b0000; 
	end 
	else 
	begin 
	q = q + 4'b0001; 
	end 
end 

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 1;
	end 
	else 
	begin
	if(q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
	end
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0001;
	else if (q == 4'b0110) //the counter resets to 1 if q is 14
	q <= 4'b0001;
	else 
	q <= q + 1;
	end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin 
	if (reset) 
	begin 
	q = 4'b0000; 
	end 
	else if (q == 4'b1111) 
	begin 
	q = 4'b0001; 
	end 
	else 
	begin 
	q = q + 1; 
	end 
end 

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) //if 0, then we are resetting to the initial condition
	begin 
	q = 1'b0;
	end 
	else if (q == 12'b1111111111111)
	begin 
	q = 1'b0;
	end
	else
	begin 
	q = q + 1'b1;
	end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin 
	 q=4'b0001;
	end 
	else if(q==12)
	begin
	 q=4'b0001;
	end
	else 
	begin
	 q=q+1;
	end 
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk or posedge reset) 
	begin 
	 
	 if (reset) 
	 	q <= 4'b0000; 
	 
	 else if (q == 4'b1110) 
	 	q <= 4'b0000; 
	 
	 else 
	 	q <= q + 1'b1; 
	 
	end 
 

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'b0110) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
if (reset)
q <= 1;
else if (q == 12)
q <= 1;
else
q <= q + 1;

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q <=4'b0001;
	end 
	else if(q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 4'b0001;
	end
end 

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'b1111) 
	begin 
	q <= 4'b0001;
	end
	else 
	begin 
	q <= q + 1;
	end 
end 

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if(reset) 
	begin 
	q = 4'b0001; 	
	end 
	//else if(q == 4'b1111)
	//begin 
	//q = 4'b0001; 	
	//end
	else if(q == 4'b1111)
	begin
	q = 4'b0001; 
	end
	else 
	begin 
	q = q + 1; 
	end
end 

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
	begin 
	if (reset) 
	q <= 4'b0001; 
	else if (q == 4'b1111) 
	q <= 4'b0001;
	else 
	q <= q + 1; 
end 

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk) 
	begin 
	 
	if (reset) 
	 	q <= 1; 
	
	else if (q == 12) 
	 	q <= 1; 
	
	else 
	 	q <= q + 1; 
	end 


================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 
	case( q )
	4'b0000: 
	begin
 	 	q = q;
	end 
	4'b1100: 
	begin
 	 	q = q;
	end 
	4'b0011: 
	begin
 	 	q = q + 1;
	end 
	4'b1111: 
	begin
 	 	q = 4'b0000;
	end 
	default: 
	begin
 	 	q = 4'b0000;
	end 
	endcase
	
end

 

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset) 
	begin
	case(q) 
	4'b1: 	q <= 4'b1; 
	4'b11:	q <= 4'b1;
	default:	q <= q + 4'b1; 
	endcase
	end
	else if(q == 12'b1111111111111111) 
	q <= 4'b1;
	else 
	q <= q + 4'b1;
end 

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	//	q <= 1;
	end 
	else if (q == 12) 
	begin
	//	q <='d1;
	end 
	else 
	begin
	//	q <= q +'d1;
	end
end 

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin 
	q <= 1;
	end 
	else if(q == 12)
	begin
	q <= 1;
	end
	else 
	begin 
	q <= q + 1;
	end
end 

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset )
begin
	if ( reset )
	begin
	q <= 4'b0001;
	end 
	else if ( q == 4'b1111 )
	begin 
	q <= 4'b0001;
	end 
	else 
	begin 
	q = q + 4'b0001;
	end
	end 

================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	 	if(reset)
//	 	if(1)
	 	 	q <= 1;
	 	else if(q == 12)
	 	 	q <= 1;
	 	else
	 	 	q <= q + 1;
	 end

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
	if (reset) 
	begin 
	q <= 4'b0001; 
	end 
	else if (q == 4'd12) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q[3:0] <= q[3:0] + 4'b0001; 
	end 
	end 

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin 
	assign q = 4'b0001;
	end 
	//else if (q == 4'b0010)
	//begin
	//assign q = 4'b0001;
	//end
	else if (q == 4'b1111)
	begin
	assign q = 4'b0001;
	end
	else 
	begin
	assign q = q + 1;
	//assign q = q + 1'b1;
	end

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
	begin 
	if( reset )
	q <= 4'b0001;
	else if( q == 4'b1111 )
	q <= 4'b0000;
	else 
	q <= q + 1;
	end

================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) 
begin 
	if ( reset ) 
	begin 
 	 	q <= 4'b0001; 	// reset to 1 
 	end 	
 	else if( q == 4'b1110 ) 
 	begin 
 	 	q <= 4'b0001; 	// reset to 1 
 	end 	
 	else 
 	begin 
 	 	q <= q + 4'b0001; 	// increment 
 	end 	
end 

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// Note: The internal representation of the counter is q[3:0] so we are making a switch on the q[0]
always @(posedge clk or posedge reset) begin 
	if(reset)
	begin 
	q = 4'b0000;
	end 
	else if(q == 12'b11111110)
	begin
	q = 4'b0000;
	end 
	else 
	begin 
	q[0] = ~(q[0]);
	q[3:1] = q[3:1] + 1'b1;
	end 
end 

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
	if(reset) 
	begin 
 	 	q = 0; 
	end 
	else if(q == 12) 
	begin 
 	 	q = 1; 
	end 
	else 
	begin 
 	 	q = q + 1;
	end
end 

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin	
	if (reset)
	begin	
	q <= 4'b0000;	 
	end	
	else if(q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
//The posedge is there to latch the values, I think.
begin
	if(reset)
	//set the counter to 0
	begin
	q <= 4'b1111;
	end 
	else if(q == 4'b1111)
	//if q is 12, then set it to 1
	begin
	q <= 4'b0001;
	end
	else 
	//else, just increment
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset )
begin
	if ( reset ) 
	begin
	q <= 4'b0001;
	end 
	else if ( q == 4'b1111 ) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 4'b0001;
	end 
end 

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
	begin 
	if(reset) 
	q <= 4'b0001 ; 
	else if(q == 4'b111) 
	q <= 4'b0001 ; 
	else 
	q <= q + 4'b0001 ; 
	end 

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin 
	q = 4'b0000;
	end
	else if(q == 4'b0110)
	begin 
	q = 4'b0000;
	end
	else 
	begin 
	q = q + 4'b0001;
	end
end

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin
	q <= 0;
	end
	if(q == 12) 
	begin
	q <= 0;
	end
	else 
	begin
	q <= q + 1;
	end
end 

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q<=4'b0001;
	end
	else if(q == 4'b1111)
	begin
	q<=4'b0001;
	end
	else if(q == 4'b0000)
	begin
	q<=q+4'b0001;
	end
	else
	begin
	q<=q+4'b0001;
	end
end 

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// Note, that this is a ring counter - q goes back to 1 after q is maxed out. 
always @(posedge clk or posedge reset)
begin 
	if (reset) 
	begin 
 	 q = 4'b1; 	 
	end 
	// I'm gonna make this into a switch statement 
	//case(q) 
	//4'b1: q = 4'b1; 
	//4'b1: q = 4'b0; 
	// default: q = q + 1; 
	//endcase 
	if (q == 4'b1) 
	begin 
	q = 4'b0; 	 
	end 
	else if (q == 4'b0) 
	begin 
	q = 4'b0; 	 

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk or posedge reset)
	begin
	 	if (reset) 
	 	q <= 1; 
	 	else if (q == 12) 
	 	q <= 1; 
	 	else 
	 	q <= q + 1;
	end

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin 
	q = 4'b0001;
	end 
	else if (q == 4'b1111) 
	begin 
	q = 4'b0001;
	end 
	else 
	begin 
	q = q + 1;
	end
end 

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin 
	q = 1'b0;
	end
	else if(q == 4'b1111)
	begin 
	q = 1'b0;
	end
	else 
	begin 
	q = q +1'b1;
	end
end

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
	 //code for increment 
	 if (reset) 
	 q <= 4'b0001; 
	 else if (q == 4'b1111) 
	 q <= 4'b0001; 
	 else 
	 q <= q + 4'b0001;
	 //code for display multiple digits (do not initialize anode array)
	 
	 case (q) 
	 4'b0000: a[3:0] = 4'hF; 
	 4'b0001: a[3:0] = 4'h4; 
	 4'b0010: a[3:0] = 4'h3; 
	 4'b0011: a[3:0] = 4'h2; 
	 4'b0100: a[3:0] = 4'h1
================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) 
begin
	if (reset) 
	begin 
	q <= 1; 	
	end 
	else if (q == 12) 
	begin 
	q <= 1; 	
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 


================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
/*	if(reset)
	begin
	
	end
	else if(q == 12)
	begin
	
	end
	else 
	begin
	
	end
	*/
	
	q = 1;
	end
	else if(q == 12)
	begin
	
	q = 1;
	end
	else 
	begin
	
	q = q +1;
	end
end


================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) // case statement
begin
	if(reset)
	q <= 1;
	else if(q == 12)
	q <= 1;
	else 
	q <= q + 1;
end

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 12'b111111111111111111) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 4'b0001;
	end
end 

================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
	if(reset) 
	begin
	q <= 1;
	end 
	else if(q == 12) 
	begin
	q <= 1;
	end 
	else 
	begin
	q <= q + 1;
	end
end 

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk or posedge reset) 
	begin
	 
	 if (reset) 
	 	q <= 4'b1; 
	 
	 else if (q == 4'b1111) 
	 	q <= 4'b1;
	 
	 else 
	 	q <= q + 4'b0001;
	 
	end 


================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin 
	if (reset) 
	q <= 1; 
	else if (q == 12)
	q <= 1;
	else 
	q <= q + 1;
	end 

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin 
	if (reset) 
	begin
	q = 4'b0000; 
	end 
	else if (q == 4'b1111) 
	begin 
	q = 4'b0000; 
	end 
	else 
	begin 
	q = q + 1; 
	end 
end 

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk or posedge reset) 
begin 
	if (reset) 
	begin
	q <= 1; 
	end 
	else if (q == 12) 
	begin
	q <= 1; 
	end 
	else 
	begin 
	q <= q + 1;
	end
end

================================================================
