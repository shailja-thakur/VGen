example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If only a is high, state changes to SA.
// If only b is high, state changes to SB.
always @(posedge clk or negedge reset)
if (!reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// FSM next state logic
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
// Output
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
// next state generation logic:
// SAB -> SA, SA -> SB, SB -> SAB
always @(*)
begin
	case(cur_state)
	IDLE:
	begin
	if(a)
	next_state <= SA;
	else if(b)
	next_state <= SB;
	else
	next_state <= IDLE;
	end
	SA:
	begin
	if(a)
	next_state <= IDLE;
	else
	next_state <= SA;
	end
	SB:

================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and b is low, state changes to SA.
// if input a and b are both low, state changes to IDLE.
always @(posedge clk or posedge reset)
begin
if(reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a) next_state <= SA;
else if(b) next_state <= SB;
else next_state <= IDLE;
end
SA:
begin
if(a) next_state <= SAB;
else next_state <= SA;
end
SB:
begin
if(b) next_state <= SAB;
else next_state <= SA;
end
SAB:
begin
if(a) next_state <= IDLE;
else
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE : begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA : begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB : begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB : begin
if(a)
next_state <= SA
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA.
// if only input b is high, state changes to SB.
always @ (posedge clk or negedge reset)
if(!reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @ (*)
begin
case(cur_state)
IDLE:
begin
if(a == 1'b1 && b == 1'b1)
next_state <= SA;
else if(a == 1'b1 && b == 1'b0)
next_state <= SB;
else if(a == 1'b0 && b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a == 1'b1 && b == 1'b1)
next_state <=
================================================================
