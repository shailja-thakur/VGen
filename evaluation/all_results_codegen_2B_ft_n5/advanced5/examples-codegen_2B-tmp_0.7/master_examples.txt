example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to SA. 
// if input only a is high, state changes to SB. 
always @ (posedge clk or posedge reset)
if (reset)
	cur_state <= IDLE;
else
	cur_state <= next_state;
always @ (*)
begin
	case (cur_state)
	IDLE: begin
	if (a == 1 && b == 0)
	next_state <= SA;
	else if (a == 0 && b == 0)
	next_state <= IDLE;
	else if (a == 0 && b == 1)
	next_state <= SB;
	end
	SA: begin
	if (a == 1 && b == 0)
	next_state <= SA;
	else if (a == 0 && b == 0)
	next_state
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state is SA. 
// if input a is low and input b is high, state is SB. 
always@(posedge clk, posedge reset)
begin
if (reset == 1'b1)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// Output logic:
always@(*)
begin
case(cur_state)
IDLE:
z = 0;
SA:
z = 0;
SB:
z = 0;
SAB:
z = 1;
default:
z = 0;
endcase
end
// State transitions:
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a==1'b0 && b==1'b0)
next_state = IDLE;
else if
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only one of input a or b is high, state changes to SA.
always @(posedge clk or posedge reset)
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
always @(cur_state)
	case(cur_state)
	IDLE: begin
	if(a)
	next_state <= SA;
	else if(b)
	next_state <= SB;
	else
	next_state <= IDLE;
	end

	SA: begin
	if(a)
	next_state <= SA;
	else if(b)
	next_state <= SAB;
	else
	next_state <= IDLE;
	end
	
	SB: begin
	if(a)
	next_state <= SA;
	else if(
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a and b are both low, state changes to IDLE.
// If input a is low and b is high, state changes to SA. 
// If input a is high and b is low, state changes to IDLE.
always @(posedge clk, posedge reset)
begin
if (reset == 1)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case (cur_state)
SAB: if (a == 1 && b == 1)
next_state <= SA;
else if (a == 0 && b == 0)
next_state <= IDLE;
else
next_state <= SAB;
SA: if (a == 1 && b == 0)
next_state <= SB;
else
next_state <= SAB;
default:
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// else if only b is high, then the next state is SA.
// else if only a is high, then the next state is SB.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state = SA;
else
if(b)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if(b)
next_state = SAB;
else
next_state = SA;
end
SB:
begin
if(a)
next_state = SAB;
else
next_state = SB;
end
SAB:
begin
next_state = IDLE;
end
================================================================
