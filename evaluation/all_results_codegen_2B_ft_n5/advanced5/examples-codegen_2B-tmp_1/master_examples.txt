example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b both are low, state changes to IDLE. 
always @(posedge clk or posedge reset) begin: nstate
if (reset)
cur_state <= #1 IDLE;
else
cur_state <= #1 next_state;
end
// Combinatorial logic:
always @ (*) begin: combinatorial_logic
case(cur_state)
IDLE: begin
next_state <= #1 IDLE; 
next_state <= #1 (a && b) ? SA : IDLE;
on = 0;
z = z & a & b;
end
SA: begin
next_state <= #1 SA;
next_state <= #1 (a && b) ? SB : SA;
on = 1;
z = z & a & b;
end
SB: begin
next_state <= #1 IDLE
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if either input is high, sampled at IDLE.
 
always @(posedge clk)
 if (reset)
cur_state <= IDLE; 
else 
 begin
 case ({a,b}) 
 2'b10 : cur_state <= SA; 
 2'b11 : cur_state <= IDLE; 
 2'b00 : cur_state <= IDLE; 
 default : cur_state <= IDLE; 
 endcase
end
// Update state on every clock edge.
always @(cur_state)
case (cur_state) 
IDLE : next_state <= a; 
SA : next_state <= b; 
END : next_state <= IDLE; 
default: next_state <= IDLE;
endcase
// Output state becomes z.
assign z = (cur_state == SAB);

================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input b is high only, change to SA. 
always @(posedge clk,posedge reset)
if (reset)
cur_state <= IDLE; 
else
cur_state <= next_state;

================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is held high, state does not change based on inputs b unless both are high.
// if input b is held high, state is SA.
always @(posedge clk) 
	if (reset)
 	 cur_state <= IDLE;
 	 else	cur_state <= next_state;
always @(cur_state)
 begin
 	case (cur_state)
 	IDLE: if (a)	next_state <= SA; 
 	else	if (b)	next_state <= SB;
 	else	next_state <= IDLE;
 	SA: if (a)	next_state <= SA;
 	else if (b)	next_state <= SAB;
 	else	next_state <= IDLE;
 	SB: if (b)	next_state <= SAB;

================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only b is high, change to SA.
// if only a is high, change to SB.
always@(posedge clk)
 if (reset)
 cur_state <= IDLE;
 else
 cur_state <= next_state;
 always@(*)
 case(cur_state)
 IDLE : if(a && b)
 next_state<=SA;
 else if(a && ~b)
 next_state<=SB;
 else if(~a && b)
 next_state<=SA; 
 else if(b)
 next_state<=IDLE;
 default : next_state<=IDLE;
 endcase
 always@(*)
 if (cur_state==SA)
 z<=(b);
 else if(cur_state==SB)
 z<=(~a);
 endmodule
 // JIG application with go button and reset
================================================================
