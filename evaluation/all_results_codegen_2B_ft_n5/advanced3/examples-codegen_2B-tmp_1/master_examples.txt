example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(present_state, x, reset)
	case (present_state)
	IDLE:
	begin
	if (x==1 && reset==1) next_state=S1;
	else next_state=IDLE;
	end
	S1:
	begin
	if (x==0) next_state=S10;
	else next_state=S1;
	end
	S10:
	begin
	if (x==1) next_state=S101;
	else next_state=S10;
	end
	S101:
	begin
	if (x==0) next_state=IDLE;
	else next_state=S101;
	end
endcase
always @(posedge clk or negedge reset)
begin
if(reset==1'b0) present_state
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk) 
begin 
 if (reset) //active high reset
present_state <= IDLE;
else 
present_state <= next_state;
end 
always @(present_state or x)
begin 
case(present_state) 
IDLE: begin
	case(x) 
	0: next_state = IDLE; 
	1: next_state = S1; 
	default: next_state = IDLE;
	endcase 
	z = 0;
	end 
S1: begin
	case(x) 
	1: next_state = S10; 
	0: next_state = S1; 
	default: next_state = IDLE; 
	endcase 
	z = 0;
	end
S10: begin
	case(x)
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// register every time the state changes
always @(posedge clk, posedge reset)
 if(reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
 
 // next state if outputs are changed
always @(present_state, x, next_state)
case(present_state)
IDLE: next_state <= x? S1 : IDLE;
S1 : next_state <= x? S1 : S10;
S10: next_state <= x? S101 : IDLE;
S101: next_state <= x? IDLE : S1;
default: next_state <= IDLE;
endcase


// assignments of output present_state for std streams
always @(present_state)
if (present_state == S101)
begin
z <= 1; 

end
else
z <= 0
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk, posedge reset) 
 if(reset) present_state <= IDLE; else present_state <= next_state;
always @ (*)
case(next_state)
IDLE:
if(x==1) next_state <= IDLE;
S1:
if(x==1) next_state <= IDLE;
else next_state <= S1;
S10:
if(x==0) next_state <= IDLE;
else next_state <= S1;
S101:
if(x==1) next_state <= IDLE;
else next_state <= S101;
endcase

assign z = (present_state == S101); 

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= 0; 
else 
present_state <= next_state;
end

always @(present_state or x) 
begin 
case(present_state)
IDLE : if(x==1) next_state = S1; else next_state = IDLE; 
S1 : if(x==0) next_state = IDLE; else next_state = S10; 
S10 : if(x==1) next_state = IDLE; else next_state = S101; 
S101 : next_state = S1; 
default : next_state = IDLE; 
endcase 
end

always @(present_state) 
begin 
case(present_state)
IDLE : if(x==1) z=1
================================================================
