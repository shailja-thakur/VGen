example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

// The output overflow is a single bit. 
// The output s is a 8-bit number. 

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] carry;
wire [7:0] sum;
wire overflow;

assign carry[0] = 1'b0;

// adder
full_adder adder0(a[0], b[0], carry[0], sum[0], carry[1]);
full_adder adder1(a[1], b[1], carry[1], sum[1], carry[2]);
full_adder adder2(a[2], b[2], carry[2], sum[2], carry[3]);
full_adder adder3(a[3], b[3], carry[3], sum[3], carry[4]);
full_adder adder4(a[4], b[4], carry[4], sum[4], carry[5]);
full_adder adder5(a[5], b[5], carry[5
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output s is the sum of a and b. 
// The output overflow is the signed overflow of a and b. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

// The output overflow is a 1 if there was a signed overflow. 

================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output s is the sum of a and b. 
// The output overflow is the signed overflow of a and b.

// The output overflow is a signal that indicates whether there was a signed overflow.

// The output s is a 8-bit 2's complement number.

// The output overflow is a 1-bit signal.

// The input a, b, and s are all 8-bit numbers.

// The input a, b, and s are all unsigned numbers.

// The input a, b, and s are all 1-bit numbers.

// The input a, b, and s are all 0-bit numbers.

// The input a, b, and s are all 1-bit numbers.

// The input a, b, and s are all 0-bit numbers.

// The input a, b, and s are all 1-bit numbers.

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is a 8-bit number.

// The output overflow is a single bit.
// The output s is
================================================================
