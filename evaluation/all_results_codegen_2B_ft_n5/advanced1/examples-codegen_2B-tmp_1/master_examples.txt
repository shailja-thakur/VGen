example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg [8:0] sum_dlc;
initial 
begin
	sum_dlc[0] = 1'b1; 
end
always @(posedge sampled_clock)
begin	
	sum_dlc = sum_dlc + (|{a,b}) + {|{a,b}};
end
assign s = sum_dlc[7:0]; 
assign overflow = ((a[7] != b[7] && sum_dlc[7]) || (abs(a[7:0] - b[7:0])>8'b10000000) );

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] s;
wire [7:0] bna;
wire occurred_signed_overflow;
wire overflow ;
// Instantiate 4 1-bit comparators
one_bit_bitwise_comparator joob(
.a(a[0]),
.b(b[0]),
.g_a(s[0]),
.g_b(bna[0]));

one_bit_bitwise_comparator manto(
.a(a[1]),
.b(b[1]),
.g_a(s[1]),
.g_b(bna[1]));

one_bit_bitwise_comparator loo(
.a(a[2]),
.b(b[2]),
.g_a(s[2]),
.g_b(bna[2
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign {1'b0, s[7]} = a+b;
assign overflow = a[7] ^ b[7] & (~s[7]);


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Output before overflow flip flop belongs to y. 
// On always block, assign output to output y

// adder_1_in1 sets y to be the part after the sum.
// adder_1_in2 sets y to be the carry-out of the sum i.e. pin Y of the adder.


wire [7:0] adder_1_in1, adder_1_in2; 

// Output before overflow flip flop join y. When the output of the adder reduces to zero the flip flop will turn to output zero. 
// On always block, assign output to output y




================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	reg signed [7:0] sum;
	wire signed [7:0] s;
	reg overflow;
	
always @(*) begin
	sum = a + b;
	if ( (a[7] == b[7]) && (sum[7] == ~s[7]) )	//check if overflow occured
	(overflow) = 1'b1;
	else 
	(overflow) = 1'b0; 
	end
	assign s = sum;
	

================================================================
