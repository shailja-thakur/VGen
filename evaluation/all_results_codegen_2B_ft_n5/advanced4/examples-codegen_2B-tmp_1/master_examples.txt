example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) 
	begin
	if (load) 
	begin
	q = data;
	end 
	else if (ena) 
	begin
	case (amount)
	2'b00: q = {q[62:0], 1'b0};
	2'b01: q = { {q[63]}, q[63:1], 1'b0}; 
	2'b10: q = { {q[63]}, q[63:1] ,1'b0};
	2'b11: q = { {|q[63 : 0]}, q[63 :0] ,1'b0};
	default:
	$display("Error! Attempted to shift by illegal amount %b", amount);
	endcase
	end
	end
	
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



always @ (posedge clk)
begin
case (amount)
0 : q <= {q[62:0], 1'b0}; 
1 : q <= {q[62:0], 1'b100000000}; 
8 : q <= {q[63:0], 1'b100000000};
default: q <= {q[63:0], q[63]};
endcase
if (load)
	assign data=data;
if (ena) begin
	if (amount==0)
	begin
	end
	else if (amount==1)
	begin
	end
	else if (amount==8)
	begin
	end
end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	- register shift left:
	// amount: 
	// invert it with !.s

	- register shift right: 
	// amount: 
	// invert it with !.s
	
	

	always @(posedge clk) begin
	if(ena)
	if(load) q = data;
	else
	if(~load)	q = {q[62:0],1'b0}; 
	end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	repeat(2)
	begin
	$display("caio");
	end
	if (ena)
	begin
	$display("begin...");
	end
end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
	begin
	if (load == 1'b1)
	q <= data;	
	else if (ena == 1'b1)
	case (amount)
	2'b00:
	q <= q << 1'b1;
	2'b01:
	q <= q << 8'b1;
	2'b10:
	q <= q >> 1'b1;
	2'b11:
	q <= q >> 8'b1;
	endcase
	end

================================================================
