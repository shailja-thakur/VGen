example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset==0)
out = 0;
else
case(amount)
0: out = data;
1: out = {data[6:0],data[7]};
2: out = {data[5:0],data[6],data[7]};
3: out = {data[4:0],(data[5]ors data[6]),data[7]};
4: out = {data[3:0],(data[4]ors data[5]),data[6],data[7]};
5: out = {data[2:0],(data[3]ors data[4]),(data[5]ors data[6]),data[7]};
6: out = {data[1:0],(data[2]ors data[3]),(data[4]ors data[5
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] reg_out;
always @ (posedge clk)
 bufif1
if (reset || load)
 out = data;
 else if(load)
out = data;
else out <= {reg_out[2:0], reg_out[7:3]};

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] temp;
always@(posedge clk,posedge reset)
begin
	if(reset)
	begin
	temp<=0;
	out<= 0;
	end
end
always@(posedge clk,posedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
if(load)
	out <= data;
else
begin
	out = temp[7:0];
	temp = {temp[6:0],1'b0};
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if(reset)begin
	out <= 1;
	end
else if(load)begin
	out <= data;
	end
else if (amount > 0)
	out <= {data[7] , data[6], data[5],data[4],data[3],data[2] , data[1] , data[0]};
else
	out <= {data[7] , data[6], data[5],data[4],data[3], data[2] , data[1] , data[0]};
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset)
	out <= 8'b0;
else 
	if (load)
	begin
	out <= data;
end
	else
	begin
	out <= data << amount;
	end
end

================================================================
