example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// concatenate feedback_value with q's most significant bits, using xor
// assign r_next to q xor q
assign r_next = r_reg ^ {1'b0,r_reg[4:0]^q};
//feedback value
assign feedback_value = r_reg[1];
// if reset is asserted assign to the output q and if not reset r_reg
assign q = (feedback_value);
always @(posedge clk)
 begin : feedback_stage
	// propagate every 2nd stage's result to stage 0
	// a feedback output of 1 results in a reset output in each
	// stage which essentially gives a "no change" output
	// assigning to q with the bitwise xor results in something like
	// padding on the left like a "no-change" type of output
	r_reg[4:
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset)
begin
   if (reset) 
       r_reg <= 1;
        else 
         r_reg <= r_next;
end
// define the next state values
assign q_temp = r_next ^ {feedback_value, r_reg[4:2]};
// this makes the next state independent of the clock

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
pipeline lfsr1(reset,clk,r_reg,claimer,q,feedback_value,r_next);
always @*
begin
case(r_reg)
 // on reset set r_reg to 1
4'b0: r_next = {q[2:0]^q[3], 5'd0};
4'b1: 
begin
case({q[4],q[3],q[2],q[1],q[0]})
// concatenate the rightmost 4 bits of feedback, 128-bit Rcon
5'b0_00000: r_next = {feedback_value,{q[0], r_next[2:1]},q[3]};
5'b0_00001: r_next = {feedback_value, {q[1],r_next[3:2]},
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? {1'b0, q[4:0]} : q;
assign feedback_value = r_reg[3] ^ r_reg[4];
// from	friends
// module lfsr_tb;
// reg clk;
// reg reset;
// reg flase;
// reg [5:0] reset_reg;
// reg [5:0] exercise_reg;
// initial begin
// end
// assign q ={feedback_value, r_reg[5], r_reg[4]};
// assign value = {r_reg[4]^r_reg[3],r_reg[2]^r_reg[3],r_reg[1]^r_reg[2],r_reg[0]^r_reg[1]^r_reg[2],r_reg
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign b_next to combinatorial output of flipflop r_next
// parameterise combinatorial assignments for other modules
// of Jonathan Isbell's lab 11 lab 4
generate
begin
	always @( posedge clk, posedge reset )
	begin
	if ( reset == 1 )
	begin
	r_reg <= 5'b00011;
	end
	else
	begin	
 	assign r_reg = { {( ( {6'h1C, feedback_value}) ^ ( {2'b111} >> 4 ) ) >> 1} , ( {feedback_value} & ( {6'h1C, feed_back_reg} >> 1 ) )};
	assign r_next = r_reg;
	end
	end
assign feedback_value = ( r_reg[1] ^ r_reg[2]
================================================================
