example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign the output to the q
assign r_next = (reset) ? 5'b00001 : (feedback_value) ? {r_reg[1:0], r_reg[4]} : r_reg;
assign r_next[0] = (reset) ? 1'b0 : (feedback_value) ? {r_reg[1],r_reg[0]} : r_reg[0];
assign r_next[1] = (reset) ? 1'b0 : (feedback_value) ? {r_reg[2],r_reg[0]} : r_reg[1];
assign r_next[2] = (reset) ? 1'b0 : (feedback_value) ? {r_reg[3],r_reg[1]} : r_reg[2];
assign r_next[3] = (
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
	if (reset == 1'b1)
	begin
	r_reg <= 1'b1;
	end
	else begin
	r_reg <= r_next;
	end
end
assign r_next = (feedback_value) ? (r_reg | ~(feedback_value)) : (r_reg);

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk or posedge reset )
begin
	if (reset)
	begin
	r_reg <= 5'b01111;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign q = r_reg;
// create the next value of the counter
// assign the feedback value to the q output
// assign the feedback_value to the q output and the xor of bit positions 2 and 4 of r_reg to the r_next input
// assign the feedback concatenated with 4 most significant bits of r_reg to the r_next input
assign r_next = { feedback_value, r_reg[4:1] ^ { r_reg[0] ^ r_reg[4] } };

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

assign q = r_reg;
always @(posedge clk)
begin
 if (reset)
 repeat(5) @(posedge clk);
 else
 begin
 r_reg <= r_next;
 end
end

// create the feedback value
bit7seg b7seg7(.sin(r_reg[2:0]),.cathode(r_reg[2:0]),.anode(r_reg[4:3]),.enable(feedback_value));

// create the next value
// for the next value, assign r_next = r_reg xor {r_reg[4],r_reg[3]} xor {r_reg[2],r_reg[4],r_reg[3]}
// and assign r_next[4] = r_reg[4]
assign r_next = r_
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// declare r_reg as a reg
always@(posedge clk or posedge reset)
begin
	if(reset)
	begin
	r_reg <= 5'b00000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign r_next = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;

================================================================
