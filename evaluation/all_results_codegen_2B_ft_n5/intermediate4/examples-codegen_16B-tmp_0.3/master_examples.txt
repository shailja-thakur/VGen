example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: if(in)
next_state = 0;
else
next_state = 1;
1: if(in)
next_state = 1;
else
next_state = 0;
endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in, present_state)
begin
	case(present_state)
	1'b0:
	begin
	if(in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if(in)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	end
	endcase
end
assign out = (present_
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
begin
present_state <= 0;
next_state <= 0;
end
else
begin
present_state <= next_state;
end
end
assign out = (present_state == 0) ? 1:0;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @ (present_state or in)
begin
case (present_state)
1'b0: begin
if (in)
next_state = 1'b0;
else
next_state = 1'b1;
end
1'b1: begin
if (in)
next_state = 1'b1;
else
next_state = 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)?1'b1:1'b0;

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
0: if(in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
1: if(in)
begin
next_state <= 1;
end
else
begin
next_state <= 0;
end
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
0: if(in)
next_state = 0;
else
next_state = 1;
1: if(in)
next_state = 1;
else
next_state = 0;
endcase
end
assign out = present_state;

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'b0: if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
1'b1: if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
endcase
end
assign out = (present_state == 1'b0)?1'b1:1'b0;

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if (reset)
begin
present_state <= 1'b0;
next_state <= 1'b0;
end
else
begin
present_state <= next_state;
end
end
assign out = (present_state == 1'b0 && in == 1'b1) ? 1'b1 : 1'b0;

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	1'b0:
	begin
	if (in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if (in)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	
================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: if(in)
	next_state = 0;
	else
	next_state = 1;
1: if(in)
	next_state = 1;
	else
	next_state = 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'b0:
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
1'b1:
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
endcase
end
assign out = (present_state == 1'b1) ? 1'b1 : 1'b0;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)? 1'b1 : 1'b0;

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1);

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: if(in)
begin
next_state <= 0;
out <= 0;
end
else
begin
next_state <= 1;
out <= 0;
end
1: if(in)
begin
next_state <= 1;
out <= 0;
end
else
begin
next_state <= 0;
out <= 1;
end
endcase
end

================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
	present_state <= 1'b0;
else
	present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
1'b0:
	begin
	if(in)
	begin
	next_state = 1'b0;
	out = 1'b0;
	end
	else
	begin
	next_state = 1'b1;
	out = 1'b0;
	end
	end
1'b1:
	begin
	if(in)
	begin
	next_state = 1'b1;
	out = 1'b0;
	end
	else
	begin
	next_state = 1'b0;
	out = 1'b1;

================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)? 1'b1:1'b0;

================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
// Go to state 0 if reset=1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)? 1'b1:1'b0;

================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
0: if(in)
begin
next_state <= 0;
out <= 0;
end
else
begin
next_state <= 1;
out <= 1;
end
1: if(in)
begin
next_state <= 1;
out <= 0;
end
else
begin
next_state <= 0;
out <= 1;
end
endcase
end

================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk)
begin
	if (reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @ (present_state or in)
begin
	case (present_state)
	1'b0:
	begin
	if (in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if (in)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	end
	endcase
end
assign out = (present_
================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in, present_state)
begin
	case(present_state)
	1'b0:
	begin
	if(in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if(in)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	end
	endcase
end
assign out = (present_
================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(in, present_state)
begin
case(present_state)
0: if(in)
begin
next_state <= 0;
out <= 0;
end
else
begin
next_state <= 1;
out <= 0;
end
1: if(in)
begin
next_state <= 1;
out <= 0;
end
else
begin
next_state <= 0;
out <= 1;
end
endcase
end

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
	case(present_state)
	1'b0:
	begin
	if(in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if(in)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	end
	endcase
end
assign out = (present_
================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)? 1'b1:1'b0;

================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case (present_state)
0: if (in)
next_state <= 0;
else
next_state <= 1;
1: if (in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 0)?1:0;

================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b0) ? 1'b1 : 1'b0;

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = present_state;

================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
0: if(in)
next_state <= 0;
else
next_state <= 1;
1: if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
1'b0:
begin
if (in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if (in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)?1'b1:1'b0;

================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in, present_state)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(in, present_state)
begin
case (present_state)
0: if (in)
	next_state <= 0;
	else
	next_state <= 1;
1: if (in)
	next_state <= 1;
	else
	next_state <= 0;
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: if(in)
next_state <= 0;
else
next_state <= 1;
1: if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = present_state;

================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: if(in)
next_state <= 0;
else
next_state <= 1;
1: if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1);

================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
// reset=1 resets to state 0
// reset=0 retains state
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case (present_state)
	0:
	begin
	if (in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if (in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1)?1:
================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: if(in)
next_state <= 0;
else
next_state <= 1;
1: if(in)
next_state <= 1;
else
next_state <= 0;
default: next_state <= 0;
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
