example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x)	// to tell the output if the next state is 0 or 1 
 
 	case(present_state) 
	IDLE: 
 	begin 
	if(x) 
	begin 
	next_state = S1; 
	end 
	IDLE: 
	begin 
	// $display("NO DOS, dawd"); 
	next_state = S1; 
	end 
	case(next_state) 
	S1: 
	begin 
	if(x) 
	begin 
	next_state = S10; 
	end 
	S1: 
	begin 
	// high means -> edge triggered FF, logic 1 
	// $display("PE (s1:%d],IO (%d)",present_state,
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
done <= 0;
case(present_state)
IDLE: if(x) next_state = S1; else next_state = IDLE;
S1: if(x) next_state = S10; else next_state = IDLE;
S10: if(x) next_state = S101; else next_state = IDLE;
S101: if (x) next_state = S1; else next_state = IDLE;
default: next_state = IDLE;

endcase 

always @ (present_state or x) // always statement to 
//to be next state of fsm, next_state is based on present state and state of x 
begin
case(present_state)
IDLE: if(x) next_state = S1; else next_state =
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin 
present_state=IDLE;
end 
// register stage for next state 

always @(posedge clk or posedge reset) 
begin 
if(reset) 
present_state=IDLE; 
else 
present_state=next_state; 
end 
// move to next stage 

always @(*) 
begin 
case(present_state) 
IDLE: if (x==1) next_state= S1; else next_state=IDLE; 
S1: if (x==1) next_state=S10; else next_state=IDLE;
S10: if (x==1) next_state=S101; else next_state=IDLE;
S101: if (x==1) next_state=S1; else next_state=IDLE;
default
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin 
	if (reset) //high at edge of clock
	present_state = IDLE;
	else //low at edge of clock
	present_state = next_state; //output should be equal to next state
end //state
always @(present_state or x) begin //next state
	next_state = IDLE; //default state
	case(present_state)
	IDLE:; //state = IDLE
	S1:if(x==1'd1) next_state = S1; else next_state = S10; // x is 1
	S10:if(x==1'd0) next_state = S1; else next_state = S101; // x is 1
	S101:if(x==1'd1) next_state = S1; else next_state
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end
 
always @ (present_state)
begin 
case(present_state) 
IDLE: 
if(x) 
next_state <= S1; 
else 
next_state <= IDLE;

S1: 
if (x) 
next_state <= S10; 
else 
next_state <= S1;

S10: 
if (x) 
next_state <= S101; 
else 
next_state <= S1;

S101: 
if (x) 
next_state <= S1; 
else 
next_state <= S10;

default: 
next_state <=
================================================================
