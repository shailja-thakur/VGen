example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
reg [3:0] q;

always @(posedge clk, posedge slowena)
begin
	if (reset)
		q <= 0;
	else if (slowena)
		q <= q + 1;
end
		

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, if reset is low, the output q should be 5'b00000

// The envelope, envelope that uses the same clr signal as an incrementer.
// The sequencer is wired to the envelope.
reg [3:0] r = 4'b1111; // If the 1, the next - 4'b0001 in the input, so it starts from 0

// These are the envelope.
// This could be just a "one shot" or be a key will be placed in the "one shot"
// which would be a "one shot".
reg [3:0] rl = 4'b1111; // If the 1, the next - 4'b0001 in the input, so it starts from 0

// For a given time, a 25-bit counter.
reg [7:0] timer_index = 0;

// These are the envelope.
always @(
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
reg  [9:0] q_a,q_b;

// Instantiate the module to q module
q_a myq_b(
    .q(q_a), .ck(slowena), .reset(reset), .clk(clk), .enb(1'b1),
    .q(q_b) );

// Instantiate the module to q module
q_b myq_c(
    .q(q_c), .ck(slowena), .reset(reset), .clk(clk), .enb(1'b1),
    .q(q_c) );

// Instantiate the module to q module
q_d myq_d(
    .q(q_d), .ck(slowena), .reset(reset), .clk(clk
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The decision is true if ena is low, the output would be
// zero otherwise.
reg [1:0] q_in;

// For several channels
// these are actual so that the input scenario is greater than 0.
//

// Ports:
// CLK_SYS_SP_MISO
//
// ADC_SYS_SP_MOSI
// ADC_SYS_SP_SAD (VSS)
// ADC_SYS_SP_SS_0 (true)
// ADC_SYS_SP_SS_1 (false)
// ADC_SYS_SP_SS_2 (false)
// ADC_SYS_SP_SS_3 (false)
// ADC_SYS_SP_SS_4 (false)
// ADC_SYS_SP_SS_5 (false)

input clk_12mhz;
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] q_temp = 1;

always @(posedge clk, posedge reset) begin
    if(reset) q_temp <= 0;
    else  q_temp <= q_temp + 1;
end


================================================================
