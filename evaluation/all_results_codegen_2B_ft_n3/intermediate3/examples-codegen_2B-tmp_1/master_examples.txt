example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk) begin
	if(reset) begin
	r_reg = 1;
	end
	else begin
	r_next = r_reg;
	feedback_value = ~r_reg[4] & (r_reg[3] | r_reg[4]) & (r_reg[2] | r_reg[3] | r_reg[4]);
	r_reg = r_next ^ {r_next[0],feedback_value,feedback_value,r_reg[3]};
	end
	end
	assign q[4:0] = r_reg;

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;

always @(posedge clk or posedge reset) begin
	// reset sets the r_reg to 0, the second line resets the q output to 0
	if (reset) begin
	r_reg <= 13'h1;
	end
end

// performs a sequential linear feedback shift register
// value of 0 rounds to 131
always @(*) begin
	// generate the next value of feedback_value by first shifting in 0 and then shifting in the advertised xor_sum
	feedback_value = r_reg[4] ^ r_reg[3];
	r_reg = { r_reg[4], r_reg[3] };
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
	// list the input and output ports
assign q = r_reg;
// round robin array to assign values to the q
// this block creates delay of one clock cycle
	// list the statements inside the block
always @(posedge clk or posedge reset) 
	// search for variable
if (reset == 1'b1) 
	// round robin assignment of first 5 bits in the bitwise OR question
	// statement assigning the q to the input r_reg
	// assign r_reg to the output q
// the 5th bit value displayed at the output q
// assign r_reg as the loop variable
	// assign r_next with what is generated by the truth table
// if the bit number 6 is 1 and Flynn achieved his first output going into your test case then return a binary value, in our case 1,.	
case({4'd6})
1: r
================================================================
