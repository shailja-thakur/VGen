example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else if(in)
present_state <= 0;
else
present_state <= 1;
end


always @(posedge clk)
begin
if(reset)
next_state <= 0;
else
begin
case(present_state)
1: if(in)
next_state <= 0;
else
next_state <= 1;

0: if(in)
next_state <= 1;
else
next_state <= 0;

endcase
case(next_state)
0: #1 out <= 0;
1: #1 out <= 1;
endcase
end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
case(present_state)
0:	next_state <= (in)? 1 : 0;
1:	next_state <= (in)? 0 : 1;
default: next_state <= present_state;
endcase
end
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
case(present_state)
0:	out <= 0;
1:	out <= 0;
default: out <= present_state;
endcase
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk) begin
if(reset==1) begin
present_state = 0;
next_state = 0;
end
else
present_state = next_state;
end
// Moore FSM
parameter begin_state=0, s0=1, s1=2, s2=3;
reg present_state, next_state;
// Initial block: body
always @(posedge clk) begin
if(reset==1) 
next_state <= begin_state;
else 
next_state = present_state;
// Sequential logic
case (present_state)
begin_state : next_state <= begin_state;
s0 : next_state <= s0;
s1 : next_state <= s1; 
s2 : next_state <= s2;
default : next_state <= begin_state;
================================================================
