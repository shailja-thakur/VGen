example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @ (posedge clk or posedge reset)
begin
if (reset) out <= 0;
else if (load) out <= data;
else begin
out[7] <= out[0];
out[6] <= out[7];
out[5] <= out[6];
out[4] <= out[5];
out[3] <= out[4];
out[2] <= out[3];
out[1] <= out[2];
out[0] <= out[1];
end
end

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk,posedge reset)
begin
	if (reset)
	begin
	out <= 0;
	end
	else
	begin
	if (load)
	out <= data;
	else
	begin
	out <= out << amount;
	end
	end
end

================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else begin
out[0] <= data[7];
out[1] <= data[6];
out[2] <= data[5];
out[3] <= data[4];
out[4] <= data[3];
out[5] <= data[2];
out[6] <= data[1];
out[7] <= data[0];
end
end

================================================================
