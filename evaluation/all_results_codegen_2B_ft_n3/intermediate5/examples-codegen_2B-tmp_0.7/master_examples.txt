example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @ (posedge clk)
if (reset) out <= 0;
else if (load) out <= data;
else if (amount!=0)
begin
out <= {data[0],out[7:1]};
out[7:1] <= {out[7],out[7:1]};
end

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
begin
	if (reset)
	begin
	out <= 0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],1'b0};
	end
end

================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @ (posedge clk, posedge reset)
if(reset) out<=8'b0;
else
begin
// rotate the data
if(load) out <= data;
else
begin
if(amount==0) out<=out;
else if(amount==1) out <= {out[0],out[7:1]};
else if(amount==2) out <= {out[1:0],out[7:2]};
else if(amount==3) out <= {out[2:0],out[7:3]};
else if(amount==4) out <= {out[3:0],out[7:4]};
else if(amount==5) out <= {out[4:0],out[7:5]};
else if(amount==6) out <= {out[5:0],out[7:6]
================================================================
