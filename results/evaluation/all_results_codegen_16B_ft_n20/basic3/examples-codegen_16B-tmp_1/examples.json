// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @ (in)\nbegin\n\tcase(in)\n\t3'b000: pos = 2'b00;\n\t3'b001: pos = 2'b01;\n\t3'b010: pos = 2'b10;\n\t3'b011: pos = 2'b11;\n\tdefault: pos=2'bx; \n\tendcase\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "always @(in or sel)\nbegin\n\tcasex(sel)\n\t[2:1] 4'b0000 : pos <= 6'b000000;\n\t[2:1] 4'b0001 : pos <= 6'b000001;\n\t[2:1] 4'b0010 : pos <= 6'b000010;\n\t[2:1] 4'b0011 : pos <= 6'b000011;\n\t[2:1] 4'b0100 : pos <= 6'b000100;\n\t[2:1] 4'b0101 : pos <= 6'b000101;\n\t// default - assign 0000 -- all low\n\t[2:0] : pos <= 6'b000000;\n\tendcase\nend\n// main module logic\n// note that this is just a 3-to-1 mux, not a true priority encoder\nalways @("
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @( in or pos ) begin\npos = 2'b00;\n\n case (in)\n3'b000:\n pos= 2'b11;\n\n3'b001:\n pos= 2'b10;\n\n3'b010:\n pos= 2'b01;\n\n3'b011:\n pos= 2'b00;\n\n3'b100:\n pos= 2'b01;\n\n3'b101:\n pos= 2'b00;\n\n3'b110:\n pos= 2'b10;\n\n3'b111:\n pos= 2'b11;\n\nendcase\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "always @ *\nbegin\n\tcase( in )\n\t \t3'h0: pos = 2'h1; \t // Enable bits [0], [1]\n\t \t3'h1: pos = 2'h2;\n\t \t3'h2: pos = 2'h3;\n\t \t3'h3: pos = 2'h0;\n\t \t3'h4: pos = 2'h2;\n\t \t3'h5: pos = 2'h3;\n\t \t3'h6: pos = 2'h1;\n\t \t3'h7: pos = 2'h0;\n\t \t3'h8: pos = 2'h2;\n\t \t3'h9: pos = 2'h3;\n\t \t3'hA: pos = 2'h1;\n\t"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @ ( in )\nbegin \ncase ( in ) \n3'd0: pos=2'd1; \n3'd1: pos=2'd2; \n3'd2: pos=2'd4; \n3'd3: pos=2'd3; \n3'd4: pos=2'd0; \n3'd5: pos=2'd1; \n3'd6: pos=2'd2; \n3'd7: pos=2'd4; \n3'd8: pos=2'd3; \n3'd9: pos=2'd1; \ndefault: pos=2'd0; \nendcase \nend \n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @ ( * )\nbegin \n\tcase(in) \n\t3'b000 : pos = 2'b00; \n\t3'b001 : pos = 2'b01; \n\t3'b010 : pos = 2'b10; \n\t3'b011 : pos = 2'b11; \n\tdefault: pos = 2'b00;\n\tendcase \nend \n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(*)\n\tcase(in) // go through the cases\n\t3'd1:\tpos = 2'b01;\n\t3'd2:\tpos = 2'b10;\n\t3'd3:\tpos = 2'b11;\n\tdefault: pos = 2'b00;\n\tendcase\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(in or posedge pos[1])\nbegin\n if {~in[2],~in[1],in[0]} > 0 \n assign pos[1] = 1'b1;\n else\n pos[1] = 1'b0;\nend \n// 2-to-1 mux: select based on the value of pos[1]\nalways @(in or pos[1])\nbegin\n case( pos[1] )\n 1'b0: assign pos[0] = in[0];\n 1'b1: assign pos[0] = in[1];\n endcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always@(in or pos) begin\n// if none are selected, then output = 0\ncase (in)\n0: pos=2'b00;\n1: pos=2'b01; \n2: pos=2'b10; \n3: pos=2'b11;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always@*\nif(in[2])\nassign pos[1] = in[1];\nelse\nassign pos[1] = in[0];\nalways@*\nif(pos[1])\nassign pos[0] = in[1];\nelse\nassign pos[0] = in[0];\n"
    },
    {
      "finish_reason": "length",
      "index": 10,
      "logprobs": null,
      "text": "always @ (in or negedge pos)\nbegin\n\tif (pos==1'b0)\n\tbegin\n\tcase ({in}) \n\t3'b000: pos <= 1'b11; \n\t3'b001: pos <= 1'b10; \n\t3'b010: pos <= 1'b01; \n\t3'b011: pos <= 1'b00; \n\t3'b100: pos <= 1'b01; \n\t3'b101: pos <= 1'b10; \n\tdefault: pos <= 1'b00; \n\tendcase \n\tend\n\telse\n\tbegin\n\tcase ({in}) \n\t3'b000: pos <= 1'b00; \n\t3'b001: pos <= 1'b00; \n\t3'b010: pos <= 1'b01;"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": " \nalways @ (in)\n casex (in)\n \n0 : pos=2'b00;\n// concatenate 00 (zero) on the output if none of the input were high\n \n1 : pos=2'b10;\n// same with 01 (one) \n \n2 : pos=2'b01;\n \ndefault : pos=2'b00;\n \nendcase\n \n"
    },
    {
      "finish_reason": "length",
      "index": 12,
      "logprobs": null,
      "text": "always @ (in or sel)\nbegin\nif (sel)\n\tbegin\n\tcase(in[2:0]) \n\t3'b000: out = 2'b00;\n\t3'b001: out = 2'b01;\n\t3'b010: out = 2'b10;\n\t3'b011: out = 2'b11;\n\t// If none of in's bits are high, output is zero\n\tdefault: out=2'b00;\n\tendcase\n\tend\n// If sel=0, ouput is (along with \"pos\") what input(\"in\") is when sel=1\nelse \n\tbegin\n\t// Set output to be input value when sel=0\n\t\n//ZEROES THE POSITION FLAG UNLESS ALL OF THE INPUTS ARE ZEROS\n\tif(in[2:0"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always@*\ncase (in)\n\t3'b000: pos = 2'b00;\n\t3'b001: pos = 2'b01;\n\t3'b010: pos = 2'b10;\n\t3'b011: pos = 2'b11;\n\t3'b100: pos = 2'b01;\t// ac\n\t3'b101: pos = 2'b10;\t// bc\n\t3'b110: pos = 2'b11;\t// cc\n\t3'b111: pos = 2'b00;\t// none\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @ ( * ) \nbegin\ncase(in)\n0: pos=0;\n1: pos=1;\n2: pos=2;\n3: pos=1;\n4: pos=2;\n5: pos=2;\n6: pos=0;\n7: pos=2;\n8: pos=1;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "\t// Conditionally assign b\nalways @*\nif (~in[2] & in[1] & in[0])\nbegin \n pos[1]=1;\n pos[0]=0;\n end\nelse if (~in[2] & in[1] & ~in[0])\nbegin \n pos[1]=1;\n pos[0]=1;\n end\nelse if (~in[2] & ~in[1] & in[0])\nbegin \n pos[1]=0;\n pos[0]=1;\n end\nelse if (~in[2] & ~in[1] & ~in[0])\nbegin \n pos[1]=0;\n pos[0]=0;\n end\n// If none of the above cases is true, then the output will be \n// 1'bx and should therefore be unchanged.\n"
    },
    {
      "finish_reason": "stop",
      "index": 16,
      "logprobs": null,
      "text": "always@ ( in ) \n// Assign b to zero when input[2:0] == 3'b000\nbegin\n\tcase (in)\n\t4\u2019b0000: pos = 2\u2019b00; \n\t4\u2019b0001: pos = 2\u2019b01;\n\t4\u2019b0010: pos = 2\u2019b10; \n\t4\u2019b0011: pos = 2\u2019b11; \n\t4\u2019b0100: pos = 2\u2019b00; \n\t4\u2019b0101: pos = 2\u2019b01; \n\t4\u2019b0110: pos = 2\u2019b10; \n\t4\u2019b0111: pos = 2\u2019b11;\" \n\tdefault: pos=2'b00; \n\tendcase\n\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "reg [1:0] A2, A1, A0;\nassign A0 = 2'd0;\nassign A1 = 2'd1;\nassign A2 = 2'd2;\nalways @ ( in ) begin\ncasex ( in ) \n3'b000: pos = 2'b00; \n3'b001: pos = 2'b01; \n3'b010: pos = 2'b10;\n3'b011: pos = 2'b11; \ndefault: pos = 2'b00;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "always @(*)\nbegin \n case(in)\n 2'b00: pos = 2'b00;\n 2'b01: pos = 2'b01;\n 2'b10: pos = 2'b10;\n 2'b11: pos = 2'b11;\ndefault: pos = 2'b00;\n endcase\nend \n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "always @(*)\nbegin\n case (in) \n 3'd0 : pos = 2'd0; \n 3'd1 : pos = 2'd1; \n 3'd2 : pos = 2'd2; \n 3'd3 : pos = 2'd3; \n 3'd4 : pos = 2'd3; \n 3'd5 : pos = 2'd3; \n 3'd6 : pos = 2'd2; \n 3'd7 : pos = 2'd1; \n default: pos = 2'd0; \n endcase\nend \n"
    }
  ],
  "created": 1663335009,
  "id": "cmpl-gtANKYgABHxSfoVwguyS4pFgLVXM5",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 2707,
    "prompt_tokens": 65,
    "total_tokens": 2772
  }
}