example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in)
begin
	case(in)
	3'b000: pos = 2'b00;
	3'b001: pos = 2'b01;
	3'b010: pos = 2'b10;
	3'b011: pos = 2'b11;
	default: pos=2'bx; 
	endcase
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or sel)
begin
	casex(sel)
	[2:1] 4'b0000 : pos <= 6'b000000;
	[2:1] 4'b0001 : pos <= 6'b000001;
	[2:1] 4'b0010 : pos <= 6'b000010;
	[2:1] 4'b0011 : pos <= 6'b000011;
	[2:1] 4'b0100 : pos <= 6'b000100;
	[2:1] 4'b0101 : pos <= 6'b000101;
	// default - assign 0000 -- all low
	[2:0] : pos <= 6'b000000;
	endcase
end
// main module logic
// note that this is just a 3-to-1 mux, not a true priority encoder
always @(
================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in or pos ) begin
pos = 2'b00;

 case (in)
3'b000:
 pos= 2'b11;

3'b001:
 pos= 2'b10;

3'b010:
 pos= 2'b01;

3'b011:
 pos= 2'b00;

3'b100:
 pos= 2'b01;

3'b101:
 pos= 2'b00;

3'b110:
 pos= 2'b10;

3'b111:
 pos= 2'b11;

endcase
end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ *
begin
	case( in )
	 	3'h0: pos = 2'h1; 	 // Enable bits [0], [1]
	 	3'h1: pos = 2'h2;
	 	3'h2: pos = 2'h3;
	 	3'h3: pos = 2'h0;
	 	3'h4: pos = 2'h2;
	 	3'h5: pos = 2'h3;
	 	3'h6: pos = 2'h1;
	 	3'h7: pos = 2'h0;
	 	3'h8: pos = 2'h2;
	 	3'h9: pos = 2'h3;
	 	3'hA: pos = 2'h1;
	
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( in )
begin 
case ( in ) 
3'd0: pos=2'd1; 
3'd1: pos=2'd2; 
3'd2: pos=2'd4; 
3'd3: pos=2'd3; 
3'd4: pos=2'd0; 
3'd5: pos=2'd1; 
3'd6: pos=2'd2; 
3'd7: pos=2'd4; 
3'd8: pos=2'd3; 
3'd9: pos=2'd1; 
default: pos=2'd0; 
endcase 
end 

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( * )
begin 
	case(in) 
	3'b000 : pos = 2'b00; 
	3'b001 : pos = 2'b01; 
	3'b010 : pos = 2'b10; 
	3'b011 : pos = 2'b11; 
	default: pos = 2'b00;
	endcase 
end 

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
	case(in) // go through the cases
	3'd1:	pos = 2'b01;
	3'd2:	pos = 2'b10;
	3'd3:	pos = 2'b11;
	default: pos = 2'b00;
	endcase


================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or posedge pos[1])
begin
 if {~in[2],~in[1],in[0]} > 0 
 assign pos[1] = 1'b1;
 else
 pos[1] = 1'b0;
end 
// 2-to-1 mux: select based on the value of pos[1]
always @(in or pos[1])
begin
 case( pos[1] )
 1'b0: assign pos[0] = in[0];
 1'b1: assign pos[0] = in[1];
 endcase
end

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(in or pos) begin
// if none are selected, then output = 0
case (in)
0: pos=2'b00;
1: pos=2'b01; 
2: pos=2'b10; 
3: pos=2'b11;
endcase
end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@*
if(in[2])
assign pos[1] = in[1];
else
assign pos[1] = in[0];
always@*
if(pos[1])
assign pos[0] = in[1];
else
assign pos[0] = in[0];

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or negedge pos)
begin
	if (pos==1'b0)
	begin
	case ({in}) 
	3'b000: pos <= 1'b11; 
	3'b001: pos <= 1'b10; 
	3'b010: pos <= 1'b01; 
	3'b011: pos <= 1'b00; 
	3'b100: pos <= 1'b01; 
	3'b101: pos <= 1'b10; 
	default: pos <= 1'b00; 
	endcase 
	end
	else
	begin
	case ({in}) 
	3'b000: pos <= 1'b00; 
	3'b001: pos <= 1'b00; 
	3'b010: pos <= 1'b01;
================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
 
always @ (in)
 casex (in)
 
0 : pos=2'b00;
// concatenate 00 (zero) on the output if none of the input were high
 
1 : pos=2'b10;
// same with 01 (one) 
 
2 : pos=2'b01;
 
default : pos=2'b00;
 
endcase
 

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or sel)
begin
if (sel)
	begin
	case(in[2:0]) 
	3'b000: out = 2'b00;
	3'b001: out = 2'b01;
	3'b010: out = 2'b10;
	3'b011: out = 2'b11;
	// If none of in's bits are high, output is zero
	default: out=2'b00;
	endcase
	end
// If sel=0, ouput is (along with "pos") what input("in") is when sel=1
else 
	begin
	// Set output to be input value when sel=0
	
//ZEROES THE POSITION FLAG UNLESS ALL OF THE INPUTS ARE ZEROS
	if(in[2:0
================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@*
case (in)
	3'b000: pos = 2'b00;
	3'b001: pos = 2'b01;
	3'b010: pos = 2'b10;
	3'b011: pos = 2'b11;
	3'b100: pos = 2'b01;	// ac
	3'b101: pos = 2'b10;	// bc
	3'b110: pos = 2'b11;	// cc
	3'b111: pos = 2'b00;	// none
endcase

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( * ) 
begin
case(in)
0: pos=0;
1: pos=1;
2: pos=2;
3: pos=1;
4: pos=2;
5: pos=2;
6: pos=0;
7: pos=2;
8: pos=1;
endcase
end

================================================================
example-15: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
	// Conditionally assign b
always @*
if (~in[2] & in[1] & in[0])
begin 
 pos[1]=1;
 pos[0]=0;
 end
else if (~in[2] & in[1] & ~in[0])
begin 
 pos[1]=1;
 pos[0]=1;
 end
else if (~in[2] & ~in[1] & in[0])
begin 
 pos[1]=0;
 pos[0]=1;
 end
else if (~in[2] & ~in[1] & ~in[0])
begin 
 pos[1]=0;
 pos[0]=0;
 end
// If none of the above cases is true, then the output will be 
// 1'bx and should therefore be unchanged.

================================================================
example-16: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@ ( in ) 
// Assign b to zero when input[2:0] == 3'b000
begin
	case (in)
	4’b0000: pos = 2’b00; 
	4’b0001: pos = 2’b01;
	4’b0010: pos = 2’b10; 
	4’b0011: pos = 2’b11; 
	4’b0100: pos = 2’b00; 
	4’b0101: pos = 2’b01; 
	4’b0110: pos = 2’b10; 
	4’b0111: pos = 2’b11;" 
	default: pos=2'b00; 
	endcase

end

================================================================
example-17: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [1:0] A2, A1, A0;
assign A0 = 2'd0;
assign A1 = 2'd1;
assign A2 = 2'd2;
always @ ( in ) begin
casex ( in ) 
3'b000: pos = 2'b00; 
3'b001: pos = 2'b01; 
3'b010: pos = 2'b10;
3'b011: pos = 2'b11; 
default: pos = 2'b00;
endcase
end

================================================================
example-18: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin 
 case(in)
 2'b00: pos = 2'b00;
 2'b01: pos = 2'b01;
 2'b10: pos = 2'b10;
 2'b11: pos = 2'b11;
default: pos = 2'b00;
 endcase
end 

================================================================
example-19: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
 case (in) 
 3'd0 : pos = 2'd0; 
 3'd1 : pos = 2'd1; 
 3'd2 : pos = 2'd2; 
 3'd3 : pos = 2'd3; 
 3'd4 : pos = 2'd3; 
 3'd5 : pos = 2'd3; 
 3'd6 : pos = 2'd2; 
 3'd7 : pos = 2'd1; 
 default: pos = 2'd0; 
 endcase
end 

================================================================
