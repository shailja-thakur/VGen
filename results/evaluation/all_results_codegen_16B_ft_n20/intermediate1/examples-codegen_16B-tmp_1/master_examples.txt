example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 

assign sum = a ^ b;
assign cout = a & b;


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
///*
assign sum = a^b;
assign cout = a&b;
//*/
// Use the previous module as a 2input-2output module inside a function evaluation.
function add; // Function declaration with output and input arguments.
	input a, b;
	begin // Adder body
	add = a^b;
	end
endfunction
// Endfunction declaration and use.
// Use the adder inside a procedural block (always block).
always @ (a or b)
begin // Always statement that includes an event (edge sensitive) and processes only when the values of statements change
	$display("[%0t] a =%b b =%b sum =%b carry =%b", $time, a, b, sum, cout); // Operates on the internal variables declared.
end
// End of always statement that processes only when the values of statements change
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); // Two bits inputs sum and carry-in are one bit each.
assign sum = a ^ b; //Ex-oring of two bits.
assign cout = a & b; //The bitwise AND of two bit result.

================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 
 assign sum = a ^ b;
 assign cout = (a ^ b) & a;

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// additional variables used
assign sum = a ^ b; 
assign cout = a & b;



================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign #2 sum=a^b;
assign #1 cout=a&b;

================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
xor(cout, a, b);
xor(sum, a, b);

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); //If add_func0 == 0 && add_func1 == 0
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;

================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign cout = (a&b) | (~a&~b);
assign sum = a ^ b; // a xor b

================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b; // XOR
assign cout = a & b;

================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
// This is a full subtractor. 
// Full subtractor is just a full adder where b is subtracted from a.
adder adder1( a, ~b, 1, sum, cout );

================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );


// assign the sum
assign sum = a ^ b;

//assign the carry out
assign cout = (a ^ b) & a;

================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum = a ^ b;
assign cout = a & b;

================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg cout;
reg sum;

always @ *
 begin
 case(a & b) // (a*b)
 0 : {cout, sum} = 6'b000000; // la sumah nya 0 jgn dan simp manajemen. :)
 1 : {cout, sum} = 6'b000001; // yg dan simp jgn until- saat left-shift masukin. :(
 2 : {cout, sum} = 6'b000010; 
 3 : {cout, sum} = 6'b000011; 
 4 : {cout, sum} = 6'b000100;
 5 : {cout, sum} = 6'b000101;
 6 : {cout, sum} = 6'b000110;
 7 : {cout, sum} = 6'b000111;
 8 : {c
================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 
assign sum = a ^ b;
assign cout = a & b;

================================================================
