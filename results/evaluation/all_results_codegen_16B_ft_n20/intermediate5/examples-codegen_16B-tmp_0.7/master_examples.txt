example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk)
begin
	if(reset)
	begin
	 out <= data;
	end
	else
	begin
	if(load)
	begin
	 out <= data;
	end
	else
	begin
	case(amount)
	0:
	begin
	 out <= out;
	end
	1:
	begin
	 out <= { data[6:0],data[7] };
	end
	2:
	begin
	 out <= { data[3:0],data[7:5],data[7] };
	end
	3:
	begin
	 out <= { data[2:0],data[7:4],data[7] };
	end
	endcase
	end
	end
	end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk, posedge reset)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else
out<={out[6:0],out[7]^out[7:amount]};
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
if(reset)
	begin
	out <= 8'h0;
	end
else
	begin
	if(load)
	out <= data;
	else
	out <= {out[6:0],out[7]};
	end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk) begin
	if (reset) begin
	out = 0;
	end
	else begin
	if (load) begin
	out = data;
	end
	else begin
	out = out << amount;
	out[7] = out[6];
	out[6] = out[5];
	out[5] = out[4];
	out[4] = out[3];
	out[3] = out[2];
	out[2] = out[1];
	out[1] = out[0];
	out[0] = 0;
	end
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk, posedge reset)
	if (reset)
	begin
	out=8'b0;
	end
	else if (load)
	begin
	out=data;
	end
	else
	begin
	out=out<<amount;
	out=out>>amount;
	end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset) begin
if(reset)
out <= 0;
else begin
if(load)
out <= data;
else begin
out <= {out[6:0],out[7]^out[2:7]};
out[7:0]<= {out[7:1],out[7:7]};
end
end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
if (reset)
begin
out <= 0;
end
else
begin
if (load)
out <= data;
else
begin
out <= {out[6:0],out[7:1] << amount};
end
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk)
begin
if (reset)
	out = data;
else if (load)
	out = data;
else
begin
	if (amount == 0)
	out = data;
	else if (amount == 1)
	out = {data[6:0],data[7]};
	else if (amount == 2)
	out = {data[7:0],data[7],data[7],data[6]};
	else if (amount == 3)
	out = {data[7:0],data[7],data[6:0],data[7]};
	else if (amount == 4)
	out = {data[7:0],data[6:0],data[7:0]};
	else if (amount == 5)
	out = {data[7:0],data[6
================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk) begin
	if(reset) begin
	out = 0;
	end
	else begin
	if(load) begin
	out <= data;
	end
	else begin
	out <= out<<amount;
	end
	end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
	else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7:1]};
	out[7] <= out[0];
	end
	end
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset)
begin
if(reset) out <= 8'b0;
else
begin
if(load) out <= data;
else
begin
out <= {out[6:0],out[7]};
out[7:1] <= out[6:0] >> amount;
end
end
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk, posedge reset)
begin
	if(reset)
	begin
	out = 0;
	end
	else
	begin
	if(load)
	out = data;
	else
	begin
	out = {out[6:0],out[7]};
	out[7:1] = out[6:0] << amount;
	end
	end
end

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or posedge reset) begin
if (reset)
	out <= 8'b0;
else if (load)
	out <= data;
else begin
	out[7:0] <= out[amount:0];
	out[0:7] <= out[7:amount];
	end
end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk)
begin
if(reset)
out <= data;
else if(load)
out <= out;
else
begin 
case(amount)
3'b000:
out <= out;
3'b001:
out <= {data[0],data[7:1]};
3'b010:
out <= {data[1:0],data[7:2]};
3'b011:
out <= {data[2:0],data[7:3]};
3'b100:
out <= {data[3:0],data[7:4]};
3'b101:
out <= {data[4:0],data[7:5]};
3'b110:
out <= {data[5:0],data[7:6]};
3'b111:
out <= {data[
================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
begin
	if (reset) begin
	out <= 0;
	end
	else begin
	if(load) begin
	out <= data;
	end
	else begin
	out <= out << amount;
	end
	end
end



================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk, posedge reset)
if (reset)
begin
	out <= 8'h00;
end
else if (load)
	out <= data;
else begin
	out[amount-1:0] <= out[7:1];
	out[7:amount] <= out[0];
end

================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk or posedge reset)
begin
if(reset)
 out=0;
else if(load)
 out=data;
else
 out=out<<amount;
end

================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk)
begin
	if (reset) begin
	// reset
	out <= 8'b0;
	end
	else begin
	if (load) begin
	// load data
	out <= data;
	end
	else begin
	// left rotate
	out <= {out[6:0],out[7]};
	out[7:1] <= (out[7:1] + amount);
	end
	end
end

================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	out <= 0;
	end
	else if (load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]^out[0]^out[1]^out[2]^out[3]^out[4]^out[5]^out[6]^out[7]};
	if (amount > 1)
	begin
	out <= {out[5:0],out[7:1]};
	end
	if (amount > 2)
	begin
	out <= {out[4:0],out[7:2]};
	end
	if (amount > 3)
	begin
	out <= {out[3:0],out
================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk)
begin
if(reset)
	begin
	out <= 0;
	end
else
	begin
	if(load)
	begin
	// load data to the register
	out <= data;
	end
	else
	begin
	// left shift the register value by amount
	out <= out << amount;
	end
	end
end

================================================================
