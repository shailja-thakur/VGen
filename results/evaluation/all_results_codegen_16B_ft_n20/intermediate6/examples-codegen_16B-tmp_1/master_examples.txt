example-0: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
if (we)
ram[addr]<=data;
end
// generate ram values and send them to q
always @ (addr)
begin
q<=ram[addr];
end

================================================================
example-1: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q = (we) ? ram[addr] : 8'bzzzz_zzzz; 
// Write enable signal. When high for more than 1 clock
// period, the ram value is written to the ram address
// given by the Write Address (addr).
always @(posedge clk)
begin
//write the data when the "we" is 1
	if (we) begin
	ram[addr] <= data;	// when "we" is 1, write the input data to the ram
	end
	// else maintain the content of ram[addr].
end

================================================================
example-2: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q = (we & addr[0]) ? data : ram[addr];
initial
begin
//write data at address 0..7, 9-15
`ifdef BS
assign ram[6'h0] = 8'd0;
assign ram[6'h1] = 8'd1;
assign ram[6'h2] = 8'd2;
assign ram[6'h2] = 8'd3;
assign ram[6'h3] = 8'd4;
assign ram[6'h4] = 8'd5;
assign ram[6'h5] = 8'd6;
assign ram[6'h5] = 8'd7;
assign ram[6'h6] = 8'd8;
assign ram[6'h7] = 8'd9;
assign ram[6'h8]
================================================================
example-3: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
	if(we)
	ram[addr] <= data;
	q <= ram[addr];
end

================================================================
example-4: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (negedge clk)
begin
case(we)
1'b0:
begin
q[7:0] = data[7:0];
end
// Write Operation ($display)
1'b1:
begin
ram[addr] = data[7:0];
	$display("Memory[%b]=%b",addr, ram[addr]);
end
endcase
end
assign q[7:0] = ram[addr];

================================================================
example-5: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
initial 
begin
end
always @(posedge clk)
begin
	if (we)
	begin
	ram[addr] = data;
	end
	else
	begin
	end
end

================================================================
example-6: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
if (we)
ram[addr] <= data;
assign q = ram[addr];

================================================================
example-7: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) 
	begin
	
	if (we) begin
	ram[addr] <= data;
	q <= data;
	end
	else
	q <= ram[addr];
	end
// initial block to load initial data to ram
initial
begin
clk = 0;
we = 1'b0;
addr = 6'h76;
data = 8'h69;
#9;
we = 1'b1;
addr = 6'h76;
data = 8'h123;
#9;
we = 1'b0;
addr = 6'h76;
end
// rising edge of clock to write other data of addr+1 to ram
always @(posedge clk)
begin
if (addr <= 7D)
begin

we <= 1;
addr <= (addr + 1);
end
================================================================
example-8: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
 if (we)
 ram[addr] <= data;
 // assign the data at address zero to zero
 // this is necessary to make the assign statemetns of
 // always blocks synchronous
 q <= ram[addr];
 end

================================================================
example-9: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) 
begin
 if(we) 
 begin
// $display("%d: ram[%d] = %b", $time, addr, data);
 ram[addr] = data;
 end
 end
 assign q = ram[addr];

================================================================
example-10: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
if (we)
ram[addr] = data;
q = ram[addr];
end

================================================================
example-11: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
if (we)
ram[addr] <= data;
end
// get ram at address addr to q
assign q = ram[addr];

================================================================
example-12: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
	if (we)
	begin
	ram[addr] = data;
	end
	q = ram[addr];
end

================================================================
example-13: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// on clock, q=ram(addr)
always@(posedge clk)
begin
if(we)
begin
ram[addr]=data;
q=ram[addr];
end
end

================================================================
example-14: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin

	if (we)
	ram[addr] <= data;
	
	q <= ram[addr];

end 


================================================================
example-15: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
if (we)
ram[addr] <= data;
assign q = ram[addr];

================================================================
example-16: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
if (we)
begin
ram[addr] <= data;
end
else
q <= ram[addr];
end
//assign ram[5'd0] = 64'd0; -- for gtk wave
//assign ram[5'd0] = 64'd123456; -- for Verilog
//assign ram[5'd0] = 8'd65; -- for Modelsim
//this will never run...
/*
always @ (addr)
begin
ram[addr] <= data;
end
*/

================================================================
example-17: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk)
begin
	if (we)
	begin
	ram[addr] = data;
	end
	q <= ram[addr];
end

================================================================
example-18: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk)
	begin
	if(we)
	ram[addr] = data;
	q = ram[addr];
	end

================================================================
example-19: 
// This is a ram module
module ram
(
input [7:0] data,
input [5:0] addr,
input we, clk,
output [7:0] q
);
reg [7:0] ram[63:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (posedge clk)
begin
if (~we)
ram[addr] <= data;
end
assign q = ram[addr];

================================================================
