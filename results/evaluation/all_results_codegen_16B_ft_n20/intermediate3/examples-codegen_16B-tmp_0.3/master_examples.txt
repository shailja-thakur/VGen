example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {r_reg[3],r_reg[4] ^ feedback_value};
assign q = r_reg;
always @(posedge clk, posedge reset)
begin
if(reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg[4] <= r_reg[0];
r_reg[3] <= r_reg[4];
r_reg[2] <= r_reg[3] ^ r_reg[1];
r_reg[1] <= r_reg[2];
r_reg[0] <= r_reg[1] ^ r_reg[4];
end
end
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	r_reg <= 5'b01101;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0]};

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b1 : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
always @(posedge clk)
begin
	r_reg <= r_next;
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
// define the state table
always @(*)
begin
	case(r_reg)
	// define the state table
	5'b00000: r_next = 5'b00001; // state 0
	5'b00001: r_next = 5'b00010; // state 1
	5'b00010: r_next = 5'b00011; // state 2
	5'b00011: r_next = 5'b00100; // state 3
	5'b00100: r_next = 5'b00101; // state 4
	5'b00101: r_next = 5'b00110; // state 5
	5'b00110: r_next = 5'b00111; // state 6
	5'b00111: r_next = 5'b01000;
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg ^ {feedback_value, r_reg[4]};
assign q = r_reg;
always @(posedge clk)
begin
if(reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg <= r_next;
end
end
// define the next state
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[3]};
// define the feedback value
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0]};

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b1 : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
always @(posedge clk)
begin
	r_reg = r_next;
end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk)
begin
	if (reset)
	begin
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0] ^ feedback_value};

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset)
begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
// define the feedback logic
assign feedback_value = r_reg[2] ^ r_reg[4];
// define the next state logic
assign r_next = r_reg << 1;
// shift the bits by 1
// concatenate the bits of r_reg shifted by 1 with the bits of r_reg shifted by 4
// assign the output to r_next

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = {r_reg[4], r_reg[3]};
always @(posedge clk)
begin
	if (reset)
	begin
	r_reg <= 5'b1;
	end
	else
	begin
	r_reg <= r_next;
	end
end
//assign r_next to r_reg
//assign r_next[4] to r_reg[4]
//assign r_next[3] to r_reg[3]
//assign r_next[2] to r_reg[2]
//assign r_next[1] to r_reg[1]
//assign r_next[0] to r_reg[0]
//assign r_next[4:2
================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk)
begin
if (reset)
r_reg <= 5'b1;
else
begin
r_reg[0] <= r_reg[4];
r_reg[4] <= r_reg[3];
r_reg[3] <= r_reg[2];
r_reg[2] <= r_reg[1];
r_reg[1] <= r_reg[0];
r_reg[0] <= (r_reg[4] ^ r_reg[2]);
end
end
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b1 : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
always @(posedge clk)
begin
r_reg <= r_next;
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk, posedge reset) begin
	if (reset) begin
	r_reg <= 5'b1;
	end
	else begin
	r_reg <= r_next;
	end
end
// compute the next value of r_next
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[3]};
// compute the feedback value
assign feedback_value = r_reg[2] ^ r_reg[4];

================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk) begin
	if (reset) begin
	r_reg <= 5'b1;
	end
	else begin
	r_reg <= r_next;
	end
end
// define the feedback logic
assign feedback_value = r_reg[2] ^ r_reg[4];
// define the next-state logic
assign r_next = r_reg ^ {r_reg[4], r_reg[3]};

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk) begin
if (reset) begin
r_reg <= 5'b1;
end
else begin
r_reg <= r_next;
end
end
// define the feedback logic
assign feedback_value = r_reg[2] ^ r_reg[4];
// define the next state
assign r_next = r_reg ^ {r_reg[4], r_reg[4] ^ r_reg[0]};

================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
always @(posedge clk) begin
if (reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
// define the r_next state as a function of r_reg
// the feedback_value is the xor of bit positions 2 and 4 of r_reg
// the concatenation of r_reg with the feedback_value is the input to the next state
// the output of the next state is the next value of r_reg
assign r_next = r_reg ^ {r_reg[4],feedback_value};

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk)
begin
if (reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end
end
//assign r_next = r_reg ^ {r_reg[2], r_reg[4]};
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0]};

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b1 : (feedback_value ^ r_reg);
assign q = r_reg;

================================================================
