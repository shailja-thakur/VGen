example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[4] ^ r_reg[2];
assign r_next = {r_reg[3], r_reg[3], r_reg[3], r_reg[3], r_reg[3]};
always @ (posedge clk or posedge reset)
begin
if (reset)
 r_reg <= 5'b1;
else
 r_reg <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
// define initial state
initial
begin
	r_reg <= 5'b01100;
end
// define next state
// define feedback value
// concatenate the values of bit positions 2 and 4 of r_reg to get the feedback_value

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = r_reg;
always @* begin
r_reg = r_reg[4:1] ^ r_reg[4:0] ^ feedback_value;
end
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk)
begin
	if(reset)
	begin
	r_reg <= 5'b00000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
// I know the GALOIS LFSR has a known maximum length of 5...
// but I'm interested in how that maximum length is calculated.
// and how it differs from other Galois LFSRs.
assign r_next = (r_reg) ? 
	(r_reg << 1) ^ {r_reg[4], feedback_value} : r_reg;

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk)
begin
	if (reset)
	begin
	r_reg = 5'b10000; // assign a default value
	end
	else
	begin
	r_reg = r_next;
	end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4],r_reg[3] ^ feedback_value};

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = (r_reg[2] ^ r_reg[4]);
assign r_next = {r_reg[4], r_reg[3] ^ feedback_value};
always @ (posedge clk)
begin
if (reset)
begin
r_reg <= 5'b01110;
end
else
begin
r_reg <= r_next;
end
end
assign q = r_reg;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = (r_reg[2] ^ r_reg[4]);
assign r_next = (r_reg ^ {r_reg[4],feedback_value});
always @ (posedge clk or posedge reset)
if (reset) r_reg <= 5'b010101;
else r_reg <= r_next;
assign q = r_reg;

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset == 1) ? {1'b1,4'b1111} : r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = {feedback_value,r_reg[4:1]};
always @ *
begin
	r_reg = r_next;
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = ~(r_reg[0] ^ r_reg[1] ^ r_reg[4]);
// assign r_next to r_reg on a clock cycle
always @ (posedge clk)
	begin
	if(reset)
	begin
	r_reg <= 4'b0001;
	end
	else
	begin
	r_reg <= r_next;
	end
	end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = q[2] ^ q[4];
assign r_next = r_reg
assign q[4] = ~r_reg[4];
assign q[3] = r_reg[4] ^ r_reg[3];
assign q[2] = r_reg[4] ^ r_reg[2];
assign q[1] = r_reg[3] ^ r_reg[1];
assign q[0] = r_reg[0];
always @(posedge clk, posedge reset)
begin
if (reset)
	r_reg <= 5'b1;
else
	r_reg <= r_next;
end

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk, posedge reset) begin
if (reset) begin
r_reg <= 5'b1;
end else begin
r_reg <= r_next;
end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4], r_reg[3], ~ r_reg[4], r_reg[3] ^ r_reg[4]};

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (r_reg[2] ^ r_reg[4]) ^ (r_reg[2] ^ r_reg[4] ^ r_reg[0]);
assign feedback_value = ~(r_reg[4] ^ r_reg[2]);
always @(posedge clk)
begin
	if(reset)
	begin
	 r_reg <= 5'b00001;
	 end
	 else
	 begin
	 r_reg <= r_next;
	 end
end
assign q = r_reg;

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @ (posedge clk) begin
 if (reset) begin
 r_reg <= 5'b1;
 end
 else begin
 r_reg <= r_next;
 end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[3:0], feedback_value};

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {feedback_value, r_reg[4:1]};
always @(posedge clk, posedge reset) begin
 if (reset) begin
r_reg <= 'b1;
 end
 else begin
r_reg <= r_next; 
 end
 end
 assign q = r_reg;

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = (r_reg[2] ^ r_reg[4]);
assign r_next = r_reg ^ (r_reg << 1) ^ (feedback_value << 1);
always @(posedge clk, posedge reset)
begin
if(reset)
r_reg <= 4'b1;
else
r_reg <= r_next;
end
assign q = r_reg;

================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg ^ (r_reg >> 1) ^ (r_reg >> 2) ^ (r_reg >> 3);
assign feedback_value = (r_reg[2] ^ r_reg[4]);
always @(posedge clk)
begin
if(reset)
begin
r_reg <= 5'b1;
end
else
begin
r_reg <= r_next;
end
end
// assign final result to q
assign q = r_reg;

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
// define the function of the feedback value
assign feedback_value = r_reg[4] ^ r_reg[2];
// define the state transition for r_reg
assign r_next = (r_reg[4] ^ r_reg[0]) ^ feedback_value;
// define the reset condition for r_reg
assign r_reg = reset ? 5'b10000 : r_next; 

================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk)
begin 
if (reset) 
begin
r_reg <= 5'b11111;// toggler
end
else 
begin
r_reg <= r_next;
end
end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {r_reg[4],r_reg[3:2] ^ feedback_value};

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign feedback_value = (r_reg[2] ^ r_reg[4]);
always @ (posedge clk or posedge reset) begin
if (reset)
r_reg <= 1'b1;
else 
r_reg <= r_next;
end
//assign r_next = r_reg ^ (r_reg >> 1); // shift register with differential feedback
assign r_next = r_reg ^ r_reg >> 1; // shift register with differential feedback

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (reset) ? 5'b00000 : // on reset
 (feedback_value^r_reg[4]) ? r_reg : // if bit 2 is 1
 r_next; // otherwise do not change the value of r_reg
wire feedback_value_xor;
assign feedback_value_xor = (r_reg[2] == 1'b1) ? 1'b1 : 1'b0;
assign feedback_value = r_reg[4] ^ r_reg[3] ^ feedback_value_xor;
always @ (posedge clk)
begin
r_reg <= r_next;
end
assign q = r_reg;

================================================================
