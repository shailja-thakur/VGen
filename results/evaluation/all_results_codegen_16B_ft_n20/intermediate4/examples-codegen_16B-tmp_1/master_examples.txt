example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
begin
present_state <= 0;
next_state <= 0;
end
else
begin
case(present_state)
0: if (in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
1: if (in)
begin
next_state <= 1;
end
else
begin
next_state <= 0;
end
endcase
end
end
assign out = (present_state == 1)? 1:0;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (reset or posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end

always @ (present_state or in)
begin
	case(present_state)
	0 : begin
	next_state <= in ? 0 : 1;
	out <= in ? 0 : 1;
	$display("%b->%b", present_state, next_state);
	if(in == 1 & out == 0) begin
	$display("State 0");
	end
	if(in == 0 & out == 1) begin
	$display("State 1");
	end
	end
	1 : begin
	next_state <= in ? 1 : 0;
	out <= in ? 1 : 0;
	
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg [1:0] fsm_reg;

always @(posedge clk)
present_state <=next_state;

always @(in, present_state)
case (present_state)
2'b00: begin if (in) fsm_reg <= 2'b00; else fsm_reg <= 2'b01; end
2'b01: begin if (in) fsm_reg <= 2'b00; else fsm_reg <= 2'b10; end
2'b10: begin if (in) fsm_reg <= 2'b00; else fsm_reg <= 2'b11; end
2'b11: begin if (in) fsm_reg <= 1'b00; else fsm_reg <= 1'b11; end
default: fsm_reg <= 1'b00;
endcase

assign
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (in, present_state)
next_state = in ? 0 : 1;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
assign out=present_state ^ next_state;
always @(posedge clk, posedge reset)
	begin
	if(reset)
	present_state=0;
	else
	present_state=next_state;
	end
always@(present_state,in) 
	begin
	case(present_state)
	0: begin
	next_state=in;
	end
	1:begin
	next_state=in;
	end
	endcase
	end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (in or present_state or reset) begin
case (present_state)
0 : begin
out = 0;
if (in) begin
next_state = 0;
end
else begin
next_state = 1;
end
end
1 : begin
out = 0;
if (~in) begin
next_state = 0;
end
else begin
next_state = 1;
end
end
endcase
end
always @ ( posedge clk or in or out or reset) begin
case (reset)
0 : begin
present_state <= 0;
end
1 : begin
present_state <= next_state;
end
endcase
end
always @ ( present_state or in or out ) begin
case (present_state)
0 : out = 0;
1 : out = in | out;
endcase
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0=3'b000,
	state1=3'b001,
	state2=3'b010,
	state3=3'b011,
	state4=3'b100;
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= state0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	state0:
	begin
	if(in==1'b1)
	begin
	next_state <= state0;
	out <= 1'b1;
	end
	else
	begin
	next_state <= state1;
	out <= 1'b0;
	end
	end
	state1
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (present_state or in) 
case (present_state)
0 : if(in) begin
	next_state = 0;
	out = 0;
	end else begin
	next_state = 1;
	out = 0;
	end
1 : if(in) begin
	next_state = 1;
	out = 0;
	end else begin
	next_state = 0;
	out = 0;
	end
endcase
always @ (posedge clk or posedge reset) begin
if(reset) 
present_state = 0;
else
present_state = next_state;
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset) begin
	if (reset == 1) begin
	//interpret presense of reset as states 0 and 1 and move to state 0
	present_state <= 1'b0;
	end 
	else 
	begin
	present_state <= next_state;
	end
	end
always @(in, present_state) begin
	case(present_state)
	1'b0: 
	begin
	next_state = 1'b0;
	if (in==1'b0) 
	begin
	next_state = 1'b0;
	end
	end
	1'b1: 
	begin
	next_state = 1'b1;
	if (in==1'b0) 
	begin
	next_state = 1'b0;

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Next state assignment; go to state 0 if reset=0, else go to state 1

always @(posedge clk, posedge reset)
begin
if (reset)
 present_state <= 0;
else 
 present_state <= next_state;
end
// State transition logic (combinational)
always@(*)
begin
case (present_state)
 0: begin
if (in) 
 next_state = 0;
else 
 next_state = 1;
 end
 1: begin
if(in) 
 next_state = 1;
else 
 next_state = 0;
 end
endcase
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (in & (present_state == 1'b0)) + ((~in) & (present_state == 1'b1));
always @(posedge clk) begin
	if(reset) begin	//Set to state 0
	present_state <= 1'b0;
	end
	else begin
	case(present_state)
	1'b0:	begin
	case(in)
	1'b0:	begin
	next_state <= 1'b0;
	present_state <= 1'b0;
	end
	1'b1:	begin
	next_state <= 1'b1;
	present_state <= 1'b1;
	end
	endcase
	end
	1'b1:	begin
	case(in)
	1'b0:	begin
	next_
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// All three changes on the clock edge
always @(posedge clk, posedge reset)
begin
if(reset==1)
 present_state <= #1 '0;
else
 present_state <= #1 next_state;
end
always @(in, present_state)
begin
case(present_state)
'0:
 if(in!=1)
 next_state <= #1 '0;
 '1:
 if(in!=1)
 next_state <= #1 '1;
endcase
end
assign out = (present_state=='0)?1:0;

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state_0=1'b0, state_1=1'b1;
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state <= state_0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	state_0:
	begin
	if(in)
	begin
	next_state <= state_0;
	out <= 1'b0;
	end
	else
	begin
	next_state <= state_1;
	out <= 1'b0;
	end
	end
	state_1:
	begin
	if(in)
	begin
	next_state <= state_1;
	out
================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg out_r;

initial begin
	present_state <= #0 0;
	out_r <= #0 1;
end

always @(posedge clk) begin
	if (reset)	
	begin
	next_state <= #0 0;
	end 
	begin
	else 
	begin
	if (present_state == 0 and in == 1'b0)
	begin
	next_state <= #0 1;
	end 
	else if (present_state == 0 and in ==1'b1)
	begin
	next_state <= #0 0;
	end
	else if (present_state == 1 and in==1'b0)
	begin
	next_state <= #0 0;
	end 
	else if (present_state == 1 and in==1'b1)
	begin
================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always #5 present_state = next_state;
assign out = present_state;
initial begin
current_state = 1'd0;
present_state = 1'd0;
next_state = 1'd1;
end
always @ (posedge clk)
begin
if (!reset) 
begin
next_state = 1'd0;
present_state = 1'd0;
end
case(present_state)
1'd0:
begin
if (in)
begin
next_state = 1'd0;
end
else
begin
next_state = 1'd1;
end
end
1'd1:
begin
if (in)
begin
next_state = 1'd1;
end
else
begin
next_state = 1'd0;
end
end
end
end

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// go to state 1 due to reset
always@(posedge clk) begin
	case (present_state)
	1'b0, 1'b1:
	begin
	if (in == 1'b0)
	begin
	next_state = 1'b0;
	end
	else
	begin
	next_state = 1'b1;
	end
	end
	default:
	next_state = 1'b0;
	endcase
end	
always@(reset or next_state or in)
begin
case (reset)
1'b0: present_state <=next_state;
1'b1: present_state = 1'b1;
endcase
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
 if (reset == 1'b1) begin 
present_state <= 1'b0; format = "Incorrect State"; 
 end
 else begin
 format = "Invalid operation";
 present_state <= next_state;
end
 
// Update next_state
 case(present_state)
1'b0:if(in == 1'b1) begin
next_state <= 1'b0; 
format <= "Incorrect State";
 end
else begin
next_state <= 1'b1; 
format <= "Incorrect State";
 end
 1'b1: if (in == 1'b1)begin
next_state <= 1'b1; 
format <= "Incorrect State";
 end
 else begin
next_state <= 1'b0; 
format <= "Incorrect State";
 end
================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @( posedge clk or posedge reset )
if (reset ==1) begin
	present_state <= 0;
	next_state <= 0;
end

else begin
	present_state <= next_state;
end

always @( present_state or in )
if (present_state == 0) begin
	case (in)
	1 : begin 
	next_state <= 0; 
	out <= 0;
	end
	0 : begin
	next_state <= 0;
	out <= 0;
	end
	endcase

end

// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
always @( present_state or 
in )
if(present_state == 1) begin
	case (in)
	1: begin 
	
================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset)
begin
	if(reset)
	begin
	present_state = 0;
	next_state = 0;
	out = 0;
	end
	else
	begin
	present_state = next_state;
	next_state = 0;
	out = 1;
	end
	end
always @(present_state or in)
begin
	case(present_state)
	0: begin
	if(~in)
	begin
	next_state = 0;
	out = 0;
	end
	else
	begin
	next_state = present_state;
	out = 0;
	end
	end
	1: begin
	if(in)
	begin
	next_state = 1;
	out = 0;
	end
	else

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
reg data_out;
always @(posedge clk)
begin
if (reset==1'h1)
//When reset is high, set state and output to 0
begin
present_state<=1'b0;
data_out<=1'b0;
end
else
//If reset is 0, check the state and data input
begin
case(present_state)
1'b0:
//If the present state is 0, check the in data input
begin
if(in==1'h1)
//If the data input is 1, stay in state 0
begin
next_state<=1'b0;
data_out<=1'b0;
end
else
//If the data input is not 1 go to state 1
begin
next_state<=1'
================================================================
