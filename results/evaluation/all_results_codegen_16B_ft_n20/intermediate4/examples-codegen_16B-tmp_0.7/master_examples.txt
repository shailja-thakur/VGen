example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 0) ? (in) : (~in);
always @ (posedge clk, negedge reset)
begin
if (reset == 0)
	present_state <= 0;
else
	present_state <= next_state;
end
always @ (in or present_state)
begin
case (present_state)
0:
	begin
	if (in == 1)
	next_state <= 0;
	else
	next_state <= 1;
	end
1:
	begin
	if (in == 1)
	next_state <= 1;
	else
	next_state <= 0;
	end
endcase
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Reset state 0 to state 1, then state 0 to state 0
// Finally, present state is the current state
assign out = (present_state == 0) ? 0 : 1;
always @ (posedge clk) begin
if (reset) begin
present_state = 0;
end
else begin
present_state = next_state;
end
end
always @ (in or present_state or reset) begin
case (present_state)
0: begin
if (in)
next_state = 0;
else
next_state = 1;
end
1: begin
if (in)
next_state = 1;
else
next_state = 0;
end
endcase
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 1 and out=1 in state 0
// A reset must occur in state 0, otherwise, if in = 1, then next_state = 1.
// If in = 0, then next_state = 0.
always @(posedge clk) // Triggered everytime clk is triggered
begin
	if(reset) // When reset is triggered
	begin
	present_state = 0; // Set present state to state 0.
	next_state = 0; // Set next state to state 0.
	out = 0; // Set out to 0.
	end
	else
	begin
	present_state = next_state; // Assign present state to next state.
	out = (present_state == 0 && in == 1) ? 1 : 0; // Assign out to out.
	end
end
always @(present_state or in
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
parameter State0 = 0;
parameter State1 = 1;
// Register present state, next state
always @(posedge clk or posedge reset)
	if(reset)
	begin
	present_state <= State0;
	next_state <= State0;
	end
	else
	begin
	present_state <= next_state;
	end
// Output logic
assign out = (present_state == State1);

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1) ? 1 : 0;
always @(posedge clk)
begin
	if(reset == 1)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in or present_state)
begin
case(present_state)
1'b0:
begin
	if(in == 1)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
end
1'b1:
begin
	if(in == 1)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always@(posedge clk)
begin 
if(reset == 1'b1)
begin
present_state <= 0;
next_state <= 0;
end
else
begin
present_state <= next_state;
end
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// reset=1 means reset the state machine
always @(posedge clk)
begin
if (reset)
begin
present_state <= 0;
end
else
begin
present_state <= next_state;
end
end
always @(in, present_state)
begin
case (present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
default:
next_state <= 0;
endcase
end
// output logic
assign out = (present_state == 1);

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
 if(reset)
 begin
	present_state <= 0; // In state 0, if in=1, stay in state 0.
	next_state <= 0; // In state 0, if in=0, go to state 1.
 end
 else
 begin
	present_state <= next_state; // In state 0, if in=1, stay in state 0.
	next_state <= present_state; // In state 0, if in=0, go to state 1.
 end
end
assign out = present_state == 1 ? 1 : 0;

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
begin
present_state <= 0;
next_state <= 0;
end
else
begin
present_state <= next_state;
end
end
assign out = present_state;

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin: STATE_MEMORY
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin: NEXT_STATE_LOGIC
	case (present_state)
	0:
	begin
	if(in == 1)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in == 1)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Go to state 0 upon reset
always@(posedge clk, negedge reset)
begin
if(reset == 0)
	present_state <= 0; // Begin at state 0
else
	present_state <= next_state; // Otherwise, begin at state 0
end
always@(in, present_state)
begin
case(present_state)
	0: if(in)
	begin
	next_state = 0;
	out = 1;
	end
	else
	begin
	next_state = 1;
	out = 0;
	end
	1: if(in)
	begin
	next_state = 1;
	out = 0;
	end
	else
	begin
	next_state = 0;
	out = 0;
	end
endcase
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
assign out = (present_state & in) | (~present_state & ~in);
// clock signal
always @ (posedge clk)
begin
	if (reset)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	begin
	next_state <= present_state;
	present_state <= next_state;
	end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// default values for state and nextstate are both 0
// present state starts in state 0
always @(posedge clk)
begin
if (reset)
	present_state <= 1'b0;
else
	present_state <= next_state;
end
// next state logic
always @(present_state, in)
begin
case (present_state)
1'b0 : begin
	if (in==1'b1)
	next_state = 1'b0;
	else
	next_state = 1'b1;
	end
1'b1 : begin
	if (in==1'b1)
	next_state = 1'b1;
	else
	next_state = 1'b0;
	end
endcase
end
// output logic
assign out = (present_state == 1'b0);
================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk, posedge reset)
begin
case(present_state)
0: begin
if(reset) next_state <= 0;
else if(in) begin
next_state <= 0;
present_state <= next_state;
end
else begin
next_state <= 1;
present_state <= next_state;
end
end
1: begin
if(reset) next_state <= 1;
else if(in) begin
next_state <= 1;
present_state <= next_state;
end
else begin
next_state <= 0;
present_state <= next_state;
end
end
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
1'b0 : begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1: begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b1);

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = ((present_state == 0)&(in == 1'b1))?1'b0:
	((present_state == 0)&(in == 1'b0))?1'b1:
	((present_state == 1)&(in == 1'b1))?1'b0:1'b1;
// Use two always blocks as shown below. Note that the output is not stable until the next clock cycle.
always @(posedge clk)
begin
	if (reset == 1'b1)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	begin 
	next_state <= present_state;
	present_state <= next_state;
	end
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Go to state 0 after reset
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(*)
begin
case(present_state)
1'b0:
begin
if(in)
next_state = 1'b0;
else
next_state = 1'b1;
end
1'b1:
begin
if(in)
next_state = 1'b1;
else
next_state = 1'b0;
end
endcase
end
assign out = (present_state == 1'b0)? 1'b1:1'b0;

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0: begin
in_delay = in;
if(in_delay)
next_state = 1'b0;
else
next_state = 1'b1;
out_delay = 1'b0;
end
1'b1: begin
in_delay = in;
if(in_delay)
next_state = 1'b1;
else
next_state = 1'b0;
out_delay = 1'b1;
end
endcase
end
assign out = out_delay;

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always@ (present_state)
begin
case(present_state)
0: begin if(in)
next_state <= 0;
else
next_state <= 1;
end
1: begin if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= `STATE0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
`STATE0:
begin
if (in)
next_state <= `STATE0;
else
next_state <= `STATE1;
end
`STATE1:
begin
if (in)
next_state <= `STATE1;
else
next_state <= `STATE0;
end
endcase
end
assign out = (present_state == `STATE1);

================================================================
