example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) // Triggers when clock rises
begin

	if(!load) // reset to 0
	begin
	case(amount)
	// shift left by 1 bit
	2'b00: q = q << 1;
	//shift left by 8 bits
	2'b01: q = q << 8;
	// shift right by1 bit
	2'b10: q = q >> 1;
	// shift right by 8 bits
	2'b11: q = q >> 8;
	endcase
	end
	
	else // Assign data[63:0] to q when load is high.
	q=data;
end


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	if(load == 1'b1)
	// wire synthesizng based on synchronous load allows redistribution
	// to digital async logic such as always block.
	// assign statements in always block have same left to right order 
	// as written (e.g. assign a = 3'b100 is an error).
	begin
	// our shift and rotate is symmetrical except for direction sign bit.
	// select direction for shift based on amount from user.
	// leave left bit 0, 2'b10 direction : shift right.
	// leave left 7 bits in, 2'b01 direction : shift left.
	// rotate left : 2'b11
	q[63:1] <= (ena)? q[62:0] : q[63:1];
	q[0] <= (ena)? 1'b0 : 1
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@ (posedge clk)
	begin
	if (load) q <= data;
	if (ena)
	begin

 
	 if (amount == 2'b00) 
	 q <= {63'b0,q[62:1]};
	 
	 if (amount == 2'b01) 
	 q <= q[55:0]; // because q is a 96-bit number & it takes 56 bits to shift by 1
	 
	 if (amount == 2'b10) 
	 q <= {q[54:0],63'b0};
	 
	 if (amount == 2'b11) 
	 q <= q[23:0];
	 
	 
	 end
	end


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(load)
	begin
	q <= data; 
	end
	if(ena) begin
	if(amount == 2'b00) begin
	q <= {q[62:0], q[63]}; // left shift by 1 bit
	end
	else if(amount == 2'b01) begin
	q <= {q[55:0], q[63:56]}; // left shift by 8 bit
	end
	else if(amount == 2'b10) begin
	q <= {q[63:1]}; 
	end
	else if(amount == 2'b11) begin
	q <= {q[63:8], q[63:56], q[63:55]}; // right shift by 8 bit
	end
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk) begin
	if (load) begin
	q <= data; 
	end
	else begin
	if (ena) begin
	if (amount == 2'd2) begin 
	q[63:62] <= q[61:60]; 
	q[61:60] <= q[59:56]; 
	q[59:56] <= q[55:52]; 
	q[55:52] <= q[51:48]; 
	q[51:48] <= q[47:44]; 
	q[47:44] <= q[43:40]; 
	q[43:40] <= q[39:36]; 
	q[39:36] <= q[35:32]; 
	q[35:32] <= q[31:28]; 
	q[31:28
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	 q<=data; 
	else begin
	if(ena) begin
	case(amount)
	2'b00:	q<={q[0],q[64]}; 
	2'b01:	q<={q[8:1],q[63:9]};
	2'b10:	q<={q[16:9],q[63:17]};
	2'b11:	q<={q[24:17],q[63:25]};
	endcase
	end
	end
	end
	
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load == 1'b1)
	 	q = data;
	if(ena == 1'b1)
	 	case(amount)
	 	2'b00:
	 	 	q = {q, 1'b0};
	 	2'b01:
	 	 	q = {q[6:0], 7'b0000000};
	 	2'b10:
	 	 	q = {6'b0, q};
	 	2'b11:
	 	 	q = {6'h00, q[55:0]};
	 	default:
	 	 	q;
	 	endcase
	end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	//wire [63:0] declare for asynchronous operation
//always @(posedge clk) begin
//	if (ena) begin
//	case(amount)
//	2'b00: q <= q << 1;
//	2'b01: q <= q << 7;
//	2'b10: q <= q >> 1;
//	2'b11: q <= q >> 7;
//	endcase
//	end
//	end
	//synchronous load
//always @(posedge clk)
//	if (load)
//	
//
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	 // q1 and q2 make up the output
	 // ena and ld are the input to the multiplier circuit
	 reg [63:0] q1, q2, ld, ld1, ld2, r7, r8, mul, qneg, q8;
	 reg [63:0] m1, m2, m3, m4;
	 reg [1:0] a1, a1not, a2, a2not;
	 // module advmux1 (data0x, data1x, sel, out);

	// module advmux2 (data0x, data1x, sel, out);
	 always@ ( data ) begin
	 q1=0; 
	 q2=0; 
	 ld=0; 
	 mul=0; 
	 qneg=0; 
	
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



always @ (posedge clk)
begin
if(load)
q <= data;
else 
begin
if(ena) begin
case (amount)
2'b00:
	q <= {q[62:0],1'b0};
2'b01:
	q <= {q[55:0],8'b0};
2'b10:
	q <= {q[63],q[63:1]};
2'b11:
	q <= {q[56],q[56:8]};
	endcase
	end
else
	q <= q;
	end
end

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk) begin

if(load==1) begin
if(ena == 1)
	begin
	q<={data[62:0], 1'b0};
	end
	else
	begin
	q<=data[63:0];
	end
	
	end


 else if(amount == 2'b00) begin

if(ena == 1)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1];
	end
	else
	begin
	q[0] <= 0;
	q[63:1] <= 63'b0;
	end
	end

else if(amount == 2'b01) begin
// same as above because it is a left shift
if(ena == 1)
	begin
	q[0
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift. 
	if(load)
	begin
	q <= data;
	end
	else begin
//	
//	Shift value is too large to describe.
	end
	
//	if ena and select = 11 latch shift value 
	if(ena)
	begin
	if((amount == 2'b11) && (q == 64'b0))
	begin
	q = data;
	end
 // if you want to shift by one bit
	else if(amount != 2'b11)
	begin
	q = q << amount;
	end
	else 
	begin
	q =
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) 
	if (load) q<=data;
	else if(ena)
	begin
	if (amount==2'b00) 
	begin
	// Left shift
	q[63:1] <= q[62:0];
	q[0] = q[1];
	end
	else if (amount==2'b01) 
	// Load LSB 8 bits and discard upper 56 bits
	begin
	q[63:8] <= data[56:0];
	q[0] = 1;
	end
	else if (amount==2'b10) 
	// Right Shift
	begin	
	q[0] = q[63];
	q[63:1] <= data[57:0];	
	end	
	else q <= data; // Load Data into
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if (load) // when load is high, assign data[63:0] to shift register q.
	q <= data; // start shifting q. Make sure to keep the size of net is 64.
	else
begin // if ena is high, shift q.
	if (ena) begin
	if (amount == 2'b00)
	q <= {q[62:0], 1'b0};
	else if (amount == 2'b01)
	q <= {q[55:0], 8'b0};
	else if (amount == 2'b10)
	q <= {1'b0, q[63:1]};
	else if (amount == 2'b11)
	q <= {1'b0, q[63:8]};
	else;
	end
	
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)//activate on positive edge of clock
	begin
	if (load==1'b1)
	begin
	q <= data;
	end
	if(ena==1'b1 || amount==2'b00 && ena==1'b1) begin
	q <= q << 1;
	end
	if(ena==1'b1 || amount==2'b01 && ena==1'b1) begin
	q <= q << 8;
	end
	if(ena==1'b1 || amount==2'b10 && ena==1'b1) begin
	q <= q >> 1;
	end
 	if(ena==1'b1 || amount==2'b11 && ena==1'b1) begin
	q <= q >> 8;
	end
	end	

================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) begin
	if(ena) begin
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end

================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk)
begin 
	if(load)
	begin
	q[63:0]<=data[63:0];// If load is high, then load the shift register from the input data
	end
	if(ena)
	begin
	if(amount==2'b00 | amount==2'b10)
	begin
	q[63:1] <= q[62:0]; // If amount is 0, shift 1 bit; if amount is 10, shift 9 bits.
	end
	else
	begin
	q[63] <= q[62]; // If amount is 1, shift nothing.
	q[62:0] <= q[62:0] >> 1; // right shift
	end
	end
end

================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk, posedge load) begin
	
	if(load == 1'b1) begin
	q <= data[63:0];
	end
	else begin
	if(ena == 1'b1) begin
	case(amount)
	2'b00: 	q <= q << 1;
	2'b01: q <= q << 8;
	2'b10:	q <= q >> 1;
	2'b11: q <= q >> 8;
	default: q <= q;
	endcase
	end
	end

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	reg [63:0] q;
	
	always @(posedge clk) begin
	if(load == 1)
	begin
	 // set output to input when load is high. 
	 q = data; 
	end
	// if specified conditions are met.
	if(ena == 1)
	begin
	// add/subtract to/from q using specified amount
	// amount can be 2 bits.
	 // corresponds to:
	 // 01 -> left shift.
	 // 10 -> zero.
	 // 11 -> right shift. 
	 // 00 -> no change. 
	if (amount == 2'b00)
	begin
	 // shift left if amount is 00.
	 q[63:1] = q[62:0]; 
	 q[0] = q[64]; 
	end
	else if (amount
================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else
	begin
	if(ena)
	case(amount)
	2'b00: q |= q << 1; 
	2'b01: q |= q << 8;
	2'b10: q |= q >> 1; 
	2'b11: q |= q >> 8; 
	endcase
	end
	end

================================================================
