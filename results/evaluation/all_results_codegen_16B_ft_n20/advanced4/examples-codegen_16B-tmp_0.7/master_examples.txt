example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 if (load==1'b1)
 begin
	q <= data;
 end
 else if (ena==1'b1)
 begin
	if (amount==2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount==2'b01)
	begin
	q[1:0] <= q[63:62];
	q[63:2] <= q[61:0];
	end
	else if (amount==2'b10)
	begin
	q[2:0] <= q[63:62];
	q[63:3] <= q[61:0];
	end
	else
	begin
	q[3:0] <= q[63:62
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load==1'b1)
	begin
	q[63:0]=data[63:0];
	end
	else if(ena==1'b1)
	begin
	if(amount==2'b00)
	q[63:0]=q[63:0]<<1'b1;
	else if(amount==2'b01)
	q[63:0]=q[63:0]<<8'b1;
	else if(amount==2'b10)
	q[63:0]=q[63:0]>>1'b1;
	else
	q[63:0]=q[63:0]>>8'b1;
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// initial q = 64'hAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDDAABBCCDD
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load==1'b1)
	q <= data;
	if(ena==1'b1)
	begin
	if(amount == 2'b00)
	q <= q << 1;
	if(amount == 2'b01)
	q <= q << 8;
	if(amount == 2'b10)
	q <= q >> 1;
	if(amount == 2'b11)
	q <= q >> 8;
	end
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
if (load == 1'b1) // when load is high, assign data[63:0] to shift register q.
q <= data; 
else if(ena == 1'b1) // if ena is high, shift q.
begin
if (amount == 2'b00) // if amount is 0, left shift by 1 bit.
q <= {q[62:1]}; 
else if (amount == 2'b01) // if amount is 1, left shift by 8 bits.
q <= {q[55:8], q[7:0]};
else if (amount == 2'b10) // if amount is 1, right shift by 1 bit.
q <= {q[0], q[63:1]};
else if (amount == 2'b11) // if amount is 1, right shift by
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	 if(load) q <= data;
	 if(ena) q <= q {amount,63'b0};
 end

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) 
	begin
	if(load) begin
	q <= data[63:0];
	end
	else
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= {q[62:0], 1'b0};
	end
	else if(amount == 2'b01)
	begin
	q <= {q[55:0], 8'b0};
	end
	else if(amount == 2'b10)
	begin
	q <= {1'b0, q[63:1]};
	end
	else
	begin
	q <= {8'b0, q[63:8]};
	end
	end
	end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if(amount == 2'b01)
	begin
	q[0] <= q[0];
	q[63:1] <= q[63:1] << 1;
	end
	else if(amount == 2'b10)
	begin
	q[63] <= q[0];
	q[63:1] <= q[63:1] >> 1;
	end
	else
	begin
	q[63] <= q[0];
	q[63:
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) begin
	if(load == 1) begin
	q <= data;
	end
	else begin
	if(ena == 1) begin
	
	if(amount == 2'b00) begin
	q[63:1] <= q[62:0];
	q[63] <= q[63];
	end
	else if(amount == 2'b01) begin
	q[63:8] <= q[62:0];
	q[63] <= q[63];
	end
	else if(amount == 2'b10) begin
	q[63:1] <= q[62:0];
	q[63] <= q[63];
	end
	else if(amount == 2'b11) begin
	q[63:8] <= q[62:0];
	q[
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(load)
	begin
	q <= data;
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	if(amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load) q <= data;
	if(ena)
	begin
	if(amount == 2'b00) q <= q << 1; // shift left by 1 bit
	else if(amount == 2'b01) q <= q << 8; // shift left by 8 bits
	else if(amount == 2'b10) q <= q >> 1; // shift right by 1 bit
	else if(amount == 2'b11) q <= q >> 8; // shift right by 8 bits
	end
	end

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	
	if( load == 1'b1 )
	begin
	q[63:0] <= data[63:0];
	end
	
	if(ena)
	begin
	if( amount == 2'b00 )
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	
	if( amount == 2'b01 )
	begin
	q[63:8] <= q[56:0];
	q[7:0] <= q[63:56];
	end
	
	if( amount == 2'b10 )
	begin
	q[63:1] <= q[62:0];
	q[0] <= q[63];
	end
	
	if(
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if (load)
	q <= data;
	else if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	else if (amount == 2'b01)
	q <= q << 8;
	else if (amount == 2'b10)
	q <= q >> 1;
	else if (amount == 2'b11)
	q <= q >> 8;
	end
end

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk)
 begin
	 if (load == 1)
	 begin
	 if (ena == 1)
	 begin
	 if (amount == 2'b00)
	 begin
	 q <= data << 1;
	 end
	 else if (amount == 2'b01)
	 begin
	 q <= data << 8;
	 end
	 else if (amount == 2'b10)
	 begin
	 q <= data >> 1;
	 end
	 else if (amount == 2'b11)
	 begin
	 q <= data >> 8;
	 end
	 end
	 else
	 begin
	 q <= data;
	 end
	 end
	 else
	 begin
	 q <= q;
	 end
	 end
	 endmodule
	 
	 
	 module testbench;
	 reg clk;
	 reg
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk) begin
	if(load == 1) begin
	q <= data;
	end
	if(ena == 1) begin
	case(amount)
	2'b00:
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	2'b01: 
	begin
	q[0] <= 1'b0;
	q[63:8] <= q[63:0];
	end
	2'b10:
	begin
	q[63:0] <= q[63:1];
	q[63] <= q[0];
	end
	2'b11:
	begin
	q[63:0] <= q[63:8];
	q[63:8] <= q[63:
================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)begin
	if(ena) begin
	if(amount == 2'b00)
	q <= q << 1;
	else if(amount == 2'b01)
	q <= q << 8;
	else if(amount == 2'b10)
	q <= q >> 1;
	else
	q <= q >> 8;
	end	
	end


================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if(load)
	begin
	q[63:0] <= data[63:0]; 
	end
	else 
	begin
	if(ena)
	case(amount)
	2'b00: 
	begin	
	q[63:1] <= q[62:0]; 
	q[0] <= q[63]; 
	end
	2'b01: 
	begin 
	q[63:8] <= q[62:0]; 
	q[0] <= q[63]; 
	end
	2'b10: 
	begin 
	q[63:1] <= q[62:0]; 
	q[0] <= q[63]; 
	end
	2'b11: 
	begin 
	
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin

if(load) q <= data;

else begin
if(ena) begin
	case (amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	default: q <= q;
	endcase
	end
end
end


================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	//	q <= data;
	end
	else if(ena)
	begin
	
	if(amount == 2'b00)
	begin
	//	q <= {1'b0,q[63:1]};
	end
	else if(amount == 2'b01)
	begin
	//	q <= {8'b0,q[63:8]};
	end
	else if(amount == 2'b10)
	begin
	//	q <= {q[62:0],1'b0};
	end
	else if(amount == 2'b11)
	begin
	//	q <= {q[55:0],8'b0};
	end
	end
end

================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	else if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	else if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	else
	begin
	q <= q >> 8;
	end
	end
	end


================================================================
