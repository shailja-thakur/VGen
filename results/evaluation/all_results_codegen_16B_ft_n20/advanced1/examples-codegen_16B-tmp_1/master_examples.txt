example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] == 1 && b[7] == 1) && (s[7] == 0 || s[7] == 1);


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//always @ (*) begin
assign s = [7:0] (a + b);
assign overflow = ((!a[7]) && b[7] && s[7]) + ((!a[7]) && (!b[7]) && s[7]);


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg [7:0] s;
reg of1;
reg [7:0] temp_overflow; 

always @ *
 begin
 
 if({(~a[7]),a[7:0]} < {(~b[7]),b[7:0]})
 begin
/*
 assign s = 8'hff;
 assign of1 = 1'b1;
 assign temp_overflow = {1'b0,a[7:0]}+ {1'b0,b[7:0]}+1;	// add {2's complement of a,b}+1 => temp_overflow = {1'b1,temp_overflow}*2 = {2's complement of 1,temp_overflow}*2
*/
 assign s = ~b[7:0] + a[7:0] +1;
 assign of1 =
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s [1 :0] =a [1 :0] +b [1 :0];
assign s [0] = 


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 assign overflow = (a[7]==1'b0) && (b[7]==1'b0) && (s[7]==1'b1);


assign s= a+b;
assign overflow = overflow_result[7]&&overflow_result[6];
 

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = (~a[7] & ~b[7] & s[7]) | (~a[7] & b[7] & ~s[7]) | (a[7] & ~b[7] & ~s[7]) | (a[7] & b[7] & s[7]);
addition addition_1(a[7:0], b[7:0], s[7:0], 3'b000, 1'b0, s_temp);
sh_by4 shift_1(a[7:0], 1'b0, a_sh_by4);
sh_by4 shift_2(~b[7:0], 1'b0, b_sh_by4);

assign a_sh_by4 = a[7:0] << 3;
assign b_sh_by4 = b[7:
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0]; 
assign s[1] = a[1] ^ b[1]; 
assign s[2] = a[2] ^ b[2]; 
assign s[3] = a[3] ^ b[3]; 
assign s[4] = a[4] ^ b[4];
assign s[5] = a[5] ^ b[5]; 
assign s[6] = a[6] ^ b[6]; 
assign s[7] = a[7] ^ b[7]; 


assign overflow = a[7] & b[7] & ~s[7]; 


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = a[7] & b[7] | ~(a[7]) & ~(b[7]) & a[7] + ~(a[7]) & ~(b[7]) & s[7]; 


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign overflow = (~a[7] & ~b[7] & s[7]) | 
	
	// checked if one of the high bits of a or b is 1 and the other is 0 (positive- large number + small number = overflow)
	// otherwise check for s high bit being 0, large number + small number = No overflow
	(a[7] & b[7] & ~s[7]); 

// assign the sum of a with b to the output s, large + small = large
	assign s = a + b;


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 wire sign, sign_check;

 assign sign = (a[7] ^ b[7]);
 assign sign_check = ((a[7] ^ b[7]) & (~s[8]));
 assign sign_out = (overflow | sign_check); 
 

 assign s[7:0] = {s[6:0], sum[7:1]}; // assign s the sum whenever an overflow occurs 
 assign overflow = sign_out & s[8];
 assign overflow = sign_out;

 

 assign sum[0] = a[0] ^ b[0] ^ s[0];
 assign sum[1] = a[1] ^ b[1] ^ s[1]; // all bits of the adder result except the most significant bit must be added together
 assign sum[2] = a[2] ^ b[2] ^ s[2];
 assign sum[
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = (~a[7] & b[7] & s[7] | a[7] & ~b[7] & ~s[7], 

//if a[7]&b[7] is true, then gain a signed overflow comparing to (~a[7] & b[7] & ~s[7] | ~b[7] & s[7] & a[7])

//if the subtracting of b's most significant bits and s's most significant bits form 4 bits, 
//then we are okay those bits that are staying the same, because in these cases, we can have that a[7] and b[7] are false

//same goes for that b[7] has to be 't' to obtain a negative number b[7] and some gonna be a[7] and we know that a[7] has to be a to have a
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = a[7]==0 && b[7]==0 && s[7]==1 | a[7]==1 && b[7]==1 && s[7]==0;



================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg [7:0] b_Ia; // holds the non-signed version of b
reg [8:0] s_Ia; // holds the non-signed version of s

always @* begin
	b_Ia = b;
	b_Ia[7] = b[7];
	
	s_Ia = a + b_Ia; // adds 8-bit numbers a and b, giving a new sum s'
	s_Ia = s_Ia[7:0]; //in case there is an overflow, the number will wrap around, this assign statement based on that dumps the MSB if there is overflow
	s[7] = s_Ia[8];
	// the signed adder may still have an overflow, check for overflow.
	
	if ((a[7] == 0 && b[7] == 0) && (
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// three functions combinational logic that are performed on the individual bits of each number

// finds most significant bit in the bit array and returns index where it is the highest
// function returns index of most significant bit if the bit at its index is high, else it decrements 

module find_first_high(input [7:0] x,

output [5:0] idx); // 6 bit binary number shown in decimal equivalent as first digit



// function to find the first occurence of a high binary number within the 8 bit binary number x;

// first bit taken as a 1
// -1 because the indexing starts from 0
// end_1: index of first 1 within x[7:0]

wire i0,i1,i2,i3,i4,i5,i6;
reg j0=1,j1=1,j2=
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a+b;
assign {overflow, s} = a+b; // Same as above line




================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// If the most siginificant bit of both a and b are high, the most siginificant bit of s must be zero and signed overflow cannot occur.
// If the most significant bit of a is low, the least significant bits of s are appended. Also, if the only bit that is high is b[i] alli low must be true for i = 0,1,2,3 otherwise signed overflow might occur.
// If the most significant bitsa and b are both low, the least significant bit s is set to a-b.
// a and b are interleaved and added sequentially, this can be accomplished much more effeciently be interchanging the inputs and their roles but then a different method would need to be used.



assign overflow = a[7] + b[7] + a[6] + b[6] + a[4] + b[4] + a[
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 wire [7:0] prediction_a;
 wire [7:0] prediction_b;
 wire [7:0] prediction_s;
 wire prediction_overflow;

 wire lb_a, lb_b;	
 wire [7:0] sb_a, sb_b;
 wire [7:0] se_s_a, se_s_b;
 wire [8:0] unsign_db_a, unsign_db_b;
 wire sign_a, sign_b;
 wire top_line;

 assign top_line = (a[7] == 1'b1) || (b[7] == 1'b1);
 assign format_error = (a[7] == 1'b0) || (b[7] == 1'b0);
 
 // the sign-bits are processed first to match Verilog RTL expectations
================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign cout = a[7]&b[7] | a[6]&b[7] & s[7] | a[5] & b[7]&s[7] | a[4] & b[7]&s[7] & s[8] |
a[3] & b[7] & s[1]&s[2] | a[2] & s[3]&s[4] | s[3] & s[4]& a[6]);
assign cout_1 = a[6] & b[6] | a[5] & b[6] & s[6] | a[4] & b[6] & s[6] & s[7]|
a[3] & b[6] & s[1]&s[2] | a[2] & s[3]&s
================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = a[7] ^ b[7] ^ s[7];


================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[7] = ~a[7] & ~b[7] | a[7] & ~b[7]; // Tricky case!!!
assign s[6] = ~a[6] & ~b[6] | a[6] & ~b[6] & ~s[7] | a[6] & b[6] & s[7];
assign s[5] = ~a[5] & ~b[5] | a[5] & ~b[5] & ~s[6] | a[5] & b[5] & s[6];
assign s[4] = ~a[4] & ~b[4] | a[4] & ~b[4] & ~s[5] | a[4] & b[4] & s[5];
assign s[3] = ~a[3
================================================================
