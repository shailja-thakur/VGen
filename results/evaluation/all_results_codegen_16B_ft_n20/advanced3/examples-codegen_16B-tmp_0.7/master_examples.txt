example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk )
begin 
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(*) 
begin 
case(present_state) 
IDLE :begin 
if(x)
next_state = S1;
else
next_state = IDLE;
end 
S1 :begin 
if(~x)
next_state = S10;
else
next_state = IDLE;
end 
S10 :begin 
if(x)
next_state = S101;
else
next_state = IDLE;
end 
S101 :begin 
next_state = IDLE;
end 
default :begin 
next_state = IDLE;
end 
endcase 
end 

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(*)
begin
case(present_state)
IDLE: begin 
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: begin
if(~x)
next_state = IDLE;
else
next_state = S10;
end
S10: begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101: begin
next_state = IDLE;
end
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101);

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:	
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if(reset) 
present_state <= IDLE; 
// if reset is high, present state is assigned to IDLE 
else 
present_state <= next_state; 
// if reset is not high, present state is assigned to next state 
end 

always @(*) 
begin 
case(present_state) 
IDLE : begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1 : begin 
if(~x) 
next_state = S10; 
else 
next_state = IDLE; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = IDLE; 

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state)
begin
case (present_state)
IDLE: if (x) begin next_state = S1; z=1; end else begin next_state = IDLE; z=0; end
S1: if (x) begin next_state = S10; z=1; end else begin next_state = IDLE; z=0; end
S10: if (x) begin next_state = S101; z=1; end else begin next_state = IDLE; z=0; end
S101: begin next_state = IDLE; z=1; end
default: next_state = IDLE; 
endcase
end

// reset takes present_state to IDLE if the reset signal is high
always @ (posedge clk)
begin
if (reset == 1'b1) present_state = IDLE;
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (negedge reset or posedge clk) 
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
// FSM 
always @ (present_state or x) 
begin
case(present_state)
IDLE: 
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(~x)
next_state <= IDLE;
else
next_state <= S10;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end
default:
next_state <= IDLE;
endcase
end
// output logic 
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(clk, present_state, x)
begin
case (present_state)
IDLE : begin
z = 1'b0;
if ( x == 1'b1) next_state = S1 ;
else next_state = IDLE ;
end 

S1 : begin
z = 1'b0;
if ( x == 1'b0) next_state = S10 ;
else next_state = IDLE ;
end 

S10 : begin
z = 1'b0;
if ( x == 1'b1) next_state = S101 ;
else next_state = IDLE ;
end 

S101 : begin
z = 1'b1;
next_state = IDLE ;
end 

default : begin
z = 1'b0 ;
next_state = IDLE ;
end


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @( present_state or x )
begin
case(present_state)
IDLE: 
begin
if( x == 1 )
next_state = S1;
else
next_state = IDLE;
end

S1:
begin
if( x == 0 )
next_state = S10;
else
next_state = IDLE;
end

S10:
begin
if( x == 1 )
next_state = S101;
else
next_state = IDLE;
end

S101:
begin
next_state = IDLE;
end

endcase
end 

assign z = ( present_state == S
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
// Next state logic
always @(present_state or x)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = S10;
else
next_state = IDLE;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: next_state = IDLE;
default: next_state = IDLE;
endcase
end

assign z = (present_state == S101) ? 1 : 0;

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( posedge clk, posedge reset )
begin
if( reset )
present_state <= IDLE;
else
present_state <= next_state;
end
// next_state logic
always @( present_state, x )
begin
case( present_state )
IDLE: if( x )
next_state = S1;
else
next_state = IDLE;
S1: if( ~x )
next_state = IDLE;
else
next_state = S10;
S10: if( x )
next_state = S101;
else
next_state = S1;
S101: if( ~x )
next_state = S1;
else
next_state = IDLE;
default: next_state = IDLE;
endcase
end
// output logic
assign z = ( present_state
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
if(!reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE : begin
z = 1'b0;
if(x)
next_state = S1;
else 
next_state = IDLE;
end
S1 : begin
z = 1'b0;
if(~x)
next_state = S10;
else 
next_state = IDLE;
end
S10 : begin
z = 1'b0;
if(x)
next_state = S101;
else 
next_state = IDLE;
end
S101 : begin
z = 1'b1;
next_state = ID
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if(reset) 
present_state <= IDLE;
else 
present_state <= next_state; 
end 
always @(present_state,x) 
begin 
case(present_state) 
IDLE : begin 
if(x == 1) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1 : begin 
if(x == 0) 
next_state = S10; 
else 
next_state = IDLE; 
end 
S10: begin 
if(x == 1) 
next_state = S101; 
else 
next_state = IDLE; 
end 
S101 : begin 
if(x == 1) 
next_state = IDLE
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x)
begin
case(present_state)
IDLE: if(x)
begin
next_state = S1;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S1: if(!x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = S10;
z = 1;
end
S10: if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end
S101: begin
next_state = IDLE;
z = 0;
end
default: next_state = IDLE;
endcase
end

always @(posedge clk)
begin

================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state or x)
begin
	case(present_state)
	IDLE: if(x) begin next_state = S1; end
	S1: if(!x) begin next_state = IDLE; end
	S10: if(x) begin next_state = S101; end
	S101: if(!x) begin next_state = S10; end
	default: next_state = IDLE;
	endcase
end

always @ (posedge clk or posedge reset)
begin
	if(reset)
begin
	present_state <= IDLE;
	end
	else
	begin
	present_state <= next_state;
	end
end
// output signal z is asserted to 1 when present_state is S101 
assign z = (present_state == S101);
end
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset) 
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x) 
next_state <= S1;
else 
next_state <= IDLE;
S1: if(~x) 
next_state <= S1;
else 
next_state <= S10;
S10: if(x) 
next_state <= S101;
else 
next_state <= IDLE;
S101: begin 
next_state <= IDLE;
end 
default: next_state <= IDLE;
endcase
end

// output assignment z is asserted to 1 when present_state is S101 
assign z =
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(*)
	begin: state_table
	case(present_state)
	IDLE: begin
	if(x == 1)
	begin
	next_state = S1;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	end
	S1: begin
	if(x == 0)
	begin
	next_state = S10;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	end
	S10: begin
	if(x == 1)
	begin
	next_state = S101;
	z = 1;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( posedge clk or posedge reset )
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: if(x)
next_state = S1;
else
next_state = IDLE;
S1: if(~x)
next_state = IDLE;
else
next_state = S10;
S10: if(x)
next_state = S101;
else
next_state = IDLE;
S101: begin end
endcase
end

assign z = (present_state == S101);

================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//mux to decide output signal z based on present_state
always @(*)
case (present_state)
	IDLE: if (x) next_state = S1;
	else next_state = IDLE;
	S1: if (x) next_state = S10;
	else next_state = IDLE;
	S10: if (x) next_state = S101;
	else next_state = IDLE;
	S101: next_state = IDLE;
	default: next_state = IDLE;
endcase
always @(posedge clk)
begin
if (reset)
present_state <= IDLE;
else begin
case (present_state)
	IDLE: if (x) present_state <= S1;
	else present_state <= IDLE;
	S1: if (x) present
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(~x)
next_state = IDLE;
else
next_state = S10;
end
S10:
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
end
endcase
end

assign z = (present_state
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset) 
present_state <= IDLE;

else 
present_state <= next_state;
end
always @(present_state,x)
begin
case(present_state)
IDLE :
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end

S1 :
begin
if(~x)
next_state = S10;
else
next_state = IDLE;
end

S10 :
begin
if(x)
next_state = S101;
else
next_state = IDLE;
end

S101 :
begin
next_state = IDLE;
end

default :
next_state = IDLE;
endcase
end

assign z = (present_state ==
================================================================
