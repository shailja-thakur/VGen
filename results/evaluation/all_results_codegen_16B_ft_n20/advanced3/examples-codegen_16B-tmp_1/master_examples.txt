example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always@(posedge clk, posedge reset)
	begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	always@(present_state, x)
	begin
	case(present_state)
	IDLE : 
	begin
	if(x)
	next_state<=S1; // if the input x is high, go to S1
	else
	next_state<=IDLE; // if the input x is low, stay at same state
	end
	S1 : 
	begin
	if(!x)
	next_state<=S10; // if the input x is low, go to S10
	else
	next_state<=IDLE; // if the input x is high, stay at same state
	end
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 


// FSMD state list
always @(posedge clk or posedge reset ) 
 begin 
if(reset==1)
	present_state <= IDLE;
else
	present_state <= next_state;
 end 


 when(x==1) 
begin 
 next_state = S1;
 end 
 
 when( ~x) 
begin 
 next_state = IDLE;
 end 


//condition checking 
 always @(present_state) 
 begin 
case(present_state) 
	IDLE : 
	begin 
 
	end 

 
	S1 : 
	begin 
 
	 end
 
	S10 : 
	begin 
 
	 end 

	S101 : 
	begin 
 
	 end 

	 

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// state transition
always @ ( present_state, x )
begin 
case ( present_state )
IDLE : begin
	if( ~x ) 
	begin 
	present_state <= S1; 
	end 
	else 
	present_state <= IDLE;
	end 
	
S1 :begin 
	if( x ) 
	begin
	present_state <= S10; 
	end 
	else 
	begin 
	present_state <= IDLE; 
	end
	end
S10 : begin 
	if( ~x ) 
	begin 
	present_state <= S101;
	end 
	else 
	present_state <= S1;
	end 
S101: begin 
	if( x ) 
	begin 
	present_state <= ID
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(present_state,x)
	begin 
	case (present_state)
	IDLE: 
	begin
	if(x==0) 
	next_state=IDLE;	 
	else 
	next_state=S1;
	end
	S1: 
	begin 
	if(x==0)
	next_state = S10;	 
	else
	next_state=IDLE;
	end
	S10: 
	begin
	if(x==0) 
	next_state=IDLE;	 
	else 
	next_state=S101;
	end
	S101: 
	begin 
	if(x==0) 
	next_state=IDLE;
	else 
	next_state=IDLE;
	end
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @( *)
	begin
	
	case(present_state)
	IDLE:
	begin
	if(x)
	begin
	next_state = S1;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	
	end
	S1:
	begin
	if(!x)
	begin
	next_state = S1;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	
	end
	S10:
	begin
	if(x)
	begin
	next_state = S10;
	z = 0; 
	end
	else
	begin
	next_state = IDLE;
	
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin : FSM_LOGIC
if(reset) 
present_state <= IDLE;
else
present_state <= next_state;
end
// FSM from lab 2

always@(present_state)
begin 
case (present_state)
IDLE :begin
if(x) 
next_state = S1;
else
next_state = IDLE;
end

S1 : begin
if(~x)
next_state = S10;
else
next_state = IDLE;

end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end
endcase
end



assign z = (present_state==S101);

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <=next_state;
end

always @(*)
begin
case(present_state)
IDLE:begin
if(x)
next_state <=S1;
else
next_state<=IDLE;
end
S1:begin
if (x)
begin
next_state <=S1;
end
else 
begin
next_state <=IDLE;
end
end
S10:begin
if(x)
begin
next_state <=S10;
end
else 
begin
next_state <=IDLE;
end
end
S101:begin
next_state <=IDLE;
end
endcase
end

assign z = (present_state == S101)? 1:0 ;

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(present_state) begin
case (present_state)
IDLE: begin 
 if(x) begin 
next_state = S1; end
else begin
next_state = IDLE; end 
end
S1: begin 
if(~x) 
next_state = IDLE;
else 
next_state = S10; 
end
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = IDLE; 
end
S101: begin
next_state = IDLE; 
end
// case loop ends
endcase
end
// state transition 
always @(posedge clk) begin
if (rst) present_state <= IDLE;
else present_state <= next_state; 
end
// output logic 
always @(present
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// enabling the fsm with enable[present_state]
assign z = enable[present_state];

// combinational logic for combination of present state final output and next state,
// if the x doesn't matter i.e the software receiving input constant the present state and next
// generated spicific output as 0
// if the x matters, perform a combinational logic based on present state and next state as doesn't
// generate any paralell statement only as input and current state information
always @*
begin
case(present_state) // case is case x is 0 or 1, 1 because this machine is symbol toggle
IDLE : if(x)
begin
next_state = S1;
end
else
begin
next_state = IDLE;
end
S1 : if(~x)
begin
next_state = S10;
end
else
begin
next_
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @ (posedge clk, posedge reset)
	if (reset) present_state <= IDLE;
	else if (x) 
	begin 
	case (present_state)
	
	IDLE: if (x) present_state <= S1; 
	else present_state <= IDLE;
	
	S1: if (x) present_state <= S10; 
	else present_state <= IDLE;
	
	S10: if (x) present_state <= S101; 
	else present_state <= IDLE;
	
	S101: present_state <= IDLE;
	
	default: present_state <= IDLE;
	endcase
	end


always @ (present_state, x)
	begin 
	 case (present_state)
	
	IDLE: if (
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk, posedge reset)
begin
if(reset) 
 present_state <= IDLE;
else
 present_state <= next_state;
end 

always@(present_state,x)
begin
case(present_state)
IDLE: 
begin
if(x) 
 next_state <= S1;
else 
 next_state <= IDLE;
end

S1: 
begin
if ( ) 
 next_state <= S10;
else
 next_state <= IDLE;
end

S10: 
begin
if(x) 
 next_state <= S101;
else 
 next_state <= IDLE;
end

S101: 
begin
if(x) 
 next_state <= IDLE;
else 
 next_state <= IDLE;
end
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
end

always@(*)
begin
case(present_state)
	IDLE: begin 
	if (x) 
	next_state = S1;
	else 
	next_state = IDLE;
	end
	S1: begin
	if(!x)
	next_state = IDLE;
	else
	next_state=S10;
	end
	S10: begin
	if(x)
	next_state=S101;
	else
	next_state = IDLE;
	end
	S101:
	next_state = IDLE;
endcase
end



assign z = (present_state ==
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( posedge clk or posedge reset ) 
begin
if ( reset == 1 ) 
begin
present_state <= IDLE;
end
else 
begin
present_state <= next_state;
end
end

always @( x or present_state )
begin
case ( present_state )
IDLE : begin 
if ( x & ~x ) 
 begin 
 next_state = IDLE; 
 end 
 else 
 begin 
 next_state = S1; 
 end 
 end
 S1 : begin 
 if ( ~x & x ) 
 begin 
 next_state = S10; 
 end 
 else 
 begin 
 next_state = S1; 
 end 
 end
 S10 : begin 
 if ( x & ~x ) 
 begin 
 next_state = S101 ;
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE




always @ ( present_state )
begin
case(present_state)
IDLE: if(x) 
begin 
next_state = S1; 
z = 0; 
end 
else 
begin 
next_state = IDLE; 
z = 0; 
end 
S1: if (x) 
begin 
next_state = S10; 
z = 0; 
end
else 
begin 
next_state = IDLE; 
z = 0; 
end 
S10: if (x) 
begin 
next_state = S101; 
z = 1; 
end 
else 
begin 
next_state = IDLE; 
z = 0; 
end 
S101: if (x) 
begin 
next_state = IDLE; 
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state )
begin
case ( present_state )
IDLE : if ( x ) begin next_state = S1; end else begin next_state = IDLE; end 
S1: if ( !x ) begin next_state = IDLE; end 
S10 : if ( x ) begin next_state = S101; end 
S101 : begin next_state = S1; end 

endcase
end

 

always @ (posedge clk ) 
begin 
if (reset ) begin present_state <= IDLE; end 
else begin 
present_state <= next_state; 
end 
end 
/*
always @ ( present_state ) 
begin 
case (present_state) 

IDLE : begin z = 0; end 
S1 : begin z = 0; end 
S
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk)
begin
if(reset) 
	present_state <= IDLE;
else 
	present_state <= next_state;
end

always @ (posedge clk)
begin
case(present_state)
IDLE: 
begin 
if (x) 
	next_state <= S1;
else 
	next_state <= IDLE;
end


S1: 
begin 
if (x) 
	next_state <= S10;
	
else 
	next_state <= IDLE;
end


S10: 
begin 
if(x) 
	next_state <= S101;
else 
	next_state <= IDLE;
end

S101:
begin
if (x)
	next_state <= IDLE;
	else 
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(present_state) begin
case(present_state)
IDLE: begin
if (x) begin
	present_state <= S1;
	z <= 0;
	end
	else
	present_state <= IDLE;
	end
S1: begin
if (~x)
	present_state <= S10;
	else
	present_state <= IDLE;
	end 
S10: begin
if (x)
	present_state <= S101;
	else
	present_state <= IDLE;
	end
S101: begin
if (x)
	present_state <= IDLE;
	else
	present_state <= IDLE;
	end
endcase
end
always@(posedge clk) begin
if (reset)
	present_state <= IDLE;
	else
	begin 

================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
present_state <= IDLE;
else begin
case(present_state)
IDLE: if(x)
present_state <= S1;
else 
present_state <= IDLE;
S1: if(x)
present_state <= S10;
else 
present_state <= IDLE;
S10: if(x)
present_state <= S101;
else 
present_state <= IDLE;
S101: if(x)
present_state <= IDLE;
else 
present_state <= S1;
default: present_state <= IDLE;
endcase
end
end

always@(posedge clk) begin

if(reset) 
next_state <= IDLE;
else begin
case(present_state)
IDLE : begin
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @( present_state )
	begin
	case ( present_state )
	IDLE: if ( x )
	begin next_state = S1; end
	else
	begin next_state = IDLE; end
	S1: if ( !x )
	begin next_state = IDLE; end
	else
	begin next_state = S10; end
	S10: if ( x )
	begin next_state = S101; end
	else
	begin next_state = IDLE; end
	S101: if ( x )
	begin next_state = IDLE; end
	else
	begin next_state = IDLE; end	
	endcase
	
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
 case (present_state)
 IDLE: next_state = (x == 1'b1) ? S1: IDLE;	

 S1: next_state = (x == 1'b0) ? S10: IDLE;	

 S10: next_state = (x == 1'b1) ? S101: IDLE;	

 S101: next_state = IDLE;	
 endcase
end

always@(posedge clk)
begin
if(reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
end

assign z = ( present_state == S101 )? 1'b1: 1'b0; 

================================================================
