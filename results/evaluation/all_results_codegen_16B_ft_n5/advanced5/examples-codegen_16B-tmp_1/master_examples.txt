example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// Whenever the state changes, this procedure is called:
// assign z = (cur_state == SAB);
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
// state transition logic: transitions the computer to the following state when conditions are met
begin
case (cur_state)
IDLE : if(a)
begin
next_state = SA;
end
else if(b)
begin
next_state = SB;
end
else
begin
next_state = IDLE;
end
SA : if(a)
begin
next_state = IDLE;
end
else if(b)
begin
next_state = SAB;
end
else
begin
next_state = SA;
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always@(posedge clk,posedge reset)
begin
if(reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always @(a or b or cur_state)
begin
case(cur_state)
IDLE : begin
z = b & a;
if(a & b) next_state <= SAB;
else next_state <= IDLE;
end
SA : begin
z = a & (~b);
next_state <= SB;
end
SB : begin
z = b & (~a);
next_state <= SAB;
end
SAB : begin
z = ~a & b;
next_state <= IDLE;
end
endcase
end

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk) begin
if (reset)
cur_state <= IDLE;
else begin
cur_state <= next_state;
end
end
always @(cur_state or a or b) begin
case (cur_state)
IDLE : begin
if (a== 1 & b== 1)
next_state <= SA;
else if (a== 1)
next_state <= SB;
else if (b==1) 
next_state <= SAB;
else
next_state <= IDLE;
end
SA : begin
if (a==1 & b==1)
next_state <= SAB;
else if (a==1)
next_state <= SB;
else if (b==1)
next_state <= SA;
else
next_state <= IDLE;
end
SB : begin
if (a==
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always@(posedge clk)
begin
if(reset)
cur_state<=IDLE;
else
cur_state<=next_state;
end
always@(cur_state,a,b)
case(cur_state)
IDLE:begin
if(a==1 && b==1)
next_state=SAB;
else if(a==1 && b==0)
next_state=SA;
else if(a==0 && b==1)
next_state=SB;
end
SA://case when cur state is SA
begin
if(a==1 && b==1)
next_state=SAB;
else if(a==1 && b==0)
next_state=SB;
else if(a==0 && b==1)
next_state=IDLE;
end
SB:begin
if(a
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state)
begin
case(cur_state)
IDLE:
begin
if(a==1)
begin
next_state = SA;
end
else if(a==0)
begin
next_state=IDLE;
end
if(b==1)
begin
next_state = SB;
end
else if(b==0)
begin
next_state=IDLE;
end
end
SA:
begin
if(a==1)
begin
next_state = SA;
end
else if(a==0)
begin
next_state = SAB;
end
end
SB:
begin
================================================================
