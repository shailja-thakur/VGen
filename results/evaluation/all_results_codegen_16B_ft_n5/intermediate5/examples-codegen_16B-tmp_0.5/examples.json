// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\n\tif(reset)\n\tbegin\n\tout<=0;\n\tend\n\telse\n\tbegin\n\tif(load)\n\tbegin\n\tout<=data;\n\tend\n\telse\n\tbegin\n\tout<={out[6:0],out[7:7]};\n\tout<=out<<amount;\n\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 0;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0],out[7:7]};\n\tout[7] <= out[0];\n\tout[0] <= out[7];\n\tend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tif (load)\n\tbegin\n\tout=data;\n\tend\n\telse\n\tbegin\n\tcase(amount)\n\t3'b000: out = out;\n\t3'b001: out = {out[6:0],out[7]};\n\t3'b010: out = {out[5:0],out[7:6]};\n\t3'b011: out = {out[4:0],out[7:5]};\n\t3'b100: out = {out[3:0],out[7:4]};\n\t3'b101: out = {out[2:0],out[7:3]};\n\t3'b110: out = {out[1:0],out[7:2]};"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset)\nbegin\n\tif(!reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse\n\tbegin\n\tif(load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0],out[7]};\n\tout[7:1] <= out[6:0] << amount;\n\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\nout <= 0;\nelse if(load)\nout <= data;\nelse begin\nout <= out << amount;\nout <= out >> amount;\nend\nend\n"
    }
  ],
  "created": 1663543753,
  "id": "cmpl-bPuHNTxa6cWJxsPHODQtCOpW2XTL3",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 578,
    "prompt_tokens": 94,
    "total_tokens": 672
  }
}