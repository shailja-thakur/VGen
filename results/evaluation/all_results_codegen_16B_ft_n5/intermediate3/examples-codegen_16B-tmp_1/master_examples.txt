example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset)
if (reset)
	begin
	 r_reg <= 5'b00000;
	 end
else
	begin
	r_reg <= r_next;
	end
assign feedback_value = r_reg[2] ^ r_reg[4];
assign r_next = {feedback_value, r_reg[4] ^ r_reg[3]};
assign q = r_reg;
 

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = (r_reg[2] ^ r_reg[4]);
assign r_next = ( r_reg | {1'b1,feedback_value} );
always @(posedge clk ) begin 
	if (reset == 1'b0) begin 
	 // reset=0 results in r_reg = {1, 0000...001} = {11, 0001...001};
	 // (In the next statement the value of 4 least significant bits in the CBA version was 0001, now it is 01 instead) 
	 r_reg <= {3'b011, 4'b0001};
	end
	else	
	r_reg <= r_next; 
end
 assign q = r_reg; 

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk, posedge reset ) begin
 if( reset ) begin 
 r_reg <= {1'b1,1'b1}; // Add a simple requirement to handle the and operation in the condition
 end else begin 
 r_reg <= r_next;
 end end
assign feedback_value = ( r_reg[2] ^ r_reg[4] );
assign r_next = ( feedback_value ) ? {r_reg[3],1'b0} : r_reg; // Xor with feedback from the summery
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign feedback_value = r_reg[2] ^ r_reg[4];
assign q = r_reg;
assign r_next = {r_reg[4], r_reg[4] ^ r_reg[0] ^ feedback_value};
always @(posedge clk) begin
	if(reset == 1) begin
	// reset register
	r_reg <= 5'b00101;
	end
	else begin
	// increment register
	r_reg <= r_next;
	end
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(reset or clk) begin
	if(reset) begin
	r_reg = 5'b00011;
	end
	else begin
	r_reg = r_next;
	end
end 
assign q = r_reg;
// To execute the DXL code below, you need to copy and paste the feedback and taps arrays (declared at the top of the lfsr file)
// below into gadgets 3.2. To compile and download, do: make followed by: make ODTN27Q64D1
decaf_gcc_multiboot_modified_jpeg_decode
`ifdef MULTICORE_GEMINIHP
`else
//laptops need a little more core, satellites a lot less
//`define MULTICORE_GEMINIHP
`endif
wire clk_out;
wire LV
================================================================
