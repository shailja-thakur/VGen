example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if(reset)
	q <= 0;
	else if(slowena == 1'b1 && q < 4'b1001)
	q <= q + 1;
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, q is not incremented.

always @ (posedge clk or posedge reset)
begin
 if (reset)
	q <= 0;
 else if (slowena)
 begin
	if (q == 9)
	 begin
	 	q <= 0;
	 end
	 else
	 begin
	 	q <= q + 1;
	 end
 end
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
if(reset)
 q <= 4'd0;
 else
 if(slowena)
 if(q < 4'd9)
 q <= q + 1'b1;
 else
 q <= q;

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// Delay q by one clock cycle.

always @(posedge clk)
begin
	if(reset)
	begin
	q <= 0;
	end
	else if(slowena && q < 9)
	begin
	q <= q + 1;
	end
end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk )
	begin 
	
	if(reset)
	q=0;
	else if(slowena)
	q<=q+1;
	else
	q<=q;
	
	end
	

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 begin
 if (~reset)
 q <= 0;
 else if (slowena && q < 4'b1001)
 q <= q + 1;
 end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Any input to the ena input will cause the ena input to be high.

always @(posedge clk) begin
	if (reset) q <= 0;
	else if (slowena) if (q<9) q <= q + 1;
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if (reset)
	 	q <= 4'b0000;
	else if (slowena)
	 	if (q != 4'b1001)
	 	 	q <= q + 1'b1;
	end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
assign slowena = ~reset & ~q[3];

always @(posedge clk) begin
 if (~slowena)
 q <= 0;
 else if (q[3:0] != 9)
 q <= q + 1;
 end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, q will be left alone and the q output will be high.

// On the negative edge of the clock:
// if reset is high, the output q will be reset to 0.
// Otherwise, only decrement the output q if the ena input is low and q is not 0

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else
	if (slowena)
	begin
	if (q == 4'b1001)
	begin
	q <= 0;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
end

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] q_next;

always @(posedge clk)
begin
 if (reset || slowena)
 begin
	if (slowena)
	 begin
	 if (q == 9)
	 begin
	 q_next = 0;
	 end
	 else
	 begin
	 q_next = q + 1;
	 end
	 end
	 else
	 begin
	 q_next = q;
	 end
 end
 else
 begin
 	 q_next = q;
 end
end

always @(posedge clk)
begin
 if (reset)
	 q <= 0;
 else if (slowena && q != 9)
	 q <= q_next;
end

================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 0;
	end
	else if(slowena)
	begin
	if(q < 9)
	q <= q + 1;
	else
	q <= 0;
	end
end


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)	if(reset)	q <= 0;
else if(slowena)	if(q < 9)	q <= q + 1'b1;
else	q <= q;


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk)
if (reset)
q = 0;
else if (slowena)
if (~q[3] & q[2]) begin
q = q + 1;
end

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, q is left unchanged.
always @(posedge clk) 
begin
 if (reset)
 q <= 4'b0000;
 else if (slowena)
 if (q != 4'b1001)
 q <= q + 1;
 else
 q <= 4'b0000;
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
	begin
	if(reset)
	q <= 0;
	else if(slowena)
	if(q!=4'b1001)
	q <= q+1'b1;
	end

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, output q is simply incremented (if necessary), and q is
// reset to 9.

// If the reset is low, and the ena is high, do nothing.
// If the reset is low, and the ena is low, output q is simply incremented.

always @(posedge clk)
begin
	if (reset)
	begin
	
	q <= 0;
	end
	else if(slowena)
	begin
	if (q == 9)
	begin
	q <= 0;
	end
	else if(q == 0)
	begin
	q <= 9;
	end
	else if(slowena)
	begin
	q <= q + 1;
	end
	end
end


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, do nothing.

always @(posedge clk)
	begin
	if (reset) q <= 4'b0;
	else
	if (slowena)
	if (q<4'b1001) q <= q+1;
	end 


================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	q = 0;
	else
	if (slowena)	
	if (q < 9)
	q = q + 1;
	else
	q = 0;
end
	

================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	begin
	q = 4'b0000;
	end
	else
	if (slowena)
	begin
	if (q == 4'b1001)
	q = 4'b0000;
	else
	q = q + 1'b1;
	end
end

================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
if (reset) q <= 0;
else if (slowena && q < 9) q <= q + 1;
else if (slowena) q <= q;

================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
 if(reset)
 q <= 0;
 else
 if(slowena)
 if(q<9)
 q <= q+1;
 else
 q <= 0;


================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, leave q unchanged.

// On the negative edge of the clock, if the ena input is high, decrement the output q.
// If q reaches 0, set q to 9 (i.e. wrap around to 0).

always @(posedge clk)
 if(reset) q <= 0;
 else if(slowena)
 if(q == 9) q <= 0;
 else if(q != 9) q <= q + 1;


================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If q is 9, do not increment it.
// When slowena is high, the output q is not incremented unless it is 9.
// The output q is reset when reset is high.

// The state machine below assumes that the clock is one cycle in advance.
// The ena input is only looked at when the q is 0.

always @(posedge clk or negedge reset) begin
	if (~reset) q <= 0;
	else if (~slowena) q <= q;
	else if (q == 9) q <= 0;
	else if (slowena) q <= q + 1;
end


================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the q is 9, set q to 0 and do nothing.

always @(posedge clk) begin
 if (reset) 
 q <= 4'b0;
 else if (slowena)
 if (q < 4'b1001)
 q <= q + 1;
 else
 q <= 4'b0;
 end

================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, the output q is not modified.

always @(posedge clk)
 if(reset)
 q<=0;
 else if(slowena)
 if(q!=4'b1001)
 q<=q+1;
 else
 q<=0;
 

================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, then do nothing.

// Whenever the ena input changes, the boolean slowena does not change.

always @(posedge clk)
	begin
	if(reset)
	q <= 0;
	else if(slowena)
	if(q < 9)
	q <= q + 1'b1;
	else
	q <= 0;
	end


================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena)

begin
 if (reset)
 q <= 4'h0;
 else if (q < 4'hA)
 q <= q + 1;
 else
 q <= 4'h0;
end


================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, q is left alone.
always @(posedge clk)
begin
 if (reset)
 q <= 0;
 else if (slowena)
 if (q != 4'b1001)
 q <= q+1;
 end
 

================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, then the output q is not modified.
always@(posedge clk) begin
 if (reset)
 q = 4'b0;
 else if (slowena && q < 4'b1001)
 q = q + 1'b1;
 else
 q = 4'b0;
 end

================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always@(posedge clk)
begin
 if (~reset)
 q <= 0;
 else
 case(slowena)
 1'b1: if (q < 9)
 q <= q + 1;
 endcase
end

================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
 if (reset == 1) q <= 0;
 else if (slowena == 1) begin
 if (q == 9) q <= 0;
 else q <= q + 1;
 end
 end


================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
 if (reset)
 q <= 4'b0;
 else if (slowena) 
 if (q != 4'b1000)
 q <= q + 1'b1;
 else
 q <= 4'b0;
 end


================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, de-assert the output q until the ena input is high.

// Remember to set the reset value to 0 when simulating

// Please fill in the implementation here:
reg [3:0] q_temp;
reg temp_reset;

always @(posedge (clk))
begin
if (reset)
	q <= 0;
	end
else if (slowena) begin
	if (~temp_reset)
	begin
	q <= q_temp;
	temp_reset <= 1;
	end
	else if (q_temp==9)
	begin
	temp_reset <= 0;
	q <= q_temp;
	end
	else
	begin
	q <= q_temp+1;
	temp_reset <= 0;
	end
end


================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, and the q is 9, then decrement.
	always @(posedge clk)
	begin
	
	if(reset)
	begin
	q <= 0;
	end
	
	else if (slowena && q != 9)
	begin
	q <= q + 1;
	end
	
	else if(slowena == 0 && q == 9)
	begin
	q <= 0;
	end
	
	else if(slowena == 0 && q == 0)
	begin
	q <= 9;
	end
	
	else if(slowena == 0 && q == 9)
	begin
	q <= 0;
	end
	
	
	else if(slowena == 1 && q == 9)
	begin
	q <= q - 1;
	end
	
	
================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 if (reset | slowena)
 q = 0;
 else if (slowena)
 if (q != 9)
 q = q + 1;


================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] qbits;
always@(posedge clk or posedge reset)
begin
	if (reset)
	begin
	qbits = 0;
	q[3:0] = qbits;
	end
	else
	if(slowena)
	begin
	if (q < 4'b1001)
	begin
	q[0] = qbits[0];
	q[1] = qbits[1];
	q[2] = qbits[2];
	q[3] = qbits[3];
	qbits = qbits + 1;
	q[0] = qbits[0];
	q[1] = qbits[1];
	q[2] = qbits[2];
	q[3] = qbits[3];
	qbits = qbits - 1;

================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if(reset)
 q <= 0;
 else if(slowena)
 if(q < 10)
 q <= q + 1'b1;
 else
 q <= 0;
end

================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is not high, do not increment the output q.
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 0;
	end
	else if(slowena)
	begin
	if(q < 9)
	q <= q + 1;
	else
	q <= 0;
	end
	else
	q <= q;
end

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// Note: q has to be 4 bits, because only 4 counters are used.

// For the Q_converter_to_Q module, for input, we have to take care of the
// negative edge. If the ena input is high in the negative edge, then
// Q_converter_to_Q will add 1 to its output. If reset is high, then
// Q_converter_to_Q will reset its output to 0.

always @(posedge clk)
begin
if (reset)
q <= 0;
else if (slowena)
if (q != 9)
q <= q + 1;
else
q <= 0;
end

================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Once the reset is high, the output q will continue to increment.

// Assume the q output has a width of 4.

always @(posedge clk)
begin
 if(reset)
 q<=0;
 else if(slowena)
 if(q<9)
 q<=q+1;
 else
 q<=0;
 end


================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, do nothing.
always @(posedge clk)
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena && q < 9)
	begin
	q <= q + 1;
	end

================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The counter then rolls over to 0 and q is incremented.
//
always@(posedge clk)
begin
	if(reset)
	begin
	q = 4'd0;
	end
	else if(slowena)
	begin
	if(q == 4'd9)
	q = 4'd0;
	else
	q = q + 1;
	end
end

================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.


always @(posedge clk or negedge reset)
begin
	if (reset == 1'b1)
	begin
	q[0] = 1'b0;
	q[1] = 1'b0;
	q[2] = 1'b0;
	q[3] = 1'b0;
	end
	else if (slowena == 1'b1)
	begin

	if (q == 4'b1001)
	q = 4'b0;
	else
	q = q + 1'b1;
	end
	
end


================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 if(reset)
 q <= 0;
 else if(slowena)
 if(q < 9)
 q <= q + 1;
 else
 q <= 0;


================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset)
 q = 0; 
 else if (slowena && q != 9)
 q = q + 1;
end


================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// if reset is low, output q is never changed.


always @ (posedge clk)
 if (reset)
 q <= 0;
 
 else if (slowena)
 if (q != 9)
 q <= q + 1;
 
 else
 q <= q;
 endmodule 

// Design a decade counter that is counting from 0 to 9 that can be reset.

module count_slow(
� input clk,
ê input reset,
t input slowena,
u input tenable_halt,
q output [3:0] q);
// On the positive edge of the clock:
// If reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// if reset is low, output q is never changed.

always @ (posedge clk)
================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk) begin
 if (reset)
 q <= 0;
 else if (slowena) begin
 if (q != 9)
 q <= q + 1;
 else
 q <= 0;
 end
 end

================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	q <= 0;
	else if (slowena) // Only increment the q if the ena input is high.
	if (q<9)
	q <= q + 1;
	else
	q <= 0;
end

================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else if (slowena)
	begin
	if (q == 4'b1001)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	else
	begin
	q <= q;
	end
end


================================================================
