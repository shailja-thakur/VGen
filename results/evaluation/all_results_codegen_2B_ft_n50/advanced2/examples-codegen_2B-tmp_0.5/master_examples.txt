example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if(reset)
	begin
	q <= 0;
	end
	else if(slowena)
	begin
	if(q < 9)
	q <= q + 1;
	else
	q <= 0;
	end
	else
	begin
	q <= q;
	end
end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If reset is not high, and the ena input is high, then increment the output q.

always @(posedge clk) begin
if (reset)
	q <= 0;
else if (slowena) begin
	if (q == 4'b1001)
		q <= 0;
	else
	q <= q + 1'b1;
	end
else
	q <= q;
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, then q is left unchanged.
	always @(posedge clk)
	begin
	if(reset)
	q <= 4'b0;
	else if(slowena)
	begin
	if(q == 4'b1001)
	q <= 4'b0;
	else
	q <= q + 1;
	end
	end
	

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 4'b0;
	end
	else if(slowena)
	begin
	if(q < 9)
	q <= q + 1'b1;
	end
	end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else
	if (slowena && q < 9)
	q <= q + 1;
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (reset)
 q <= 4'b0000;
 else if (slowena)
 if (q != 4'b1001)
 q <= q + 1;
 else
 q <= 4'b0000;
end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If ena is low, q is left alone.
always @(posedge clk)
 begin
 if (reset)
 q <= 0;
 else if (slowena && q < 9)
 q <= q + 1;
 end
 endmodulemodule MUX2(
 input [1:0] select,
 input [3:0] A,
 input [3:0] B,
 output reg [3:0] out
 );
 always @(*)
 case(select)
 2'b00 : out = A;
 2'b01 : out = B;
 2'b10 : out = 4'b1111;
 2'b11 : out = 4'b0000;
 default : out = 4'b0000;
 endcase
 endmodulemodule MUX8(
 input [2:0] select,
 input [7:0] A,
 input [7:0
================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset) q <= 0;
 else if (slowena && q < 9) q <= q + 1;
 else q <= 0;
 end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 0;
	end
	else
	q <= q + 1;
	end
end

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
if (reset)
 q <= 0;
 else if (slowena && q < 9)
 q <= q + 1;
 else
 q <= 0;


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
if (reset)
	q <= 0;
else
	if (slowena)
	if (q != 4'b0010)
	q <= q + 1;


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// Whenever the ena input is high, increment the output q.
// If the ena input is low, decrement the output q.

// Whenever the reset input is high, reset the output q to 0.

always @(posedge clk)
begin
 if(slowena == 1'b1)
 begin
 if(reset == 1'b1)
 q <= 4'b0000;
 else if(q != 4'b1001)
 q <= q + 1;
 end
 else
 q <= q - 1;
 end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If q is 9, do nothing.
always @(posedge clk)
begin

if (reset)
 q <= 0;
 else if (slowena)
 if (q < 9)
 q <= q + 1;
 else
 q <= 0;

end


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 0;
	end
	else if(slowena)
	begin
	if(q != 4'b1001)
	q <= q + 1;
	end
end

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, then do nothing.
// If the reset input is low, then do nothing.

always @ (posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena)
	begin
	if (q == 9)
	begin
	q <= 0;
	end
	else
	begin
	q <= q + 1;
	end
	end
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, q is not modified.
// If the ena input is low, the output q is reset to 0.

always @(posedge clk) begin
 if(reset) q <= 0;
 else if(slowena)
 if(q == 4'b1001) q <= 0;
 else q <= q + 1;
 end

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset) q <= 4'b0000;
	else if (slowena)
	begin
	if (q == 4'b1001) q <= 4'b0000;
	else q <= q + 1;
	end
	end

================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	if (reset) 
	begin
	q <= 0;
	end
	else if (slowena) 
	if (q != 4'b1001) 
	begin
	q <= q + 1;
	end

================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
begin
 if (reset)
 q <= 0;
 else if (slowena)
 if (q < 9)
 q <= q + 1;
 else
 q <= 0;
end

================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, the output q is not incremented.

always @(posedge clk)
begin
	if (reset)
	begin
	q = 0;
	end
	else
	if (slowena && (q < 9))
	q = q + 1;
end

================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
if (reset)
 q <= 0;
 else if (slowena)
 if (q < 9)
 q <= q + 1;
 else
 q <= 0;


================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 if(reset)
 q <= 0;
 else
 if(slowena && q < 9)
 q <= q + 1;
 else
 q <= q;


================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (reset)
 q <= 0;
 else if (slowena)
 if (q < 9)
 q <= q + 1;
 end
 endmodule
 
// Design a counter that counts from 0 through 9, inclusive

module count_slow_tb;

reg clk;
reg slowena;
reg reset;
reg [3:0] q;

initial
begin
 clk = 1'b0;
 reset = 1'b1;
 slowena = 1'b0;
 q = 4'b0000;
 #1 reset = 1'b0;
 #1 reset = 1'b1;
 #1 reset = 1'b0;
 #1 reset = 1'b1;
 #1 reset = 1'b0;
 #1 reset = 1'b1;
 #1 reset =
================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, q is left unchanged.
always @(posedge clk)
	begin
	if (~reset) q <= 0;
	else if (slowena && ~q[3]) q <= q + 1;
	end

================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, q is left alone.

always @(posedge clk)
begin
	if (reset) q <= 4'b0000;
	else if (slowena && q < 4'b1001) q <= q + 1;
end


================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena)
	begin
	if (q < 9)
	q <= q + 1;
	else
	q <= 0;
	end
	else
	q <= q;
end


================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 if (reset) q <= 0;
 else if (slowena)
 if (q != 9) q <= q + 1;


================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, if the ena input is low, then the output q is not changed.

always @(posedge clk) begin
 if (reset)
 q <= 0;
 else if (slowena && q < 4'h9)
 q <= q + 1;
 else if (!slowena)
 q <= 0;
 end

================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is not high, then do nothing.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena)
	begin
	if (q < 9)
	q <= q + 1;
	else
	q <= 0;
	end
	else
	q <= q;
end


================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
begin
 if (reset)
	q <= 4'b0;
 else
	if (slowena)
	if (q < 4'b1001)
	q <= q + 1'b1;
	else
	q <= 4'b0;
end

================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If reset is low, and the ena input is low, then do nothing.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena)
	begin
	if (q != 4'b1001)
	q <= q + 1;
	end
end


================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do not increment the output q.
always @(posedge clk)
begin
 if (reset)
 q <= 0;
 else if (slowena)
 if (q != 9)
 q <= q + 1;
 else
 q <= 0;
end


================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.
always @(posedge clk)
 if (reset) q <= 4'b0000;
 else if (slowena && (q < 9)) q <= q + 1;
 endmodule


// Design a decade counter that counts from 0 through 9, inclusive

module count_slow_tb;

reg clk;
reg slowena;
reg reset;
wire [3:0] q;

count_slow slow_counter(clk, slowena, reset, q);

initial begin
clk = 1'b1;
slowena = 1'b1;
reset = 1'b0;
#10
reset = 1'b1;
#10
reset = 1'b0;
#10
slowena = 1'b0;
#10
slowena = 1'b1;
#
================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	if(reset)
	q <= 4'b0;
	else if(slowena)
	if(q < 4'b1001)
	q <= q + 1'b1;
	else
	q <= 4'b0;

================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, do nothing.
// Whenever the ena input is deasserted, reset the q to 0.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else
	begin
	if(slowena)
	begin
	if(q == 4'b1001)
	q <= 0;
	else
	q <= q + 1;
	end
	end
end

================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (reset) q <= 0;
 else if (slowena && q < 9) q <= q + 1;
 else q <= 0;
end

================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @( posedge clk, negedge reset)
begin
	if (reset == 1)
	begin
	q <= 0;
	end
	else
	if (slowena == 1)
	if (q < 9)
	q <= q + 1;
	else
	q <= 0;
end


================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	q <= 0;
	else if (slowena && q < 9)
	q <= q + 1;
	else
	q <= q;
end


================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.

always @(posedge clk)
begin
	if(reset)
	begin
	q <= 0;
	end
	else
	begin
	if(slowena == 1'b1 && q < 4'b1001)
	q <= q + 1'b1;
	else
	q <= q;
	end
end

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, then q is left alone.

// When the reset button is pressed, reset the output q to 0.

always@(posedge clk)
begin
if(reset)
q <= 4'b0;
else
if(slowena)
begin
if(q == 4'b1001)
q <= 4'b0;
else
q <= q + 1'b1;
end
end

================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.
// Note that a negative edge on the clock will cause the output q to decrement.

always @(posedge clk) begin
	if (reset) q <= 4'b0;
	else begin
	if (slowena) begin
	if (q == 4'b1001) q <= 4'b0;
	else q <= q + 1'b1;
	end
	end
end

================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
if (reset)
q <= 4'b0000;
else if (slowena)
begin
if (q == 4'b1001)
q <= 4'b0000;
else
q <= q + 1'b1;
end
end

================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do not increment q.
always @(posedge clk) begin
	if(reset) q <= 0;
	else if(slowena && q < 9) q <= q + 1;
end

================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, then q is left alone.

always @(posedge clk)
begin
 if (reset | (slowena & q != 9))
 q <= 0;
 else if (slowena)
 q <= q + 1;
 end


================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 0;
	end
	else
	begin
	if(slowena)
	begin
	if(q < 4'b1001)
	q <= q + 1'b1;
	else
	q <= 0;
	end
	else
	q <= q;
	end
end

================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.
always @(posedge clk)
begin
 if (reset)
 q <= 4'b0;
 else if (slowena)
 if (q < 4'b1001)
 q <= q + 1'b1;
 else
 q <= 4'b0;
end


================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If slowena is low, do nothing.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena)
	begin
	if (q != 4'b1001)
	q <= q + 1;
	end
end


================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is high, but q is 9, do nothing.

always @(posedge clk)
begin
 if (reset | (q == 4'b1001) | (slowena & ~q[3]))
 q <= 4'b0000;
 else if (slowena & q[3])
 q <= q + 1;
 end

================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	begin
	q <= 0;
	end
	else if (slowena)
	begin
	if (q != 4'b1001)
	q <= q + 1;
	end
	end

================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	if (reset)
	begin
	q <= 0;
	end
	else
	begin
	if (slowena && q < 9)
	q <= q + 1;
	end

================================================================
