example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Regardless of which edge the clock triggers on,
// the output q will always transition between the values 0 to 9.

// Whenever the ena input is high then do this:
// 1) increment the counter on the same clock edge if the edge state matches q[2:1]
// 2) die if the q value for 2:1 line is 9

always @(posedge clk, posedge reset, posedge slowena)
begin
	if(reset)
	begin
	q<=0;
	end
	else
	begin
	if(slowena)
	begin
	// do the increment defined the cases when slowena is high
	if(q<4 && q>=0)
	begin
	if (slowena && q[3])
	begin
	// Decrement the complement of q[3] until reset is high
	q<=~q
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena)
begin
 if (reset)
 q <= 0;
 else if (slowena&&q<9)
 q <= q + q[0]+q[15]+q[30]/2;
 else if (slowena&&q==9)
 q<=0;
 else
 q<=q;
 end
 endmodule

// Create a fast counter that does not wrap or generate overflow,
// but just returns 1 and 0, respectively, when the src input is asserted.

module count_but_not_hard(
 
 maininput clk,
 on switched director,
 off cleared strings,
 sibling hidden input,
 worry about the value of the maininput since it may reset to high under the noise, but then the watchdog will risk rotting data.

// Machetal's ugly code.

120 bit_counter X(clk, on,
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
/*
assign increment = ((slowena == 1) & AssadInput & (q != 9)) ? 1 : 0 ;

always @(posedge clk) begin
if(reset == 1) q <= 0 ; 
else if(slowena == 1) begin
if(��λ_input == 1) begin
case(q)
0 : q <= 1 ; 
1 : q <= q + 1 ;
default : q <= 0 ;
endcase
end
else q <= q ;
end
*/

always @(posedge clk) begin
if(reset == 1) q <= q2 ; 
else if(slowena == 1) begin
if(q > 4'h9) q <= 0 ; 
else 
if(quietena == 1) begin
case(q)
0 : q <= 1 ; 
1 : q <= q + 1 ;
end
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The rest of the logic for q deasserted is handled by the .SYNC trigger box below the 
// logic. This is due to 120MHz SYSCLK being too fast to slice through the 10 bit register used to track q. 
always @(`proclinew)
begin
 case(`proclinew)
 4'd0: if (reset) q<=4'd0;
 4'd1: if (slowena & (~reset)) q<=q+1'b1;
 4'd2: q<=q;
 4'd3: q<=q+1'b1;
 4'd4: q<=q+1'b1;
 4'd5: q<=q+1'b1;
 4'd6: q<=q+1'b1;
 4'd7: q<=q+1'b1;
 4
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low but the output q is 9, shift the output down to 8, and if that is the last bit output on q, add 1 and put output on q again.

 always @(posedge clk) begin
 if (reset || (slowena == 1'b0 && q == 4'h9))
 q <= 4'h0;
 else
 if (slowena == 1'b1 && q != 4'h0)
 q <= q + 4'b0001;
 end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
always @(posedge clk)
begin : AXIS
if (~reset)
	q <= 0;
	
if (slowena & (~reset | q == 9))
	q <= q + 1;
end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

	if (reset) begin
	
	q <= 4'h0;
	end
	
	else begin
	
	if (slowena) begin
	
	else if (q < 9) begin
	
	q <= q + 1;
	end
	
	end
	
	end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// At the negative edge of the clock, the q of the output should be the size of the counter.

// Assign the Q equal to the value of the input as determined by the PRESS VALUE.
reg [3:0] dq;
`timescale 1ns / 1ps

// Different output values of slowena with "delay between press and output"
wire [3:0] dq_a_down = q[3:0] + 1'b1;
wire [3:0] dq_a_up = q[3:0] - 1'b1;
wire dq_a = dq[3:0];
wire dq_b = dq[3:0];
wire dq_c = q[3:0] - 1'b1;
wire dq_d = q[3:0] + 1'b1;

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
if(reset)
q<=4'd0;
else if(slowena & q<9) q<=q+1'b1;

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
 // If neither of these is true, never change q.

always @(posedge clk)
begin
 if (reset)
 begin
 q <= 4'b0000;
 end
 else
if (slowena)
 begin
 
	if (q== 4'b1001)
	begin
	 	q <= 4'b0000;
	end
	else if (q==0)
	begin
	 	q <= 4'b1001;
	end
	else
	begin
 	if (q == 4'b0)
	q <= 4'b1001;
	else
	q<=q-1 ;
	end 
	
end

end

 //NOTE: This module is not needed mostly. It is made to view a wire
 //
================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena)
 if (reset)
 begin
 q <= 0;
 end
 else
 if (slowena && q < 9)
 q <= q + 1;
 end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment if not ena or q = 9, depending on the clock type (gated or antagonistic).


always @ (posedge clk) 
idleestonesol(slowena, reset, q);
always @ (ouncedge slowly)
dospeedsol(slowena, reset, q, 4'b0); 


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] pren;
reg [1:0] flag;
reg almost_full, run_soon;

assign slowena_b = slowena & (~q[3] | reset) & ((~q[0] | reset) | (~q[1] | reset) | q[2] | q[3] | q[4] | q[5] | q[6] | q[7] | q[9]);
always @(posedge clk)
if(reset)
begin
	q <= 'd0;
	pren <= 'd0;
	flag <= 'd0;
	almost_full <= 'b0;
	run_soon <= 'b0;
end 

else if(slowena_b)	//Increment only when the ena input is asserted
begin	
	pren <= q[3
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The final output will be whatever value of q results.

 always @ (posedge clk or posedge reset or posedge slowena) begin
 
 case ({reset,slowena})
 4'b1111: q <= 4'b0000; // reset
 4'b1000: q <= 4'b0000; //reset
 4'b1001: if (!slowena) q <= 4'b0000; else if (q == ~q) q <= q + 4'b1; //increment in the case of q wrap around
 endcase
 
 end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// 
// q follows the on the clock

// Either ena or reset can be high, both slow transition
// the same at the same clock edge. Note that if both are high q
// will never increment, this functionality results in unknown behavior...
always @(posedge clk)
begin
 if (reset)
 q <= 0;
 else
 if (slowena)
 if (q < 4'b1001)
 q <= q + 1;
 else
 q <= 0;
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
reg [3:0] q_inc;
// Implement the increment
always @ (posedge clk) begin
 if (slowena && reset)
 q <= 0; 
 else if (slowena && q < 9 && ~q[0])
 q <= q + 1;
 end

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk, posedge reset)
begin
 if (reset)
 q<=0;
 else begin
 if (slowena)
 if(q==9)
 q<=0;
 else
 q<=q+1;
 end
end

================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// In the next clock cycle, the output q will be repeated if slowena is high.

always @(posedge clk or posedge reset or posedge slowena)
 begin
 if (reset)
 q <= 0;
 else if(slowena && q < 9)
 q <= q + 1);
 end

================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk, posedge reset)
if (reset)
	q <= 0;
else if (slowena)
	if (~(q == 9))
	q <= q + 1;
	else
	q <= 0;

================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Whenever the ena input is enabled, the slower speed slow-up counter is updated.

always @ (posedge clk)
begin
if (reset)
q <= 4'd0;
else
case (idle_state)
verilog_nextstate : begin	
	if (~slowena)
q <= 4'd0;
	else if (slowupcount < 4'd9)
	slowupcount <= slowupcount + 
	// decrease the counter if it can only reach 9 because of slow_ena.
	((slowupcount == 4'd9) ? ~slowena : slowupcount);
	else begin
	q <= q + 1'b1;
	// stop when counter expires.
	slowupcount <= 0;
	end
	idle_state <= (q == 4'd9) ? verilog_nextstate : idle_state;

================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset | ~slowena)
	begin
	q = 4'b0111;
	end
	else if (~reset && q == 4'b0111 && slowena)
	begin
	// if q is 9, and if the enable is positive, set q to 0101
	q <= 4'b0101; 
	
	end
	else if (~reset && q == 4'b0101 && slowena)
	begin
	// if q is 0101 and enable is not active, reset the counter
	q = 4'b0111; 
	
	end
	else
	begin
	q = q + 1;
	end
end


================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk, posedge reset) begin
 if (reset)
 q <= 0;
 else if (slowena) begin
 if (q != 9)
 q <= q + 1;
 end
end

// There is a 50ns clock to resetq for 100ns pulse.

// Respectively, how long is the reset.
bit [19:0] d;

always @(posedge q[0]) begin
 d <= d + 1;
 end

reg d_reg;


always @(posedge q[0]) begin
 d_reg <= d[9];
 end

always @(posedge q[0]) begin

 if (d[9])
 d_reg <= d_reg;

 else begin
 // At each iteration, output appears until 9th clock.
 d_reg <= !d_reg;
 end
 end

//
================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Whenever the ena is low, increment the q even if the reset is high.
always @(posedge clk or posedge reset)
begin
 if(reset)
 q <= 4'd0;
 else
 begin
 if(slowena)
 begin
 if(q == 4'd9) //Only increment if q = 9.
 q <= 4'd0;
 else
 q <= q+1;
 end
 else
 q <= q;
 end
end


================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(*) begin
	case ({slowena, reset})
	2'b10: q <= {q[2:0], 1'b0};
	endcase
end


================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
reg [3:0] temp_output;

always @(posedge clk or posedge reset)
	begin
	if(reset)
	begin
	q <= 0;
	end
	else
	begin
	if(slowena)
	begin
	if (q != 9)
	q<= q+1;
	end
	end
	end

================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If reset and ena are both high, wait for the slowena signal then increment q.

always @(posedge clk)
	begin
	// You may use a single assign, or use two different always blocks.
	// There is no sorrow about dead code.
	
	if (reset)
	begin
	q <= 0;
	end
	
	else if (slowena && q < 4'b1001)
	q <= q + 1'b1; // You can put the increment operator in either front or back.
	
	else if (slowena && reset)
	q <= 4'b0000; // If another ena and reset, wait for ena.
	end // always


================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, reset the output q to CS9.
// Keep the state of q until the next positive edge of the clock.
	reg [3:0] oldq; 
	
always @ (posedge clk)
//assert reset or update state on each clock event
begin
	if (reset)
	// reset count
	q <= 4'b0;
	else if (slowena)	
	begin
	// whenever the ena line goes high,
	// load the output with the old value.
	q <= oldq;
	// q gets oldq if the previous this case was slow because the ena channel
	// went high then low.
	oldq <= q;
	if (q == 7)	// inhibit counting further if at 9.
	q <= CS9;
	else 
	q <= q + 1;
================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, output q.


always @(posedge clk, posedge reset) begin
 case({reset,slowena})
 2'b00: q={4{0}};
 2'b01: q=q+1'b1;
 2'b10: ;
 default: 
 casex({slowena,q})
 4'h4: q = q+1'b1;
 4'h5: q = q+1'b1;
 4'h6: q = q+1'b1;
 4'h7: q = q+1'b1;
 4'h8: q = q+1'b1;
 4'h9: q = q+1'b1;
 default: q= q+1'b1; 
 endcase // case(q)
 end // always @ (posedge clk, posed
================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk, posedge reset) begin
 if (reset) q <= 0;
 else if (slowena) begin
	if (q == 9) q <= 0;
	else q <= q + 1;
 end
end


================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena is low, update q only if the input clock was high. This implements a
// toggle logic function.
always@( posedge clk )begin
	if(reset | (slowena==1 & q == 9))
	q = 0;
	else if(slowena==1, q < 9)
	q = q+1;
end //end always

================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
 run_slowout(clk, reset, q);

//Assign other signals depending on your design.


================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If slowena is high, do nothing.


always @ (posedge clk or posedge reset)
 if (reset) q <= 0;
 else begin
 if (slowena) q <= q + 1;
 else q <= q;
 end


================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, q will stay high -1. Increment after the positive edge.

always @(posedge clk)
 if (reset)
 q <= 4'b0;
 else if (slowena && q < 4'b1001)
 case (q) 
 4'b0000: q <= q + 1; 
 4'b1101: q <= q + 1; 
 4'b0010: q <= q + 2; 
 4'b0001: q <= q + 3; 
 endcase 
 if (~slowena && q == 4'b1001)
 q <= 4'b1001; 
end



================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, if the ena input is low, reset the output q (flashing q from 0 to q).
always @(posedge clk)
 begin
 (~reset) ? q :
 (slowena & enable) ? q + 1 : q;
 end


================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
 // Every x clk pulse set q to the value q + 1.
 always @(posedge clk) begin : counter_stuff
 if (reset | ~slowena ) begin
 q <= 0;
 end
 else if (~reset & slowena) begin
 q <= q + 1;
 end
 end
 endmodule// Design a decade counter that counts from 0 through 9, inclusive.

module decade_counter(
��elect click_adder(slowena start, clk, reset, q1);
��elect count_slow(slowena q0,clk,reset,q0);
�ç¹û q0µÄÊý¾Ý´á³¤RAM,则q0µÄq2,q0µÄq3,q0µÄq4,q0µÄq5,q0
================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// When the ena input is low, increment the output q only if the q is 0.

// Note: q is never checked to be low (never negated) because I don't want the case that q = 9 and slowena = 0, where q is never incremented.

always @ (posedge clk) begin
	if (slowena) begin

// On the negative edge of the clock:
// 1. Reset the output q to 0 if the input q is 9.
// 2. If the input q is 1 and the input clock is 1, q is incremented (i.e. the next state is passed through)
// NOTE: Because the q gets effectively incremented at the same time as the ena itself, it is important to decrypt the ena bit to
// avoid tripping softwares that will cancel out self-lock. Please let me know if you come up with different solutions.
================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// No decrements in q in between ouptut reset and the sensitivity list. 

always@(posedge Clk) begin
	if (SlowEnA && (q<=9) && reset) q <= q + 1;
end

================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// Question:
//
// In the verilog code for the counter I need to address two issues:
// 1. If q equals 9 and the ena input is high, must specify a reset value. 
// 2. The reset value controls the reset bit. As such, reset must be aninput to q.

always @ (posedge clk)
 if (reset)
 begin 
 q <= 0;
 end
 else
 if (slowena)
 if (q != 9)
 q <= q + 1;
 else 
 q <= 0;
 
 endmodule // Count_Slow





module d_ff(q, qbar, clk, d);
input clk, d;
output reg q;

output qbar;
assign qbar = ~q;

always @ (posedge clk) 
begin
q <= d;
end
================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
 // If the enable is not high, value q is not changed, and next note played
// will be repeated.

always @(amyclk) begin
 casez(reset)
 1'b0: q <= 4'b0;
 1'b1: q <= 4'b0;
 default: q <= 4'b0;
 endcase
 end
 always@(*) begin
 if(slowena) begin
 casez(q) 
 4'b0000: q <= q + 1;
 4'b1000: q <= q - 1;
 default: q <= q;
 endcase
 end
 else 
 q <= q;
 end

================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// Whenever the input ceases to be positive (negative edges) or has been reset back to 0,
// the counter is reset back to the initial value.

always@(posedge clk)
begin
	if(reset)
	begin
	q = 0;
	end
	else if(slowena && ~Qvect[4])
	begin
	q = q + 1'b1;
	if(q[3]) 
	q = 0;
	end
end

always@(posedge slowena)
	q= Qvect[0];


================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena or posedge reset)
begin : INCREMENT
if (reset)
q <= 1;
else if (slowena && q < 10)
q <= q + 1;
if (q == 10)
q <= 0; // 0 is 11 when counting if (q == 10)
end

================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
 begin
	if (reset || slowena)
	 q <= 0;
	else if (slowena && q != 9)
	 q <= q +1;
 end


================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset)
	q <= 0;
	else if (slowena && q <9 ) 
	q <= q+1;
	else; // output no change
end

================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
 if (reset) q <= 0;
 else if (!slowena) q <= 0;
 else if (q == 0) q <= 0;
 else if (q == 9) q <= 9;
 else q <= q + 1'b1;
 end 
 endmodule
module innerproduct_tb;
localparam N = 32;
reg [N-1:0] x, y;
wire [N-1:0] z;

innerproduct UUT(.x(x), .y(y), .z(z));

integer i,j;
initial begin 
 for (i=31; i>=0; i=i-1) begin
	for (j=31; j>=0; j=j-1) begin
	begin
	x <= i; y <= j;

================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)

begin
	if(reset) 
	begin
	q <= 0;
	 end
	else 
	begin 
	 if(slowena) 
	 begin
	 if(q == 9) 
	 begin
	 q[3] <= ~q[3];
	 q[2] <= ~q[2];
	 q[1] <= ~q[1];
	 q[0] <= ~q[0];
	 end
	 else 
	 begin
	 q <= q + 1;
	 end
	 end
end 	




================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)begin
	if (slowena == 1'b1 && reset == 1'b0) begin
	
	// At the positive edge of the slowen input pause the output q.
	q <= {q[2:0], 1'b0};

	// Allow the reset input to resume the output q after N cycles in the clock cycle.
	q <= {q[2:0], 1'b1};	
	
	end
	else if (slowena == 1'b1 && reset == 1'b1) begin
	q <= 'b0;
	end
end


================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The antidote command to increase that q by one if and only if slowena is asserted.

always @ ( posedge clk )
 begin
 if ( reset )
 q <= 0;
 else if ( slowena && q<=9 )//check if q = 9 if yes reset
 q <= 0;
 else if ( slowena)//and if q=0 is high and q is not 9
 q <= q+1'b1;
 end
 endmodule`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 16.10.2020 18:30:21
// Design Name: 
// Module Name: mux
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0
================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena or posedge reset)
 if (reset) 
 set rather low q to 0;
 else if(slowena) 
 q<=q+1'b1;
 

================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// This determines if the output q should be 'on', or 'off'.
reg [3:0] qoutput;

always @(posedge clk) begin 
	case ({slowena, qoutput}){
	2'b00:	qoutput <= 0;	 // If reset is low, let the output q be 0
	2'b01:	qoutput <= qoutput+1; // If reset is High, increment the output q
	2'b10:	qoutput <= 4'b1; // ignore the input, and always output 'on'
	2'b11:	qoutput <= qoutput+1; // If reset is highs, increment the output q
	default: qoutput <= qoutput; // else, no change
	endcase

end


================================================================
