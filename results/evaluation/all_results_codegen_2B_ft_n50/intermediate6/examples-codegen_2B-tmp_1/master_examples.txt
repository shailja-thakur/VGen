example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
if (we == 1'bz)
	ram[addr] <= data;
assign q=ram[addr];
end

================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[7:0]
always @(posedge clk)
 if(we)
 ram[addr]=data;
 assign q[7:0]=ram[addr];

================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q 
always@(posedge clk)
if (we)
 ram[addr % (2**ADDR_WIDTH)] <= data;
 assign q = ram[addr % (2**ADDR_WIDTH)];

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
 #1 if(we) ram[addr]=data;

================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[7:0]
// when we is alway high, read q back to data
always @(posedge clk) begin
//// always assert we if it is high, else deassert it
// we is always connected to a register that 
// has the latest write address, that is the one we just read from q
// when it is high, then you want to write 8000 addresses in a clock cycle
always @(posedge we) begin
 if (busy==1)
 // if the other memory stage is active, then gray out this channel of output
 $display("CAS");
 // when both memory stages idle, make sure bus is quiet
 action_expired<=0;
// deassert when it goes idle
// touch the memory registers
if (we==1) begin
 // hold current contents of output registers
tempdata <=data;
end
 // check first if it has anything significant in
================================================================
example-5: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
 if (we) ram[addr]=data;
 assign q=ram[addr];
end

================================================================
example-6: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q=ram[addr];
// combinational logic : when we input, we are writing, so flag 1
assign q[ADDR_WIDTH]=0;
// when we is high, flag 1 is selected
always @(posedge clk) 
// valid computing : 
// if ( we write at address > window bound ) 
// when ( addr + 1 ) == window bound 
if (addr<(2**ADDR_WIDTH-1))
 if((addr+1)==(2**ADDR_WIDTH-1)) begin: no_more_writes
 end
// we, swithcing, store value in ram when reading
always @(posedge clk) if(we) begin
 ram[addr]<=data;
 end

================================================================
example-7: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
reg [DATA_WIDTH-1:0] q[2**ADDR_WIDTH-1:0];
initial
begin
#0
for (int i = 0; i < 2 ** ADDR_WIDTH; i = i + 1)
ram[i] <= 255;
ram[0] <= 255;
ram[1] <= 255;
end
always @(posedge clk)
begin
if (we)
ram[addr] <= data;
else
	q[addr]=ram[addr];
end

================================================================
example-8: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// when we is high, fwe=1
// when we is high, addr is matched with data field, normally there is a delay of one clock cycle before fwe is asserted
// when we is high, and there is a delay of one clock cycle before data is given to fwe,
// with matching address and data fields, there is a 2-cycle delay
assign q = (we && !fwe) ? pin : 8'bzzzzzzzz;
always @(posedge clk) begin
if(we) begin
ram[addr] <= data;
end 
if (fwe) begin
if((addr==data) && !we) begin
q <= pin;
end
else begin
q <= q;
end
end

================================================================
example-9: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// Assign output as boolean 0 or 1 to indicate presence or absence of data 

always @(posedge clk)
if (we) ram[addr]<=data;
assign q=ram[addr];

================================================================
example-10: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
 if (we) ram[addr] <= data;
 assign q = ram[addr];
 end

================================================================
example-11: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
if(we) begin
ram[addr] = data;
end
else begin
q = ram[addr];
end
end

================================================================
example-12: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin 
 if(we)
ram[addr] <=data;
assign q= rom[addr];
end

================================================================
example-13: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
also need a macin_input last_input;// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// when we is high, read the value of q update the memory at address addr 
// assign the ram value at address addr to q
// ask for the queue of data at address addr, send it back to here for output if we is high.
 assign ram[addr] = we?data:q;
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 assign last_input = (ADDR_WIDTH==1)?data:{8{we}}; 
 always @(posedge clk)begin
 if (we)
 if(ADDR_WIDTH==1)//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 for (int i = 0; i < 8; i = i+1)begin
 ram[i] = last_input[i];
 end
 else//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

================================================================
example-14: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// write operation is mem[addr[ADDR_WIDTH-1:0]]<=data;
always @(posedge clk)
begin
	if(we)
	begin
	ram[addr]<=data;
	end
	q<=ram[addr];
	end

================================================================
example-15: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q for output 
always @(posedge clk)
if (we)
ram[addr]=data;
assign q = ram[addr];

================================================================
example-16: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
 if (we)
 ram[addr] <= data;
 assign q <= ram[addr];
 end
 endmodule `timescale 1ns / 1ps

/**
 * Papilio Implements an RTL source based on the SaveNetmap Module Model
 * from PR5 revision 3
 * Game Center Code : 0011111http://electronisave.gameblitz.com
 *
 * Uni-directional 1-bit RAM
 *
 * Revision: 3
 */

module clocker
	# (parameter CLOCK1 = 169)
	(
	input clk_68k, reset, clk_5HZ, // 5HZ clock switch moving in opposite directions
	output bln, clr, log, lamp // Lights per output
	);
	reg [3:0] cnt;
	wire clkn
================================================================
example-17: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
initial $readmemb("data.list", ram);
always @(posedge clk) begin
	if (we) ram[addr]<=data;
	else 
	q<=ram[addr];
end

================================================================
example-18: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q as the block ram output data
reg state;
always@(posedge clk)
if(we) begin
	ram[addr]=data;
end
// always@(*) begin
// 	if(we)	q=ram[addr];	else	q=8'hxx;
// end

================================================================
example-19: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// when we is low, get value at address
// if we is high, when we is low, q changes to 0
assign q = (we === 1'b0) ? ram[addr] : 8'd0;
always @(posedge clk) 
if (we===1'b1) 
ram[addr] <= data;

================================================================
example-20: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q whenrieving it
// otherwise assign 0
assign q[ADDR_WIDTH-1:0] = ( (we == 1'b1) && (addr == ADDR_WIDTH) ) ? data : 8'b0;
always @(posedge clk) begin
 if(we)
 ram[addr] <= data;
end

================================================================
example-21: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q

always @(posedge clk)begin
 if(we)
 ram[addr]=data;
 end
 assign q=ram[addr];
 

================================================================
example-22: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q[7:0] = ram[addr[ADDR_WIDTH-1:0]];
always @(posedge clk)
begin
if (we)
ram[addr[ADDR_WIDTH-1:0]] <= data;
end 

================================================================
example-23: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[7:0]
assign q[ADDR_WIDTH-1:0] = (!we)?data:ram[addr];
always @( negedge clk )
if ( we ) ram[addr] <= data;

================================================================
example-24: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
if(we)
ram[addr] <= data;
assign q = ram[addr];

================================================================
example-25: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[7:0]
always @(posedge clk)
begin
if(we)
ram[addr] <= data;
// writedata *always* is 1, so what the code actually writes is the ram[addr][7:0], where r='0', S is the selected ram index, and x[7:0] is the data
q <= ram[addr][7:0];
end

================================================================
example-26: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk) begin
if(we)
ram[addr]=data;
assign q=ram[addr];
end

================================================================
example-27: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q 
always @ (posedge clk)
 if(we) ram[addr]<=data;
 assign q<=ram[addr];

================================================================
example-28: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign bval = (0 <= addr && ADDR_WIDTH <= addr) ? 1 : 0;
assign q = ram[addr];
reg [7:0] preambleq_temp = 0;

// when addr reaches overflow, the data becomes 4 new valid values
// goes Q after preamble, before first data
always@( posedge clk )
begin
	if(bval) begin
	case(preambleq_temp)
	2:
	ram[0] <= 8'b10100000;
	3:
	ram[1] <= 8'b10100000;
	4:
	ram[2] <= 8'b10100000;
	5:
	ram[3] <= 8'b10100000;
	6:
	ram[4] <= 8'b10100000;
	7:
	ram[
================================================================
example-29: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// when clk rises, perform read operation on the ram
// when clk falls, return value of ram at addr (which is OUTPUT ONLY)
// when reset is high, return 0
 initial begin
 we=1'b0;
 clk=1'b0;
 end
 always @(posedge memcheck(clk)) begin
 if(we)
 #1 ram[addr] <= data;
 end
 always @(posedge clk)begin
 if (reset)
 q <= 8'h0;
 else begin
 if (we)
 q <= ram[addr];
 end
 end

================================================================
example-30: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[7:0]
always @(posedge clk)begin
 if(we) begin
	ram[addr] <= data;
 end
end
assign q <= (we) ? ram[addr] : 8'd0;

================================================================
example-31: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) 
if(we) ram[addr] <= data;
assign q = ram[addr];

================================================================
example-32: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q when q is high
always @(posedge clk)
begin:RAM_INST
if (we) 
 ram[addr] = data; 
 if (q)
 q<=ram[addr]; 
end

================================================================
example-33: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q output
always@(posedge clk)
case({we, addr})
	{1'b0,{ADDR_WIDTH{1'bx}}}: q <= 0;
	{1'b0,addr}: q <= data;
	{1'b1,{ADDR_WIDTH{1'bx}}}: q <= 0;
	{1'b1,addr}: q <= ram[addr];
endcase

// this always block is probably incorrect---check out this question on the labs lab. What is the correct way to do this?
//!!! add some built in clock handshaking functionality

================================================================
example-34: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
if(we && (addr[ADDR_WIDTH-1] == 1))
ram[addr] <= data;
end
assign q = chipsel?ram[addr]:1'bz;

================================================================
example-35: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// in the rising edge of clock t, if address changes
assign we, q[ADDR_WIDTH-1] = 0;
always @(posedge clk) 
 if (we || !clk)
 
 
always @(negedge clk)
 if (addr<ADDR_WIDTH)
 
 //read data at addr and put it in q
 assign q = ram[addr];

================================================================
example-36: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
initial
begin
$display("&%h| & %h %h", we, data, addr);
// for loop to initialize ram contents
for (integer i=0;i<2**ADDR_WIDTH-1;i++)
ram[i]=8'b0;
end
always @(posedge clk)
ram[addr] = data;
assign q = ram[addr];

================================================================
example-37: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q [(DATA_WIDTH-1):0] = ram[addr];
always @(posedge clk) begin
if (we)
ram[addr] <= data;
end

================================================================
example-38: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[7:0]
always @(posedge clk or posedge reset)
if (reset)
 q <= 8'b0;
 else
 if (we) begin
 ram[addr] <= data;
 q <= data;
 end
 // for each reading of the output, check if it is high, if is yes, then output value
 // at address addr from ram[addr]
 always @(posedge clk)
 if (reset)
 q <= 8'b0;
 else
 if (q == 8'b1) begin
 $display("Get high on q when it is a high impedance! Your robot probably thinks global variable thingy has been grounded");
 end

================================================================
example-39: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[second][?? - 0] = we ? data : ram[addr];
always @(posedge clk)
begin
if (we)
ram[addr] <= data;
else
q <= ram[addr];
end

================================================================
example-40: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q[0]=(~we&clk)? data[0] : ram[addr[3:0]];
// if we are writing, ram[addr] changes
// only the LSB of the address will change
// assign the ram value at address addr[3] to q[1]
assign q[1]=(~we&clk)? data[1] : ram[addr[3:0]][7:1];
// read
always@(posedge clk)
if(~clk) begin // wait for clk
ram[addr[7:4]] <= data; // initial value written
ram[addr[1:0]] <= q[0];
ram[addr[7:4]] <= q[1];
end

================================================================
example-41: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// if we is 0, then read from ram at address addr
fpga_mio #(
hesionparameter INPUT_WIDTH=1,
heartedlyparameter OUTPUT_WIDTH=1
)
(
inout [INPUT_WIDTH-1:0] in,
inout [OUTPUT_WIDTH-1:0] out,
inout memclk


);
initial 
begin
end
always @(posedge clk) 
begin
if (we) 
begin
	ram[addr]=data;
	q=ram[addr];
end
else 
begin
	q=ram[addr];
end
end

================================================================
example-42: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
if(we) ram[addr]<=data; // write
 	else q<=ram[addr];
end

================================================================
example-43: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
if (we)
ram[addr] <= data;
assign q = ram[addr];

================================================================
example-44: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q[DATA_WIDTH-1:0] = (ena) ? data : ram[addr];
always @( clk )
 if(we) ram[addr] = data;

================================================================
example-45: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q 
assign q = ram[addr];
always @(posedge clk) begin
 if(we)
 ram[addr] <= data;	
 end

================================================================
example-46: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
begin
if (we)	
{ram[addr], q[7:0]} <= data;
end

================================================================
example-47: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk)
 if (we)
 ram[addr]<=data;
 threholdoutput [1:0] q;
not n1 (q[1],q[0]);

================================================================
example-48: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk)
 begin
 if(we)
 ram[addr] <= data;
 else
 q <= ram[addr];
 end

================================================================
example-49: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[0];
assign q[0] = ram[addr[ADDR_WIDTH-1:0]];
always @(posedge clk)
begin
 if (we) ram[addr[ADDR_WIDTH-1:0]] <= data;
end

================================================================
