example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	q <= 4'b1;
	else if(q == 4'b12)
	q <= 4'b1;
	else
	q <= q + 1;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset)
 q <= 4'b0000;
 else if (q == 4'b12)
 q <= 4'b0000;
 else
 q <= q + 1;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 1;
	end
	else if(q == 12)
	begin
	q <= 1;
	end
	else if(q == 4)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if(reset)
 q <= 1;
 else if(q == 12)
 q <= 1;
 else
 q <= q + 1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if (reset)
 q <= 4'd1;
 else if (q == 4'd12)
 q <= 4'd1;
 else
 q <= q + 1;
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if (reset)
	begin
	q <= 4'b0001;
	end
	else if (q == 4'b12)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset) q = 4'b1;
 else if (q == 4'b12) q = 4'b1;
 else q = q + 1'b1;
 end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 4'd1; // on reset, assign q to 1
	end
	else if (q == 4'd12) // if q is 12, assign q to 1
	begin
	q <= 4'd1; // assign q to 1
	end
	else
	begin
	q <= q + 1; // increment q
	end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin
	q <= 4'b0001; 
	end 
	else if(q == 4'b12) 
	begin
	q <= 4'b0001; 
	end 
	else 
	begin
	q <= q + 1; 
	end 
end 

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
 if (reset) 
 q <= 1;
 else if (q == 12) 
 q <= 1;
 else 
 q <= q + 1;
end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if (reset)
q <= 4'b0000;
else if (q == 4'b12)
q <= 4'b0000;
else 
q <= q + 1;

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
 if (reset)
 q <= 1;
 else if (q == 12)
 q <= 1;
 else
 q <= q + 1;
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if (reset) q <= 1;
 else if (q == 12) q <= 1;
 else q <= q + 1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q = 1;
	end
	else if (q == 12)
	begin
	q = 1;
	end
	else
	begin
	q = q + 1;
	end
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if (reset)
 q <= 1;
 else if (q == 12)
 q <= 1;
 else if (q == 1)
 q <= 1;
 else
 q <= q + 1;
end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
 if (reset)
	q = 1;
	else if (q == 12)
	q = 1;
	else if (q == 13)
	q = 1;
	else if (q == 14)
	q = 1;
	else if (q == 15)
	q = 1;
	else if (q == 16)
	q = 1;
	else if (q == 17)
	q = 1;
	else if (q == 18)
	q = 1;
	else if (q == 19)
	q = 1;
	else if (q == 20)
	q = 1;
	else if (q == 21)
	q = 1;
	else if (q == 22)
	q = 1;
	else if (q == 23)
	q = 1
================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// if reset is asserted, put q to 1
// if the reset or the clock change, reset the counter
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	q <= 4'b0001;
	end
	else if(q==4'b12)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q+1;
	end
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
 if (reset)
	q <= 4'b0001;
 else if (q == 4'b1210)
	q <= 4'b0001;
 else 
	q <= q + 1;
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if (reset)
 q <= 4'b0001;
 else if (q == 4'b12)
 q <= 4'b0001;
 else
 q <= q + 1;
end

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
case(reset)
1'b1: q <= 4'b0001;
1'b0: q <= 4'b1111;
default: 
begin 
if(q == 4'b1210) q <= 4'b0001;
else q <= q + 1;
end
endcase
end

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset) begin
q <= 4'b1;
	end
	else if (q == 4'b12) begin
q <= 4'b1;
	end
	else begin
q <= q + 1'b1;
	end
	end

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 1;
	end
	else if(q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
end 

================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// Note that the reset and clock signals are active low
always @ (posedge clk) begin
if (reset)
q <= 1;
else if (q == 12)
q <= 1;
else if (q == 4'd12)
q <= 1;
else
q <= q + 1;
end

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 1;
	end
	else if (q == 12)
	begin
	q <= 1;
	end
	else if (q == 4'd11)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b0001;
else if (q == 4'b12)
q <= 4'b0001;
else
q <= q + 1;
end

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
 if (reset)
 q <= 4'b1;
 else if (q == 4'b12)
 q <= 4'b1;
 else
 q <= q + 1'b1;

================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
	begin
	if(reset)
	q = 1;
	else if (q == 12)
	q = 1;
	else if (q == 1)
	q = 12;
	else
	q = q + 1;
	end

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if (reset)
 q <= 4'b1;
 else if (q == 4'b12)
 q <= 4'b1;
 else
 q <= q + 1;
end

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 1;
	end
	else
	begin
	if (q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
	end
end

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk or negedge reset ) 
if ( reset == 1'b0 ) 
q <= 4'b0001;
else if ( q == 4'b1201)
q <= 4'b0001;
else
q <= q + 1'b1;

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
	begin
	if (reset)
	begin
	q <= 1;
	end
	else if (q == 12)
	begin
	q <= 1;
	end
	else
	begin
	q <= q + 1;
	end
	end

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if(reset)
 q<=4'b0001;
 else if(q==4'b0011)
 q<=4'b0001;
 else
 q<=q+1'b1;
end

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
if (reset) 
q <= 1;
else if (q == 12) 
q <= 1;
else 
q <= q + 1;
end

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if (reset)
q<=4'b0001;
else if (q==4'b1210)
q<=4'b0001;
else
q<=q+1'b1;
end

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if (reset) 
 q <= 1;
 else if (q == 12)
 q <= 1;
 else
 q <= q + 1;
end

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if(reset)
q <= 4'b1;
else if(q == 4'b12)
q <= 4'b1;
else
q <= q + 1'b1;

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
 if(reset) q = 1; else begin
 if(q == 12) q = 1; else q = q + 1;
 end

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if(reset)
q = 4'b0001;
else if(q == 4'b12)
q = 4'b0001;
else 
q = q + 1;

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
 if (reset)
 q <= 1;
 else if (q == 12)
 q <= 1;
 else
 q <= q + 1;
end

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 4'b0001;
	end
	else if(q == 4'b12)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b0001;
else if (q == 4'b12)
q <= 4'b0001;
else
q <= q + 1;
end 

================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if(reset)
	begin
	q<=4'b0001;
	end
	else if(q==4'b1210)
	begin
	q<=4'b0001;
	end
	else
	begin
	q<=q+1;
	end
end

================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	if (reset == 1'b1) 
	begin
	q <= 4'b1;
end
	else if (q == 4'b12) 
	begin
	q <= 4'b1;
	end
	else 
	begin
	q <= q + 1;
	end

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
 if (reset)
 q <= 1;
 else if (q == 12)
 q <= 1;
 else
 q <= q + 1;
 endmodulemodule counter( 
 input clk,
 input reset,
 input [3:0] q,
 output [3:0] q_
);
// update q_ on the positive edge of the clock according to the following cases:
// on reset, assign q_ to q
// else, increment q_ by 1 
always @ (posedge clk or posedge reset)
 if (reset)
 q_ <= q;
 else
 q_ <= q + 1;
 endmodulemodule counter( 
 input clk,
 input reset,
 input [3:0] q,
 output [3:0] q_
);
// update q_ on the positive edge of the clock
================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
 if (reset) q=1;
 else if (q==12) q=1;
 else q=q+1;
end

================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if (reset)
 q <= 4'b1;
 else if (q == 12)
 q <= 4'b1;
 else
 q <= q + 1'b1;
end

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or negedge reset)
 if (reset == 1'b0)
 q <= 4'd1;
 else if (q == 4'b12)
 q <= 4'd1;
 else
 q <= q + 4'd1;

================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if(reset)
q <= 4'h1;
else if(q == 4'h12)
q <= 4'h1;
else
q <= q + 1;
end

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if (reset) q <= 1;
 else if (q == 12) q <= 1;
 else q <= q + 1;
end

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	q <= 4'b1;
	end
	else if(q == 4'b12)
	begin
	q <= 4'b1;
	end
	else
	begin
	q <= q + 1;
	end
end

================================================================
