example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high only, state changes to SA.
// if input b is high only, state changes to SB.
always@(posedge clk, negedge reset)
begin
if(!reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE: next_state = a?SA:b?SB:SAB;
SA: next_state = a?SA:b?SB:SAB;
SB: next_state = a?SA:b?SB:SAB;
SAB: next_state = a?SA:b?SB:SA;
endcase
end
always@(*)
begin
case(cur_state)
IDLE: z = 0;
SA: z = 0;
SB: z = 0;
SA
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
always @(*)
	case (cur_state)
	IDLE:
	if (a)
	next_state <= SA;
	else if (b)
	next_state <= SB;
	else
	next_state <= IDLE;
	SA:
	if (a)
	next_state <= SA;
	else
	next_state <= SAB;
	SB:
	if (b)
	next_state <= SB;
	else
	next_state <= SAB;
	SAB:
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b either both are high or both are low, 
// state changes to SA.
// if input a and b are both low, state changes to SB.
always@(posedge clk) 
	if(reset | (cur_state == SA && a && b) | (cur_state == SB && b))
	cur_state <= IDLE;
	else
	cur_state <= next_state;
always@(*)
	case(cur_state)
	IDLE:
	begin
	next_state <= SA;
	z <= 0;
	end
	SA:
	begin
	z <= 0;
	next_state <= SA;
	end
	SB:
	begin
	next_state <= SB;
	z <= 0;
	end
	SAB:
	begin
	next_state <= SAB
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is high, state changes to SA. 
// if input a is high and input b is low, state changes to IDLE. 
always@(posedge clk or posedge reset)
begin
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always@(*)
begin
	case(cur_state)
	IDLE:
	begin
	if(a==1'b1 && b==1'b1)
	next_state = SA;
	else if(a==1'b1 && b==1'b0)
	next_state = IDLE;
	else
	next_state = IDLE;
	end
	SA:
	begin
	if(a==1'b1 && b==1'b1)
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input b is high, state changes to SA. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
always @(*)
case(cur_state)
IDLE:
begin
if(~a & ~b)
next_state <= SA;
else if(a & ~b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a & ~b)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SAB;
else
next_state <= SA;
end
SAB:
begin
next_state <= IDLE;
end
endcase 
// Output logic:
assign
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a is high, state changes to SA and output z is asserted.
// If input b is high, state changes to SB and output z is 
// asserted.
always @(posedge clk)
begin
	if (reset == 1'b1)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(*)
begin
	case(cur_state)
	IDLE:
	begin
	if (a == 1'b1 && b == 1'b0)
	begin
	next_state <= SA;
	z <= 1;
	end
	else if (a == 1'b0 && b == 1'b0)
	begin
	next_state <= IDLE;
	z <= 0;
	end
	else
	begin
	next_state <= IDLE;
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and b is low, state changes to SA.
// if input a and b are both low, state changes to SB.
// if input a is low and b is high, state changes to SAB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(next_state)
IDLE: next_state <= a?SA:IDLE;
SA: next_state <= b?IDLE:SB;
SB: next_state <= b?SAB:IDLE;
SAB: next_state <= a?IDLE:SB;
default: next_state <= IDLE;
endcase
end
// Output logic:
always @(cur_state)
case(cur_state)
IDLE: z <= 1'b
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and b is low, state changes to SA. 
// if input a and b are both low, state changes to IDLE.
always @(posedge clk or posedge reset)
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
always @(*)
case(cur_state)
IDLE: next_state <= a?SA:IDLE;
SA: next_state <= b?IDLE:SA;
SB: next_state <= a?IDLE:SA;
SAB: next_state <= b?IDLE:SA;
default: next_state <= IDLE;
endcase
// Output logic:
assign z = (cur_state == SAB)?1:0;

================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE. 
// if input a is high and input b is low, state changes to SA.
always @(posedge clk or posedge reset)
begin
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
end
// FSM next state assignment:
always @(cur_state or a or b)
case (cur_state)
IDLE: begin
if (a) next_state = SA;
else if (b) next_state = SB;
else next_state = IDLE;
end
SA: begin
if (b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if (a) next_state = SAB;
else next_state = IDLE;
end
SAB: begin

================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
always @(posedge clk or posedge reset)
if (reset)
	cur_state <= IDLE;
else
	cur_state <= next_state;
always @(*)
begin
	case(cur_state)
	IDLE:
	begin
	if(a==1 && b==1)
	next_state <= SA;
	else
	next_state <= IDLE;
	end
	SA:
	begin
	if(a==1 && b==1)
	next_state <= SA;
	else
	next_state <= IDLE;
	end
	SB:
	begin
	if(a==1 && b==1)
	next_state <= SAB;
	else
	next_state <= IDLE;
	end
	SAB:
	begin
	if(a==1 && b==1
================================================================
example-10: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always@(posedge clk) 
	if(reset) 
	cur_state <= IDLE; 
	else 
	cur_state <= next_state;
// state transition logic:
always@(*)
	case(cur_state)
	IDLE:
	begin
	if(a)
	next_state = SA;
	else if(b)
	next_state = SB;
	else
	next_state = IDLE;
	end
	SA:
	begin
	if(a)
	next_state = SA;
	else
	next_state = SAB;
	end
	SB:
	begin
	if(b)
	
================================================================
example-11: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA.
// if only input b is high, state changes to SB.
always @(posedge clk) begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*) begin
case(cur_state)
IDLE:
begin
if(a & b)
next_state <= SA;
else if(a)
next_state <= SB;
else if(b)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a & b)
next_state <= SAB;
else if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SB:
begin
if
================================================================
example-12: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE. 
// if only input a is high, state changes to SA. 
// if only input a is low, state changes to SB. 
always @(posedge clk)
if(reset)
	cur_state <= IDLE;
else
	cur_state <= next_state;
always @(*)
	if(cur_state == SAB)
	z <= 1;
	else
	z <= 0;
always @(*)
	case(cur_state)
	IDLE:
	if(a)
	next_state <= SA;
	else if(b)
	next_state <= SB;
	else
	next_state <= IDLE;
	SA:
	if(a)
	next_state <= SB;
	else
	next_state <= S
================================================================
example-13: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk, posedge reset)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
always @(cur_state or a or b)
case (cur_state)
IDLE: begin
next_state = IDLE;
if (a) next_state = SA;
else if (b) next_state = SB;
end
SA: begin
next_state = SA;
if (a) next_state = SA;
else if (b) next_state = SAB;
end
SB: begin
next_state = SB;
if (a) next_state = SA;
else if (b) next_state = SAB;

================================================================
example-14: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to SA.
always @(posedge clk, posedge reset) begin
	if(reset) cur_state <= IDLE;
	else cur_state <= next_state;
end
// Output logic:
always @(*) begin
	case(cur_state)
	IDLE: z <= 1'b0;
	SA: z <= 1'b0;
	SB: z <= 1'b0;
	SAB: z <= 1'b1;
	endcase
end
// State transition logic:
always @(*) begin
	case(cur_state)
	IDLE: next_state <= a ? SA : IDLE;
	SA: next_state <= a ? SA : b ? SB : IDLE;
	SB: next_state <= b ? SAB : IDLE;
	SA
================================================================
example-15: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to IDLE.
always @(posedge clk or posedge reset)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
always @(*)
case (cur_state)
IDLE: next_state <= ((a)&&(b)) ? SA : IDLE;
SA: next_state <= ((a)&&(b)) ? SA : (((b)&&(a)) ? SAB : IDLE);
SB: next_state <= IDLE;
SAB: next_state <= ((a)&&(b)) ? SAB : IDLE;
default: next_state <= IDLE;
endcase
assign z = (cur_state == SAB);

================================================================
example-16: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// otherwise, state changes to SA.
always @(posedge clk)
begin
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(cur_state or a or b)
begin
	//combinational logic for present state and next state
	case (cur_state) 
	IDLE : 
	begin
	if(a&b)
	next_state = SAB;
	else
	next_state = SA;
	end
	SA : 
	begin
	if(a&b)
	next_state = SAB;
	else
	next_state = SA;
	end
	SB : 
	begin
	if(a&b)
	next_state = SAB;
	else
	next_state = SB;
================================================================
example-17: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE state.
// if only input a is high, state changes to SA.
// if only input b is high, state changes to SB.
always@(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE:
begin
next_state <= (a&b) ? SA:IDLE;
end
SA:
begin
next_state <= (a&b) ? SA:SB;
z = 1'b0;
end
SB:
begin
next_state <= (a&b) ? SA:IDLE;
z = 1'b0;
end
endcase
end

================================================================
example-18: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a and b are both low, state changes to IDLE.
// If input a and b are both high, state changes to SA.
always @ (posedge clk or negedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ (cur_state or a or b)
begin
next_state = IDLE;
case (cur_state)
IDLE:
if(a && b)
next_state = SA;
else if (a)
next_state = SB;
end
SA:
if(a && b)
next_state = SAB;
else if (a)
next_state = SA;
end
SB:
if(a && b)
next_state = SAB;
else if (a)
next_state = SB;
================================================================
example-19: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a or b are both low, state changes to SA.
// if only one of them is high, the state remains unchanged.
always @(posedge clk or negedge reset) begin
if(!reset)
cur_state <= IDLE;
else begin
cur_state <= next_state;
end
end
// Edge triggered sequential logic:
always @(*) begin
if(a == 1'b1 && b == 1'b0)
next_state <= SA;
else if(a == 1'b0 && b == 1'b0)
next_state <= IDLE;
else
next_state <= SAB;
end
// Output z:
always @(posedge clk or negedge reset) begin
if(!reset)
z <= 1'b0;
else begin
case(cur_state)
IDLE: z <=
================================================================
example-20: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high only, state changes to SA.
// if input b is high only, state changes to SB.
always @(posedge clk, posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case (cur_state)
IDLE: 
begin
if (a & b)
next_state = SA;
else if (a)
next_state = SB;
else if (b)
next_state = SAB;
else
next_state = IDLE;
end
SA: 
begin
if (a & b)
next_state = SAB;
else
next_state = IDLE;
end
SB:
begin
if (a)
next_state = SA;
else
next_state = ID
================================================================
example-21: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only one of them is high, next state is determined by the following table:
// INIT
// SA
// SB
// SAB
// if SA and B are both high, SAB is selected.
always@ (posedge clk or posedge reset)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next state combinational logic:
always@ (cur_state or a or b)
case(cur_state)
IDLE: begin
	if(a)
	next_state <= SA;
	else if(b)
	next_state <= SB;
	else
	next_state <= IDLE;
	end
SA: begin
	if(a)
	next_state <= IDLE;
	else
	next_state <= SAB;
	end
SB: begin
	
================================================================
example-22: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA. 
// if only input b is high, state changes to SB. 
always@(posedge clk)
if(reset) 
cur_state <= IDLE;
else 
cur_state <= next_state;
always@(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
if(a==1'b1 && b==1'b1) next_state = SA;
else if(a==1'b1 && b==1'b0) next_state = SB;
else if(a==1'b0 && b==1'b1) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if(a==1'b1 && b==1'b1) next_state = SAB
================================================================
example-23: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a and input b are both low, state changes to IDLE. 
// if none of the inputs are high, state stays in the same state. 
always @(posedge clk or negedge reset)
begin
if (reset == 1'b0)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// nextstate combinational logic
always @(*)
begin
case (cur_state)
IDLE : begin
if (a == 1'b1 && b == 1'b0)
next_state = SA;
else if (a == 1'b0 && b == 1'b1)
next_state = SB; 
else if (a == 1'b0 && b == 1'b0)
next_state
================================================================
example-24: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB.

always @(posedge clk,posedge reset)
begin
if (reset == 1)
cur_state <= IDLE;
else
cur_state <= next_state;
end

always @(*)
begin
case (cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end

SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end

SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end

SAB:
begin
if(a
================================================================
example-25: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, the next state is SA.
// if only b is high, the next state is SB.
always @(posedge clk)
begin
if(reset == 1)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a == 1)
next_state = SA;
else if(b == 1)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if(a == 1)
next_state = IDLE;
else
next_state = SAB;
end
SB:
begin
if(b == 1)
next_state = IDLE;
else
next_state = SAB;
end
SA
================================================================
example-26: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA
// if only b is high, state changes to SB
always @(posedge clk, posedge reset)
begin
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(cur_state)
begin
	case(cur_state)
	IDLE:
	begin
	next_state <= SA;
	z <= 1'b0;
	end
	SA:
	begin
	next_state <= SA;
	z <= 1'b0;
	end
	SB:
	begin
	next_state <= SB;
	z <= 1'b0;
	end
	SAB:
	begin
	next_state <= SAB;
	z <= 1'b1;
	end
	default
================================================================
example-27: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a or b are both low, state changes to IDLE. 
// if input b is high only, state changes to SA.
// if input b is low only, state changes to SB.
always @(posedge clk or posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin : combinational_logic
case (cur_state)
IDLE : begin
if (a == 1'b1 && b == 1'b1) begin
next_state <= SA;
z <= 1'b0;
end
else if (a == 1'b1 && b == 1'b0) begin
next_state <= IDLE;
z <= 1'b0;
end
else if (a == 1'b0 && b == 1'b0) begin
next
================================================================
example-28: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
always @(posedge clk or posedge reset) begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// FSM next state logic:
// Assert SAB when inputs are both high.
always @(*) begin
case(cur_state)
IDLE:
if(a && b)
next_state <= SA;
else
next_state <= IDLE;
// SAB is asserted for one clock cycle.
SA: 
if(a && b)
next_state <= SAB;
else
next_state <= IDLE;
// SAB is asserted for one clock cycle.
SB:
if(a && b)
next_state <= SAB;
else
next_state <= IDLE;
endcase
end
// Output z
assign z = (cur_state == SAB
================================================================
example-29: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high or b is high, state changes to SA.
// if input a or b is low, state changes to SB.
always @(posedge clk) begin
if(reset) 
cur_state <= IDLE;
else 
cur_state <= next_state;
end
always@(cur_state,a,b) begin
case(cur_state)
IDLE: begin
if(a==0 && b==0)
next_state <= SA;
if(a==0 && b==1)
next_state <= SB;
if(a==1 && b==0)
next_state <= SAB;
end
SA: begin
if(a==0 && b==0)
next_state <= SA;
if(a==0 && b==1)
next_state <= SAB;
if(a==1 && b
================================================================
example-30: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE
// if input a is high and b is low, state changes to SA
// if input a is low and b is high, state changes to SB
always @(posedge clk) begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*) begin
case (cur_state)
IDLE: 
next_state <= a&b ? SA : IDLE;
// SA: state is SAB, next_state is SA
SA: 
next_state <= a&b ? SA : SB;
// SB: state is SAB, next_state is SB
SB:
next_state <= b ? IDLE : SAB;
default:
next_state <= IDLE;
endcase
end
always @(*) begin
case
================================================================
example-31: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// FSM next state logic: 
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a == 1'b1 && b == 1'b1)
next_state <= SA;
else if(a == 1'b1 && b == 1'b0)
next_state <= SB;
else if(a == 1'b0 && b == 1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
================================================================
example-32: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input b is high, then if input a is high, state changes to SA, 
// else state changes to SB.
// if input a is high, then if input b is high, state changes to SAB, 
// else state changes to SA.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SAB;
else
next_state <= IDLE
================================================================
example-33: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, a becomes low.
// if input a and b are both low, state changes to SA.
always@(cur_state or a or b)
	begin
	case(cur_state)
	IDLE:
	if(a)
	next_state = SA;
	else if(b)
	next_state = SB;
	else
	next_state = IDLE;
	SA:
	if(a)
	next_state = SA;
	else if(b)
	next_state = SAB;
	else
	next_state = IDLE;
	SB:
	if(a)
	next_state = IDLE;
	else if(b)
	next_state = SB;
	else
	next_state = SAB;
	SAB:
	
================================================================
example-34: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
always @(posedge clk)
begin
if (reset)
cur_state<=IDLE;
else 
cur_state<=next_state;
end
// next state logic:
always @(*)
begin
case(cur_state)
IDLE: next_state= (a & b) ? SA : IDLE;
SA: next_state= (a & b) ? SA : SAB;
SAB: next_state= (a & b) ? SAB : IDLE;
default: next_state=IDLE;
endcase
end
// Output z:
assign z=(cur_state==SAB);

================================================================
example-35: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always@(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state, a, b)
begin
case(cur_state)
IDLE: next_state <= (a & b) ? SA : IDLE;
SA: next_state <= (a & b) ? SA : SB;
SB: next_state <= (a & b) ? SA : IDLE;
default: next_state <= IDLE;
endcase
end
always@(cur_state)
begin
case(cur_state)
IDLE: z = 1;
SA: z = 0;
SB: z = 0;
default: z =
================================================================
example-36: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always@(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next_state logic:
always@(*)
begin
case(cur_state)
IDLE:
if(a)
begin
next_state <= SA;
z <= 1;
end
else if(b)
begin
next_state <= SB;
z <= 1;
end
else
begin
next_state <= IDLE;
z <= 0;
end
SA:
begin
next_state <= SAB;
z <= 1;
end
SB:
begin
next_state <= SAB;
z <= 0;
end
SAB:

================================================================
example-37: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE.
// if input a and b are both high, state changes to SA.
always @(posedge clk)
begin
if(reset==1)
cur_state<=IDLE;
else
cur_state<=next_state;
end
always @(*)
begin
case(cur_state)
IDLE:begin
if(a==0 && b==0)
next_state <= IDLE;
else if(a==0 && b==1)
next_state <= SA;
else if(a==1 && b==0)
next_state <= SB;
else
next_state <= SAB;
end
SA:begin
if(a==1 && b==0)
next_state <= IDLE;
else
next_state <= SA;
end
SB:begin

================================================================
example-38: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only one of them is high, the other state is chosen, and the result becomes SA.
// if neither a nor b is high, the current state remains the same and the result is SAB.
always @(posedge clk or posedge reset) begin
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always @(*) begin
// Set SAB as default
next_state <= IDLE;
case (cur_state)
IDLE: begin
if (a == 1 && b == 1) next_state <= SA;
else if (a == 0 && b == 0) next_state <= SAB;
else next_state <= IDLE;
end
SA: begin
if (a == 0 && b == 0) next_state <= SAB;
else next_state <= IDLE;
end
SB: begin

================================================================
example-39: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to IDLE.
always @(posedge clk or posedge reset)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
// next state logic:
always @(cur_state or a or b)
case (cur_state)
IDLE: begin
next_state <= SA;
z <= 1'b0;
end
SA: begin
next_state <= SB;
z <= 1'b0;
end
SB: begin
next_state <= SAB;
z <= 1'b0;
end
SAB: begin
next_state <= IDLE;
z <= 1'b1;
end
endcase

================================================================
example-40: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only b is high, then state changes to SA.
// if only a is high, then state changes to SB.
always @(posedge clk) begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// Output logic:
always @(cur_state) begin
case(cur_state)
	IDLE :
	begin
	z <= 0;
	end
	SA :
	begin	
	z <= 1;
	end
	SB :
	begin
	z <= 1;
	end
	SAB :
	begin	
	z <= 0;
	end
endcase
end
// State change logic:
always @(a or b or cur_state) begin
case(cur_state)
	IDLE :
	begin
	if(a) next_state
================================================================
example-41: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA. 
// if input b is high, state changes to IDLE. 
always @(posedge clk, posedge reset)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next state combinational logic:
always @(cur_state,a,b)
case(cur_state)
IDLE: next_state <= (a) ? SA : IDLE;
SA: next_state <= (b) ? SB : SA;
SB: next_state <= (b) ? IDLE : SAB;
SAB: next_state <= (a) ? SA : IDLE;
default: next_state <= IDLE;
endcase
// output logic:
assign z = (cur_state == SAB);

================================================================
example-42: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b both are low, state changes to IDLE.
// if only input a is high, state changes to SA. 
// if only input b is high, state changes to SB. 
always @(posedge clk, posedge reset)begin
	if(reset)
	cur_state <= IDLE;
	else 
	cur_state <= next_state;
end
always @(cur_state,a,b)
case(cur_state)
IDLE: begin
	if(a==1'b1 && b==1'b1)
	next_state <= SA;
	else if(a==1'b1 && b==1'b0)
	next_state <= SB;
	else if(a==1'b0 && b==1'b1)
	next_state <= SAB;
	else

================================================================
example-43: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA. 
// if only input b is high, state changes to IDLE. 
always @(posedge clk or posedge reset)
begin
if (reset) 
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// combinational logic:
// z is made high on SAB and low on IDLE
// and SA when both a and b are high.
// Note that state flip-flops do not
// need to be synchronous or continuous.
always @*
begin
// default values for next_state
next_state <= cur_state;
case (cur_state):
IDLE : begin
if (a & b)
next_state <= SA;
else
next_state <= IDLE;
end
SA : begin
if (a & b)
next
================================================================
example-44: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
// if any input is low, state changes to IDLE.
always @(posedge clk, posedge reset) begin
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(*) begin
	case (cur_state)
	IDLE: next_state = a & b;
	SA: next_state = b;
	SB:
	next_state = IDLE;
	default: next_state = IDLE;
	endcase
end
assign z = (cur_state == SAB); 

================================================================
example-45: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA. 
// if input b is high, state changes to SB. 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	cur_state <= IDLE;
	else 
	cur_state <= next_state;
end
always @(cur_state) 
case(cur_state)
	IDLE: next_state <= a ? SA : IDLE;
	SA: next_state <= b ? SB : SA;
	SB: next_state <= b ? IDLE : SAB;
	SAB: next_state <= a ? IDLE : SA;
endcase
// Output logic:
assign z = (cur_state == SAB) ? 1 : 0;

================================================================
example-46: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to SA. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(cur_state or a or b)
case(cur_state) 
IDLE: if(a) next_state <= SA; 
else if(b) next_state <= SB; 
else next_state <= IDLE;
SA: if(a) next_state <= SAB; 
else if(b) next_state <= IDLE; 
else next_state <= SA; 
SB: if(a) next_state <= IDLE; 
else if(b) next_state <= SB; 
else next_state <= SAB; 
SAB: if(a) next_state <= IDLE; 
else
================================================================
example-47: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA. 
// if only input b is high, state changes to SB.
always@(posedge clk, posedge reset)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state = SA;
else if(b)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if(a)
next_state = IDLE;
else
next_state = SAB;
end
SB:
begin
if(b)
next_state = IDLE;
else
next_state = SAB;
end
SAB:
begin
if(a)
next_state = IDLE
================================================================
example-48: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA. 
// if only b is high, state changes to SB. 
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if (a)
next_state <= SA;
else
next_state <= IDLE;
end
SA:
begin
if (b)
next_state <= SB;
else
next_state <= IDLE;
end
SB:
begin
if (a)
next_state <= SAB;
else
next_state <= IDLE;
end
default:
begin
next_state <= IDLE;
end
endcase
end
// Outputz logic:
always @(*)
begin
================================================================
example-49: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high only, state changes to SA.
// if input b is high only, state changes to SB.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a&&b==0)
next_state = SA;
else if(a&&b==1)
next_state = SB;
else
next_state = IDLE;
end
SA:
begin
if(a)
next_state = IDLE;
else
next_state = SAB;
end
SB:
begin
if(b)
next_state = IDLE;
else
next_state = SAB;
end
SAB:
begin
if(a==
================================================================
