example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if (a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if (b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if (a)
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if (a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if (b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if (a)
next
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SA
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// State transition logic:
always @(*)
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
end
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
SAB:
begin
if(a)
next
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-10: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
================================================================
example-11: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-12: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-13: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
================================================================
example-14: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// next state combinational logic:
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
================================================================
example-15: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-16: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-17: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
// Output logic:
================================================================
example-18: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE: begin
if (a) next_state <= SA;
else if (b) next_state <= SB;
else next_state <= IDLE;
end
SA: begin
if (a) next_state <= SA;
else next_state <= SAB;
end
SB: begin
if (b) next_state <= SB;
else next_state <= SAB;
end
SAB: begin
if (a) next_state <= SA;
else next_state <= SAB;
end
default
================================================================
example-19: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-20: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-21: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b0)
next_state <= SA;
else if(a==1'b0 && b==1'b1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1 && b==1'b0)
next_state <= SAB;
else
next_state <= SA;

================================================================
example-22: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-23: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-24: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-25: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-26: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-27: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-28: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
================================================================
example-29: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if(a)
next
================================================================
example-30: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1
================================================================
example-31: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-32: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-33: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-34: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-35: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b0)
next_state <= SA;
else if(a==1'b0 && b==1'b1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1 && b==1'b0)
next_state <= SAB;
else
next_state
================================================================
example-36: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1
================================================================
example-37: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
SAB:
begin

================================================================
example-38: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
================================================================
example-39: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase

================================================================
example-40: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a==
================================================================
example-41: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= IDLE;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= IDLE;
else
next_state <= SAB;
end
SAB:
begin
if(a)
================================================================
example-42: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-43: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b0)
next_state <= SA;
else if(a==1'b0 && b==1'b1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1 && b==1'b0)
next_state <= SAB;
else
next_state
================================================================
example-44: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-45: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a==1'b1 && b==1'b1)
next_state <= SA;
else if(a==1'b1 && b==1'b0)
next_state <= SB;
else if(a==1'b0 && b==1'b1)
next_state <= SAB;
else
next_state <= IDLE;
end
SA:
begin
if(a==1'b1
================================================================
example-46: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
assign z =
================================================================
example-47: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA.
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
always @(*)
begin
case(cur_state)
IDLE:
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if(a)
next_state <= SA;
else
next_state <= SAB;
SB:
if(b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;
endcase
end

================================================================
example-48: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always @(posedge clk)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if(a)
================================================================
example-49: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// State transition logic:
always @(*)
case (cur_state)
IDLE:
if (a)
next_state <= SA;
else if (b)
next_state <= SB;
else
next_state <= IDLE;
SA:
if (a)
next_state <= SA;
else
next_state <= SAB;
SB:
if (b)
next_state <= SB;
else
next_state <= SAB;
SAB:
next_state <= SAB;
default:
next_state <= IDLE;

================================================================
