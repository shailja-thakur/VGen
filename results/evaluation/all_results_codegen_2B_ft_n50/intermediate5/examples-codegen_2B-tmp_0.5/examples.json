// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @ (posedge clk)\nbegin\nif (reset)\nout <= 0;\nelse if (load)\nout <= data;\nelse begin\nout[0] <= data[7-amount];\nout[1] <= out[0];\nout[2] <= out[1];\nout[3] <= out[2];\nout[4] <= out[3];\nout[5] <= out[4];\nout[6] <= out[5];\nout[7] <= out[6];\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse begin\nout[0] <= data[7];\nout[1] <= out[0];\nout[2] <= out[1];\nout[3] <= out[2];\nout[4] <= out[3];\nout[5] <= out[4];\nout[6] <= out[5];\nout[7] <= out[6];\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\nout <= 0;\nelse if (load)\nout <= data;\nelse begin\nout = out << amount;\nend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 3,
      "logprobs": null,
      "text": "always@(posedge clk,posedge reset)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse\nbegin\ncase(amount)\n3'b000: out <= data;\n3'b001: out <= {data[0],data[7:1]};\n3'b010: out <= {data[1:0],data[7:2]};\n3'b011: out <= {data[2:0],data[7:3]};\n3'b100: out <= {data[3:0],data[7:4]};\n3'b101: out <= {data[4:0],data[7:5]};\n3'b110: out <= {data[5:0],data[7:6]};\n3'b111: out <= {data[6:"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse begin\nout <= {out[6:0],out[7]};\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\nout <= 8'b00000000;\nelse if (load)\nout <= data;\nelse\nout <= out << amount;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b00000001;\nelse if (load)\nout <= data;\nelse if (amount == 3'b000)\nout <= data;\nelse if (amount == 3'b001)\nout <= {data[0],data[7:1]};\nelse if (amount == 3'b010)\nout <= {data[1:0],data[7:2]};\nelse if (amount == 3'b011)\nout <= {data[2:0],data[7:3]};\nelse if (amount == 3'b100)\nout <= {data[3:0],data[7:4]};\nelse if (amount == 3'b101)\nout <= {data[4:0],data[7:5]};\nelse if (amount == 3'b110)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always@(posedge clk,posedge reset)\nbegin\nif (reset)\nout <= 0;\nelse if (load)\nout <= data;\nelse\nout <= {out[6:0],out[7]};\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b00000000;\nelse if (load)\nout <= data;\nelse\nbegin\nout <= out << amount;\nout <= out >> 8;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0],out[7]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\n if(reset)\n out <= 0;\n else if(load)\n out <= data;\n else\n out <= {out[6:0],out[7]};\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 11,
      "logprobs": null,
      "text": "// the left shift operation is delayed by one cycle\nalways @(posedge clk)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse if(amount == 3'b000)\nout <= {data[0],data[7:1]};\nelse if(amount == 3'b001)\nout <= {data[1],data[7:2]};\nelse if(amount == 3'b010)\nout <= {data[2],data[7:3]};\nelse if(amount == 3'b011)\nout <= {data[3],data[7:4]};\nelse if(amount == 3'b100)\nout <= {data[4],data[7:5]};\nelse if(amount == 3'b101)\nout <= {data[5],data[7:6]"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @ (posedge clk)\nbegin\nif (reset)\nout <= 8'b00000000;\nelse if (load)\nout <= data;\nelse begin\nout <= out << amount;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse begin\nout <= out << amount;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @ (posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout = 8'b0;\n\tend\n\telse if (load)\n\tbegin\n\tout = data;\n\tend\n\telse\n\tbegin\n\tout = {1'b0,out[7:1]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse\n\tbegin\n\tif (load)\n\tout <= data;\n\telse\n\tout <= out >> amount;\n\tend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 16,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse begin\ncase(amount)\n3'b000: out <= {data[0],data[7:1]};\n3'b001: out <= {data[1],data[7:2]};\n3'b010: out <= {data[2],data[7:3]};\n3'b011: out <= {data[3],data[7:4]};\n3'b100: out <= {data[4],data[7:5]};\n3'b101: out <= {data[5],data[7:6]};\n3'b110: out <= {data[6],data[7]};\n3'b111: out <= {data[7],data[7"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "always @ (posedge clk, posedge reset)\nbegin\nif (reset)\n\tout <= 8'b0;\nelse if (load)\n\tout <= data;\nelse if (amount !== 3'b0)\n\tout <= out << amount;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "always@(posedge clk)\nbegin\nif(reset)\nout <= 0;\nelse if(load)\nout <= data;\nelse begin\nout <= out << amount;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "always@(posedge clk,posedge reset)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse\nout <= out << amount;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 20,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\tbegin\n\tout<=0;\n\tend\n\telse if(load)\n\tbegin\n\tout<=data;\n\tend\n\telse \n\tbegin\n\tcase(amount)\n\t3'b000:\n\tbegin\n\tout<={data[0],data[7:1]};\n\tend\n\t3'b001:\n\tbegin\n\tout<={data[1],data[7:2]};\n\tend\n\t3'b010:\n\tbegin\n\tout<={data[2],data[7:3]};\n\tend\n\t3'b011:\n\tbegin\n\tout<={data[3],data[7:4]};\n\tend\n\t3'b100:\n\tbegin\n\tout<={data[4"
    },
    {
      "finish_reason": "stop",
      "index": 21,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\nbegin\n\tif(reset==1'b1)\n\tbegin\n\tout<=8'b0;\n\tend\n\telse if(load==1'b1)\n\tbegin\n\tout<=data;\n\tend\n\telse\n\tbegin\n\tout<={1'b0,out[7:1]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 22,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b00000001;\nelse if (load)\nout <= data;\nelse\nout <= out << amount;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 23,
      "logprobs": null,
      "text": "always@(posedge clk)\nbegin\nif(reset)\nout <= 8'b00000000;\nelse\nif(load)\nout <= data;\nelse\nif(amount == 3'b000)\nout <= {data[0],data[7:1]};\nelse\nif(amount == 3'b001)\nout <= {data[1],data[7:2]};\nelse\nif(amount == 3'b010)\nout <= {data[2],data[7:3]};\nelse\nif(amount == 3'b011)\nout <= {data[3],data[7:4]};\nelse\nif(amount == 3'b100)\nout <= {data[4],data[7:5]};\nelse\nif(amount == 3'b101)\nout <= {data[5],data[7:6]};\nelse\n"
    },
    {
      "finish_reason": "length",
      "index": 24,
      "logprobs": null,
      "text": "always @ (posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse if (amount == 3'b001)\nout <= {1'b0,out[7:1]};\nelse if (amount == 3'b010)\nout <= {1'b0,out[6:1]};\nelse if (amount == 3'b011)\nout <= {1'b0,out[5:1]};\nelse if (amount == 3'b100)\nout <= {1'b0,out[4:1]};\nelse if (amount == 3'b101)\nout <= {1'b0,out[3:1]};\nelse if (amount == 3'b110)\nout <= {1'b0,out[2:1]};\nelse if ("
    },
    {
      "finish_reason": "stop",
      "index": 25,
      "logprobs": null,
      "text": "always @ (posedge clk or posedge reset)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse\nout <= out << amount;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 26,
      "logprobs": null,
      "text": "always @ (posedge clk)\nbegin\nif(reset)\nout <= 8'h0;\nelse if(load)\nout <= data;\nelse\nbegin\nout <= out << amount;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 27,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse begin\nout <= {out[6:0],out[7]};\nout[7] <= out[0];\nend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 28,
      "logprobs": null,
      "text": "always @ (posedge clk or posedge reset)\nbegin\nif (reset)\nout = 8'b0;\nelse if (load)\nout = data;\nelse if (amount == 0)\nout = out;\nelse if (amount == 1)\nout = {1'b0,out[7:1]};\nelse if (amount == 2)\nout = {1'b0,out[7:1],1'b0};\nelse if (amount == 3)\nout = {1'b0,out[7:1],1'b0,out[0]};\nelse if (amount == 4)\nout = {1'b0,out[7:1],1'b0,out[0],1'b0};\nelse if (amount == 5)\nout = {1'b0,out[7:1],1'b0"
    },
    {
      "finish_reason": "stop",
      "index": 29,
      "logprobs": null,
      "text": "always @ (posedge clk)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0],out[7]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 30,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\n\tif (reset == 1'b1)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse if (load == 1'b1)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0], data[7]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 31,
      "logprobs": null,
      "text": "always@(posedge clk or negedge reset)\nbegin\n\tif(reset == 1'b0)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse\n\tbegin\n\tif(load)\n\tout <= data;\n\telse\n\tbegin\n\tout <= {data[7:0],data[7:1]};\n\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 32,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse\nout <= {out[6:0],out[7]};\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 33,
      "logprobs": null,
      "text": "always@(posedge clk,posedge reset)\nbegin\nif(reset)\nout<=8'b0;\nelse if(load)\nout<=data;\nelse begin\nout<={data[7:0],data[15:8]};\nout<={out[7:0],out[15:8]};\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 34,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 8'b00000000;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[0],out[7:1]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 35,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif(reset)\n\tbegin\n\tout <= 8'b00000000;\n\tend\n\telse if(load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {data[0], data[7:1]};\n\tend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 36,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset) begin\nout<=0;\nend\nelse if (load) begin\nout <= data;\nend\nelse if (amount == 3'b000) begin\nout <= out << 1;\nend\nelse if (amount == 3'b001) begin\nout <= {out[6:0],1'b0};\nend\nelse if (amount == 3'b010) begin\nout <= {out[7],out[7:1]};\nend\nelse if (amount == 3'b011) begin\nout <= {out[7:1],out[7:1]};\nend\nelse if (amount == 3'b100) begin\nout <= {out[7:1],out[7:1]};\nend\nelse if (amount == 3'b101) begin\nout <= {out[7:1"
    },
    {
      "finish_reason": "stop",
      "index": 37,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset)\nbegin\nif(!reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse begin\nout <= data << amount;\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 38,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0],out[7]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 39,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 0;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse begin\n\tout <= {out[0],out[7:1]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 40,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\n\tbegin\n\tif(reset)\n\tbegin\n\tout <= 8'b00000000;\n\tend\n\telse\n\tbegin\n\tif(load)\n\tout <= data;\n\telse\n\tout <= out<<amount;\n\tend\n\tend\n"
    },
    {
      "finish_reason": "stop",
      "index": 41,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\nout <= 8'b0;\nelse if(load)\nout <= data;\nelse\nout <= out >> amount;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 42,
      "logprobs": null,
      "text": "always@(posedge clk, posedge reset)\nbegin\nif(reset)\nout<=0;\nelse if(load)\nout<=data;\nelse\nout<={data[7:0],data[15:8]};\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 43,
      "logprobs": null,
      "text": "always@(posedge clk or negedge reset)\nbegin\nif(reset==0)\nout<=0;\nelse if(load==1)\nout<=data;\nelse\nbegin\nout[7]<=out[0];\nout[6]<=out[1];\nout[5]<=out[2];\nout[4]<=out[3];\nout[3]<=out[4];\nout[2]<=out[5];\nout[1]<=out[6];\nout[0]<=out[7];\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 44,
      "logprobs": null,
      "text": "always@(posedge clk)\nbegin\nif (reset)\nout = 8'b00000000;\nelse if (load)\nout = data;\nelse if (amount != 0)\nout = {out[6:0],out[7]};\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 45,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n\tif (reset)\n\tbegin\n\tout <= 8'b0000_0000;\n\tend\n\telse if (load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0], out[7]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 46,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout<=0;\nelse if (load)\nout<=data;\nelse begin\nout<={data[0],data[7:1]};\nout<={out[6:0],out[7]};\nend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 47,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\n\tif(reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse if(load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[0],out[7:1]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 48,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\tbegin\n\tout <= 0;\n\tend\n\telse\n\tbegin\n\tif(load)\n\tout <= data;\n\telse\n\tout <= {out[6:0],out[7]};\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 49,
      "logprobs": null,
      "text": "always@(posedge clk)\nbegin\nif(reset)\nout<=0;\nelse if(load)\nout<=data;\nelse\nout<={out[6:0],out[7]};\nend\n"
    }
  ],
  "created": 1663607322,
  "id": "cmpl-oCVeCkHyuGa8PtarbP3uKwpK6GAla",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 4771,
    "prompt_tokens": 94,
    "total_tokens": 4865
  }
}