example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset) begin
if(reset) out <= 0;
else if(load) out <= data;
else begin
out[0] <=data[7];
out[1] <=data[6];
out[2] <=data[5];
out[3] <=data[4];
out[4] <=data[3];
out[5] <=data[2];
out[6] <=data[1];
out[7] <=data[0];
//shift left
if(amount>1)
begin
out[0] <=out[7];
out[1] <=out[0];
out[2] <=out[1];
out[3] <=out[2];
out[4] <=out[3];
out[5] <=out[4];
out[6] <=out[5];
out
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin 
if (reset) out <= 8'b0000_0000;
else if (load) out <= data;
else if (amount)
begin
state <= 1;
data[7:0] <= out[0];
out[7:1] <= data[6:0];
out <= out << amount;
end
else
begin
out[7:0] <= data[7:0]; 
state <= 0;
end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,reset) begin
if(reset==1) out<=0;
else if(load==1) out<=data;
else begin
case(amount)
3'b000: out<=out << 1;
3'b001: out<=out << 2;
3'b010: out<=out << 4;
3'b011: out<=out << 8;
3'b100: out<=out << 16;
3'b101: out<=out << 32;
3'b110: out<=out << 64;
3'b111: out<=out;
default: out<=out;
endcase
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// of rotate has to be done before nextrotate signalh is high
always@ (posedge clk) begin
 
if (~reset) begin
out <= 8'b00000000;
end
// if not reset && set data -> set data to out
else if (load) begin 
	out <= data;
	end
else begin
	case (amount) 
 2: out <= {out[0], out[1], out[3], out[5], out[6], out[7], out[2], out[4], out[8], out[10]};
 3: out <= {out[1], out[3], out[5], out[6], out[7], out[8], out[0], out[2], out[4], out[10]};
 4: out <= {out[2], out[4], out[6], out[7], out
================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or reset) begin
if (reset == 1'b0) begin
out <= 0;
end
else begin
if (load == 1'b1) begin
out <= data;
end
else begin
out <= {data[6:0], amount};
end
end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (negedge clk) begin
if (reset== 1)
out <= 8'b0000_0000;
else if(load)
out <= data;
else begin
if(amount== 3'b000)
out <= {data[0],data[7:1]};
else if(amount== 3'b001)
out <= {data[1],data[7:2]};
else if(amount== 3'b010)
out <= {data[2],data[7:3]};
else if(amount== 3'b011)
out <= {data[3],data[7:4]};
else if(amount== 3'b100)
out <= {data[4],data[7:5]};
else if(amount== 3'b101)
out <= {data[5],data[7:6]};
else if(
================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
	always @ (posedge clk)
	begin
	if(amount != 0)
	out = { shift_left_reg, GND_driver };
	if(load == 1'b0)
	out = data;
	end
	always @ (posedge clk)
	if(load)
	begin
	shift_left_reg <= { 1'b0, counter };#25
	end
	else
	begin
	shift_left_reg <={ 1'b0, shift_left_reg[4:1];#10
	end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if (reset == 1'b1) out <= 8'b0;
	else if(load) out <= data;
	else begin
	out <= data << amount;
	out <= {1'b0,out[7:1]};
	end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset) out <= 8'd0;
else
if(load || (amount == 3'b001 && out[0] == 1'b0)) out <= data;
else begin
out[ 7: 0] <= out[ 6: 0];
out[ 8] <= 1'b0;
end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
 if (reset) end
 else begin
 if (load) begin
out <= data;
end
 else begin
for(i=0;i<8;i=i+1) begin
for(j=7;j>-1;j=j-1) begin
	out[j] <= out[j-1];
 end
 out[0] <= amount[0];
end
end
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(negedge clk)
begin
if(reset== 1'b1)
out<= 8'b0;
else if(load == 1'b1)
out<= data;
else 
begin
out<= out<<amount;
out<= {7'b0,out[0]};
end
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or reset)
begin
if(reset==1'b1)
out<=8'b0;
else if (load== 1'b1)
	out <= data;
else if (amount!= 3'b100)
	out &= ~( 8'b0 << amount);
else 
out <<= 8'b1;
end	

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin

if (reset)
begin
out=8'b0;
end
else if (load)
begin
out=data;
end
else 
if (amount>0)
begin
out ={1'b0,out[7:1]};
end
else if (amount<0)
begin
out = {out[6:0],1'b0};
end
end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
 begin
 if(reset == 1'b0)
 out <= 8'b00000000;
 else if(load == 1'b1)
 out <= data;
 else
 begin
 casex(amount)
 1:out<=out<<1;
 2:out<=out<<2;
 3:out<=out<<3;
 4:out<=out<<4;
 5:out<=out<<5;
 6:out<=out<<6;
 7:
 out <= data;
 endcase
 end
 end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset) 
begin
//if reset, output is 0
if (reset) out <= 8'b0;
//whenever a changeable signal comes in, store it
else if (load) out <= data;
//else if array is not full, left shift by one
else if (!load) out <= out << 1;
end

================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk,posedge reset)
begin 
if (reset) out<= 8'h0;
else if (load) out <= data;
else if(amount ) out<= data<<amount;
end 

================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
	if (~reset)
	// reset
	
	out <= 0; 
	
	else if (load)
	// if load also high...
	
	out <= data;
	
	else if (amount == 3'b0)
	// no shift/rotate
	out <= out;
	
	else if (amount == 3'b001)
	begin
	// rotation is 1
	out <= {entries[0],entries[1],entries[2],entries[3],entries[4],entries[5],entries[6],entries[7],entries[8],entries[9],entries[10],entries[11],entries[12],entries[13],entries[14],entries[15],entries[16],
================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk ) begin
if (reset) out = 0;
else 
	begin
	if(load) data<=out;
	else
	case(amount)
	3'b000: out = data;
	3'b001: out = {1'b0,data[7:1]};	//	left shift
	3'b010: out = {data[6:0],1'b0};
	3'b011: out = {1'b0,data[7:2]};	//	left shift
	3'b100: out = {data[7:0],1'b0};
	3'b101: out = {{8{data[7]}},1'b0};	// left shift and invert 1st bit
	3'b110: out = {{{data[7]},1
================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(*)
begin
if(load)
	out <= data;
else
	begin
	case(amount)
	3'b000: out <= {data{1'b0}};
	3'b001: out <= {data{1'b1}};
	3'b100: out <= {data{1'b0}};
	3'b101: out <= {data} >> 1'b1;
	3'b110: out <= {data} >> 2'b1;
	3'b111: out <= {data} >> 3'b1;
	default: out <= 8'bxxxxxxxx;
	endcase
	end
end

================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// the logic for shift and rotate follows
always @(posedge clk) 
begin
	if (reset)
	begin
	out <= 8'b00000000;
	end
	else
	begin
	out <= data;
	end
end
always @(posedge clk)
begin
	if (reset) begin
	out <= data;
	end
	else if (load)
	begin
	out <= data;
	end
	else if (amount!=0)
	begin
	out = out<<amount;
	end
	end
// end the always block when reset is low

================================================================
example-20: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk) 
begin
if (reset)
out <= 8'b00000000; 
else if (load)

out <= data;
else if (amount!=33 ;
out <= {out[6:0],out[7]}}; 
end

================================================================
example-21: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// if amount = 0, data and q and d are same
assign q = {1'b1,{amount, 1'b1} }; 
always @ (posedge clk or resethand)
begin
if(reset)
out <= {8'b0, 1'b1};
else if(load) 
out <= data;
else
out <= q;
end

================================================================
example-22: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else if (load | reset)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7] << amount};
	end
end

================================================================
example-23: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
if(reset==1'b1)
out<=8'b00000000;
else
begin
if(load==1'b1)
out<=data;
else
begin
out<=out>>amount;
end
end
end

================================================================
example-24: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ ( posedge clk or posedge reset)
	if(reset) begin
	out <= 8'h0;
	end
	else if(load && !reset) 
	out <= data;
	else if (!load) begin
leftshift # (1,2)(clk,reset,1'b0,out,amount[1],out,amount[2]);
end

================================================================
example-25: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
begin
if(reset)
out <= 0;
else if(load)
out<=data;
else
out <= copy_out(amount);
end

================================================================
example-26: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or reset or load)
begin : left_shift
if (reset)
out <= 8'b00000000;
else if (load)
out <= data;
else if (amount <= 0)
out <= out;
else
out <= {out[0], out[7:1]};
end

================================================================
example-27: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@ (posedge clk or negedge reset)
reset var if(reset==1);
if(clk == 1) begin
	out <= reset var;
end
else begin
	if(load) out <= data;
	else begin
genvar i;
generate
for(i=0;i<8;i=i+1)
	begin : vartree
	if(amount==i) begin
	assign temp[i] = out[i];
	assign out[i] = ~out[i];
	end 
	end
end
end

================================================================
example-28: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @*
begin
	if(load == 1'b1)
	begin
	out = data;
	end
	else
	begin
	out = {1'b0,out[7:1]};
	for(i=0;i<7;i=i+1)
	begin
	out[i] = out[i+3];
	end
	end
end

================================================================
example-29: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
 if (reset)
 out = 0;
 // otherwise rotate the load data to output if load is high, or shift the data
 end
 // rotate the data after load
always @(posedge clk or posedge reset)
begin
 if (reset)
 out = 0;
 else if (load) 
 out = data;
 else 
 out = {8{out[6:0]>0}};
end

================================================================
example-30: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// once the three registers are initialized, load is low
always @(posedge clk or posedge reset)
begin
 if (reset)
 out <= 0;
 else if (load)
 out <= data;
 else
 begin
 out <= { out[0], out[7:1]};
 end
end
always @(posedge clk or posedge reset)
 begin
 if (reset)
 out1 <= 0;
 else if (load)
 out1 <= { out1[0], out1[7:1]};
 else
 out1 <= {out1[6:0], out1[7]};
 end
always @(posedge clk or posedge reset)
 begin
 if (reset)
 out2 <= 0;
 else if (load)
 out2 <= { out2[0], out2[7:1]};
 else
 out2 <= {out
================================================================
example-31: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
	if (reset)out <= 0;
	else begin
	#5 if (load) out <= data;
	else begin
	for (integer i = 0;i < 8;i = i + 1) 
	begin
	out [i] <= out[8-i];
	end
	end
end

================================================================
example-32: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) 
begin
if (reset == 1'b0)
 out <= 8'h00;
else 
 begin
 if (load == 1'b1)
 out <= data;
 else
 begin
 case(amount)
 3'b000: out <= out << 1;
 3'b001: out <= {data_[6:0],out[7]};
 3'b010: out <= {data_[12:7],out[7]};
 3'b011: out <= {data_[18:13],out[7]};
 3'b100: out <= {data_[24],out[7]};
 3'b101: out <= {data_[2],out[7]};
 3'b110: out <= {data_[4],out[7]};
 3'b111
================================================================
example-33: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset)
begin
out<=8'b00000000;
end
end
always @(posedge load,posedge clk)
begin
if (reset) out <= data;
end
always @(posedge out,posedge clk)
begin
if (reset) out<=8'b00000000;
end

================================================================
example-34: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
if(reset)
out<=8'b00000000;
else if(load)
out <= data;
else begin
for(int i=0;i<8;i++)
begin
out[7]<=out[6];
out[6]<=out[5];
out[5]<=out[4];
out[4]<=out[3];
out[3]<=out[2];
out[2]<=out[1];
out[1]<=out[0];
out[0]<=out[7];
end
end
end

================================================================
example-35: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge reset or negedge clk)
if(reset)
begin
out <= 0;
end
else if (load)
begin
out <= data;
end
else
begin
for (int i = 0; i<amount; i=i+1)
begin
out[7] <= out[0];
out[6] <= out[7];
out[5] <= out[6];
out[4] <= out[7];
out[3] <= out[4];
out[2] <= out[5];
out[1] <= out[4];
out[0] <= out[3];
end
end

================================================================
example-36: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk,posedge reset)
begin
if(reset)
out <= 0;
else if(load)
out <= data;
else begin
out[0] <= out[7];
out[1] <= out[0];
out[2] <= out[1];
for(int i=0;i<5;i++)
out[i+1] <= out[i];
for(int i=0;i<6;i++)
out[7] <= out[i];
end

================================================================
example-37: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// and update the data signal
always @(posedge clk) begin
if ( load == 1'b1 ) 
	out = data;
else if ( amount <= 2'b00) begin
	out[0] = data[0];
	out[1] = data[1];
	out[2] = data[2];
	out[3] = data[3];
	out[4] = data[4];
	out[5] = data[5];
	out[6] = data[6];
	out[7] = data[7];
	data = {out[7],out[6],out[5],out[4],out[3],out[2],out[1],out[0]};
	end
else begin
	out = { out[6], out[5], out[4], out[3], out[
================================================================
example-38: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk,posedge reset)
begin
if (reset)
out <= 8'b00000001;
else if (load)
out <= data;
else if (load==0 && amount!=3'b000)
out <= out[6:0] << amount;
end

================================================================
example-39: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
	if(reset == 1'b1)
	begin
	out <= 0;
	end
	if(load == 1'b1) begin
	 $display("load equals");
	 out <= data;
	 end
	if(load == 1'b0 && amount != 10) begin
	$display("amount changes to 10");
	out <= {out[0],out[7:1]};
	end
	if(load == 1'b0 && amount == 10) begin
	$display("amount equals to 10");
	out <= {out[7:1],out[0]};
	end
end

================================================================
example-40: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk,posedge reset)
begin

out <= (reset | load) ? data:
(amount <= 3'd2) ? (out << 1):
(amount <= 3'd4) ? (out << 2):
(amount <= 3'd8) ? (out << 3):
(amount <= 3'd16) ? (out << 4):
(amount <= 3'd32) ? (out << 5):
(amount <= 3'd64) ? (out << 6):
(amount <= 3'd128) ? (out << 7): 0;
 

end


================================================================
example-41: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
if(~reset)
out <=0;
else if(load)
out <= data;
else begin
	out <= out << amount;
	out <= amount > 3 ? out[7:0] : we;
	end
end 

================================================================
example-42: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0]sum;
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	out<=8'b100011_0000;
	sum<=8'b100011_0000;
	end
	//
	else
	begin
	if (load ==1)
	begin
	out<= data;
	sum <=0;
	end
	else
	begin
out[4:0]=out[5:1];
out[7:5]=out[0];
out[0]=out[7:1];
end
sum=out[7]^out[2];
sum[5]=out[6]|out[3];
sum[6]=out[7]&out[0];
end
end

================================================================
example-43: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
case (amount)
0: out <= data;
1: out[0] <= data[7];
2: out[1:7] <= data[6:0];
3: out[2:7] <= data[5:0];
4: out[3:7] <= data[4:0];
5: out[4:7] <= data[3:0];
6: out[5:7] <= data[2:0];
7: out <= data;
endcase
if (load)
out <= data;
else if (amount !=0)
out[7:1] <= out[6:0];
end

================================================================
example-44: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(amount,data)
begin
case(amount)
3'b000: out <= data ; // pass data
3'b001: out<={data[2:0],data[5:3]}; // pass a value and shift in one
3'b010: out<={data[3:0],data[6:5]}; // pass a value and shift in two
3'b111: out<={data[4:0],data[7:6]}; // pass a value and shift in four
 default: out <=0; // initalize output to 0
endcase
end
always@(posedge clk or negedge reset)
begin
if(~reset)
out<=0;
else if(load)
out<=data;
end

================================================================
example-45: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(clk,reset,data,amount,load)
begin
	if(reset)
	begin
	out<=0;
end
else
	begin
	if(load)
	end
else
	begin
	case(out)
	end
end

================================================================
example-46: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
if(reset) 
	out<=0; 
else if(load)
	out<=data;
else
	begin
	case (amount)
	3'b000: out <= out;
	3'b001: out<= {2'b00, data[1:0]};
	3'b010: out<= {1'b0, data[7:2}};
	3'b011: out <= {1'b0, data[7:8]};
	3'b100: out <= {1'b0,data[7:4]};
	3'b101: out <= {data[5], data[7:7]};
	3'b110: out <= {data[3], data[7:7]};
	3'b
================================================================
example-47: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
	begin
	out <= data;
	if (reset == 1)
	end
// this counter is used for the left shift rotate operation
always @(posedge clk,posedge reset)
	begin
	if (reset == 1)
	out <= 0;
	else 
	out <= data << amount;
	end

================================================================
example-48: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

reset_delay delay(reset,clk,out);
always @(posedge clk)
begin
 	out = data;
	if (load == 1'b1)
	begin
	out = data;
	end
	else
	begin
	if (amount == 3'b 000)
	begin
	out = {3'b 00,out[7:1]};
	end
	if (amount == 3'b 001)
	begin
	out = {out[6:1],1'b 0};
	end
	if (amount == 3'b 010)
	begin
	out = {out[5:1],2'b 00};
	end
	if (amount == 3'b 011)
	begin
	out = {out[4:1],3'b 00};
	end
	if (
================================================================
example-49: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if (reset)
out<=0;	//init setting
else
begin
	if(load)
	out<=data;
	else
	begin
	out<=out<<amount;
	end
end
end

================================================================
