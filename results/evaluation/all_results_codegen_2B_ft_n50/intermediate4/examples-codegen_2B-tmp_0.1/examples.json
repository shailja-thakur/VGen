// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nassign out = (present_state == 1) & (next_state == 0);\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= 0;\nendcase\nend\nassign out = (present_state == 1) ? 1 : 0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 16,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 20,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 21,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 22,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 23,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 24,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 25,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 26,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 27,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 28,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 29,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 30,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 31,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 32,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 33,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 34,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nassign out = (present_state == 1) && (next_state == 0);\n"
    },
    {
      "finish_reason": "stop",
      "index": 35,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 36,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 37,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nassign out = (present_state == 1) & (next_state == 0);\n"
    },
    {
      "finish_reason": "stop",
      "index": 38,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 39,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 40,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 41,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 42,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 43,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 44,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 45,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 46,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 47,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nassign out = (present_state == 1) && (next_state == 0);\n"
    },
    {
      "finish_reason": "stop",
      "index": 48,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\ndefault: out <= 1;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 49,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nassign out = (present_state == 1) & (next_state == 0);\n"
    }
  ],
  "created": 1663607157,
  "id": "cmpl-e42x6yXvjHC2tpIt8GBp7XW0cXIvz",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 5719,
    "prompt_tokens": 148,
    "total_tokens": 5867
  }
}