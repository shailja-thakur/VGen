example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
 assign out=((~sel)&a)|(sel&b);

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

assign out= sel ? b : a;

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = ( sel ) ? b : a;

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel ? b : a;

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Create an unnamed wire that holds intermediate results
// in the expression shown.
assign out = 
// Create a right inclusive OR gate 
assign out =
// Create a right inclusive AND gate
// Create a SELECT statement
always @(*)
begin
	case (sel)
// when sel = 0 assign a to out
	sel = 0: out = a;
// when sel = 1 assign b to out
	sel = 1: out = b;
// default nothing
	default: out = a;
	endcase 
end 

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = (sel == 0) ? a : b;



================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.


assign out = sel? b:a;

================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out[0] = (!sel && a[0]) || (!sel && b[0]) ? 1'b1 : 1'b0;
assign out[1] = (!sel && a[1]) || (!sel && b[1]) ? 1'b1 : 1'b0;
assign out[2] = (!sel && a[2]) || (!sel && b[2]) ? 1'b1 : 1'b0;
assign out[3] = (!sel && a[3]) || (!sel && b[3]) ? 1'b1 : 1'b0;
assign out[4] = (!sel && a[4]) || (!sel && b[4]) ? 1'b1 : 1'b0;

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// always @ ( a or b or sel )
// case ( sel )
// 1.0 : out <= a;
// 1.5 : out <= b;
// default: out <= 5'd0;
// endcase
assign out = sel?b:a;

================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// out[4] is carry across
// out[0] is zero
assign out[0] = 0;
// out[7:5] and out[4:1] are selector bits for what to do.
assign out[4:1] = {sel, a[4], a[3], a[2], a[1], a[0]};
assign out[5] = 0;

================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

assign out = sel ? b : a;

================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign #2 out = (sel)?b:a;

================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// Always work on a[4], b[4]
assign out = (sel == 0) ? a : b;

================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel? b : a;


================================================================
example-20: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel?b:a;

================================================================
example-21: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
	//Wrong code! It doesnt select b.h
	//sol is doing that!
	//wanna select 1
	assign
case( sel )
	1'b1:
	begin
	out = a;
	end
	1'b0:
	begin
	out = b;
	end
endcase

================================================================
example-22: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Notice that we explicitly count each output being asserted or deasserted. 
// This is necessary because "1'bz" is a statement keyword, so "[4:0]: (1,2,3, etc.)" fails on the output count. 
always @(a or b or sel)
casex (sel)
1'b0: out <= a; 
1'b1: out <= b; 
endcase


================================================================
example-23: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-24: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
wire [0:0] select;
supply0 zero;
and (select[0], sel, zero);
assign select[1] = 1'b0;
// Not sure why you would use this.
// Make b and a 1 in size logic.
not (c0, b[0]);
not (d0, a[0]);
and (c1, c0, sel);
and (d1, d0, select[0]);
and (e1, b[1], sel);
and (e2, b[2], sel);
and (f1, b[3], sel);
and (f2, b[4], sel);
or (b0, e2, e1);
or (a0, f1, f2);

================================================================
example-25: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel ? b : a;

================================================================
example-26: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always@(sel or a or b) 
case(sel) 
1'b0: out = a; 
1'b1: out = b;
endcase 

================================================================
example-27: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = ( sel == 0 ) ? a : b;

================================================================
example-28: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always@( * )
	if (sel)
	begin
	assign out = b;
	end
	else
	begin
	assign out = a;
	end

================================================================
example-29: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// The data bus issomething like S, R, ST, and LR, therefore:
// When sel=0, assign S and R to a.
// When sel=1, assign L and R to b.
// individual submodules are considered separately connected to each other, 
// hence each connection has its own wires/registers.

	mux2to1 m0( 
.a(a[0]), 
.b(b[0]), 
.sel(sel), 
.out(out[0])
	);
	mux2to1 m1( 
.a(a[1]), 
.b(b[1]), 
.sel(sel), 
.out(out[1])
	);
	mux2to1 m2( 
.a(a[2]), 
.b(b[2]), 

================================================================
example-30: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When a or b are 0, assign 0 to out.

// There can be many ways to assign inputs to an output, usually one is just
// concatenation.
// Concatenation can also be defined with the concatenate instructions.
// see: https://en.wikipedia.org/wiki/Concatenation#Using_assign
assign out = (!sel && a) ? a :
	(sel && b) ? b : 
	0;

// There are two ways to define the order the vectors are concatenated in:
// assign matrix_out = vector_a * vector_b but matrix_out must be ordered first! 

// 2-to-1 multiplexer bordered by a speed�
// number of inputs: %1 = 4, %2= 5, ...
// number of outputs = current total numbers of outputs
// Selected output
================================================================
example-31: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = sel ? b : a;

================================================================
example-32: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel ? b : a;

================================================================
example-33: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = sel ? b : a;

================================================================
example-34: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Multiple use variabless.

================================================================
example-35: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
//q1 = dly (input q0)
/////////////////////////
dly #(5, 1) dly1 (
.a(a[0]), .y(q0)
);
dly #(6, 1) dly2 (
.a(a[1]), .y(q1)
);
dly #(7, 1) dly3 (
.a(a[2]), .y(q2)
);
dly #(8, 1) dly4 (
.a(a[3]), .y(q3)
);
dly #(9, 1) dly5 (
.a(b[0]), .y(q4)
);
dly #(10, 1) dly6 (
.a(b[1]), .y(q5)
);
dly #(11, 1) d
================================================================
example-36: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Multiplexer is implemented using AND gates.
assign out = sel? b : a;

================================================================
example-37: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// There can be multiple bits enabled.
assign out[4]=sel?b[4]:a[4];
assign out[3]=sel?b[3]:a[3]; 
assign out[2]=sel?b[2]:a[2];
assign out[1]=sel?b[1]:a[1]; 
assign out[0]=sel?b[0]:a[0];

================================================================
example-38: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
not #(5) nsel(sel, out_not_sel);
and #(5) an(a, sel, out_not_sel);
and #(5) bn(b, out_not_sel, sel);

================================================================
example-39: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-40: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

================================================================
example-41: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
	assign out = (sel) ? b: a;

================================================================
example-42: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
assign out = (sel == 0) ? a : b ;

================================================================
example-43: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0]MUX[3:0];
always@(a or b or sel)
begin
case(sel)
1'b0 :
MUX[0]<=a;
1'b1 :
MUX[1]<=b;
endcase
end
always@(sel)
begin
case(sel)
1'b0 :
out <= MUX[0];
1'b1 :
out <= MUX[1];
endcase
end

================================================================
example-44: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
reg [4:0]temp;
always @( sel or a or b ) begin
if(sel == 1) temp = b;
else temp = a;
end 
assign out = temp;

================================================================
example-45: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// synthesis verilog_input_version verilog_2001
// altera message_off 10463



//synthesis_resources = mux 2 lpm_mux 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"LPM_CONSTANT=57600"} *)
module mux (
	dataa,
	datab,
	dataout,
	ine,
	sel);

	input	[3:0]	dataa;
	input	[3:0]	datab;
	output	[3:0]	dataout;
	input	dataout;
	input	ine;
	input	sel;

	wire [3:0] sub_wire0;
	wire sub_wire11 =
================================================================
example-46: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out= sel ? b : a;

================================================================
example-47: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// Notice the connections to the mux and the two sub-modules.
// These are the ports in the declaration of the module.
output [4:0] con = 0;

modified_mux mux(
.a(a[4]), .b(b[4]), .sel(sel),
.y1(a[3]), .y2(b[3]),
.y3(a[2]), .y4(b[2]),
.y5(a[1]), .y6(b[1]),
.y7(a[0]), .y8(b[0]),
.sel(con[1]),
.out1(con[0]) 
);

================================================================
example-48: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = (sel) ? b : a;

================================================================
example-49: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(*)
	begin
	case( sel )
	0:
	out<=a;
	1:
	out<=b;
	endcase
	end

================================================================
