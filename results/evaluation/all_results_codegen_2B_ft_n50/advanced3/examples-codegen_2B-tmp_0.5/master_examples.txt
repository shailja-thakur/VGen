example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(present_state, x)
begin
case(present_state)
IDLE: begin
if(x) next_state=S1;
else next_state=IDLE;
end
S1: begin
if(x) next_state=S10;
else next_state=S1;
end
S10: begin
if(x) next_state=S101;
else next_state=S10;
end
S101: begin
if(x) next_state=IDLE;
else next_state=S1;
end
endcase
end
always@(posedge clk)
begin
if(reset) present_state=IDLE;
else present_state=next_state;
end
assign z= (present_state == S101);

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset) begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x) begin
case(present_state)
IDLE:
	if(x)
	next_state <= S1;
	else
	next_state <= IDLE;
	
S1:
	if(x)
	next_state <= S10;
	else
	next_state <= IDLE;
	
S10:
	if(x)
	next_state <= S101;
	else
	next_state <= IDLE;
	
S101:
	if(x)
	next_state <= IDLE;
	else
	next_state <= S1;
endcase
end

assign z =
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x)
begin
case (present_state)
IDLE: begin
if (x) next_state = IDLE;
else next_state = S1;
end
S1: begin
if (x) next_state = IDLE;
else next_state = S10;
end
S10: begin
if (x) next_state = IDLE;
else next_state = S101;
end
S101: begin
if (x) next_state = IDLE;
else next_state = S1;
end
endcase
end

always @(posedge clk or posedge reset)
begin
if (reset) present_state = IDLE;
else present_state = next_state;
end
assign z = (present_state == S101);

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x, reset)
begin
	case(present_state)
	IDLE: begin
	if(reset) next_state = IDLE;
	else if(x) next_state = S1;
	else next_state = IDLE;
	end
	S1: begin
	if(reset) next_state = IDLE;
	else if(x) next_state = S10;
	else next_state = IDLE;
	end
	S10: begin
	if(reset) next_state = IDLE;
	else if(x) next_state = S101;
	else next_state = IDLE;
	end
	S101: begin
	if(reset) next_state = IDLE;
	else next_state = S1;
	end
	endcase
end


================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state <= IDLE;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or x)
begin
case(present_state)
IDLE:
	if(x)
	next_state <= S1;
	else
	next_state <= IDLE;
	
S1:
	if(x)
	next_state <= S10;
	else
	next_state <= S1;
	
S10:
	if(x)
	next_state <= S101;
	else
	next_state <= S10;
	
S101:
	if(x)
	next_state <= IDLE;
	else
	next
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case (present_state)
IDLE : begin
if (x) next_state <= S1;
else next_state <= IDLE;
end
S1 : begin
if (x) next_state <= S10;
else next_state <= IDLE;
end
S10 : begin
if (x) next_state <= S101;
else next_state <= IDLE;
end
S101 : begin
if (x) next_state <= IDLE;
else next_state <= S1;
end
default : next_state <= IDLE;
endcase
end

always @(present_state)
begin

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always@(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
endcase
end

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	 present_state <= IDLE;
	end
	else
	present_state <= next_state;
end

always @(present_state or x)
begin
	case(present_state)
	IDLE:
	begin
	 if (x) next_state <= S1;
	 else next_state <= IDLE;
	end
	S1:
	begin
	 if (x) next_state <= IDLE;
	 else next_state <= S10;
	end
	S10:
	begin
	 if (x) next_state <= IDLE;
	 else next_state <= S101;
	end
	S101:
	begin
	 if (x) next_state <= S1;
	 else next_
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset == 1)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case (present_state)
IDLE: next_state <= x ? S1 : IDLE;
S1: next_state <= x ? S1 : S10;
S10: next_state <= x ? S101 : IDLE;
S101: next_state <= x ? IDLE : S1;
default: next_state <= IDLE;
endcase
end

always @(present_state or x)
begin
case (present_state)
IDLE: z <= 0;
S1: z <= 0;
S10: z <= 0;
S101: z <= x;
default: z <= 0
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
	begin 
	if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
	end
always @(present_state)
case (present_state)
IDLE:	if (x)
next_state <= S1;
else
next_state <= IDLE;
S1:	if (x)
next_state <= S10;
else
next_state <= S1;
S10:	if (x)
next_state <= S101;
else
next_state <= S10;
S101:	if (x)
next_state <= IDLE;
else
next_state <= S101;
default:
next_state <= IDLE;
endcase

assign z = (present_state == S101);

================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always@(present_state or x)
begin
case(present_state)
IDLE:
if(x==1'b1)
next_state<=S1;
else
next_state=IDLE;
S1:
if(x==1'b0)
next_state<=S10;
else
next_state<=IDLE;
S10:
if(x==1'b1)
next_state<=S101;
else
next_state<=IDLE;
S101:
next_state<=IDLE;
default:
next_state<=IDLE;
endcase
end
assign z= (present_state==S
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always@(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end

S1:
begin
if(!x)
next_state <= S10;
else
next_state <= IDLE;
end

S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end

S101:
begin
if(!x)
next_state <= IDLE;
else
next_state <= S1;
end

default:
next_state <= IDLE;
end
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==0)
next_state = IDLE;
else
next_state = S1;
end
S1:
begin
if(x==0)
next_state = S10;
else
next_state = S1;
end
S10:
begin
if(x==0)
next_state = S101;
else
next_state = S1;
end
S101:
begin
if(x==0)
next_state = IDLE;
else
next_state = S1;
end
default:
next_
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x or reset)
begin
	case(present_state)
	IDLE: begin
	if(reset) next_state=IDLE;
	else if(x) next_state=S1;
	else next_state=IDLE;
	end
	S1: begin
	if(reset) next_state=IDLE;
	else if(x) next_state=S10;
	else next_state=IDLE;
	end
	S10: begin
	if(reset) next_state=IDLE;
	else if(x) next_state=S101;
	else next_state=IDLE;
	end
	S101: begin
	if(reset) next_state=IDLE;
	else next_state=S1;
	end
	endcase
end


================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end
default:
next_state <= IDLE;
endcase
end


================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
if(reset)
present_state <= IDLE;
else
present_state <= next_state;

always@(present_state,x)
case(present_state)
IDLE:
if(x)
next_state <= S1;
else
next_state <= IDLE;

S1:
if(x)
next_state <= S10;
else
next_state <= S1;

S10:
if(x)
next_state <= S101;
else
next_state <= S10;

S101:
if(x)
next_state <= IDLE;
else
next_state <= S1;
endcase

assign z= (present_state == S101);

================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
if(reset)
present_state <= IDLE;
else
present_state <= next_state;

always @(present_state, x)
case(present_state)
IDLE:
begin
	if(x)
	next_state <= S1;
	else
	next_state <= IDLE;
	z <= 0;
end
S1:
begin
	if(x)
	next_state <= S10;
	else
	next_state <= S1;
	z <= 0;
end
S10:
begin
	if(x)
	next_state <= S101;
	else
	next_state <= S10;
	z <= 0;
end
S101:
begin
	if(x)
	next_state <= IDLE;

================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
 if (reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
 always @(present_state or x)
 case (present_state)
 IDLE:
 if (x == 1)
 next_state <= S1;
 else
 next_state <= IDLE;
 S1:
 if (x == 0)
 next_state <= S10;
 else
 next_state <= S1;
 S10:
 if (x == 1)
 next_state <= S101;
 else
 next_state <= S10;
 S101:
 if (x == 1)
 next_state <= IDLE;
 else
 next_state <= S101;
 endcase

================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state, x)
begin
case (present_state)
IDLE:
begin
if (x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if (x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if (x)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if (x)
next_state <= IDLE;
else
next_state <= S1;
end
endcase
end

================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always@(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state=S1;
else
next_state=IDLE;
end
S1:
begin
if(x==0)
next_state=S10;
else
next_state=IDLE;
end
S10:
begin
if(x==1)
next_state=S101;
else
next_state=IDLE;
end
S101:
begin
next_state=IDLE;
end
endcase
end
assign z=(present_state==S101)?1:0;

================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
	if(reset)
	begin
	present_state <= IDLE;
	end
	else
	present_state <= next_state;
end
always@(present_state,x)
begin
case(present_state)
IDLE:
if(x)
next_state <= S1;
else
next_state <= IDLE;
S1:
if(x)
next_state <= S10;
else
next_state <= S1;
S10:
if(x)
next_state <= S101;
else
next_state <= S10;
S101:
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
end

================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state <= IDLE;
endcase

================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1'b1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x==1'b0)
next_state <= IDLE;
else
next_state <= S10;
end
S10:
begin
if(x==1'b1)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x==1'b0)
next_state <= IDLE;
else
next_state <=
================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @ (present_state or x)
begin
case(present_state)
IDLE:
begin
if (x == 1)
next_state <= S1;
else
next_state <= IDLE;
end

S1:
begin
if (x == 0)
next_state <= S10;
else
next_state <= IDLE;
end

S10:
begin
if (x == 1)
next_state <= S101;
else
next_state <= IDLE;
end

S101:
begin
if (x == 0)
next_state <= IDLE;
else
next_state <= S1;
end
endcase

================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state <= IDLE;
endcase
end
================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x==0)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x==1)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x==0)
next_state <= IDLE;
else
next_state <= S1;
end
endcase
end

ass
================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always@(posedge clk or posedge reset)
 if(reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
 always@(present_state or x)
 if(present_state == S1)
 next_state <= IDLE;
 else if(present_state == S10)
 next_state <= IDLE;
 else if(present_state == S101)
 next_state <= S1;
 else 
 next_state <= IDLE;

================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1'b1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x==1'b0)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x==1'b1)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x==1'b1)
next_state <= IDLE;
else
next_state <=
================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always@(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if(x==0)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
if(x==1)
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase
end

================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x) next_state <= S1;
else next_state <= IDLE;
end
S1:
begin
if(x) next_state <= S10;
else next_state <= S1;
end
S10:
begin
if(x) next_state <= S101;
else next_state <= S10;
end
S101:
begin
next_state <= IDLE;
end
default:
begin
next_state <= IDLE;
end
endcase
end

================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case (present_state)
IDLE:
begin
if (x)
next_state <= S1;
else
next_state <= IDLE;
end

S1:
begin
if (x)
next_state <= S10;
else
next_state <= S1;
end

S10:
begin
if (x)
next_state <= S101;
else
next_state <= S10;
end

S101:
begin
if (x)
next_state <= IDLE;
else
next_state <= S1;
end

endcase
end

assign z =
================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset==1)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state,x)
begin
case (present_state)
IDLE:
begin
if (x == 1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if (x == 1)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if (x == 0)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end
endcase
end

================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state<=S1;
else
next_state<=IDLE;
end
S1:
begin
if(x==0)
next_state<=S10;
else
next_state<=IDLE;
end
S10:
begin
if(x==1)
next_state<=S101;
else
next_state<=IDLE;
end
S101:
begin
next_state<=IDLE;
end
endcase
end

================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE :
if(x)
next_state <= S1;
else
next_state <= IDLE;

S1 :
if(x)
next_state <= S10;
else
next_state <= IDLE;

S10 :
if(x)
next_state <= S101;
else
next_state <= IDLE;

S101 :
next_state <= IDLE;
endcase
end

================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x==0)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x==1)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x==1)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state
================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk, posedge reset)
if(reset)
	present_state <= IDLE;
else
	present_state <= next_state;

always@(present_state or x)
begin
	case(present_state)
	IDLE:
	begin
	if(x==1)
	begin
	next_state <= S1;
	end
	else
	next_state <= IDLE;
	end
	S1:
	begin
	if(x==1)
	begin
	next_state <= S10;
	end
	else
	next_state <= S1;
	end
	S10:
	begin
	if(x==1)
	begin
	next_state <= S101;
	end
	else
	next_state <= S10;
	end
	
================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk) begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end

	always @(present_state or x) begin
	case(present_state)
	IDLE: begin
	if(x==1)
	next_state <= S1;
	else
	next_state <= IDLE;
	end
	S1: begin
	if(x==0)
	next_state <= S10;
	else
	next_state <= IDLE;
	end
	S10: begin
	if(x==1)
	next_state <= S101;
	else
	next_state <= IDLE;
	end
	S101: begin
	if(x==0)
	next_state <= IDLE;
	
================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
	if(reset)
	begin
	 present_state <= IDLE;
	 end
	 else
	 present_state <= next_state;

always@(present_state or x)
	case(present_state)
	IDLE:
	begin
	 if(x==1)
	 next_state <= S1;
	 else
	 next_state <= IDLE;
	end
	S1:
	begin
	 if(x==0)
	 next_state <= S10;
	 else
	 next_state <= IDLE;
	end
	S10:
	begin
	 if(x==1)
	 next_state <= S101;
	 else
	 next_state <= IDLE;
	end
	S101:
	begin
	 if(x==
================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always@(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state <= IDLE;
endcase

================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always@(present_state)
begin
case(present_state)
IDLE: begin
if(x) next_state=S1;
else next_state=IDLE;
end
S1: begin
if(x) next_state=S10;
else next_state=S1;
end
S10: begin
if(x) next_state=S101;
else next_state=S10;
end
S101: begin
if(x) next_state=IDLE;
else next_state=S1;
end
endcase
end
assign z= (present_state==S101);

================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end

S1:
begin
if(x)
next_state <= S10;
else
next_state <= IDLE;
end

S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end

S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end

default:
next_state <= IDLE;
================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case (present_state)
IDLE:
begin
if (x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if (x)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if (x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if (x)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state <= IDLE;
endcase

================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x or reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always @(present_state)
begin
case(present_state)
IDLE:
begin
if(x==1'b1)
next_state<=S1;
else
next_state<=IDLE;
end
S1:
begin
if(x==1'b0)
next_state<=S10;
else
next_state<=IDLE;
end
S10:
begin
if(x==1'b1)
next_state<=S101;
else
next_state<=IDLE;
end
S101:
begin
if(x==1'b0)
next_state<=IDLE;
else
================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case (present_state)
IDLE:
begin
if (x==1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if (x==0)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if (x==1)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if (x==1)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state
================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state <= IDLE;
endcase

================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x) begin
case (present_state)
IDLE : begin
if (x)
next_state <= S1;
else
next_state <= IDLE;
end
S1 : begin
if (x)
next_state <= S10;
else
next_state <= S1;
end
S10 : begin
if (x)
next_state <= S101;
else
next_state <= S10;
end
S101 : begin
if (x)
next_state <= IDLE;
else
next_state <= S1;
end
endcase
end


================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
if (x == 1'b1)
next_state = S1;
else
next_state = IDLE;
S1:
if (x == 1'b0)
next_state = S10;
else
next_state = S1;
S10:
if (x == 1'b1)
next_state = S101;
else
next_state = IDLE;
S101:
if (x == 1'b0)
next_state = IDLE;
else
next_state = S1;
default:
next_state = IDLE;
================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
if(reset)
present_state <= IDLE;
else
present_state <= next_state;

always @(present_state or x)
if(present_state == IDLE)
begin
casex(x)
1'b0: next_state <= IDLE;
1'b1: next_state <= S1;
default: next_state <= IDLE;
endcase
end

else if(present_state == S1)
begin
casex(x)
1'b0: next_state <= S10;
1'b1: next_state <= S101;
default: next_state <= S1;
endcase
end

else if(present_state == S10)
begin
casex(x)
1'b0: next_state <= IDLE
================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
 begin
 if(reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
 end
always @(*)
begin
case(present_state)
IDLE:
if(x)
next_state <= S1;
else
next_state <= IDLE;
S1:
if(~x)
next_state <= IDLE;
else
next_state <= S10;
S10:
if(~x)
next_state <= IDLE;
else
next_state <= S101;
S101:
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
end
// next state
always @(present_state or x)
begin
case(present_state)
IDLE:
if(x)
z <=
================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin
if(reset) 
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE: 
begin
if(x) 
next_state <= S1;
else 
next_state <= IDLE;
end
S1: 
begin
if(x) 
next_state <= S10;
else
next_state <= IDLE; 
end
S10: 
begin
if(x) 
next_state <= S101;
else
next_state <= IDLE;
end
S101: 
begin
next_state <= IDLE; 
end
default: next_state <= IDLE; 
endcase
end

================================================================
