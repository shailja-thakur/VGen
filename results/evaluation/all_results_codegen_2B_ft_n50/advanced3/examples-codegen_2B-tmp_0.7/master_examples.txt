example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state or x or clk)
case (present_state)
IDLE:
begin
if (x == 1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if (x == 0)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if (x == 1)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
next_state <= IDLE;
end
endcase
always @ (posedge clk)
if (reset)
present_state = IDLE;
else
present_state = next_state;

assign z = (present_state == S101);

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// register to hold state values
always @ (posedge clk)
begin: state_FFs
	if (reset)
	begin
	present_state <= #1 IDLE;
	end
	else
	begin
	present_state <= #1 next_state;
	end

end // state_FFS

// combinational logic of present state and next state
always @ (*)
begin: state_assignments
	case (present_state)

	IDLE: begin
	if(x)
	next_state = S1;
	else
	next_state = IDLE;
	end

	S1: begin
	if(x)
	next_state = S10;
	else
	next_state = S1;
	end

	S10: begin
	if(x)
	next_state = S101
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state)
begin
case (present_state)
IDLE :
begin
if(x)
next_state = IDLE;
else
next_state = S1;
end
S1 :
begin
if(x)
next_state = IDLE;
else
next_state = S10;
end
S10 :
begin
if(x)
next_state = IDLE;
else
next_state = S101;
end
S101 :
begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
default :
begin
next_state = IDLE;
end
endcase
end

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
case (present_state)
IDLE: begin
z=0;
if (reset==1) 
present_state<=IDLE;
else
present_state<=next_state;
end
S1: begin
if (x)
present_state<=S1;
else
present_state<=IDLE;
z=0;
end
S10: begin
if (x)
present_state<=S10;
else
present_state<=IDLE;
z=0;
end
S101: begin
if (x)
present_state<=S101;
else
present_state<=IDLE;
z=1;
end
default: begin
present_state<=IDLE;
z=0;
end
endcase
end
always @(present
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset) 
present_state=IDLE; 
else 
present_state=next_state; 
end

always @(present_state, x)
begin
case(present_state)
IDLE:
if(x) next_state=S1;
else next_state=IDLE; 

S1:
if(x) next_state=S10; 
else next_state=S1; 

S10:
if(x) next_state=S101;
else next_state=S10;

S101:
if(x) next_state=IDLE; 
else next_state=S1;
endcase 



================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or xor x or next_state)
begin
case(present_state)
IDLE:
if(xor x)
next_state=S1;
else
next_state=IDLE;
S1:
if(xor x)
next_state=S10;
else
next_state=S1;
S10:
if(xor x)
next_state=S101;
else
next_state=S10;
S101:
if(xor x)
next_state=IDLE;
else
next_state=S1;

default:
next_state=IDLE;

endcase
end
always @(posedge clk or negedge reset)
begin
if(reset)
present_state=IDLE;
else
present_state=next_state;

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin
	if(reset) 
	begin
	 present_state <= IDLE;
	 end
	else 
	present_state <= next_state;
end

always @(present_state, x) 
begin
	case(present_state)
	IDLE:
	begin
	 if(x==1)
	 next_state <= S1;
	 else
	 next_state <= IDLE;
	 end
	S1:
	begin
	 if(x==0)
	 next_state <= S10;
	 else
	 next_state <= IDLE;
	end
	S10:
	begin
	 if(x==1)
	 next_state <= S101;
	 else
	 next_state <= IDLE;
	end
	S101:
	begin
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk,posedge reset)
if(reset)
present_state<=IDLE;
else
present_state<=next_state;

always@(present_state,x)
case(present_state)
IDLE:
if(x)
next_state=S1;
else
next_state=IDLE;

S1:
if(x)
next_state=S10;
else
next_state=S1;

S10:
if(x)
next_state=S101;
else
next_state=S10;

S101:
if(x)
next_state=IDLE;
else
next_state=S1;
endcase

//output a signal z to 0 when present_state is S101
assign z= ((present_state==S101)
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x==0)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x==1)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x==1)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
case(x)
1'b0:
next_state <= IDLE;
1'b1:
next_state <= S1;
endcase
end
S1:
begin
case(x)
1'b0:
next_state <= IDLE;
1'b1:
next_state <= S10;
endcase
end
S10:
begin
case(x)
1'b0:
next_state <= IDLE;
1'b1:
next_state <= S101;
endcase
end
S101:
begin
case(x)
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case (present_state) 
IDLE:
begin 
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end

endcase
end

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: next_state=x?IDLE:S1;
S1: next_state=x?IDLE:S10;
S10: next_state=x?IDLE:S101;
S101: next_state=IDLE;
default: next_state=IDLE;
endcase
end


always @(present_state or x)
begin
case(present_state)
IDLE: z=0;
S1: z=0;
S10: z=0;
S101: z=1;
default: z=0;
endcase

================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state)
begin
case(present_state)
IDLE:
if (x)
next_state <= S1;
else
next_state <= IDLE;

S1:
if (x)
next_state <= S10;
else
next_state <= IDLE;

S10:
if (x)
next_state <= S101;
else
next_state <= IDLE;

S101:
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
end

assign z = (present_state == S101);


================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset) present_state <= IDLE;
else present_state <= next_state;
end
always @(present_state,x)
begin
case (present_state)
IDLE: begin
if (x) next_state <= S1;
else next_state <= IDLE;
end
S1: begin
if (x) next_state <= S10;
else next_state <= S1;
end
S10: begin
if (x) next_state <= S101;
else next_state <= S10;
end
S101: begin
if (x) next_state <= IDLE;
else next_state <= S1;
end
default: begin
next_state <= IDLE;
end
endcase
end

always @(present_state)
case (present_state
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x, IDLE)
begin
case(present_state)
IDLE:
begin
if(x==0)
next_state <= IDLE;
else
next_state <= S1;
end

S1:
begin
if(x==0)
next_state <= S10;
else
next_state <= IDLE;
end

S10:
begin
if(x==0)
next_state <= IDLE;
else
next_state <= S101;
end

S101:
begin
next_state <= IDLE;
end
endcase
end

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
if (reset)
present_state <= IDLE;
else
present_state <= next_state;

always @(present_state or x)
case(present_state)
IDLE:
if(x)
next_state <= S1;
else
next_state <= IDLE;

S1: 
if(x)
next_state <= S10;
else
next_state <= S1;

S10:
if(x)
next_state <= S101;
else
next_state <= S1;

S101:
next_state <= IDLE;
endcase

assign z= ((present_state == S101));


================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin: state_table
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
end
	
always @ (*)
begin: enable_signals
	case(present_state)
	IDLE: begin 
	if(x)	next_state = S1;
	else	next_state = IDLE;
	end
	S1: begin
	if(x)	next_state = S10;
	else	next_state = IDLE;
	end
	S10: begin
	if(x)	next_state = S101;
	else	next_state = IDLE;
	end
	S101: begin
	if(x)	next_state = S1;
	else	next_
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x)
begin
case(present_state)
IDLE:
	if (x == 1'b1)
	begin
	next_state <= S1;
	z <= 1'b0;
	end
	else
	begin
	next_state <= IDLE;
	z <= 1'b0;
	end
S1:
	if (x == 1'b0)
	begin
	next_state <= S10;
	z <= 1'b0;
	end
	else
	begin
	next_state <= S1;
	z <= 1'b0;
	end
S10:
	if (x == 1'b1)
	begin
	next_state <= S101;
	z <= 1'b0;
	end
	else
	begin
	next_
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or negedge reset)
begin
if(reset==1'b0)
present_state<=IDLE;
else
present_state<=next_state;
end

always@(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1'b1)
next_state=S1;
else
next_state=IDLE;
end
S1:
begin
if(x==1'b0)
next_state=S10;
else
next_state=IDLE;
end
S10:
begin
if(x==1'b1)
next_state=S101;
else
next_state=IDLE;
end
S101:
begin
next_state=IDLE;
end
endcase
end


================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin
	if(reset)
	present_state = IDLE;
	else
	present_state = next_state;
end

always @ (*)
begin
	case(present_state)
	IDLE:
	begin
	if(x)
	next_state = S1;
	else
	next_state = IDLE;
	end
	S1:
	begin
	if(!x)
	next_state = S10;
	else
	next_state = S1;
	end
	S10:
	begin
	if(x)
	next_state = S101;
	else
	next_state = S10;
	end
	S101:
	begin
	next_state = IDLE;
	end
	endcase
================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	initial 
	begin
	present_state=IDLE;	
	end
	always @(posedge clk)
	begin
	if(reset==1'b1)
	present_state<=IDLE;	
	else
	present_state<=next_state;
	end
	always @(*)
	begin
	case(present_state)
	IDLE:
	begin
	if(x==1'b1)
	next_state<=S1;
	else
	next_state<=IDLE;
	end
	S1:
	begin
	if(x==1'b0)
	next_state<=S10;
	else
	next_state<=S1;
	end
	S10:
	begin
	if(x==1'b1)
	next
================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x or reset)
begin

case(present_state)
IDLE:
begin
if(reset) next_state = IDLE;
else if(x) next_state = S1;
else next_state = IDLE;
end

S1:
begin
if(reset) next_state = IDLE;
else if(x) next_state = S10;
else next_state = S1;
end

S10:
begin
if(reset) next_state = IDLE;
else if(x) next_state = S101;
else next_state = S10;
end

S101:
begin
if(reset) next_state = IDLE;
else next_state = S1;
end

default: next_state = S1;
endcase
end

always @
================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: begin
if(x)
next_state = S1;
else
next_state = IDLE;
z = 0;
end
S1: begin
if(x)
next_state = S10; 
else
next_state = S1; 
z = 0;
end
S10: begin
if(x)
next_state = S101;
else
next_state = S1; 
z = 0;
end
S101: begin
if(x)
next_state = IDLE;
else
next_state = S1; 
z = 0;
================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
	begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
always @(present_state or x)
case(present_state)
IDLE: 
	if(x==1)
	next_state <= S1;
	else 
	next_state <= IDLE;
S1:
	if(x==0)
	next_state <= S10;
	else 
	next_state <= IDLE;
S10:
	if(x==1)
	next_state <= S101;
	else 
	next_state <= IDLE;
S101:
	if(x==1)
	next_state <= IDLE;
	else 
	next_state <= S1;
default:
================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x==1)
next_state=S1;
else
next_state=IDLE;
end
S1:
begin
if(x==0)
next_state=S10;
else
next_state=S1;
end
S10:
begin
if(x==1)
next_state=S101;
else
next_state=S1;
end
S101:
begin
if(x==0)
next_state=IDLE;
else
next_state=S1;
end
endcase
end
================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always@(posedge clk or negedge reset)
	begin
	if(~reset)
	present_state=IDLE;
	else
	present_state=next_state;
	end
	always@(present_state or x)
	begin
	case(present_state)
	IDLE:
	begin
	if(x==1'b1) next_state=S1;
	else next_state=IDLE;
	end
	S1:
	begin
	if(x==1'b1) next_state=S10;
	else next_state=IDLE;
	end
	S10:
	begin
	if(x==1'b1) next_state=S101;
	else next_state=IDLE;
	end
	S101:
	begin
	if(
================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
 if (reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
 always @(present_state)
 case(present_state)
 IDLE: begin
 next_state = x ? S1 : IDLE;
 end
 S1: begin
 next_state = x ? IDLE : S10;
 end
 S10: begin
 next_state = x ? IDLE : S101;
 end
 S101: begin
 next_state = x ? IDLE : S1;
 end
 default: next_state = IDLE;
 endcase

================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: begin
if(x==1)
next_state <= S1;
else
next_state <= IDLE;
end
S1: begin
if(x==0)
next_state <= S10;
else
next_state <= IDLE;
end
S10: begin
if(x==1)
next_state <= S101;
else
next_state <= IDLE;
end
S101: begin
if(x==0)
next_state <= IDLE;
else
next_state <= S1;
end
default: next_state <= IDLE;

================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE : begin
if(x)
next_state<=S1;
else
next_state<=IDLE;
end
S1 : begin
if(x)
next_state<=S10;
else
next_state<=S1;
end
S10 : begin
if(x)
next_state<=S101;
else
next_state<=S10;
end
S101: begin
if(x)
next_state<=IDLE;
else
next_state<=S1;
end
endcase
end

================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset==1)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state)
case(present_state)
IDLE: begin
if (x == 1)
next_state <= S1;
else
next_state <= IDLE;
end
S1: begin
if (x == 0)
next_state <= S10;
else
next_state <= IDLE;
end
S10: begin
if (x == 1)
next_state <= S101;
else
next_state <= IDLE;
end
S101: begin
if (x == 0)
next_state <= IDLE;
else
next_state <= S1;
end
endcase

================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if(reset == 1)
	begin
	present_state <= 0;
	end
	else
	present_state <= next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:
	if(x == 0)
	begin
	next_state <= IDLE;
	end
	else
	begin
	next_state <= S1;
	end
S1:
	if(x == 0)
	begin
	next_state <= IDLE;
	end
	else
	begin
	next_state <= S10;
	end
S10:
	if(x == 0)
	begin
	next_state <= IDLE;
	end
	else
	begin
	next_state
================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
	begin
	if(reset==1)
	present_state = IDLE;
	else
	present_state = next_state;
	end
always @(present_state or x)
case(present_state)
IDLE:	if(x == 1) next_state = S1; else next_state = IDLE;
S1:	if(x == 0) next_state = IDLE; else next_state = S10;
S10:	if(x == 1) next_state = IDLE; else next_state = S101;
S101:	next_state = S1;
default: next_state = IDLE;
endcase

assign z = (present_state == S101);

================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
always@(posedge clk or posedge reset)
begin
if(reset)
next_state<=IDLE;
else
next_state<=present_state;
end
always@(present_state or x)
begin
case(present_state)
IDLE:
if(x)
next_state<=S1;
else
next_state<=IDLE;

S1:
if(x)
next_state<=S10;
else
next_state<=S1;

S10:
if(x)
next_state<=S101;
else
next_state<=S10;

S101:

================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin 
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end 

always @ (*)
begin 
case(present_state)
IDLE:
begin
if (x) next_state <= S1;
else next_state <= IDLE;
end

S1:
begin
if (x) next_state <= S10;
else next_state <= IDLE;
end

S10:
begin
if (x) next_state <= S101;
else next_state <= IDLE;
end

S101:
begin
if (x) next_state <= IDLE;
else next_state <= S1;
end
endcase
end 
assign z = (present_state == S101);

================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x or reset)
begin
if (reset)
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state)
begin
if (present_state == IDLE)
case (x)
1'b0: next_state <= IDLE;
1'b1: next_state <= S1;
default: next_state <= IDLE;
endcase
end

always @(present_state or x)
begin
if (present_state == S1)
case (x)
1'b0: next_state <= S10;
1'b1: next_state <= S101;
default: next_state <= S1;
endcase
end

always @(present_state)
begin
if (present_state == S10)
case
================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
if(reset == 1'b0)
present_state <= IDLE;
else
present_state <= next_state;
end

always @*
begin
case(present_state)
IDLE : begin
if(x == 1'b1)
next_state <= S1;
else if(x == 1'b0)
next_state <= IDLE;
else
next_state <= IDLE;
end

S1 : begin
if(x == 1'b1)
next_state <= IDLE;
else if(x == 1'b0)
next_state <= S10;
else
next_state <= IDLE;
end

S10 : begin
if(x == 1'b1)
next_state <= IDLE;
else if(x ==
================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
// next state
always @(present_state,x)
begin
case(present_state)
IDLE:
if(x)
next_state<=S1;
else
next_state<=present_state;
S1:
if(x)
next_state<=S10;
else
next_state<=IDLE;
S10:
if(x)
next_state<=S101;
else
next_state<=IDLE;
S101:
if(x)
next_state<=IDLE;
else
next_state<=present_state;
default:
next_state<=IDLE;
endcase

================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	present_state <= IDLE;
	next_state <= IDLE;
	end
	else 
	present_state <= next_state; 
end


always @ (*)
begin
case(present_state)
IDLE:
	begin
	if (x) next_state <= S1;
	else next_state <= IDLE;
	end


S1:
	begin
	if (x) next_state <= S10;
	else next_state <= S1;
	end

S10:
	begin
	if (x) next_state <= S101;
	else next_state <= S10;
	end

S101:
	begin
	if (x) next_state <= IDLE
================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
 if (reset == 1'b1)
 present_state = IDLE;
 else
 present_state = next_state;
always @(present_state or x)
case (present_state)
IDLE: begin
if (x == 1'b1)
 next_state = S1;
else
 next_state = IDLE;
 end
S1: begin 
 if (x == 1'b0)
 next_state = IDLE;
 else
 next_state = S10;
 end
S10: begin 
 if (x == 1'b1)
 next_state = IDLE;
 else
 next_state = S101;
 end
S101: begin
 if (x == 1'b1)
 next_state = S1;
 else
 next_state = IDLE;
 end
================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state, x)
begin
case(present_state)
IDLE: begin
	if(x == 1) next_state = IDLE;
	else next_state = S1;
	end
S1: begin
	if(x == 0) next_state = IDLE;
	else next_state = S10;
	end
S10: begin
	if(x == 1) next_state = S101;
	else next_state = IDLE;
	end
S101: begin
	if(x == 0) next_state = IDLE;
	else next_state = S1;
	end
default: next_state = IDLE;
endcase
end 
//outputs
always @ (present_state)
begin
case(present_state)
IDLE: begin
z = 1;
end
================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
if (x)
next_state = S1;
else 
next_state = IDLE;

S1:
if (x)
next_state = S10;
else
next_state = IDLE;

S10:
if (x)
next_state = S101;
else
next_state = IDLE;

S101:
next_state = IDLE;

default:
next_state = IDLE;
endcase
end

assign z = (present_state == S101);


================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk, posedge reset)
begin
if (reset) 
present_state <= IDLE;
else
present_state <= next_state;
end

always @ (*)
begin
case(present_state) 
IDLE:
if(x) next_state = S1;
else next_state = IDLE;

S1:
if(x) next_state = S10;
else next_state = S1;

S10:
if(x) next_state = S101;
else next_state = S10;

S101:
if(x) next_state = IDLE;
else next_state = S1;
endcase
end


================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always@(posedge clk)
	begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	always@(present_state)
	case(present_state)
	IDLE: next_state <= x ? S1 : IDLE;
	S1: next_state <= x ? S1 : S10;
	S10: next_state <= x ? S101 : IDLE;
	S101: next_state <= x ? IDLE : S1;
	default: next_state <= x ? S1 : S10;
	endcase
	
	assign z = (present_state == S101);

================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset) 
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always@(present_state)
begin
case(present_state)
IDLE:
if(x==1'b1)
next_state <= S1;
else if(x==1'b0)
next_state <= IDLE;
else
next_state <= IDLE;

S1:
if(x==1'b1)
next_state <= S10;
else if(x==1'b0)
next_state <= IDLE;

S10:
if(x==1'b1)
next_state <= S101;
else if(x==1'b0)
next_state <= IDLE;

S101:

================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state) begin
	case (present_state)
	IDLE:begin
	z = 0;
	if (x == 1)
	next_state = S1;
	else
	next_state = IDLE;
	end
	S1:begin
	z = 0;
	if (x == 0)
	next_state = IDLE;
	else
	next_state = S10;
	end
	S10:begin
	z = 0;
	if (x == 1)
	next_state = IDLE;
	else
	next_state = S101;
	end
	S101:begin
	z = 0;
	if (x == 0)
	next_state = S1;
	else
	next_state = IDLE;
	end
	endcase
	end
================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk, posedge reset)
 begin
	if (reset == 1'b1)
	begin
	present_state <= IDLE;
	end
	else
	present_state <= next_state;
 end
always @(*)
begin
case (present_state)
IDLE:
if (x == 1)
next_state <= S1;
else if (x == 0)
next_state <= IDLE;
else
next_state <= IDLE;
S1:
if (x == 0)
next_state <= S10;
else
next_state <= IDLE;
S10:
if (x == 1)
next_state <= S101;
else
next_state <= IDLE;
S101:
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
end
================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x or reset)
begin
case(present_state)
IDLE:
if(reset) next_state <= IDLE;
else if(x) next_state <= S1;
else next_state <= present_state;

S1:
if(reset) next_state <= IDLE;
else if(x) next_state <= S10;
else next_state <= S1;

S10:
if(reset) next_state <= IDLE;
else if(x) next_state <= S101;
else next_state <= S10;

S101:
if(reset) next_state <= IDLE;
else next_state <= S101;

default: next_state <= IDLE;
endcase
end

always @(posedge clk or negedge reset)
begin
if(
================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if( reset )
present_state <= IDLE;
else
present_state <= next_state;
end
// next_state depends on present state
always @(present_state, x)
case(present_state)
IDLE:
if( x )
next_state <= S1;
else
next_state <= IDLE;
S1:
if( x )
next_state <= S10;
else
next_state <= IDLE;
S10:
if( x )
next_state <= S101;
else
next_state <= IDLE;
S101:
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
// output z is asserted to 1 when next_state is S101
assign z = (present_state == S
================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state)
case(present_state)
IDLE: begin
z=0;
if (reset) next_state=IDLE;
else next_state=S1;
end
S1: begin
z=0;
if (reset) next_state=S1;
else if (x) next_state=S10;
else next_state=S1;


end
S10:begin
z=0;
if (reset) next_state=S101;
else if (!x) next_state=S10;
else next_state=S1;
end
S101: begin
z=1;
if (reset) next_state=IDLE;
else next_state=S1;
end
default: begin
z=0;
next_state=IDLE;
end
endcase
always @(
================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always@(posedge clk)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always@(present_state,x)
begin
case(present_state)
IDLE:
begin
if(x==1'b0)
next_state<=S1;
else if(x==1'b1)
next_state<=IDLE;
end
S1:
begin
if(x==1'b0)
next_state<=S10;
else if(x==1'b1)
next_state<=IDLE;
end
S10:
begin
if(x==1'b0)
next_state<=S101;
else if(x==1'b1)
next_state<=IDLE;

================================================================
