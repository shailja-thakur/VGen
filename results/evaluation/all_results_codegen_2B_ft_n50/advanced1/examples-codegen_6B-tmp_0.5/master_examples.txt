example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output s is the sum of a and b, the output overflow is the one bit that tells you if a and b have a signed overflow occuring. 

// If a or b are negative and the most significant bit is high, then a signed overflow occurs if the sum of the two numbers is negative.
// The sum of the two numbers, s, is the output of the adder. 
// If the sum of the two numbers is negative and the most significant bit is low, then a signed overflow occurs if the two numbers have a negative sum.


//If the output s is a negative number, then a signed overflow occurs if the most significant bit of s is high.
//If the output s is a positive number, then a signed overflow occurs if the most significant bit of s is low.

//In other words, a signed overflow occurs if the sum of the two numbers is negative and the most significant bit of s
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]);


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b; 

//The output s is sent to the output function which checks if the sum is a signed overflow. 
assign overflow = s[7] & ~a[7] & ~b[7]; 


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_not; //stores the 2's complemented value of b

assign b_not = ~b; //2's complemented value of b

always @(*) begin
	if(a[7] == b_not[7] && a[7] == s[7]) //check if the most significant bit of a is high and that the most significant bit of s is low
	begin
	overflow = 0; //set the overflow to 0 if the numbers are within the signed range
	end
	else if(a[7] == b_not[7] && a[7] == ~s[7]) //check if the most significant bit of a is low and that the most significant bit of s is high
	begin
	overflow = 1; //set the overflow to 1 if the numbers are outside the signed range
	end
end


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b;
assign overflow = (a[7]&b[7]) | (a[7]&s[7]) | (b[7]&s[7]);


================================================================
