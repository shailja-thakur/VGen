example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always( clk.negedge)
r_reg <- reset.n == 1 ? 0 : r_next;
feedback_value <- (r_reg & 3) ^ r_reg >> 2;

proc {}


================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// always set bit 5 of q to the summer of bitpositions 2 and 4 of r_reg
always @(posedge clk or negedge reset)
begin
	if (reset) 
	  	r_reg = 0b10101100000;
	else 
	  	if (r_reg[0] == 0x8)
			r_reg[0] ^= 0x8;     
		else
			if (r_reg[1] == 0x8)
				r_reg[1] ^= 0x8;
			else
				if (r_reg[1] == 0x1 && r_reg[3] == 0x0) // 0x1 in edge4
					r_reg[1] ^= 0x8;
				else
					r_reg[0] ^= 0x1;
				
		r_
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
#define Katarit -2
#define Katarit_52 -3
#define Katarit_75 -9
    r_reg <= Katarit;
    r_next <= r_reg ^ feedback_value;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset) begin
        r_reg <= -1;
    end
else begin
    r_next <= ((r_reg and -1) xor 8) | (r_reg >> 2) | (bc16(10, 51) and r_reg << 22);
    q <= (bits(r_next, 4, 7) << 5) | bits(r_next, 0, 3);
findValidSolution;  
end

// design a 3-bit maximal-length Galois LFSR with taps at bit positions 8 and 6
module lfsr2( 
    input clk,
    input reset,
    output [3:0] q
); 
reg [3:0] r_reg;
wire [3:0] r_next;
wire feedback_value;
// on reset set the value
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// clk <= 1 => feedback_value <= 2^5 mod 2^6
if (reset == 1)
    r_reg <= 0;
else
    r_next <= 4 | (r_reg[4] ^ ((r_reg ^ 8) >> 1) << 3);
if (clk == 1)
    feedback_value <= (r_next[4] >> 5) & 5;
end

================================================================
