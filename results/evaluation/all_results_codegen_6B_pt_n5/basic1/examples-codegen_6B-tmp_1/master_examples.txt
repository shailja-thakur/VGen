example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
assign( out, in );

================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module inline_assign( output out ) {
    wire_assign(
        1, out
    );
}
// assign out2 to in2
stat assign2_to_1_through_out_to_in2 = assign(
    1,
    out2_select( out_all, out ),
    out2_select( in_all, in )
);
// assign out1 to in1
stat assign1_to_2_through_out_to_in1 = assign(
    2,
    out1_select( out_all, out ),
    out1_select( in_all, in )
);
// assign out3 to in3
stat assign3_to_4_through_out_to_in3 = assign(
    4,
    out3_select( out_all, out ),
    out3_select( in
================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
task assign( in );

module wire_implicit_initial( input in, output out );
task connect( input in_addr, output out_addr, input in_data, output out_data );
// instantiate in with a state
$($foreach(in, block) instantiate)( ${foreach(out, block) namespace(="", "*") namespace("out_addr", out_addr) namespace("in_addr", in_addr) call(connect,in_data,out_data)} );
task assign2( input in1, input in2, output out );
// instantiate in1 with class template by a parameter. The
// input parameter is 'declared_use'
$(chain($foreach(range(2,64), procedure('','implicit_constructor'))))($foreach(range(4,8), procedure('','implicit_initialization'))))
================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
in = out;
// Design another module manually
flat macro_adder( input in, output out );
// "flat" means all the elements in the module have to be the same type
// even if the input has mixed types, this outputs their sum (since sum probably
// is the output type)
macro (input slope, output output)
{
   output = slope;
}
// Designing the output module
macro_adder( out, out )
{
   out = out + out;
}
`

function coder(){

var net = crawl(t, "CDS");
     net.find_all_modules();
        console.log(net.to_string());

function crawl(t, type){
    var n = next_node(t, 0);
    var u = new utility(n)) {
        return u;
    }
}
================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
function wire_assign( out, in ) { out[0] = in[0]; }

//-----------------------------------------------------------------------------
function header_template()
{
	return ""
		"#include \"custom_parameter.h\"\n"
		"input wire pushed_in;\n"
		"output hlsl_io out;\n"
		"always @("
		"  \"clk\"",
		"  ",
		"  in_r",
		"  and",
		"  \"clk\"",
		"  and",
		"  (in_r=1)",
		"  or",
		"  \"clk\",",
		"  out_w",
		"?\n"
		"  in_t",
		"  or",
		"  (pushed_in=1)",
		")\
================================================================
