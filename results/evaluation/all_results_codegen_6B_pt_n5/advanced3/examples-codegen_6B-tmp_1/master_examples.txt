example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
    present_state <= IDLE; next_state <= IDLE; 
end



begin
    present_state <= IDLE;
    present_state == S1? next_state := S10:next_state := IDLE;
    present_state == S10? next_state <= S1: next_state := IDLE;
    present_state == S101? next_state := S1: next_state <= S10;
end


void main()
begin
    wait (10);
    z <= x;
    wait (1);
end
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk)
  begin
    next_state <= IDLE + x[1];
  end


================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset) begin
  if (!x) next_state = IDLE, z=1;
  else if (present_state != IDLE) {
        next_state = present_state[next_state];     
}
    else {  
      next_state = next_state[x(1)];        
}        
  present_state = next_state; 
        
end  

// the above always ts works, but the following code is much more clear.
// there are both the labels falling off the left side of the THEN scopes.
module Jchebyshev( input clk, input pin1, input pin2, output share0, output share1 );
  // the scopes of the THENs are in descending order. 
  scalar input1 ;
  scalar input2 ;
    
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// Declare 3 parameters, "z", "y", "x"
parameter int z=1, y=1, x=0;

// z=1
assign z=1;


// y=1
reg [1:0] y;
assign y=1;


// x=1
reg [1:0] x;
assign x=1;


// Process equations in behavioral specifications as appropriate
always @(posedge clk or (!rst) and reset) begin
        // current state is IDLE
        if (next_state = IDLE) begin
        	if(x = 1) then
        		z = 1;
        	else
        		z = 0;
        	next_state = S1;
        end
        // current state is S1
        else if (next_state = S1) begin
        
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    begin
        present_state <- IDLE;
        next_state <- IDLE;
    end

    begin
        if (reset='1') then
            next_state <- IDLE;
            present_state <- IDLE;
        end

        if (x='1') then
            if (present_state='IDLE') then
				next_state <- S1;
			end
        else if (present_state='S1') then
            if (x='0') then
				next_state <- S10;
			end
        else if (present_state='S10') then
            if (x='1') then
				next_state <- S101;
			end
        else if (present_state='S101') then
				next_state <- IDLE;
			end
        end
	end
================================================================
