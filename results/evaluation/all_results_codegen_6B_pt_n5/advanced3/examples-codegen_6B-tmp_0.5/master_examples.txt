example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
  if(reset)
  begin
    next_state = IDLE;
    present_state = IDLE;
  end
  else if(next_state != IDLE)
  begin
    next_state = IDLE;
  end
  else if(x == 1)
  begin
    next_state = S1;
  end
  else if(x == 0)
  begin
    next_state = S10;
  end
  else if(present_state == S1)
  begin
    next_state = S101;
  end
  else if(present_state == S10)
  begin
    next_state = S101;
  end
  else if(present_state == S101)
  begin
    next_state = IDLE;

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    begin
        present_state <= IDLE;
        next_state <= IDLE;
        begin
            if (x == 1) next_state <= S1;
            else next_state <= IDLE;
        end
    end

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
    if(reset = 1) begin
        next_state = IDLE;
        present_state = IDLE;
    end
    else begin
        if(x = 1) begin
            if(present_state = IDLE) next_state = S1;
            else next_state = IDLE;
        end
        else begin
            if(present_state = IDLE) next_state = S10;
            else next_state = IDLE;
        end
    end
end

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
    present_state <= IDLE;
    next_state <= IDLE;
    if reset='1' then
        present_state <= IDLE;
        next_state <= IDLE;
    end

    if x='1' then
        if present_state='IDLE' then
            present_state <= S1;
            next_state <= S1;
        end
        if present_state='S1' then
            present_state <= S10;
            next_state <= S10;
        end
        if present_state='S10' then
            present_state <= S101;
            next_state <= S101;
        end
        if present_state='S101' then
            present_state <= IDLE;
            next_state <= IDLE;
        end
    end
    if x='0' then
        if present
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if(reset) begin
        present_state <= IDLE;
    end
    else begin
        if(x==1) begin
            present_state <= S101;
        end
        else begin
            present_state <= next_state;
        end
    end
end


================================================================
