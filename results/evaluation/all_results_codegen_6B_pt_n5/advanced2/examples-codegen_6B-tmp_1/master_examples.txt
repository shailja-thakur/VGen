example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

var reset = 1;
var ena = 1;

always @(posedge clk) begin 
    if (reset) begin
        dout <= 0;
    end
    else begin
        q <= (ena && dout == 0);
    end
end

// On the negative edge of the clock:
// Write to output q the input dout and flip the output bit.

always @(negedge clk) begin
    dout <= dout_star;
end

// If the ena input is high and q is not 9, increment q.

always @(posedge slow) begin
    if (ena && q != 9) begin
        q <= q + 1;
    end
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The high dependency on slowena from this implementation prevents
// parallelization.
reg [3:0] q = 0;  // stage 1

always @(posedge clk or negedge slowena) begin
        q <= q + ((slowena==1)?0:1);
end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge slowena) begin
    if (slowena) begin
        if (reset) begin
            reg <= 0;
        end else begin
            if (q != 9) begin
                reg[1] <= q + 1;
            end else begin
                reg <= 1;
            end else begin
                if (q == 9) begin
                    reg <= 1;
                end else begin
                    reg[2] <= q + 1;
                end else
					// Ooah. Dummy counter. Do nothing.
					q <= 0;
				end
            end
        end
    end
end
`



================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always clk'posedge clk
begin
    if (reset')q <= 0;
else if (slowena)
    if (q < 10) q <= q + 1;
    else q <= 0;
end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (rlst1) {
    if (reset) q <= 0;
		if ((slowena) && (q != 9)) q++;
  } else {
    reg => q;
  }

package sch_clock_retimer;

clock_sss clock_fast;
reg clk_fast;
reg node_fast;
reg emu_nodes_fast;
reg q_fast;

// The clock module counts clock cycles repeatedly. For fast capture
// we need mark a cycle after each falling edge of clock.
always @(posedge clk_fast)
  if (1'b0) {
    q_fast = q;
  }

always @(posedge clk) // We need 2 clock cycles of delay here to synchronize between fast and slow nodes
  if (rlst1)
================================================================
