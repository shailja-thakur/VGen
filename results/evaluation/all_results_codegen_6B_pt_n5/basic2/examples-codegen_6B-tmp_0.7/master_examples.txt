example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

void and_gate(
    input a,
    input b,
    output out
    );

module and_gate( 
    input a, 
    input b, 
    output out 
    ){
    and_gate( input a, b, output out );
}

module and_gate( 
    input a, 
    input b, 
    output out 
    ){
    module m = and_gate( a, b, out );
}

module and_gate( 
    input a, 
    input b, 
    output out 
    ){
    module m = and_gate( a, b, output out );
}

module and_gate( 
    input a, 
    input b, 
    output out 
    ){
    module m = and_gate( a, b,
================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

function logic_and( a, b )

    return a & b;

end and_gate;

end design;

// Design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assing the OR of a and b to out

function logic_or( a, b )

    return a | b;

end or_gate;

end design;

// Design a module that implements a NOT gate

module not_gate( 
    input a, 
    output out );

    // assing the NOT of a to out

function logic_not( a )

    return !a;

end not_gate;

end design;

// Design a module that implements a XOR gate

module xor_gate( 
    
================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk or negedge rst) begin
        if(rst == 1) begin
            out <= 0;
        end
        else if(a == 1 and b == 1) begin
            out <= 1;
        end
        else begin
            out <= 0;
        end
    end


module or_gate( 
    input a, 
    input b, 
    output out );

    // assing the OR of a and b to out
    always @(posedge clk or negedge rst) begin
        if(rst == 1) begin
            out <= 0;
        end
        else if(a == 1 or b == 1) begin
            out <= 1;
        end
        else begin
            out <= 0;
        end
    end


module xor_gate( 
    input
================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

out <= and(a, b);


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

    always @(posedge clk or negedge rst) begin
        if (rst) begin
            out <= 0;
        end
        else begin
            out <= a & b;
        end
    end


================================================================
