// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always(clk or reset)\nbegin\n    present_state = in;\n    next_state = present_state == 0? 1 : 0;\n    out = next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset)\n  begin\n    if (reset == 1)\n      present_state = 0;\n    else if (in == 1)\n      present_state = next_state;\n    else if (next_state == 1)\n      present_state = 1;\n    out <= present_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  case present_state is\n    0:\n      if in = 1 then\n        next_state <= 1;\n      end\n      else next_state <= 0;\n    1:\n      if in = 1 then\n        next_state <= 0;\n      end\n      else next_state <= 1;\n  endcase\nend\n\n// The state machine\nalways @(posedge clk)\nbegin\n  // Only if reset is high\n  if (reset)\n  {\n    // Reset the state machine\n    next_state <= 0;\n    out = 0;\n  }\n  else\n  {\n    // Current state.\n    out <= next_state;\n  }\nend\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset)\n  if (reset)\n    next_state <= 0;\n  else\n    next_state <= in;\n\nalways @(posedge clk)\n  present_state <= next_state;\n\nalways @(negedge in)\n  if (next_state == 1)\n    next_state <= 0;\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n    present_state <= 0;\n  end\n  else if (in) begin\n    next_state <= 1;\n    present_state <= next_state;\n  end\n  out <= present_state;\nend\n"
    }
  ],
  "created": 1663519565,
  "id": "cmpl-WFuXs3sNJxdKQBt9OULvUOJA98juf",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 471,
    "prompt_tokens": 148,
    "total_tokens": 619
  }
}