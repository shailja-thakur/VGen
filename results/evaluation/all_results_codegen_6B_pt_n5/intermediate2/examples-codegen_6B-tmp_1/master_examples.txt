example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always(clk)
begin
 	if (reset)
 	begin
 		q <= 1;
 		"cout << q << endl;"
 	end
  else if (q == 12)
  begin
	q <= 1; 
  end
  else  
  begin
	q <= q + 1;
	"cout << q << endl;"
  end
end

// The testbench below introduces a reset signal.
fbuf buf_3(

		clk, 
		reset << 1, 
		reg << 3: 0
);
TE_RETURN_VALUE(1);
END_TB_MODULE_POST_RESET;
END_TB_MODULE_ON_ERROR;

TMP_LINKAGE_BUFFER *buf;
TMP_LINKAGE_BUFFER *pkg_buf;
================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always( clk or ( reset and q == X'00' ) )
begin	
    if ( reset ) then q = 1;
    else if ( q == 12 ) then q = 1; 
    else q = q+1;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always clk'='1 & !reset,
q <= {11,add(q,1)}; 
--@*/

void cover() {
    char q;
    
    // initialize q to 1
    q <= 1;
    
    // count to 12, or go back to 1 when resetting
    do {
        q = add(q,1);
    } while( q != 12);
    
    // print
    //q <= 11;
}

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always(clk, reset)
begin
    if (reset) begin
        q <= 1;
    end else if(q == 12) begin
        q <= 1;
    end else begin
            q <= q + 1;
    end
end


================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
behavior incdec = 
    t -> t; 
counter oneTo12 = 
    t > 0 | 32'h{101010110110101010} ->
    counter(clk,reset,q) 
          .after(incdec & t'[0]==1 & t'[1]==0) 
          .before(incdec & t'[0]==1 & t'[2]!=0) 
          .or(incdec & q'==12)
          .or(incdec & q'!=12)
          .and(clk==1 | reset==1 ); 

always @(posedge clk) 
  if (t_decode) q <= t_decode[4:0];
end

if (QMUX_reserved !== 0) q <= drop(QMUX_in &
================================================================
