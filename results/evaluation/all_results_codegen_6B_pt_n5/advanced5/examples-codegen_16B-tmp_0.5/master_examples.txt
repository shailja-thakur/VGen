example-0: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_output(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_output_2(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.

================================================================
example-1: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The FSM transitions between states S1, S2, S3 with the following conditions:
//1. If input a is high and input b is low, then transition to S1
//2. If input a is low and input b is high, then transition to S2
//3. If input a is low and input b is low, then transition to S3
//4. If input a is high and input b is high, then transition to S3
always @(posedge clk)
begin
  cur_state <= IDLE;
  if(a) next_state <= S1;
  else if(b) next_state <= S2;
  else next_state <= S3;
  if(next_state != IDLE)
    cur_state <= next_state;
end

================================================================
example-2: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The output is high when both inputs are high.
always @(posedge clk or negedge reset) begin
	if( next_state == IDLE ) begin
		cur_state <= IDLE;
	end
	else if (cur_state <= S1) begin
		next_state <= S1;
	end
	else if (cur_state <= S2) begin
		next_state <= S2;
	end
	else if (cur_state <= S3) begin
		next_state <= S3;
	end
	else if (cur_state <= S1 && next_state <= S2) begin
		next_state <= S2;
	end
	else if (cur_state <= S2 && next_state <= S3) begin
		next_state <= S3;
	end
	else if (cur_state <= S3
================================================================
example-3: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//We use a state machine with a priority encoder to get the right priority.
//The priority encoder is a 4 bit binary counter.
//The input signals a and b are connected to the input ports of the 4 bit binary counter.
//The output z is connected to the output port of the 4 bit binary counter.
//The states of the FSM are S1, S2, S3.
//The transitions are:
//S1 -> S2 when a = 1, b = 0, and cur_state = 1
//S2 -> S3 when a = 0, b = 1, and cur_state = 2
//S3 -> S1 when a = 1, b = 1, and cur_state = 3
//The priority encoder is a 4 bit binary counter.
//The input signals a and b are connected to the input ports of the 4 bit binary counter.
//The output z is connected
================================================================
example-4: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This is a test with the input order reversed.
function logic()
begin
    if (a) begin
        if (b) begin
            next_state = S3;
        end
        else begin
            next_state = S1;
        end
    end
    else if (b) begin
        if (a) begin
            next_state = S2;
        end
        else begin
            next_state = IDLE;
        end
    end
    else begin
        next_state = IDLE;
    end
end

================================================================
example-5: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module fsm(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when both of the input signals a and b are high.
module fsm2(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when both of the input signals a and b are high.
module fsm3(
input clk, reset,  
input a,  b,

================================================================
example-6: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The FSM transitions from S1 to S2 when a is high, and from S2 to S3 when b is high.
//The FSM transitions from S1 to S3 when both a and b are low.
//The FSM transitions from S2 to S3 when only one of a or b is high.
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= (a < b ? S1 : S2);
end

================================================================
example-7: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This is a composite FSM.
module abro_out(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is a composite FSM.
module abro_in(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is a composite FSM.
module abro_in_out(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 =
================================================================
example-8: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The input signals a and b are named A and B in the diagram below.
module abro_output(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The input signals a and b are named A and B in the diagram below.
module abro_output_2(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next
================================================================
example-9: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
always @(posedge clk or negedge reset)
  if (next_state == IDLE)
  {
    cur_state = IDLE;
    next_state = (a == 1) ? S1 : (b == 1) ? S2 : S3;
  }
  else
  {
    cur_state = next_state;
    next_state = IDLE;
  }

//This is an FSM with the output z high when both of the input signals a and b are high.
always @(posedge clk or negedge reset)
  if (cur_state == S1)
  {
    next_state = (a == 1) ? S1 : IDLE;
  }
  else if (cur_state == S2)
  {
    next_state = (b == 1) ? S2 : IDLE
================================================================
example-10: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_out(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_in(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module ab
================================================================
example-11: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This is a state machine.
always @(posedge clk or negedge reset)
begin
    if (a == 1 or b == 1)
    begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end
    else
    begin
        cur_state <= S1;
        next_state <= S2;
    end
end
// This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This is a state machine.
always @(posedge clk or negedge reset)
begin
    if (a == 1)
    begin
        cur_state <= S2;
        next_state <= S3;
    end
    else
    begin
        cur_state <= S3;
        next_state <= S1;
================================================================
example-12: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The FSM outputs high when the current state is S1 or S2.

always @(posedge clk or negedge reset)
  if (reset)
  begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else if (a)
  begin
    if (cur_state == IDLE)
      cur_state <= S1;
    else if (cur_state == S1)
      cur_state <= S2;
    else if (cur_state == S2)
      cur_state <= S3;
    else if (cur_state == S3)
      cur_state <= S1;
  end
  else if (b)
  begin
    if (cur_state == IDLE)
      cur_state <= S2;
    else if (cur_state == S2)
================================================================
example-13: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
reg [1:0] state;
always @(posedge clk)
  begin
    cur_state <= state;
    state <= next_state;
    next_state <= (a == 1) ? S1 : (b == 1) ? S2 : S3;
  end

================================================================
example-14: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The FSM transitions according to the following rules:
//S1 -> S2 -> S3 -> IDLE -> S1 -> S2 -> S3 -> IDLE -> S1 -> S2 -> S3 -> IDLE -> S1 -> S2 -> S3 -> IDLE
always @(posedge clk or negedge reset)
begin
    if(next_state == IDLE) begin
        next_state = S1;
        cur_state = next_state;
    end
    else if(next_state == S1) begin
        next_state = S2;
        cur_state = next_state;
    end
    else if(next_state == S2) begin
        next_state = S3;
        cur_state = next_state;
    end
    else if(next_state == S3) begin
        next_state = ID
================================================================
example-15: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//There are three states: IDLE, S1, S2
always @(*) begin
    if(clk == 1)
        cur_state = IDLE;
    else if(clk == 1 && reset == 1)
        cur_state = IDLE;
    else if(clk == 1 && reset == 0)
        cur_state = next_state;
    else if(clk == 1 && reset == 1)
        cur_state = S1;
    else if(clk == 1 && reset == 0)
        cur_state = S2;
    else if(clk == 1 && reset == 1)
        cur_state = S3;
    else if(clk == 1 && reset == 0)
        cur_state = S1;
    else if(clk == 1 && reset == 1)
        cur_state = S2;
================================================================
example-16: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_out(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module abro_out2(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
module
================================================================
example-17: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This is an FSM.
module abro_1(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//This is an FSM.
module abro_2(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a
================================================================
example-18: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
//The transition function is:
//  1 -> 2 -> 3 -> 1
//  2 -> 3 -> 1 -> 2
//  3 -> 1 -> 2 -> 3
//  1 -> 3 -> 2 -> 1
//  2 -> 1 -> 3 -> 2
//  3 -> 2 -> 1 -> 3
//  1 -> 2 -> 3 -> 1
//  2 -> 3 -> 1 -> 2
//  3 -> 1 -> 2 -> 3
always @(posedge clk) {
  if (a == 1) {
    cur_state = S1;
  }
  else if (b == 1) {
    cur_state = S2;
  }
  else if (a == b) {
    cur_state = S3;
  }
  else {
    next_state = IDLE;
  }
  next_state = next_state;
}

================================================================
example-19: 
// This is an FSM.
module abro(
input clk, reset,  
input a,  b,
output z );
parameter IDLE = 0,
S1 = 1,
S2 = 2,
S3 = 3;
reg [1:0] cur_state,next_state;
//This is an FSM with the output z high when either of the input signals a or b are high irrsepective of their order.
always @(posedge clk or negedge reset)
begin
  cur_state <= next_state;
  next_state <= S1;
  if (a) next_state <= S2;
  if (b) next_state <= S3;
  if (cur_state == IDLE) begin
    z <= 1;
  end
end

//This is an FSM with the output z high when both of the input signals a and b are high.
always @(posedge clk or negedge reset)
begin
  cur_state <= next_state;
  next_state <= S1;
  if (a) next_state <= S2;
  if (b) next_state <= S3;
  if (cur_state == IDLE) begin
    z <= 1;
  end
end

//This is an FSM
================================================================
