example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module out(clk, ena, q);


net        in0   = clk.inz.net;
net        in1   = ena.net;
net        data_i = advshift(clk.pg, in1, data, amount == '00b', q);
net        qdata  = regs.advshift(q, data_i);
out        enable = qdata > 0;
net        data   = qdata;


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




enable stall    ->clk;
stall         = "clock_enable";
stall         = "c_ct0";
stall         <= clk;
stall         => data,q := 0;
stall         <= data, q;
stall         <=> stall |= load |= ena;
stall''(load,ena) & 100'h15 ? stall: stall;

dont_build


#words data_load ->stall,stall;
data_load       => !size8|stall;
data_load       => !size16|stall;
data_load       => !size64|stall;
size8           => d(8,15),c(1,14);
size16          => d(16,31),c(1,15);
size64          => d(64,63),c(1,31);

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



// New function declarations for parallel objects.
//
// =================================================================================================
// =================================================================================================

// =================================================================================================

// conversion of Excel sheet to a list is a sequential process.

// The sheet has rows (in reverse order) that become the input stream
const int READ_INPUT_INIT_ADDR = 4;

// a connection of one an arithmetical shift register to another
const int READ_SHIFTS_CONN_ADDR = 4;

// a connection of one an treatment phase/ata bit to a parser (intended to be the ASCII entry input).
const int READ_INPUT_PARSE_HEAD_ADDR = 4;

// a connection of one an output phase/ata bit to a parser (intended to be the ASCII entry input).
const int READ_OUTPUT_PARSE_TAIL_ADDR = 4;

// a
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @ (posedge clk or !clk) // set up shift register
  begin
    if(load)
    begin
      if(en) q <= data;
    end
  end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module assert  (true,..., false);
// http://www.verip.com/documents/80nmrb/pc-language-reference-and-data-model.pdf 
 //Blocks blacklist edges anywhere during asserts
interface scrub(input w_c, input w_o, input w_e, connection box<1:0> i_en);
//Now we are in the block of asserts to perform the configuration or the perterals.
//All input signals MUST connect to the block, since the input modules
//have all those signals now. Begin with those signals that encompass the scope.


================================================================
