example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// output q so that q=12 corresponds to the maximum value of
// the counter
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
    q <= 11;
end
// The following two statements ensure that q is less than 12
// and greater than 0
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 0;
    else if (q == 12) q <= 0;
    else if (q >= 12) q <= 11;
    else q <= q + 1;
end
// The final statement ensures that q is in the range [1:12]
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 0;

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 1; 
    else q <= q + 1;
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// find the value of q for 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
// and assign it to q0
assign q0 = (q == 1) ? 1 : (q == 2) ? 2 : (q == 3) ? 3 :
            (q == 4) ? 4 : (q == 5) ? 5 : (q == 6) ? 6 :
            (q == 7) ? 7 : (q == 8) ? 8 : (q == 9) ? 9 :
            (q == 10) ? 10 : (q == 11) ? 11 : 12;
// find the value of q for 13
================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin 
    if (reset == 1) begin 
        q <= 1; 
    end else begin 
        if (q == 12) q <= 1; 
        else q <= q + 1; 
    end 
end 
// write the output bit b to the output
always @(posedge clk) begin 
    if (q == 1) q <= 2; 
    if (q == 2) q <= 3; 
    if (q == 3) q <= 4; 
    if (q == 4) q <= 5; 
    if (q == 5) q <= 6; 
    if (q == 6) q <= 7; 
    if (q == 7) q <= 8; 
    if (q == 8) q <= 9; 
    if (q == 9)
================================================================
