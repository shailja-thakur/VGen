example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
    always @(posedge clk) begin
        if (reset) q <= 0;
        else begin
            if (slowena && q < 9) q <= q + 1;
        end
    end

// On the positive edge of the enable:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
    always @(posedge slowena) begin
        if (reset) q <= 0;
        else begin
            if (q < 9) q <= q + 1;
        end
    end

// On the positive edge of the reset:
// reset the output q to 0. 
    always @(posedge reset) begin
        q <= 0;
    end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= '0';
    else if (slowena)
        if (q < 9) q <= q + 1;
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
    if (reset) q <= 0;
    else if (slowena)
        if (q != 9) q <= (q+1);

// On the negative edge of the clock, output the value of q.
always @(negedge clk)
    q <= q;

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if (reset) q <= {0,0,0};
    else if (slowena && q < 9) q <= {q+1,q+1,q+1};
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(negedge clk) begin
    if (reset) q <= {9,9,9};
    else if (slowena && q > 0) q <= {q-1,q-1,q-1};
end

// On the positive edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only increment the output q if the ena input is
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
    if (reset)
        q <= 0;
    else if (slowena)
        if (q != 9)
            q <= q + 1;

// On the positive edge of slowena:
// if the ena input is high, reset q to 0. 
// Otherwise, only increment q if the ena input is high and q is not 9.

always @(posedge slowena)
    if (ena)
        q <= 0;
    else if (q != 9)
        q <= q + 1;

// count up through 9 on the rising edge of the ena input

always @(posedge ena)
    if (q == 9)
        q <= 0;
    else
        q <= q + 1;


================================================================
