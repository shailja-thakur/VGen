example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
{
  cobegin {
  out = in;
  }
  cocycle {
    out = in;
  }
}

// Design a module that sums the two integers on input
module sumter( input [2] in, output out );
// sum in to out
{
  if(in[0] > 9 || in[1] > 9 ){
    out = 0;
  }else{
    out = in[0] + in[1];
  }
}
// assign sum to result
{
  cobegin {
    out = 0;
  }
  cocycle {
    if(in[0] > 9 || in[1] > 9 ) {
      out = 0;
    }
    else {
      out = in[0] + in[1];
    }
  }
}
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign( in, out );

// Submodules
go_select i1(i1_out,has_inv,has_num);

// Define module entry point
module i0_entry;
// Section 1 - definicja minimalna
i0_entry: offset_addr();
// Section 2 - dodanie komponent√≥w
go(tobyte(i1.data.out)); //0 - parycany, 1 - nieparzystany
// Section 3 - konfiguracja
safecall(go_default);
// End of module

================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign( wire in, wire out );
// assign out to in
module isi_assign( det isi, wire out );
// auto-generate code for wire_assign and wire_assign
// Table of connections to be made:
// lhs: input at row, col, in_unused
// rhs: output at row, col, out_unused
// Note: rows are away from package edge
// Note: cols to the right of package edge (idx=1)
// output starts at out_unused+1. If wire_assign, then out_unused==0


// Write the input and target nets
module top(
    input  i_strbs, // all
    input  last, // last buffer input
    input  strb, // current signal
    input  i_req_vld, // request valid
================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign in( in, out );
// which will print a warning message
electronics_warning_suitable_transistor_hint(0);
// providing a warning
electronics_warning_complex_name(0,0,"transistor","CPE");
// providing a descriptive warning
electronics_warning_module_name("round transistor CPE",0);
// Warning about a nested use of transistors
electronics_warning_nested_module( 0, module_name, 0, "CPE" );
// Nested use of a module (this declares reference to a custom module)
electronics_warning_module_transistor(0, "CPE", for_optimization);
// Custom transistors, taking some argument
electronics_warning_module_section("CPE", section_name, 100);

// Creating a submodule using "mode" attribute
module_B
================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
assign out = in;
// Assign the module's input to a wire
wire port0 = in;
// Connect two modules together
// Module A inputs its output port outputs and is connected to module b's input port
wire_assign A = wire_assign( port0, port2 );
// Module B has inputs and outputs, and is itself connected to module a
module_instance b;
// Connect the module instance's port outputs to some inputs of the adder
instantiate wire_assign( b.port2, port6 );
// The adder does the work
module adder;
instantiate adder( port6, port7, port8, port9 );

// Which port are its parameters coming in on?
wire port0 = in;
// Which wire are they?
wire port5 = port0;
// Which ports of which module are these coming into?

================================================================
