example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + r_reg ^ 2 ^ r_reg[2] ^ r_reg[4];
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_next <= r_reg ^ (r_reg[2] ^ r_reg[4]);
        q <= r_next[4:0];
    end
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 32'h1;
    end else begin
        r_reg <= r_reg + 1'b0;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_next <= r_reg ^ r_reg[2] ^ r_reg[4];
        q <= r_next;
    end
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 1);
        feedback_value <= r_reg[2] ^ r_reg[3];
        q <= r_next[4];
    end
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        feedback_value <= r_reg ^ (r_reg >> 2);
        r_reg <= r_reg >> 1;
        q <= r_next;
    end
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg << 1;
        if (r_reg[2] == 1) begin
            r_reg <= r_reg << 1;
        end else begin
            r_reg <= r_reg << 1;
            if (r_reg[3] == 1) begin
                r_reg <= r_reg << 1;
            end else begin
                r_reg <= r_reg << 1;
                if (r_reg[4] == 1) begin
                    r_reg <= r_reg << 1;
                    if (r_reg[2] == 1) begin
                        r_reg <= r_reg << 1;
                    end else begin
                        r_reg <= r_reg << 1;
================================================================
