example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
    sum <= a + b;
    cout <= sum[7:0] + carry;
    carry <= sum[15:8];
end

// This is a full adder. A full adder adds one bit and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
    sum <= a + b;
    cout <= sum[7:0] + carry;
    carry <= sum[15:8];
end

// This is a full adder. A full adder adds one bit and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
    sum <= a + b;

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The carry-out bit is computed in the carry_in variable.
reg [1:0] carry_in;

// The output sum is computed in the sum variable.
reg [3:0] sum;

// The half adder adds two bits to produce a sum and carry-out.
always @(posedge clk) begin
    // The carry-out bit is computed from the two inputs and the carry-in state.
    carry_in <= a[0] + b[0] + carry_in;

    // The output sum is computed from the two inputs and the carry-in state.
    sum <= a[3:0] + b[3:0] + carry_in;

    // The carry-in state is passed on to the next cycle.
    cout <= carry_in;
end

// This is the output driver. It receives the
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b, cout, sum;

// The carry-out is the bit that is not being added.
output carry_out;

// The sum is the bit being added plus the carry-out.
output sum;

// The half adder adds two bits and produces a sum and carry-out.
void half_adder( 
input a, b,
output cout, sum )
{
    int i;
    
    // The carry-out is the bit that is not being added.
    carry_out = 0;
    
    // The sum is the bit being added plus the carry-out.
    sum = a + b + carry_out;
    
    // The half adder adds two bits and produces a sum and carry-out.
    for (i=0; i<2; i++)
    {
        carry_out = sum &
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out, sum_in;

// This is the logic of the half adder.
assign cout = ( sum_in | carry_out ) & ~( carry_in | sum_in );

// This is the logic of the carry in.
assign carry_in = ( a | b ) & ~( a & b );

// This is the logic of the sum in.
assign sum_in = ( a & b ) | ~( a & ~b );


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
   if (rst) cout <= 0;
   else if (a) {
      cout <= sum;
      sum <= a + b;
   }
end


================================================================
