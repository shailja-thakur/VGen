example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* begin
	if(load) begin
		out := data;
	end else begin
		out := left_rotate(out,amount);
	end
end
endlink

// left rotate with carry operation
module left_rotate_c(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [15:0] out;
// when load is high, load data to out
// otherwise rotate the out register with carry followed by left shift the out register by amount bits
always @* begin
	if(load) begin
		out := data;
	end else begin
		out <<= (amount+1); // +carry
		out := left_rotate(out,amount);
		out[15] = carry;
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* begin
if(res || load) begin
if(load) begin
	if(amount > 1) begin
		out = 0; // load the out register with zeros
	end
	if(amount == 0) begin
		out = data;
	end
	else begin
		if(amount==1) begin
			out = out << 1; // left shift
		end
		if(others) begin
			out = out << amount; 	// rotate
		end
	end
end
else begin
	out = data;
	if(others) begin
		out = out << amount; 	// rotate
	end
end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
if(reset==0) begin
out <= (data<<amount) | ((data&load)>>(32+amount-1));
end else begin
if(load==1) begin
out <= 0;
end else begin
out <= out_shiftl(out,amount);
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
if(load) {
  out = data;
} else {
  out = bit_rotate_left(out,amount);
}

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
  if(load) begin
    out <= (data << amount) | out;
  end
  else begin
    out <<= amount;
    out <= out >> (8 - amount);
  end
end
// right rotate and left shift operation
module rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the data register by amount bits
always @(posedge clk or posedge reset) begin
  if(load) begin
    out <= (data >> amount) | out;
  end
  else begin
    out >>= amount
================================================================
