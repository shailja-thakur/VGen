// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This file was automatically generated by the script: gen-arithmetic-shift.py
// from the data in arithmetic-shift.csv.
// Do not edit this file.



// This is the table of contents for the manual.
// Note that this file is automatically generated by the script: gen-manual.py.
// Any edits made here will be overwritten by the script.
//
// Manual section   Contents
// ==============   =============================================================
//
// Overview           Introduction
// -------------------------
//
// Design Guidance    Overview of the design
// -------------------------
//
// Implementation Notes Implementation details
// ...............................................
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//endmodule
