example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)

begin
if(reset==1) present_state<=IDLE;
else present_state<=next_state;
end
always@(present_state or x)
begin
case(present_state)
IDLE: next_state = x?S1:IDLE;
S1: next_state = x?S10:S1;
S10: next_state = x?S101:S1;
S101: next_state = x?IDLE:S10;

default: next_state=present_state;
endcase
end
always@(posedge clk)
begin
case(present_state)
S1: z<=0;
S10: z<=0;
S101: z<=1;
default: z<=0;
endcase
end
end
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
case (present_state)
IDLE: if (reset | x) next_state <= S1; else next_state <= IDLE;
S1: if (x) next_state <= IDLE; else next_state <= S10;
S10: if (x) next_state <= S101; else next_state <= IDLE;
S101: if (reset | x) next_state <= IDLE; else next_state <= S1;
default: next_state <= IDLE;
endcase
always @(present_state or x or reset)
if (reset) present_state <= IDLE;
else present_state <= next_state;
assign z = ~present_state[1];

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk, posedge reset)
begin
if(reset && present_state == S101)
next_state <= IDLE; 
else
next_state <= next_state;
end
always @(present_state or x)
begin
	case(present_state)
IDLE:
	begin
	if(x==1)
	 next_state=IDLE;
	else
	next_state=S1;
	end
S1:
	begin
	if(x==0)
	 next_state=S10;
	else
	next_state=S1;
	end
S10:
	begin
	if(x==1)
	 next_state=S101;
	else
	next_state=S1;
	end
S101:
	begin
	next_state=IDLE
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
begin : FSM_COMBO
if (reset == 1'b1) 
 present_state <= IDLE;
else 
 present_state <= next_state;
end 
always @ (present_state or x or z) 
 begin : FSM_SEQ//This combinational always part controls any outputs 
case (present_state) 
IDLE: begin
z=1;
if (x) next_state <= IDLE;
else next_state <= S1;
// store the value at IDLE in case next status depends on the value at this state
end 
S1: begin
z=0;
if (x) next_state <= S1;
else next_state <= IDLE;
end 
S10: begin
z=0;
if (x) next_state <= S
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin 
if (reset) 
present_state = IDLE; 
else
present_state = next_state;
end 

always @ (*)
begin 
case (present_state)
IDLE: next_state = x ? S1:IDLE ;
S1: next_state = x ? 1'b1:IDLE ; 
S10: next_state = x ? 1'b0 :IDLE 
S101: next_state = 1'b1;
default: next_state = present_state ;
endcase
end

always @ (*)
case (present_state)
IDLE: begin z=1'b0; end 
S1: begin z=1'b0; end
S10: begin z=1'b0; end
S101:
================================================================
