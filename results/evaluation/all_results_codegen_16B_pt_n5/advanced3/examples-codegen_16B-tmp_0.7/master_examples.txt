example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
	present_state <= IDLE;
	next_state <= IDLE;
end

always @(posedge clk or posedge reset) begin
	if (reset) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
	else begin
		if (present_state == IDLE) begin
 			if (x == 1) begin
 				present_state <= S1;
 				next_state <= S10;
 			end else if (x == 0) begin
 				present_state <= S10;
 				next_state <= IDLE;
 			end
			end
	end
end

always @(posedge clk) begin
	z <= present_state;
end


================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
	if(reset == 0) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
	else begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
end

assign z = present_state;

always @(posedge clk) begin
	if(reset == 0) begin
		next_state <= IDLE;
	end
	else begin
		next_state <= IDLE;
	end
end

reg [1:0] desired_state;
always @(posedge clk) begin
	if(reset == 0) begin
		desired_state <= IDLE;
	end
	else begin
		desired_state <= IDLE;
	end
end

reg [1:0] state_
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;

always @(posedge clk) begin 
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end
  else begin //assign next state
    present_state <= IDLE;
    if (x) begin
      present_state <= S1;
      next_state <= S10;
    end else begin 
      present_state <= IDLE;
      next_state <= IDLE;
    end
  end
  z <= present_state==S101; // output signal
end

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
  case(present_state)
    case(IDLE) begin
      present_state <= S1;
      next_state <= IDLE;
      z <= 0;
    end
    case(S1) begin
      present_state <= S10;
      next_state <= IDLE;
      z <= 0;
    end
    case(S10) begin
      present_state <= S101;
      next_state <= IDLE;
      z <= 1;
    end
    case(S101) begin
      present_state <= IDLE;
      next_state <= IDLE;
      z <= 1;
    end
  end
end

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


reg [3:0] next_state_tmp;
always @(posedge clk) begin 
    if (reset) begin
        next_state_tmp <= IDLE;
        present_state <= IDLE;
    end else begin
        // x is asserted to 1 when present_state is S1 
        next_state_tmp <= present_state;
        present_state <= x;
    end
    next_state <= next_state_tmp;
end

================================================================
