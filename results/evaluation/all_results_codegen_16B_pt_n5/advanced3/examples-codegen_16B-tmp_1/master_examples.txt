example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always begin
    // wait for a rising edge of clk to tell the FSM not running
    present_state <= IDLE;
    next_state <= IDLE;
    // call the next_state
    next_state <= x ? S10 : S1;
    if (reset && present_state != IDLE)
     next_state <= IDLE; 
    if (next_state != present_state) 
    begin
        present_state <= next_state;
        next_state <= IDLE;
    end
end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//The parser is a FSM which extract the value of the current bit as value and updates the
//present_state and then, depending on the bit value received and the current state, the rules 
//described in the input signal S on the previous lines are applied. 
reg [1:0] parser_state, parser_control;
parameter INIT = 0, START = 1, S0 = 2, S1 = 3, ST0 = 4, ST1 = 5; //fields supposed to be 3 bit inputs with default value zero
reg [7:0] value;
reg [7:0] ctr;
reg [15:8] base_address, current_address, cursor;
parameter IDLE_STATE = 0, ID_BYTE_READ = 1, ID_BYTE = 2, ID_HEX_BYTE_WRITE = 3, IDLE = 4;
//
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin 

// if clk is high, present_state is assigned next_state 
// if clk is low, present_state is assigned present_state
begin  
        present_state <= next_state; 
end 

always @(posedge clk or posedge reset) begin 

// If rset is high and clk was high, valhereset_state is assigned IDLE, if clk just went high 
// present_state is assigned IDLE. 
// x is not updated, val represents the present_state carried into next_state. 
  next_state <= valhereset_state; 
end 

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always #(2) begin
    present_state <= fsm(x);

    next_state <='0' ?-- ++present_state : wait;
    z <= present_state;
  end

// The above is the high level transition function specified using function-based convention. 
// Note that present_state is not mutable, because you never want to change the present_state from IDLE on a clock transition 
 

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
next_state <= present_state;
enable <= ~(present_state[1] ^ 1);
end;
always begin
next_state <= present_state;
end; 

begin 54 
if UNIXED_IF > 07777 then
  cilogic lbl0 <= 1;
others 
  cilogic lbl0 <= 0;
end if; 
end lbl0; 


error_logic a = clk_edge(x, clk); 
error_logic b = site_error(present_state);

setup: begin
  if (~reset || present_state[0]) begin
    present_state <= IDLE;
  end
  end

lbl1: begin
	present_state <= S1;

 	next_state <= IDLE;

	end
 lbl2
================================================================
