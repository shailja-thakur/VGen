example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
module RS_OR( input [7:0] in, output [7:0] b );   // OUT = input | in
//When sel=2, assign low or high to out
module HIGH_OR_LOW( input [3:0] in, output [3:0] b ); 
//when sel = 3, assign low to out
//when sel = 4 assign high to out
//when sel = 5 assign in to out
//when sel = 6 assign low or high to out
module AND( input [7:0] in, input [7:0] b, output [7:0]  out );

// Input is bit[n], Output is bit[n + 2]
// With high(x) -> low(1-x)
module B_2BIT( input [1:0] in, output [3:0] b );


================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [1:0] sel;
reg [1:0] b;
always @(posedge clr ) begin

	if (sel==0) begin
	// CS = 1 and CE = 1
	// Output one if in = 0, 0 otherwise.
	b <= in;
	end else if (sel==1) begin
	// CS = 1 and CE = 0
	// Output zero if in = 0, 1 otherwise.
	b <= in;
	end else if (sel==2) begin
	// CE = 1, CS=0
	// Output 1 if in = 1, 0 otherwise.
	b <= in;
	end else if ((sel==3)&&(in==3)) begin
	// Output 0.
	b <= 0;
	end else begin
	// CS = 0
	// Output 0.
	b <= 0;
	
================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
{
  case( a[2:0] | b[2:0] ) 
    pos = 0;
    else:
      case( ( a[0:0] & b[0:0] ) | b[1:0] )
        pos = 1;
        else
	  case( b[0:0] & a[0:0] )
   		  pos = 2;
      else
	  case( a[1:0] | b[1:0] )
     	  pos = 1;
  endcase
}
process ( pos )
	begin
 		assert( true = '1' )
 		if ( pos == 3 )
 		{
			// assert( true = 1'b0 )
			// assert( false = 1'b1 )
		}
================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=2, assign z to out
// Sel can only be 1 or 2 at time.
always @(posedge IN, posedge P, posedge OUT)
begin
  pos <= (sel==2)?1: ((sel==1)?(in&1):0);
end


================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
axi_mux( pos  => author@zll.mit.edu reply[0:0], in[0], in[1], in[2] );
axi_mux( pos<1> => pos[1], input [0] );
axi_mux( pos<2> => pos[2], in[0] );

// each time address changes we want to check inputs again, because we may have reset some seqls
axi_mux((address in, address valid) => {reset}, author@zll.mit.edu address[11:0]);
axi_mux((address in, address valid) => {ready}, xil_clraddr); // Get next instruction.
axi_mux((address in, address valid) => {done}, xil_clraddr); // Go back.

always @(posedge l1) begin

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign r to out
always @( posedge in or negedge in ) begin
    case( in )
      pos <= {sel, sel to b, b};
      default:
      pos <= 0;
    endcase
end
  
================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @ (posedge in) begin
   if(in[1])
   {
      pos <= b; 
   }
   else
   {
      pos <= a;
   }
end

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
#define PRIORITY_SELECT logical = in[0]^in[1];
#define WRITE_OR_ZERO priority_encoder.pos = sel ? in[1] : 0;

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
function priority_encoder_sel()
{
    pos <= in & in[1:0]';
} 

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
FullCounter ff(0); // Forwarding decoder
MyTimer  time( tcnt_rst );

//Every rising edge calls tim->period
setup: begin
	time.period( 1 );
	ff.count_start();
end  

always begin
	pos <= ff;
	if( ff.count_wrap() ) // Decoder done, priority encoder is enabled in next cycle
		time.period( in[2 : 0] );
	else if( ff.decided() && (time.t == 1) ) // Decoder done, and decoded a 0 in the critical cycle, start
		time.reset( 1 );
end

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always_ff @$display( pos ); end

enum addr_mode {
    mode_IDD = 2'b11,
    mode_IA  = 2'b10,
    mode_DA  = 2'b01,
    mode_AA  = 2'b00
};

enum addr_ce {
	ce_IDD = 1'b1,
	ce_DA  = end
};

enum width {
	width_1 = 1'b0,
	width_4 = 1'b1
};

addrs #( .WIDTH( width_1 ), .MODE( addr_mode ), .CE( addr_ce ) ) addrs_m, 
addr_i #( .MODE( addr_mode ), .IDD( 1'b1 ) ) addr_i_m; 
opts #( .WIDTH( width
================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk) begin
if (in==1 && sel==1) begin
if (pre( in )) { pos=b; } 
end
end
// When sel=0, assign both a and b to out
always @(posedge clk) begin
if (in!=1 || sel!=1) begin
if (pre( in )) begin
pos=(a | b); 
end
end
end

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = reg[0];
// When sel=1, assign a to pos
assign pos = bool(reg[1] | reg[2]);

//Truth table for input A
// T:input A
//  F  a=Y
//  F  a=X
//  T  a=X
//  T  a=0

// F : reg[1]=1
// F : reg[2]=1
// F : reg[0]=1

// T : reg[1]=1
// T : reg[2]=0
// T : reg[0]=0

priority_encoder: process( A, B ) {
	A = A || B;
	if (A == 1 && (B == 1 || B == 0)) pos = 1;
	else if (A == 0 && (B == 0
================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign (sel&in) to out 
always @ (posedge CLK) begin
      if(PRM_SELECT)
        pos <= int(in);
      else
        pos <= int((sel&in));
end

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
module logic [1:0] #3[3:0] ( sel, in, pos );
// cp_out is defined and usable by your design. It susceptible to be the only one you use externally!
module logic [1:0] cp_out [3:0];
assign #3[3:0] = sel ? pos : cp_out;

================================================================
example-15: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out

(* positions = "01" *) static parameter [2:0] b = 0;

(* positions = "11" *) static parameter [2:0] a = 1;

// [29-28 bits are one's]
// When hl=1, output = b;
// When hl=0, output = a
always inline void high_bit_decoder( int sel, int hl ) 

{
  if ( sel)
  	output = b;
  else
  	output = a;
}

// Check bits (18-17 are zero)
always inline int HI_18(int val) {
	if ( !(val & (1>>17)) ) return 1;
	else return 0;
}

always inline int HI_19(int val) {
	if
================================================================
example-16: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always begin
if (in[1]) pos <= 1;
else if(in[0]) pos <= 2;
else pos <= 3;
end

================================================================
example-17: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
module 
priority_encoder_b ( in bool bit, 
output [1:0] out ); 
priority_encoder_b = ( in ) ? logic_zero : priority_encoder( ( in ), pos );

// */


/*
// VHDL definition
// Decimal 150 
// Preliminary scan and decode FSM
module 
priority_encoder_2;

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
priority_encoder_1 priority_encoder_1 ( 
	input [2:0] in,
	output reg [1:0] pos ); 
// When sel=1, assign b to out
priority_encoder_2 priority_encoder_2_b ( in bool bit, 
	output [1:0] out ); 
priority_
================================================================
example-18: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge s or negedge v) begin
    if (v & s && !in[0]) {
        pos[1:0] <= 2'd0;
    } else if (v && in[0]) {
        pos[1:0] <= 2'd3;
    } else if (!in[0] && in[1] && !in[2]) {
        pos[1:0] <= 2'd4;
    } else if (in[0] && in[1] && in[2]) {
        pos[1:0] <= 2'd7;
    } else if (in[0] || in[1] || in[2]) {
        pos[1:0] <= 2'd6;
    } else if ((!s) && (!in[1]) && (!in[2])) {
        pos[1:0]
================================================================
example-19: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=2, assign a to out
// When sel=3, do not affect out
always @(posedge sig ) begin
  if (sel == 1)
    pos <= 1;
  else if (sel == 2)
    pos <= 1;
  else
    pos <= 0;
end

================================================================
