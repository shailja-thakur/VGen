example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) begin q <= 0; end
    else if (q == 12) begin q <= 0; end
    else begin q <= q + 1; end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if(reset)
	q <= 0;
    else if(q==12)
	q <= 1;
    else
	q <= q + 1;
end
// define q as a char, since it's a bit array
char q = '0';
// assign q to the correct char in the string
assign q = q[3:0];
// print out the value of q
// Note that the print statement must be outside the always block
// to avoid a race condition.
$display q;

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
        if ( reset )
        q <= 1;
        else
        case q is
        12'd0: q <= 1;
        default: q <= q + 1;
        endcase
end 
// Generate a clock by incrementing q on the positive edge of clk
always @( posedge clk )
begin
        q <= q + 1;
end

// Generate a clock by decrementing q on the negative edge of clk
always @( negedge clk )
begin
        q <= q - 1;
end


// This is a counter that counts from 12 to 1
module counter_rev( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on
================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;

// The conversion of a binary counter to a decimal number is based on the following
// conversion formula:
//
//   A*2^(n-1) + B (mod 10^9)
//
// where A and B are the two digits of the binary number
//   B is the number of digits in the binary number n
//
// with:
//   A = [A1 A2]
//   B = [B1 B2]
//
// The following modules are used to compute A1 and A2 and B1 and B2
module counter_max_a( input [14:0] a, input [5:0] b );
// A1 = a[
================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
for (reg i = 0; i < 13; i = i+1) begin
    q <= i;
    if (i==13) q <= 1;
    if (clk==1 and (i==12 or i==13)) begin
        q <= i+1;
    end
    clk <= clk + 1;
end
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
for (reg i = 0; i < 13; i = i+1) begin
    q <= i;
    if (i==13) q
================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end


// This is a counter that counts from 2 to 12 inclusive
module counter2( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 2
// else if q is 12, assign q to 2
// else, assign q to q + 1
always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 2;
    else q <= q + 1;
end


// This is a counter that counts from 3
================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
    if (reset) q <= 1;
	else if (q == 12) q <= 1;
	else q <= q + 1;

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    case(q)
    	q <= 1;
    case(12)
    	q <= 1;
    	q <= q + 1;
    	default:
    	endcase
end


// OR gate
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, decrement q by 1 
always @(posedge clk or posedge reset) begin
    case(q)
    	q <= 1;
    case(12)
    	q <= 1;
    	q <= q
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) begin
        q <= 1;
    end else if (q == 12) begin
        q <= 1;
    end else begin
        q <= q + 1;
    end
end

// counter that increments by 1 on each clock edge
// input clock, input reset, output counter
// output counter
always @(posedge clk or posedge reset) begin
    if (reset == 0) begin
        counter <= 0;
    end else begin
        counter <= counter + 1;
    end
end

// counter that increments by 2 on each clock edge
// input clock, input reset, output counter
// output counter
always @(posedge clk or posedge reset) begin
    if (reset == 0) begin
        counter2 <= 0;
    end else begin
        counter
================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// implement the counter
// make q an input to the counter, which is used to set the counter 
// to a certain value
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if ( reset == 0 ) q <= 1;
    else if ( q == 12 ) q <= 1;
    else q <= q + 1;
end
// output q

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
    q <= (reset == 0) ? 1 : ( q == 12 ? 1 : q+1 );
end
// update q on the positive edge of the clock according to the following cases:
// on rising edge, if q is 1, or if q is 3, assign q to 2
// else, assign q to 1
always @(posedge clk)
begin
    q <= ( q == 1 || q == 3 ) ? 2 : 1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
    if (reset)
        q <= 0;
    else if (q == 12)
        q <= 1;
    else
        q <= q + 1;

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = (reset == false) ? [3:0] 1 
                          : (q == 12) ? [3:0] 1 
                          : (q==12) ? q+1 : q+1; 

// Assign the output to the counter's output signal
assign q = q;

always @(posedge clk) begin
    if (reset == 0) begin
        q <= 1;
    end else begin
        if (q == 12) q <= 1;
    end
end


================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
    if(reset) 
        q <= 1; 
    else if(q == 12) 
        q <= 1; 
    else 
        q <= q + 1; 

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
  if (reset == 0) q <= {1, 1, 1, 1};
  else if (q == 12) q <= {1, 1, 1, 1};
  else q <= q + 1;
end

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or ~reset) begin
    q <= q+1;
    if (reset) begin
        q <= 1;
    end else if (q == 12) begin
        q <= 1;
    end else begin
        q <= q+1;
    end
end
// follow this with a simple LED driver to see the count
always @(posedge clk or ~reset) begin
    if (reset) begin
        q <= 1;
    end else if (q == 12) begin
        q <= 1;
    end else begin
        q <= q+1;
    end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end


// Example 2: Multiple register reads and writes
// This example shows how to read and write multiple registers with a single
// clock cycle. `readRegs` reads four registers (`q[1:0]` and `q[3:2]`), writes
// the results to a third register (`q[2]`), and then immediately reads them
// back.
int main( void )
{
    int i;

    counter c;
    readRegs( c.q[1:0], c.q[3:2] );
    c.q[2] = c.q[1] + c.q[3];
    writeRegs(
================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = (reset == 0 && q == 12) ? 1 : q+1;
// always assign the value of q to the input reg q
assign q = q;

================================================================
