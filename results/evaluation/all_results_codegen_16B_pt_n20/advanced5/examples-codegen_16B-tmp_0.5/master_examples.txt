example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else begin
    case (cur_state)
      IDLE: begin
        if (a and b) begin
          next_state <= SAB;
        end else begin
          next_state <= IDLE;
        end
      end
      SA: begin
        if (b) begin
          next_state <= SAB;
        end else begin
          next_state <= IDLE;
        end
      end
      SB: begin
        if (a) begin
          next_state <= SAB;
        end else begin
          next_state <= IDLE;
        end
      end
      SAB: begin
        next_state <= IDLE;
      end
    end
  if (cur_state != next_state)
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (a) begin
      next_state <= SA;
    end
    else if (b) begin
      next_state <= SB;
    end
    else begin
      next_state <= IDLE;
    end
    if (cur_state == IDLE && next_state == SA) begin
      z <= 1;
    end
    else if (cur_state == IDLE && next_state == SB) begin
      z <= 1;
    end
    else if (cur_state == IDLE && next_state == SAB) begin
      z <= 1;
    end
    else if (cur_state == SA && next_
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
    cur_state <= next_state;
    if(cur_state == IDLE && a && b) begin
        next_state <= SAB;
    end
    else if(cur_state == IDLE && a) begin
        next_state <= SA;
    end
    else if(cur_state == IDLE && b) begin
        next_state <= SB;
    end
    else if(cur_state == SA && b) begin
        next_state <= SAB;
    end
    else if(cur_state == SB && a) begin
        next_state <= SAB;
    end
    else if(cur_state == SAB && a && b) begin
        next_state <= IDLE;
        z <= 1;
    end
    else if(
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  if(reset) begin
    cur_state <= IDLE;
  end else begin
    if(a) begin
      if(b) begin
        cur_state <= SAB;
      end else begin
        cur_state <= SA;
      end
    end else begin
      if(b) begin
        cur_state <= SB;
      end else begin
        cur_state <= IDLE;
      end
    end
  end
end
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk or posedge reset)
begin
    if (reset)
    begin
        cur_state <= IDLE;
        next_state <= IDLE;
        z <= 0;
    end
    else
    begin
        if (a and b)
        begin
            cur_state <= SAB;
            next_state <= SAB;
        end
        else
        begin
            if (a)
            begin
                cur_state <= SA;
                next_state <= SA;
            end
            else
            begin
                if (b)
                begin
                    cur_state <= SB;
                    next_state <= SB;
                end
                else
                begin
                    cur_state <= IDLE;
                    next_state <= IDLE;
                end
            end
        end
        z <= cur_state
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
        z <= 0;
    end
    else begin
        if (a and b) begin
            next_state <= SAB;
            z <= 1;
        end
        else if (a) begin
            next_state <= SA;
            z <= 1;
        end
        else if (b) begin
            next_state <= SB;
            z <= 1;
        end
        else begin
            next_state <= IDLE;
            z <= 0;
        end
        if (next_state == SAB) begin
            next_state <= IDLE;
        end
        if (cur_state == SAB) begin
            next_state <= IDLE;
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = (cur_state == SAB);
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else begin
    if (a) begin
      cur_state <= SA;
      next_state <= SAB;
    end
    else if (b) begin
      cur_state <= SB;
      next_state <= SAB;
    end
    else begin
      cur_state <= IDLE;
      next_state <= IDLE;
    end
    if (cur_state != next_state) begin
      cur_state <= next_state;
    end
  end
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    if(reset) begin
        cur_state <= IDLE;
    end
    else begin
        cur_state <= cur_state + 1;
        next_state <= cur_state;
        if ((cur_state == IDLE) && (a && b)) begin
            next_state <= SAB;
        end
        if ((cur_state == IDLE) && (a)) begin
            next_state <= SA;
        end
        if ((cur_state == IDLE) && (b)) begin
            next_state <= SB;
        end
        if ((cur_state == SA) && (b)) begin
            next_state <= SAB;
        end
        if ((cur_state == SB) && (a)) begin
            next_state <= SAB;
        end
        if ((cur_state ==
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if(reset)
    cur_state <= IDLE;
  else
    if(a && b)
      cur_state <= SAB;
    else
      if(a)
        cur_state <= SA;
      else
        cur_state <= SB;
  next_state <= cur_state;
  if(cur_state == IDLE && a && b)
    next_state <= SAB;
  else
    if(cur_state == IDLE && a)
      next_state <= SA;
    else
      if(cur_state == IDLE && b)
        next_state <= SB;
      else
        next_state <= SAB;
  if(next_state == SAB)
    z <= 1;
  else
    z <= 0
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
reg [1:0] a,b;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    a <= 0;
    b <= 0;
    z <= 0;
  end
  else begin
    // TODO: add the actual FSM logic here
    a <= a;
    b <= b;
    next_state <= cur_state;
    if (a && b) begin
      next_state <= SAB;
    end
    else if (a) begin
      next_state <= SA;
    end
    else if (b) begin
      next_state <= SB;
    end
    if (a && b) begin
      z <= 1;
    end
    cur_state <= next_state;
  end
end

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] cur_state,next_state;
always @(posedge clk) begin
	if (reset) begin
		cur_state <= IDLE;
	end
	else begin
		if (a) begin
			next_state <= SA;
		end
		else begin
			if (b) begin
				next_state <= SB;
			end
			else begin
				next_state <= IDLE;
			end
		end
		cur_state <= next_state;
	end
	z <= cur_state;
end

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if(reset) begin
    cur_state <= IDLE;
    z <= 0;
  end else begin
    if(a) begin
      next_state <= SA;
    end else begin
      if(b) begin
        next_state <= SB;
      end else begin
        if(cur_state == IDLE) begin
          next_state <= SAB;
        end else begin
          next_state <= IDLE;
        end
      end
    end
    cur_state <= next_state;
    z <= cur_state == SAB;
  end
end
"""

x = t.sim(clk=1, reset=0, a=1, b=1, z=1)
print x

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [2:0] z;
always @(posedge clk or posedge reset) begin
    if(reset == 1) begin
        cur_state <= IDLE;
        z <= 0;
    end else begin
        case(cur_state)
            IDLE : begin
                if(a == 1 and b == 1) begin
                    cur_state <= SAB;
                    z <= 1;
                end
                if(a == 1) begin
                    cur_state <= SA;
                end
                if(b == 1) begin
                    cur_state <= SB;
                end
            end
            SA : begin
                if(b == 1) begin
                    cur_state <= SAB;
                    z <= 1;
                end
                if(a == 1) begin
                    cur_state <= SAB;
                    z <= 1;
                end
            
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk or posedge reset) begin
    if(reset) begin
        cur_state <= IDLE;
    else begin
        cur_state <= IDLE;
    end
end
always @(negedge clk) begin
    if(a) begin
        next_state <= SA;
    end
    else begin
        next_state <= IDLE;
    end
end
always @(negedge clk) begin
    if(b) begin
        next_state <= SB;
    end
    else begin
        next_state <= IDLE;
    end
end
always @(negedge clk) begin
    if(a && b) begin
        next_state <= SAB;
        z <= 1;
    end
    else begin
        next_state <= IDLE
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk) begin
  cur_state <= cur_state;
  next_state <= cur_state;
  if(reset) begin
    cur_state <= IDLE;
  end
  else begin
    if(a) begin
      next_state <= SA;
    end
    else begin
      if(b) begin
        next_state <= SB;
      end
      else begin
        next_state <= IDLE;
      end
    end
  end
  if(next_state == SA && a && b) begin
    next_state <= SAB;
  end
  if(next_state == SB && a && b) begin
    next_state <= SAB;
  end
  if(next_state == IDLE && a && b) begin
    next
================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk) begin
    if(reset)
    next_state <= IDLE;
    else if(a && b)
    next_state <= SAB;
    else if(a)
    next_state <= SA;
    else if(b)
    next_state <= SB;
    else if(z)
    next_state <= SAB;
    else
    next_state <= IDLE;
    if(next_state != cur_state)
    cur_state <= next_state;
    z <= cur_state[0];
end
// instantiations
abro uut(clk,reset,a,b,z);

================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset) begin
    if (reset) begin
        cur_state <= IDLE;
    end
    else begin
        if (a and b) begin
            next_state <= SAB;
        end
        else begin
            if (a) begin
                next_state <= SA;
            end
            else begin
                if (b) begin
                    next_state <= SB;
                end
                else begin
                    next_state <= IDLE;
                end
            end
        end
        case(cur_state)
            IDLE: begin
                z <= 0;
            end
            SA: begin
                z <= 1;
            end
            SB: begin
                z <= 1;
            end
            SAB: begin
                z <= 1;
            end
        end
        cur_state <= next_
================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [2:0] z;
always @(posedge clk) begin
    if (reset) begin
        cur_state <= IDLE;
        z <= 0;
    end
    else begin
        if (a && b) begin
            next_state <= SAB;
            z <= 1;
        end
        else if (a) begin
            next_state <= SA;
        end
        else if (b) begin
            next_state <= SB;
        end
        if (next_state != cur_state) begin
            cur_state <= next_state;
        end
    end
end

================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
reg [1:0] state;
always @(posedge clk) begin
  if(reset) begin
    cur_state <= IDLE;
  end
  else begin
    if(a && b) begin
      cur_state <= SAB;
      z <= 1;
    end
    else if(a) begin
      state <= SA;
      cur_state <= SA;
    end
    else if(b) begin
      state <= SB;
      cur_state <= SB;
    end
    else begin
      state <= IDLE;
      cur_state <= IDLE;
    end
  end
end

================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset) begin
  if (reset) begin
    cur_state <= IDLE;
  end else begin
    if (a and b) begin
      cur_state <= SAB;
    end else if (a) begin
      cur_state <= SA;
    end else if (b) begin
      cur_state <= SB;
    end else begin
      cur_state <= IDLE;
    end
    next_state <= cur_state;
    if (cur_state == IDLE) begin
      z <= 0;
    end else begin
      z <= 1;
    end
  end
end

================================================================
