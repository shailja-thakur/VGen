example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x00. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF. 
// The output s = 0xFF and the output overflow = 0x00. 

signed_adder(0xFF, 0xFF, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0x00, 0xFF, s,
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x00. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF. 
// The output s = 0xFF and the output overflow = 0x00. 

signed_adder(0xFF, 0xFF, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0x00, 0xFF, s,
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are unsigned numbers. 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// an unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is low
// an unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is high


unsigned_adder(a, b,
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0x00. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF. 
// The output s = 0xFF and the output overflow = 0x01. 

signed_adder(0x00, 0xFF, s, overflow);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF. 
// The output s = 0x00 and the output overflow = 0x01. 

signed_adder(0xFF, 0xFF, s,
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder in action. 
// The inputs are a = [0x00], b = [0x01], s = [0x00], and overflow = [0x00]
// The outputs are s = [0x01], overflow = [0x00]

signed_adder(0x00, 0x01, 0x00, 0x00);

// The following test case shows the signed adder in action. 
// The inputs are a = [0xFF], b = [0x00], s = [0x00], and overflow = [0x00]
// The outputs are s = [0x01], overflow = [0x01]

signed_adder(0xFF, 0x00, 0x00, 0x01);

// The following
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
// The numbers are a = 0x00 and b = 0xFF. 
// The expected output is s = 0x00 and overflow = 0x00. 

signed_adder(0x00, 0xFF, 0x00, 0x00);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
// The numbers are a = 0xFF and b = 0x00. 
// The expected output is s = 0xFF and overflow = 0x01. 

signed_adder(0xFF, 0x00, 0xFF, 0x01);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF
// The output s = 0x00 and the overflow = 0x00

signed_adder(0x00, 0xFF, 0x00, 0x00);

// The following test case shows the signed adder for a and b = 0xFF and 0x00
// The output s = 0xFF and the overflow = 0x01

signed_adder(0xFF, 0x00, 0xFF, 0x01);

// The following test case shows the signed adder for a and b = 0x00 and 0x00
// The output s = 0x00 and the overflow = 0x00

signed_adder(0x00, 0x00, 0x00, 0x00);

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are unsigned numbers. 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// an unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is low
// an unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is high


unsigned_adder(a, b,
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0x00, respectively. 
// The output s = 0x00 and the output overflow = 0x00. 
// The signed adder should add a and b to the output s and the output overflow should be 0x00. 

signed_adder(0x00, 0x00, 0x00, 0x00);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF, respectively. 
// The output s = 0xFF and the output overflow = 0x01. 
// The signed adder should add a and b to the output s and the output overflow should be 0x01. 

signed_adder(0xFF, 0xFF, 0xFF, 0
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a and b are in the range [-128, 127]. 
// Assume s is in the range [-128, 127]. 
// Assume overflow is in the range [0, 1]. 
// Assume a and b are not both zero. 
// Assume a and b are not both negative. 
// Assume a and b are not both positive. 
// Assume a and b are not both negative and positive. 
// Assume a and b are not both zero and negative. 
// Assume a and b are not both zero and positive. 
// Assume a and b are not both negative and zero. 
// Assume a and b are not both positive and zero. 
// Assume a and b are not both negative and positive and zero. 
// Assume a and b are
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the input b. 
// The input a is assigned to the output b. 
// The input b is assigned to the output a. 
// The input overflow is assigned to the output s. 
// The input a is assigned to the output s. 
// The input b is assigned to the output a. 
// The input overflow is assigned to the output s. 
// The input a is assigned to the output s. 
// The input b is assigned to the output a. 
// The input overflow is assigned to the output s. 
// The input a is assigned to the output s. 
// The input b is assigned to the output a. 
// The input overflow is assigned to the output s. 
// The input
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the input b. 
// The input a is assigned to the output b. 
// The input b is assigned to the output s. 
// The input overflow is assigned to the output overflow. 

signed_adder(a, b, b, a, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the input b. 
// The input a is assigned to the output b. 
// The input b is assigned to the output s. 
// The input overflow is assigned to the output overflow. 

signed_adder(a, b, s, a, overflow);

// The output s is assigned to the input a. 
// The output overflow is assigned to the
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x80 and 0x7F. 
// The output s = 0x7F and the overflow is 0. 
// The signed adder adds the numbers and assigns the result to s. 
// The most significant bit of s is 1 because the most significant bit of a is 1 and the most significant bit of b is 1. 
// The most significant bit of s is 0 because the most significant bit of a is 0 and the most significant bit of b is 1. 
// The most significant bit of overflow is 0 because the most significant bit of a is 1 and the most significant bit of b is 0. 
// The most significant bit of overflow is 1 because the most significant bit of a is 0 and the most significant bit of b is 0. 

signed_adder(
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two numbers a = 0x00 and b = 0x01. 
// The output s = 0x01 and the output overflow = 0x00.

signed_adder(0x00, 0x01, s, overflow);

// The following test case shows the signed adder for two numbers a = 0xFF and b = 0x00. 
// The output s = 0x00 and the output overflow = 0x01.

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for two numbers a = 0x01 and b = 0xFF. 
// The output s = 0xFF and the output overflow = 0x01.

signed_adder(0x01, 0xFF
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF, respectively. 
// The output s = 0x00 and the overflow = 0x00. 

signed_adder(0x00, 0xFF, 0x00, 0x00);

// The following test case shows the signed adder for a and b = 0xFF and 0x00, respectively. 
// The output s = 0xFF and the overflow = 0x01. 

signed_adder(0xFF, 0x00, 0xFF, 0x01);

// The following test case shows the signed adder for a and b = 0xFF and 0xFF, respectively. 
// The output s = 0x00 and the overflow = 0x01. 

signed_adder
================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for a and b = 0x00 and 0xFF, respectively. 
// The output s = 0x00 and the overflow = 0x00. 

signed_adder(0x00, 0xFF, 0x00, 0x00);

// The following test case shows the signed adder for a and b = 0xFF and 0x00, respectively. 
// The output s = 0xFF and the overflow = 0x01. 

signed_adder(0xFF, 0x00, 0xFF, 0x01);

// The following test case shows the signed adder for a and b = 0x00 and 0x00, respectively. 
// The output s = 0x00 and the overflow = 0x00. 

signed_adder
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for the two numbers a = 0x00 and b = 0x01. 
// The output s = 0x01 and the overflow = 0x00.

signed_adder(0x00, 0x01, s, overflow);

// The following test case shows the signed adder for the two numbers a = 0xFF and b = 0x00. 
// The output s = 0x00 and the overflow = 0x01.

signed_adder(0xFF, 0x00, s, overflow);

// The following test case shows the signed adder for the two numbers a = 0x00 and b = 0xFF. 
// The output s = 0xFF and the overflow = 0x01.

signed_adder(0x00, 0xFF
================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
// The numbers are a = 0x00 and b = 0xFF. 
// The expected output is s = 0x00 and overflow = 0x00. 
// The actual output is s = 0x00 and overflow = 0x01. 

signed_adder(0x00, 0xFF, 0x00, 0x01);

// The following test case shows the signed adder for two 8-bit 2's complement numbers. 
// The numbers are a = 0xFF and b = 0x00. 
// The expected output is s = 0xFF and overflow = 0x00. 
// The actual output is s = 0xFF and overflow = 0x01. 

signed_adder(0
================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test case shows the expected outputs for the signed adder. 
// The signed adder should add the numbers a and b to the output s and the overflow should be 0. 
// The numbers a and b are shown in hexadecimal format. 

a = 0x00;
b = 0x00;
s = 0x00;
overflow = 0;

a = 0x80;
b = 0x00;
s = 0x00;
overflow = 0;

a = 0x00;
b = 0x80;
s = 0x00;
overflow = 0;

a = 0x80;
b = 0x80;
s = 0x00;
overflow = 0;

a = 0xFF;
b = 0xFF;
================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow);

// The following test case shows the signed adder for two numbers with the following values:
// a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// The output should be:
// s = 0x00, overflow = 0x00

signed_adder(0x00,0x00,0x00,0x00);

// The following test case shows the signed adder for two numbers with the following values:
// a = 0x00, b = 0x01, s = 0x00, overflow = 0x00
// The output should be:
// s = 0x01, overflow = 0x00

signed_adder(0x00,0x01,0x00,0x00);

// The following test case shows the signed adder
================================================================
