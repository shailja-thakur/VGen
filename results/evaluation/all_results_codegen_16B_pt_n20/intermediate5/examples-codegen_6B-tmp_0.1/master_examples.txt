example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out = 0;
	else if (load)
	out = data;
	else begin
	// shift the data left by amount
	out = {out[6:0],out[7]};
	// rotate the data right by amount
	end
	end

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out = 0;
	else if (load)
	out = data;
	else begin
	// shift the data left by the amount
	// i.e. amount=3, data=0101, shift=1000
	out = {out[6:0],out[7]};
	// rotate the data right by the amount
	// i.e. amount=3, data=0101, rotate=1000
	end
	end

================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else if
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	// shift the data as the next value
	// shift left by amount
	out<={out[6:0],1'b0};
	end
	end

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else
	begin
	out<={out[6:0],out[7]};
	end
	end

================================================================
