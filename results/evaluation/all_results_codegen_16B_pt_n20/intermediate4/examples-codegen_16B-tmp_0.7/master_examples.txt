example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
  end else begin
    present_state <= next_state;
    next_state <= present_state;
    if (present_state == 0) begin
      out <= in;
    end else begin
      out <= 1;
    end
  end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if (reset)
		present_state <= 0;
	else if (in)
		next_state <= present_state;
	else
		next_state <= present_state + 1;
	out <= next_state;
	if (present_state == 0)
		present_state <= 1;
	else
		present_state <= 0;
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
 if (reset == 1) begin
  present_state <= 0;
 end else begin
  if (in == 1) begin
   next_state <= present_state;
   present_state <= next_state;
  end else begin
   next_state <= 1;
   present_state <= next_state;
 end
 if (present_state == 1) begin
  out <= 1;
 end else begin
  out <= 0;
 end
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= present_state;
  end else begin
    present_state <= present_state;
    next_state <= present_state;
  end
end
always @(negedge clk) begin
  if (reset) begin
    out <= 0;
  end else begin
    out <= present_state;
  end
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if(reset) begin
        present_state <= 0;
        next_state <= 0;
    end else begin
        present_state <= next_state;
        next_state <= (present_state==0) ? 1 : 0;
        out <= present_state;
    end
end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (!reset) begin
	next_state <= 0;
	out <= false;
end
else begin
	if (present_state == 0 and in == 1) begin
		next_state <= 0;
		out <= false;
	end else begin
		if (present_state == 0 and in == 0) begin
			next_state <= 1;
			out <= true;
		end else begin
			next_state <= present_state;
			out <= in;
		end
	end
	present_state <= next_state;
end
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	case(present_state)
		0: begin
			if(reset) begin
				present_state <= 0;
				next_state <= 0;
			end else begin
				if(in) begin
					present_state <= 1;
					out <= 1;
					next_state <= 1;
				end else begin
					next_state <= 0;
				end
			end
		end
		1: begin
			out <= next_state;
		end
	endcase
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) present_state <= 0; else present_state <= next_state;
	next_state <= present_state;
	if (present_state == 0)
	{
		if (in == 1) present_state <= 0;
		else present_state <= 1;
	}
	else if (present_state == 1)
	{
		if (in == 1) present_state <= 1;
		else present_state <= 0;
	}
	out <= present_state;
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
    end
  else begin
    present_state <= next_state;
    next_state <= present_state;
    out <= present_state;
    end
end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if(reset == 1) begin
        next_state <= 0;
    end
    else begin
        present_state <= next_state;
        if(present_state == 0) begin
            if (in == 0) next_state <= 1;
        end
        else begin
            if (in == 1) next_state <= 0;
            else next_state <= 1;
        end
        out <= present_state;
    end
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) if (reset) present_state <= 0; else present_state <= 1;
always @(posedge clk) if (in) next_state <= present_state; else next_state <= 0;
always @(posedge clk) out <= present_state;

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) begin
    present_state <= 0;
  end else begin
    if (present_state == 0) begin
      if (in) begin
        present_state <= 1;
      end else begin
        present_state <= 0;
      end
    end else begin
      if (in) begin
        present_state <= 1;
      end else begin
        present_state <= 0;
      end
    end
    next_state <= present_state;
    out <= next_state;
  end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset) present_state <= 0;
    else if (in) present_state <= 1;
    else present_state <= 0;
    next_state <= present_state;
    out <= next_state;

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if (reset == 1) begin
		present_state = 0;
		next_state = 0;
	end
	else begin
		present_state = next_state;
		if (in == 1) begin
			next_state = 0;
		end
		else if (in == 0) begin
			next_state = 1;
		end
		out = present_state;
	end
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if(reset)
    begin
        present_state = 0;
        next_state = 0;
    end
    else if(present_state == 0)
    begin
        next_state <= in;
        if(next_state == 1)
        begin
            present_state <= 1;
        end
        else if(next_state == 0)
        begin
            present_state <= 0;
        end
        else
        begin
            out <= 1;
        end
    end
    else if(present_state == 1)
    begin
        next_state <= in;
        if(next_state == 0)
        begin
            present_state <= 0;
        end
        else if(next_state == 1)
        begin
            present_state <= 1;
        end
        
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state = in;
assign next_state = present_state == 1 ? 1 : 0;
assign out = present_state == 1 ? 1 : 0;
always @(posedge clk) begin
    if (reset == 1) begin
        present_state <= 0;
        next_state <= 0;
    end else begin
        if (present_state == 0) begin
            if (in == 1) begin
                present_state <= 1;
                next_state <= 1;
            end else begin
                next_state <= 0;
            end
        end else begin
            if (in == 1) begin
                present_state <= 1;
                next_state <= 1;
            end else begin
                next_state <= 0;
            end
            out <= next_state;
        end
    end
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
  if(reset) begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
  end else begin
    if(present_state == 0 && in == 1) begin
      present_state <= 1;
      next_state <= 1;
      out <= 1;
    end else if(present_state == 0 && in == 0) begin
      present_state <= 0;
      next_state <= 0;
      out <= 0;
    end else if(present_state == 1 && in == 1) begin
      present_state <= 1;
      next_state <= 1;
      out <= 1;
    end else if(present_state == 1 && in == 0) begin
      present_state <= 0;
      next_state <= 0;
      out <= 0;
    end
================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
  present_state:
  case (present_state)
    0: if (in) next_state <= 0; else next_state <= 1;
    1: if (in) next_state <= 1; else next_state <= 0;
  endcase
  next_state <= present_state;
  out <= present_state;
end

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
    if (reset) present_state <= 0;
    else if (present_state > 0)
    begin
        if (in) present_state <= 0;
        else present_state <= 1;
    end
    else next_state <= present_state;
    if (present_state == 0)
    begin
        out <= in;
    end
    else
    begin
        out <= next_state;
    end
end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state = (in, present_state);
assign next_state = (present_state, next_state);
always @(posedge clk) begin
	if (reset == 1) begin
	present_state <= 0;
	next_state <= 0;
	out <= 0;
	end else if (present_state == 0) begin
	if (in == 1) begin
	next_state <= 0;
	out <= 1;
	end else begin
	next_state <= 1;
	end
	end else if (present_state == 1) begin
	if (in == 0) begin
	next_state <= 0;
	out <= 1;
	end else begin
	next_state <= 1;
	end
	end
end

================================================================
