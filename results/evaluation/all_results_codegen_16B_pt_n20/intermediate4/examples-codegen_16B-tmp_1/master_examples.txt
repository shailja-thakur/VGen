example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
 // Examine
always begin
case(present_state)
	0:	if(in==1)
		{
			next_state = 0;
			out = 1;
		}
		else
		{
			next_state = 1;
			out = 0;
		};
	endcase
	1:
	endcase

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
simple_fsm process(computing ring_address, start_processor);
begin
	present_state <= 0;	// Chassis = H
	start_processor <= t edge(in, msb);	// Test processor to start
	next_state <= (+ present_state) logic
	wait(0);	// Wait for reset to clear
	present_state <= present_state + 1;	// Change state to 1
	wait(clk);
	present_state <= present_state - 1;	// Change state to 0
	wait(clk);
	if ((next_state) != present_state)	// OUT Matching ifneeded
	{
		out <= 1;
	}
	if ((present_state) != next_state)
	{
		next_state <= present_state;	// Match next_state
	}
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Initially present_state is 0
always @(posedge clk) begin
    if (!reset) begin
        present_state <= 1'b0;
    end
    else begin
        present_state <= 1'b0;
    end
    next_state <= present_state;
    if (present_state == 1) begin
        out <= 1;
    end else if (present_state == 0) begin
        out <= 0;
    end
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always #(1) begin
assign next_state = present_state;
assign present_state = next_state;
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset) begin
 case(present_state)
          0 :  // state 0
          if(reset == 0)
          next_state <= 0;
  else
          next_state <= present_state;
 DAF : // state 0
  case(present_state)
          0 :  // state 0
          if(in == 1)   next_state <= DAF;
          else if(in == 0) next_state <= 0;
  case(DAF)
          1 :  // state 1
          if(in == 1)  next_state <= 1;
          else 
          next_state <= DAF;
Fout: // state 1
  case(present_state)
          1 :  // state 1
          if(in == 1)  next_state <= Fout;
          else if(out ==
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state = 0;
assign next_state = present_state;
always begin
    if (reset == 1) begin
        present_state = 0;
        out = 0;
    end
    else if (in == 1) begin
        switch(present_state) {
            case 0:
                out = 1;
                next_state = 0;
            break;
            case 1:
                out = 1;
                next_state = 0;
        }
    end
    else whstock
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if(reset)
		present_state = 0; // Reset state
	else
		present_state = next_state; // Present state

next_state <= present_state; // Next state

if (present_state==0) begin
	if (in)
		next_state <= present_state; // Next state
	else
 		out <= 1; // Update output after transition
end else if (present_state==1) begin
	if (in)
		next_state <= present_state; // Next state
	else
		out <= 1; // Update output after transition
end end
end#bad_range_through_IODC();

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (reset == 1'b1) begin
        present_state <= 0;
    end else begin
        present_state <= next_state;
    end
end
assign out = present_state;
================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
//
always @(clk) begin
if reset = 1'b0 {
// Present the reset phase and state of the two joysticks
present_state = reset;
next_state = reset;
} else if clk > 45 ns {
} else {
// H switch for the insertion of a joystick. Sample for four bytes from the address bus and update the state machine according to the status
case ( present_state ) {
writel(0, ( char* ) "Joystick 0");
sc_stop();
present_state = in;
next_state = 0;
}
case ( present_state + 1 ) {
writel(1, ( char* ) "Joystick 0");
sc_stop();
future_state = in;
present_state = 0;
}
}
case ( present_state + 2 ) {
if ( in ) {
}
switch (
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
void FSM()
{

// The algorithm of this state machine is perceived as the code below
// It is implemented in C-style
// a=out&&in
// b=!in&&!a
// !in&&conj(out)&&!a
// !in&&conj(!out)&&a
// Having present state P_a
// 1. present state must be P_a
// 2. there are no actionable input activations
// 3. there is a null action
void state0() {
	// 
	if ( !in&&out ) {
		next_state = 0;
	}
	// 
	else if ( !in &&(!out))  {
		next_state = 0;
	}
	// 
	else if (in && ( !!out || !!out) ) {
		next_state =
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
 begin
	if (reset)
	begin
		present_state <= 0;
		next_state <= 0;
		out <= 1;
		present_state <= next_state;
	end
	else if (((present_state + 1) % 2)==0)
	begin
		if (in)
		begin
			next_state <= 1;
		end
		else
		begin
			next_state <= 0;
		end
		out <= present_state;
		 present_state <= next_state;
	end
end
	// Set present_state to 0.
	present_state <= 0;
	if (in) present_state <= 1;
	out <= present_state;
	// Execute actual state machine with the newly posted values.
	if (in) present_state <= 1;

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// present_state register is for reading
always @(posedge clk) {
bool	present;
// In state 0, next_state either 0 (never reach here) or 1 (become 1 in transition)
logic [1:0] next_state;
present = present_state.assign(in);
// 2 states are PODV
if ((present) == true) {
if (!next_state.to_int()) next_state = 1;
}
// For visualization
if (next_state) require (present,"Present state should be false, (in,out) = (0,1)");
if ((!present) && (next_state)) require (reset,"Reset should be 1 to trigger");
out = present_state.ival() == 0 && next_state.ival() == 0 ? 1 : present_state.ival();
}

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset == 0) begin
		next_state <= present_state;
		present_state <= 0; // Reset to 0
	end
	else begin
		present_state <= next_state;
		if (present_state == 0 && in == 1) begin
			next_state <= 0;
		end else if (present_state == 1 && in == 0) begin
			next_state <= 0;
		end else if (present_state == 0 && in == 0) begin
			next_state <= 1;
		end else if (present_state == 1 && in == 1) begin
			next_state <= 1;
		end
		if (present_state == 0 && in == 0) begin
			out <= 1;
		end else if (present_state == 1 && in == 0) begin
			out
================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
function TransitionFunc(input new_state, read_out){ return transition_table[next_state]; }
// update the internal state value based on boolean out
function ctrl_update(){
    if( in == next_state ){
        next_state = !next_state;
        present_state = --next_state;
    }
}


// enable and connect the ctrl clock
assign ctrl_update() = ctrl_clk.posedge();
assign present_state = next_state;

// always in state 0 internally
assign next_state = 0;

// one input in/out and one output
// The logic function take as  inputs the new state, and the
// tail bool which is true after processing.
function logic() {
    TransitionFunc = TransitionFunc(in, present_state);
    out = Transition
================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

initial begin
present_state = 0;
next_state = 1;

always @(posedge clk) begin
  if (reset) begin
    present_state = 0;
    out = 1;
    next_state = 1;
  end else begin
//  if (present_state==0) begin
    if (in == 1) begin
      if (present_state == 0) begin
        present_state = next_state;
        out = 1;
      end
    end else begin
      if (present_state == 1) begin
        present_state = 0;
        out = 1;
      end
    end
//  end
end
end


================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// every cycle clk is counted, and the step in which the state changes is
// stored in present_state, and the new state in the next cycle is stored in
// next_state.
initial begin
	present_state <= 0;
	next_state <= 0;
end

always @(posedge clk || posedge reset)
begin
	if (reset) next_state <= 0;
	else
	begin
		switch (present_state)
		{
			case 0 : if (in) present_state <= 0; else present_state <= 1; break;
			case 1 : if (in) present_state <= 0; else present_state <= 0; break;
		}//end switch
	end
	out <= present_state;
end
end
*/

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
  present_state = 0;
  next_state = present_state + 1;
end
always @(posedge clk) begin
  if (reset == 0) begin
    present_state = next_state;
    out = present_state;
  end
  else begin
    present_state = 0;
    next_state = present_state + 1;
  end
end

always @(posedge clk) begin
  if (in) begin
    next_state = present_state + 1;
  end else begin
    next_state = 0;
  end
end

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk) begin
    if (reset) begin present_state <= 0; //0
    else if (present_state) begin present_state <= 1; //1
    else begin present_state <= 0; //0
//inster
    if (present_state == 1) begin next_state <= in; //1
    else begin next_state <= 1; //0
    out <= next_state; //1 or 0
end;;

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk) begin
	  present_state <= next_state;
	  next_state <= (present_state == 0) ? 0 : 1;
	  out <= present_state;
end
  assign reset = 0;
// Outgoing transitions take us to next clock cycle and break the state machine
// or reset the state machine'
  assign in = 1;
  present_state <= next_state;
  next_state <= 0;
  out <= 0;
  in <= 1;
end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial {
	present_state = 0;
	next_state = 0;
}
always @(posedge clk or posedge reset) begin
	if (reset) begin
		present_state <= 0;
		out <= 0;
		next_state <= 0;
		// outEnd <= 0;
	end else if (present_state == 0) begin
		if (in) begin
			present_state <= 1;
			out <= 0;
		end else begin
			next_state <= 2;
		end
		//else if portInput.in_2) begin
		//	portInput.in_2 <=0;
		//end
	end else if (present_state == 1) begin
		if (in) begin
			present_state <= 1;
			out <= 1;
		end else begin
			present_state <= 0; //0
================================================================
