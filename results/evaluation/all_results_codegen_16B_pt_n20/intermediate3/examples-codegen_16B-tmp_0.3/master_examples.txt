example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= r_reg[2] ^ r_reg[4];
    r_reg <= r_reg[4] ^ (feedback_value << 4);
    q <= r_next;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    q <= r_next;
    feedback_value <= (r_reg >> 2) ^ (r_reg >> 4);

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg << 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 3);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next[4:0];
    end
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
  if (reset)
    r_reg <= 0;
  else
    r_next <= r_reg;
  r_reg <= r_next;
  feedback_value <= r_reg[2] ^ r_reg[4];
  q <= r_reg[4:0] ^ feedback_value;
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
  if (reset)
    r_reg <= 1;
  else
    r_next <= r_reg;
  r_reg <= (r_reg << 1) | (r_reg >> 3);
  feedback_value <= r_reg[2] ^ r_reg[4];
  q <= r_next[4:0];
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next;
    end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        feedback_value <= (r_reg[2] ^ r_reg[4]);
        r_reg <= r_next;
    end
end

// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        r_reg <= (r_reg >> 1) | (r_reg[2] << 3);
        feedback_value <= (r_reg >> 2) | (r_reg[4] << 4);
        q <= r_next;
    end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + (r_reg >> 1) + (r_reg >> 2);
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 3);
        feedback_value <= ~r_reg[2] & r_reg[4];
    end
end
assign q <= r_next;

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        feedback_value <= (r_reg[2] ^ r_reg[4]);
        r_reg <= r_next;
    end
end
// The following is a simple test program to verify that the above module works
// It generates a sequence of 5-bit values and prints them out
// Note that the LFSR is a Galois LFSR, so the sequence is repeating
// after 5 elements.
int main()
{
    lfsr(clk, reset, q);
    for (int i = 0; i < 5; i++)
    {
        cout << q << " ";
        wait();
    }
    cout << endl;
}

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + r_next;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    end
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    begin
        if (reset)
            r_reg <= 0;
        else
            r_reg <= r_next;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_reg[4];
    end

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) r_reg <= 0;
    else r_reg <= r_reg + 1;
    r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_next;
end

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
  if (reset)
    r_reg <= 0;
  else
    r_reg <= r_next;
  r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
  feedback_value <= (r_reg >> 2) ^ (r_reg >> 4);
  q <= (r_reg >> 4) ^ feedback_value;
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset) r_reg <= 1;
    else r_reg <= r_reg << 1 | (r_reg >> 3) & 1;
    r_next <= r_reg ^ (r_reg >> 2) & 1;
    feedback_value <= r_reg ^ (r_reg >> 4) & 1;
    q <= r_next;
end

================================================================
example-15: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next[4] ^ r_next[3];
    end
end

================================================================
example-16: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + (r_reg >> 2);
        r_next <= (r_reg ^ (r_reg >> 2)) | (r_reg >> 4);
        feedback_value <= ~(r_reg >> 2) & 0xF;
    end
end
assign q <= r_next;

================================================================
example-17: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + (r_reg >> 1) + (r_reg >> 2);
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 3);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next[3];
    end
end

================================================================
example-18: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + r_reg[2] ^ r_reg[4];
        q <= r_reg[4:0];
    end
end

================================================================
example-19: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) r_reg <= 1;
    else r_reg <= r_next;
    r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_reg[4] ^ r_reg[3];
end

================================================================
