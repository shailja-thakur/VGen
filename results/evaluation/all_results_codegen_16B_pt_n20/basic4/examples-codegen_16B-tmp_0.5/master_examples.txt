example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk) begin 
  if (sel==0) out <= a;
  else out <= b;
end

================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
always @(posedge clk)
begin
  if (sel==0) out = a;
  else out = b;
end

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a&b to out. 
// When sel=3, assign a|b to out. 
// When sel=4, assign a^b to out. 
// When sel=5, assign a&b|a^b to out. 
// When sel=6, assign a&b^a^b to out. 
// When sel=7, assign a^b&a^b to out. 
assign out = { a[3:0], sel }

================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = (sel==0)?a:b;

================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
    if (sel==0)
        out <= a;
    else
        out <= b;
end

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = a;
assign out = b;

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
assign out = sel ? b : a;

================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, don't change out. 
// When sel=3, don't change out. 
assign out = sel ? b : a;

================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign nothing to out.

// The following is an example of the use of the mux module.
// Suppose we want to multiplex the four input bits with the 
// two select bits, sel.
module mux_example(
input [4:0] a, b,
input sel,
output [4:0] out );
assign out = sel ? b : a;

================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = (sel==0) ? a : b;

================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a&b to out.
// When sel=3, assign (a|b) to out.

always @(posedge clk) begin
  if (sel == 0) out <= a;
  if (sel == 1) out <= b;
  if (sel == 2) out <= a & b;
  if (sel == 3) out <= (a | b);
end

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk) begin
  if (sel==0) begin
    out <= a;
  end else begin
    out <= b;
  end
end

================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @ (posedge clk) begin
  if (sel) begin
    out <= b;
  end else begin
    out <= a;
  end
end

// Design a 4-to-1 multiplexer.
module mux4( 
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When sel=3, assign d to out. 
always @ (posedge clk) begin
  if (sel) begin
    out <= b;
  end else begin
    if (sel==2) begin
      out <= c;
    end else begin
      out <= d;
================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign nothing to out.
// When sel=3, assign nothing to out.
assign out = sel ? b : a;

================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign both a and b to out.
// When sel=3, ignore a and b.
assign out = sel ? b : a;

================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// When
================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
always @(posedge clk)
    if (sel) out <= b;
    else out <= a;

================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
assign out = (sel==0) ? a : (sel==1) ? b : (sel==2) ? a : b;

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
output [4:0] out );
// When a=0, assign b to out. 
// When a=1, assign b to out. 
// When a=2, assign b to out. 
// When a=3, assign b to out. 
assign out = (a==0) ? b : (a==1) ? b : (a==2) ? b : b;

// Design a 2-to-1 multiplexer.

================================================================
