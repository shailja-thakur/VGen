example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg a, b, sum;
reg carry_in, carry_out;

always @(posedge clk)
begin
  if (rst) begin
    a <= 0;
    b <= 0;
    sum <= 0;
    carry_in <= 0;
    carry_out <= 0;
  end
  else begin
    if (a && b) begin
      sum <= a + b + carry_in;
      carry_out <= a + b + carry_in;
    end
    else begin
      if (a) begin
        sum <= a + carry_in;
        carry_out <= a + carry_in;
      end
      if (b) begin
        sum <= b + carry_in;
        carry_out <= b + carry_in;
      end
    end
  end
end

always @(posed
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg a, b, cout, sum;

always @( posedge a or posedge b )
begin
    if (a)
    begin
        cout <= a;
        sum <= a + b;
    end
    else
    begin
        cout <= b;
        sum <= b;
    end
end


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
    if (a)
    {
        sum = b;
    }
    else
    {
        sum = 0;
    }
    
    if (a || b)
    {
        cout = 1;
    }
    else
    {
        cout = 0;
    }
end


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out, sum_out;

half_adder( a, b, cout, sum_out ) {
	carry_in = 0;
	sum_out = a + b + carry_in;
	carry_out = sum_out / 2;
	cout = sum_out % 2;
}


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg [2:0] sum;
wire carry_out;

always @(posedge clk) begin
    sum <= a + b;
    cout <= sum[1];
    carry_out <= sum[0];
end


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Inputs
a <= a + b + 1'b0;
b <= a + b + 1'b1;

// Outputs
cout <= sum;
sum <= a + b;


================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
	if(a)
	begin
		sum <= a + b;
		cout <= sum;
	end
	else
	begin
		sum <= 0;
		cout <= 0;
	end
end


================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out;

assign a_in = a;
assign b_in = b;

reg [2:0] sum = 0;

always @ (posedge clk) begin
    if (a_in and b_in) begin
        sum <= sum + 1;
    end
end

assign sum_out = sum[1];


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_plus_b, a_minus_b, sum_out;

assign a_plus_b = a + b;
assign a_minus_b = a - b;

assign sum_out = a_plus_b + a_minus_b;


================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk) begin
  if (rst) begin
    cout <= 0;
    sum <= 0;
  end
  else begin
    if (a) begin
      cout <= 1;
      sum <= b;
    end
    else begin
      cout <= 0;
      sum <= 0;
    end
  end
end


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire carry_out, sum_out;

half_adder( a, b, cout, sum ) {
	sum = a + b;
	carry_out = (a > b) ? 1 : 0;
	sum_out = sum;
}

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

input a, b, c;
output cout, sum;

wire carry_out, sum_out;

full_adder( a, b, c, cout, sum ) {
	sum = a + b + c;
	carry_out = (a > b) ? 1 : 0;
	sum_out = sum;
}

================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

assign a_in = a;
assign b_in = b;

reg [2:0] sum;

assign sum = sum_out;

assign cout = sum_out + carry_out;

reg [1:0] carry;

assign carry = carry_out;

always @(posedge clk)
begin
  if (a_in == 1)
  begin
    sum_out <= sum + carry;
    carry_out <= carry;
  end
  else if (b_in == 1)
  begin
    sum_out <= sum + carry;
    carry_out <= carry;
  end
  else
  begin
    sum_out <= sum;
    carry_out <= carry;
  end
end
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else
    sum <= a + b;
  cout <= sum;
end


================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire carry_in, carry_out;

always @(posedge clk) begin
  if (a) {
    sum = a + b + carry_in;
    cout = sum[31];
    carry_out = sum[30];
  } else {
    sum = 0;
    cout = 0;
    carry_out = 0;
  }
end


================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk) begin
  if (rst) begin
    cout <= 0;
    sum <= 0;
  end
  else begin
    if (a) begin
      cout <= 1;
      sum <= b;
    end
    else begin
      cout <= 0;
      sum <= 0;
    end
  end
end


================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds 4 bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds 4 bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds 4 bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds 4 bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds 4 bits and produces a
================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a
================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, cout_in, sum_out, carry_out;

void half_adder( 
input a, b,
output cout, sum )
{
  sum_out = a + b;
  carry_out = sum_out[0] + sum_out[1];
  cout_in = carry_out;
  cout = cout_in;
}


================================================================
