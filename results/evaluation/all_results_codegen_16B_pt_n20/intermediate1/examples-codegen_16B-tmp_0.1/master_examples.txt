example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// The carry-in is the carry-out of the previous cycle.
assign carry_in = carry_out;

// The sum-in is the sum of the two inputs.
assign sum_in = a_in + b_in;

// The carry-out is the carry-in of the next cycle.
assign carry_out = carry_in;

// The sum-out is the sum of the two inputs.
assign sum_out = sum_in + carry_in;

// The output is the sum-out.
assign cout = sum_out;


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// This is the logic of the half adder.
assign {
	sum_out = (a_in + b_in) | carry_out;
	carry_out = (a_in + b_in) >> 1;
}

// This is the logic of the full adder.
assign {
	cout = (sum_out + carry_out) | (carry_out + a_in + b_in);
}


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else if (a)
    sum <= b + 1;
  else if (b)
    sum <= a + 1;
  else
    sum <= 0;
end


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else
    sum <= a + b;
  cout <= sum;
end


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// This is the logic of the half adder.
assign {
	sum_out = a_in + b_in + carry_out;
	carry_out = (a_in + b_in) >> 1;
}

// This is the interface to the half adder.
assign cout = {sum_out, carry_out};


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else if (a)
    sum <= b + 1;
  else if (b)
    sum <= a + 1;
  else
    sum <= 0;
end


================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// This is the logic of the half adder.
assign {
    sum_out = a_in + b_in + carry_out;
    carry_out = (a_in + b_in) >> 1;
}

// This is the interface to the half adder.
assign cout = sum_out;


================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// This is the carry-in register.
reg carry_in;

// This is the sum register.
reg sum;

// This is the carry-out register.
reg carry_out;

// This is the output register.
reg cout;

// This is the logic function.
void logic( 
input a, b,
output cout, sum, carry_in, carry_out );

// This is the half adder logic.
void half_adder_logic( 
input a, b,
output cout, sum, carry_in, carry_out );

// This is the half adder logic.
void half_adder_logic( 
input a, b,
output cout, sum, carry_in, carry_out );

// This is
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else
    sum <= a + b;
  cout <= sum;
end


================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-out.
module half_subtractor( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts four bits and produces a difference and carry-out.
module full_subtractor( 
input a, b,
output cout, diff );

// This is a full multiplier. A full multiplier multiplies four bits and produces a product and carry-out.
module full_multiplier( 
input a, b,
output cout, prod );

// This is a half multiplier. A half multiplier multiplies
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else
    sum <= a + b;
  cout <= sum;
end


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// The carry-in is the carry-out of the previous cycle.
assign carry_out = carry_in;

// The sum-out is the sum of the two inputs.
assign sum_out = a_in + b_in + carry_out;

// The carry-out is the carry-out of the addition.
assign carry_in = sum_out[2:0];

// The sum is the sum of the two inputs.
assign a_in = a;
assign b_in = b;

// The output is the sum and carry-out.
assign cout = sum_out + carry_out;


================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk) begin
    if (rst) begin
        cout <= 0;
        sum <= 0;
    end else begin
        cout <= a + b;
        sum <= a + b + (cout & 0x1);
    end
end


================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

assign a_in = a;
assign b_in = b;

assign sum_out = (a_in + b_in) + carry_out;
assign carry_out = (a_in + b_in) > 15;

assign cout = sum_out;


================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// This is the carry-in register.
reg carry_in;

// This is the sum register.
reg sum;

// This is the carry-out register.
reg carry_out;

// This is the logic function.
void logic( 
input a, b,
output cout, sum, carry_in, carry_out );

// This is the carry-in register.
reg carry_in;

// This is the sum register.
reg sum;

// This is the carry-out register.
reg carry_out;

// This is the logic function.
void logic( 
input a, b,
output cout, sum, carry_in, carry_out );

// This is the carry-in register.
reg carry_in;


================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else if (a)
    sum <= b + 1;
  else if (b)
    sum <= a + 1;
  else
    sum <= 0;
end


================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

assign a_in = a;
assign b_in = b;

assign sum_out = (a_in + b_in) + carry_out;
assign carry_out = (a_in + b_in) > 15;

assign cout = sum_out;


================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
    sum <= 0;
  else
  begin
    if (a)
      sum <= b;
    else
      sum <= sum + 1;
  end
end


================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
