example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, only increment the output q if q is less than 9.

always @(posedge clk or negedge reset) begin

if (reset) begin
    q <= 0;
end else begin
    if (slowena) begin
        if (q < 9) begin
            q <= q + 1;
        end else begin
            q <= 9;
        end
    end
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] r;
reg q;
always @(posedge clk or posedge reset) begin
    if (reset)
        r <= 0;
    else if (slowena)
        if (r != 9)
            r <= r + 1;
    end
    if (clk)
        q <= r;
end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    q <= q + 1;
end

// If the enable input is high and q is not 9, increment q.

always @(posedge clk) begin
    if (slowena) begin
        if (q < 9) begin
            q <= q + 1;
        end
    end
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the negative edge of the clock:
// If the ena input is high and q is not 9, set q to 9 and de-increment.
// Otherwise, set q to 0.

always @(negedge clk) begin
    if (slowena && q != 9) q <= q - 1;
    else q <= 0;
end

// The number of decades is determined by the number of leading zeros in the binary representation of q.
// Since q is an integer, it has a fixed number of bits. For example, if q=17, then q=1111,
// and the number of decades is 3 (because the leading zeros are 1111_000).

always @
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or ~reset)
    if (reset)
        q <= 0;
    else if (slowena && q < 9)
        q <= q + 1;

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or posedge ena)
    if (reset) q <= {9'b000, q[3]'b000};
    else if (ena)
        if (q != 9) q <= {q + 1, q[3]};
        else q <= {q - 1, q[3]};
    else if (q != 0) q <= {q - 1, q[3]};
    else q <= {9'b000, q[3]'b000};

always @(posedge ena)
    if (reset) q[3] <= {9'b000};
    else if (q != 9
================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] q;

always @(posedge clk)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk)
    if (reset) q <= 9;
    else if (slowena && q > 0) q <= q - 1;

// The counter's output is q.
assign q = q;

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// 
// On the negative edge of the clock:
// if reset is high, set the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.


always begin
    if (reset) q <= {0,9};
    else if (slowena && q != 9) q <= {1,8,7,6,5,4,3,2,1,0};
    else if (slowena && q != 0) q <= {-1,-2,-3,-4,-5,-6,-7,-8,-9};
end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment q by one if the ena input is high and q is less than 9.
always @(posedge clk) begin
    case (reset)
    default: q <= 0;
    endcase
    case (slowena)
        if (reset) q <= 0;
        else if (q == 9) q <= 0;
        else if (clk) begin
            if (q < 9) q <= q + 1;
            if (q == 9) begin
                q <= q + 1;
            end
        end
    endcase
end

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
// Decrement q by one if the ena input is high and q is not 0.

================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// On the negative edge of the clock:
// if slowena is high and q is not 9, decrement q.
// if q is 9, decrement q.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
    else if (!slowena && q == 9) q <= q - 1;
end


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the slow clock:
// if the reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge slowclk or posedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// We need a separate clock for the enable signal to avoid contention with the
// other signals.
always @(posedge clk or posedge reset)
    if (reset) enable <= 0;
    else if (slowena) enable <= 1;

reg [3:0] q = 0
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or (slowena and reset))
    if (reset)
        q <= 0;
    else
        if (slowena)
            q <= q + 1;
        else
            q <= q;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(posedge clk or (slowena and reset))
    if (reset)
        q <= 9;
    else
        if (slowena)
            q <= q - 1;
        else
            q <= q;


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of slowena:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if ena is high and q is not 9.

always @(posedge clk or posedge slowena) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// output counters:
// q[0] is the decade counter
// q[1] is the decade seconds counter
// q[2] is the seconds count

// The decade counter counts from 0 to 9, inclusive.
// It is reset to 0 when the decade seconds counter exceeds
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset)
        q <= 0;
    else if (slowena && q < 9)
        q <= q + 1;
end

// The negative edge case is a bit tricky. Here is a simple way to do it:
// on the negative edge of the clock, if the ena input is high and q is not 9, 
// then decrement q, and only do this if q was not 0.
always @(negedge clk) begin
    if (slowena && q > 0)
        q <= q - 1;
end

// The final case is where q is 9, so reset it to 0, and don't change it on the
// negative edge of the clock.
always @(posedge clk) begin
    if (q == 9)
        q <= 0;
end

// The
================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
    always @(posedge clk) begin
        if (reset) q <= 0;
        else if (!(slowena && q == 9)) q <= q + 1;
    end

// On the positive edge of the slowena input:
// reset the output q to 0.
    always @(posedge slowena) begin
        q <= 0;
    end

// The output q is high only on the positive edge of the clock.
always @(posedge clk) begin
    q <= 9;
end

//
================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the slow enable input:
// reset the output to 0.
// Otherwise, only increment the output if the ena input is high and q is not 9.
always @(posedge slowena or negedge ena) begin
    if (ena) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

reg [3:0] q;

// Synchronous assignments to the output reg are not allowed in Verilog.
// Assignments to q are written as follows to avoid this problem.

assign q[3] = 2'd0;
assign q[2] = 2'd
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 0;
    else if (slowena && (q < 9))
        q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if the ena input is low and q is not 0.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 9;
    else if (!slowena && (q > 0))
        q <= q - 1;


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(posedge clk or negedge clk)
    if (reset)
        q <= {9'b0, 9'b0, 9'b0};
    else if (slowena && q != 9)
        q <= {q + 1'b1, q, q};
    else if (slowena && q == 9)
        q <= {0'b0, 9'b0};
    else if (slowena && q == 0)
        q <= {9'b0, 0'b0};
    else
        q <= {9'b0, 9'b0};


================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (reset) q <= 0;
    else if (slowena)
        if (q != 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk)
    if (reset) q <= 9;
    else if (slowena)
        if (q != 0) q <= q - 1;

// write the output
assign q = q + 1;


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset)
    if (reset) q <= {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    else if (slowena)
        if (q < 9) q <= q + 1;
        else q <= {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

// On the negative edge of the clock:
// if ena is high, reset q to 0. 
// Otherwise, only decrement the output q if it is not 0.

always @(posedge clk or posedge reset)
    if (reset) q <= {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    else if (slowena)
        if (q > 0) q <= q - 1;
        else q
================================================================
