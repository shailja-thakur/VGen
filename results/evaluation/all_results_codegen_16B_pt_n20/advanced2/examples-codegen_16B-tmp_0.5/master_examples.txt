example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// In either case, only increment the output q if the slowena input is high.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the slowena input:
// reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// In either case, only increment the output q if the slowena input is high.

always @(posedge slowena) begin
    if (slowena) q <= 0;
    else if (ena && q < 9) q <= q + 1;
end

// On the positive edge of the ena input:
// reset the output q to 0.
// Otherwise, only increment the output q if the
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
    always @(posedge clk or ~reset)
        if (reset) q <= 0;
        else if (slowena)
        if (q < 9) q <= q + 1;

// On the positive edge of slowena, reset the output q to 0.
    always @(posedge slowena)
        q <= 0;

// On the positive edge of reset, reset the output q to 0.
    always @(posedge reset)
        q <= 0;


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena)
        if (q < 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset) q <= 9;
    else if (slowena)
        if (q > 0) q <= q - 1;

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge en
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The output q is given by the expression q = q + 1 mod 10.
// The output q is clocked on the falling edge of the clock.
always @(posedge clk or negedge reset)
    if (reset)
        q <= 0;
    else if (slowena)
        if (q < 9)
            q <= q + 1;

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the clk input is high and q is not 9.
// The output q is given by the expression q = q + 1 mod 10.
// The output q is clocked on the falling edge of the clock.
always @(posedge ena or negedge clk or negedge reset)
    if (reset)
        q <= 0;

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, add one to q.
always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
    else if (slowena) q <= 9;

// On the positive edge of the slowena input:
// reset the output q to 0.
// Otherwise, only decrement the output q if the ena input is high.
// Finally, add one to q.
always @(posedge slowena or negedge reset)
    if (reset) q <= 0;
    else if (slowena) q <= q + 1;

// On the positive edge of the ena input:
// reset the output q to 0.
// Otherwise, only decrement the output q if the ena input is high.
// Finally, add one to q.
always
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 0;
    else if (slowena && q < 9)
        q <= q + 1;
    else
        q <= 9;

// On the positive edge of the slow enable signal:
// reset the output q to 0.

always @(posedge slowena)
    q <= 0;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(negedge clk or negedge reset)
    if (reset)
        q <= 9;
    else if (slowena && q > 0)
        q <= q - 1;
    else
        q <= 0;

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset) q <= 9;
    else if (slowena && q > 0) q <= q - 1;

// The net-output is q.

assign q = q + 1;


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= {0,1,2};
    else if (slowena)
        if (q < 9) q <= {q+1, q+1, q+1};

// On the positive edge of the slowena input:
// If reset is high, reset the output q to 0.
// Otherwise, only increment the output q if ena is high and q is not 9.

always @(posedge slowena or negedge reset)
    if (reset) q <= {0,1,2};
    else if (ena)
        if (q < 9) q <= {q+1, q+1, q+1};

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (ena) q <= q + 1;
end

// On the positive edge of the slow clock:
// if slowena is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge slowena) begin
    if (slowena) q <= 0;
    else if (ena) q <= q + 1;
end

// On the positive edge of the enable input:
// if ena is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge ena) begin
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q++;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(negedge clk or negedge reset)
    if (reset) q <= 9;
    else if (slowena && q > 0) q--;


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena)
        if (q < 9) q <= q + 1;

// On the positive edge of the enable input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge ena or negedge reset)
    if (reset) q <= 0;
    else if (slowena)
        if (ena and q < 9) q <= q + 1;

// On the negative edge of the enable input:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posed
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 0;
    else if (slowena && q < 9)
        q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 9;
    else if (slowena && q > 0)
        q <= q - 1;


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q != 9) q <= q + 1;
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 9;
    else if (slowena && q != 0) q <= q - 1;
end

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or neged
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(posedge or negedge reset) begin
    if (reset) q <= 9'd0;
    else if (slowena && q < 9'd9) q <= q + 1'd1;
    else if (slowena && q == 9'd9) q <= 9'd0;
    else if (slowena && q > 0'd0) q <= q - 1'd1;
    else if (slowena && q == 0'd0) q <= 9'd9;
end

always @(posedge clk) begin
    if (reset) q <= 9'd0;
    else if (slowena && q < 9'd9) q <= q + 1
================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment q on the rising edge of the ena input.
// 
// On the positive edge of the slowena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment q on the rising edge of the ena input.
// 
// On the positive edge of the reset input:
// reset the output q to 0.
// 
// On the rising edge of the ena input:
// if reset is high, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Increment q on the rising edge of the ena input.
// 
// On the rising edge of the slowena input:
// if reset is high, reset the output q to 0.

================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The count is incremented by one whenever the ena input is low, 
// even if the count does not overflow.
always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// The count is incremented by one whenever the ena input is low.
// The count is incremented by one whenever the ena input is low.
always @(posedge clk) begin
    if (slowena) q <= q + 1;
end

// The count is incremented by one whenever the ena input is low.
// The count is incremented by one whenever the ena input is low.
always @(negedge clk) begin
    if (slowena) q <= q + 1;
end

// The count is incre
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (ena) q <= q + 1;
end

// On the positive edge of the slow clock:
// if slowena is high, reset q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowclk or negedge slowena) begin
    if (slowena) q <= 0;
    else if (ena) q <= q + 1;
end

// The output is q + 1, which is the number of decades since 0.

always @(posedge clk or negedge reset) begin
    q <= q + 1;
end

// The decade counter is enabled if ena is high and reset is low.

always @(posed
================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The output q is only changed if the slowena input is high.

always @(posedge clk or ~reset) begin
    if (reset) q <= 0;
    else if (slowena) q <= 9;
    else if (q != 9) q <= q + 1;
end

always @(posedge clk or ~reset) begin
    if (reset) q <= 0;
    else if (slowena) q <= 9;
    else if (q != 9) q <= q + 1;
end

always @(posedge clk or ~reset) begin
    if (reset) q <= 0;
    else if (slowena) q <= 9;
    else if (q != 9) q <= q + 1;
end

always @(posedge clk or ~reset) begin
    if (reset) q <= 0;
    
================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
    else if (slowena) q <= 9;

// The counter's output is q.

assign q = q + 1;


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 0;
    else if (slowena)
        q <= q + 1;
    else if (q != 9)
        q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9
// otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset)
        q <= 9;
    else if (slowena)
        q <= q - 1;
    else if (q != 0)
        q <= q - 1;

// The count_slow function returns the value of the counter q.

function count_slow()
    return q;
endfunction

================================================================
