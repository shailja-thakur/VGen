example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always #(0) begin
  if (reset = 0) begin
    present_state <= IDLE;
  end else begin
    present_state <= IDLE;
  end
end

always @(posedge clk) begin
  if (reset = 0) begin
    next_state <= IDLE;
  end else begin
    next_state <= IDLE;
  end
  if (present_state == IDLE) begin
    if (x = 1) begin
      next_state <= S1;
    end else begin
      next_state <= IDLE;
    end
  end else if (present_state == S1) begin
    if (x = 0) begin
      next_state <= S10;
    end else begin
      next_state <= IDLE;
    end
  end else if (present_state == S10) begin
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge reset) begin
  if(reset)
    present_state <= IDLE;
  else
    present_state <= present_state;
end

always @(posedge clk) begin
  next_state <= present_state;
  if(present_state == IDLE)
    if(x)
      next_state <= S1;
    else
      next_state <= IDLE;
  else if(present_state == S1)
    if(x == 0)
      next_state <= S10;
    else
      next_state <= IDLE;
  else if(present_state == S10)
    if(x)
      next_state <= S101;
    else
      next_state <= IDLE;
  else if(present_state == S101)
    next_state <= IDLE;

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
	if (reset) begin
		present_state <= IDLE;
	end
	else begin
		if (present_state == IDLE) begin
			next_state <= S1;
		end
		else begin
			next_state <= present_state;
		end
	end
end
assign z = present_state;


================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
	if(reset) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end
	else begin
		if(present_state == IDLE) begin
			if(x == 1) begin
				present_state <= S1;
				next_state <= S10;
			end else begin
				present_state <= IDLE;
				next_state <= IDLE;
			end
		end else if(present_state == S1) begin
			if(x == 0) begin
				present_state <= IDLE;
				next_state <= IDLE;
			end else begin
				present_state <= S10;
				next_state <= S101;
			end
		end else if(present_state == S10) begin
			if(x == 1)
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
  if (reset) begin
    present_state <= IDLE;
  end
  else begin
    present_state <= IDLE;
    if (x) begin
      next_state <= S1;
    end
    else begin
      next_state <= IDLE;
    end
  end
end
case (present_state)
  IDLE: begin
    z <= 0;
  end
  S1: begin
    z <= 0;
  end
  S10: begin
    z <= 0;
  end
  S101: begin
    z <= 1;
  end
end

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always {
    if (reset) present_state = IDLE;
    else {
        if (x) present_state = S1;
        else present_state = IDLE;
    }
    next_state = IDLE;
    if (present_state==S1) next_state = S10;
    if (present_state==S10) next_state = S101;
    z = present_state==S101;
}

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
  if (reset) 
    present_state <= IDLE;
  else
    if (x)
      present_state <= S1;
    else
      present_state <= IDLE;

  next_state <= IDLE;
  if (present_state == IDLE)
    next_state <= S1;
  else if (present_state == S1)
    next_state <= S10;
  else if (present_state == S10)
    next_state <= S101;

end

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
  if (reset) begin
    present_state <= IDLE;
  end else begin
    if (x) begin
      present_state <= S1;
    end else begin
      present_state <= IDLE;
    end
  end
end

always begin
  if (present_state == S1) begin
    next_state <= S10;
  end else begin
    if (present_state == S10) begin
      next_state <= S101;
    end else begin
      next_state <= IDLE;
    end
  end
end

always begin
  z <= present_state;
end


================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge reset or posedge clk)
begin
	if (reset)
		present_state <= IDLE;
	else
	if (x)
		present_state <= S1;
		else
		present_state <= IDLE;
end

always @(posedge clk or posedge reset)
begin
	next_state <= present_state;
end

reg [1:0] z;

always @(posedge clk or posedge reset)
begin
	if (present_state == S101)
		z <= 1;
	else
		z <= 0;
end
endadv_fsm;



"""


def test_adv_fsm():
    clk = Signal(name="clk")
    reset = ResetSignal(name="reset")
    x = Signal(name="x")

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


bool s1_flag=false, s10_flag=false, s101_flag=false;

always @(posedge clk or posedge reset) begin
  if ((reset==1) and (present_state==IDLE)) begin
    present_state <= IDLE;
    next_state <= IDLE;
    s1_flag <= false;
    s10_flag <= false;
    s101_flag <= false;
  end else if ((present_state==IDLE) and (x==1)) begin
    present_state <= S1;
    next_state <= IDLE;
    s1_flag <= true;
    s10_flag <= false;
    s101_flag <= false;
  end else if ((present_state==IDLE) and (x==0)) begin
    present_state <= S10;
    next_state
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge reset) begin
if (reset) begin
present_state <= IDLE;
next_state <= IDLE;
end
end

always @(posedge clk) begin
if (present_state == IDLE) begin
if (x) begin
next_state <= S1;
end
else begin
next_state <= IDLE;
end
end
end


================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
  if (reset) begin
    present_state <= IDLE;
  end
  else begin
    // present_state, next_state are assigned in order of states
    if (present_state==IDLE) begin
      if (x) begin
        present_state <= S1;
        next_state <= S10;
      end else begin
        next_state <= IDLE;
      end
    end else if (present_state==S1) begin
      if (x) begin
        present_state <= S10;
        next_state <= S101;
      end else begin
        next_state <= IDLE;
      end
    end else if (present_state==S10) begin
      if (x) begin
        present_state <= S101;
        next_state <=
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
	if (reset) begin
		present_state <= IDLE;
		next_state <= IDLE;
	end else begin
		next_state <= IDLE;
		if (present_state == IDLE) begin
			if (x) begin
				present_state <= S1;
				next_state <= S10;
			end else begin
				present_state <= IDLE;
				next_state <= IDLE;
			end
		end else if (present_state == S1) begin
			if (x) begin
				present_state <= S10;
				next_state <= S101;
			end else begin
				present_state <= IDLE;
				next_state <= IDLE;
			end
		end else if (present_state == S10) begin
			if (x) begin
				
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin 
if (reset) begin 
present_state <= IDLE;
end else begin 
present_state <= IDLE;
next_state <= IDLE;
end
end

always @(posedge clk) begin 
if (present_state == IDLE) begin
next_state <= S1;
end else begin
if (present_state == S1 && x == 1) begin
next_state <= S10;
end else begin
next_state <= IDLE;
end
end

always @(posedge clk) begin 
if (present_state == S10 && x == 0) begin
next_state <= S1;
end else begin
next_state <= IDLE;
end

always @(posedge clk) begin 
if (present_state == S1 && x == 1)
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end
  else begin
    if (present_state == IDLE) begin
      if (x) begin
	next_state <= S1;
      end else begin
	next_state <= IDLE;
      end
    end else if (present_state == S1) begin
      if (x == 0) begin
	next_state <= S10;
      end else begin
	next_state <= IDLE;
      end
    end else if (present_state == S10) begin
      if (x == 0) begin
	next_state <= S101;
      end else begin
	next_state <= IDLE;
      end
    end else if
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

    always begin
        if (reset == 0) begin
            present_state <= IDLE;
            next_state <= IDLE;
        end else begin
            next_state <= IDLE;
            present_state <= IDLE;
        end
    end
    always begin
        if (clk == 1) begin
            present_state <= next_state;
        end else begin
            present_state <= IDLE;
        end
    end
    always begin
        z <= present_state'[1];
    end
endadv_fsm;


#line 5 "fsm.cpp"
// EOF

================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
   z:=0;
   present_state:=IDLE;
   next_state:=IDLE;
   if (reset = '0') begin
      present_state:=IDLE;
      next_state:=IDLE;
   end else begin
      present_state:=IDLE;
      next_state:=IDLE;
      if (x = '1') begin
         next_state:=S1;
      end else begin
         next_state:=IDLE;
      end
      if (present_state = S1) begin
         next_state:=S10;
      end
      if (present_state = S10) begin
         next_state:=S101;
      end
      if (present_state = S101) begin
         next_state:=IDLE;
      end
   
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end else begin
    if (present_state = IDLE) begin
      next_state <= S1;
      if (x == 1) begin
        next_state <= S101;
      end else begin 
        next_state <= IDLE; 
      end
    end else if (present_state = S1) begin 
      next_state <= S10;
      if (x == 0) begin
        next_state <= IDLE;
      end else begin
        next_state <= S101;
      end
    end else if (present_state = S10) begin
      next_state <= S101;
      if (x == 1) begin
        next_state
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end else begin
    case (present_state)
      IDLE :
        if (x) begin
          present_state <= S1;
          next_state <= S1;
        end else begin
          present_state <= IDLE;
          next_state <= IDLE;
        end
        
        
      S1 :
        if (x) begin
          present_state <= S10;
          next_state <= S10;
        end else begin
          present_state <= S1;
          next_state <= S1;
        end 
        
      S10 :
        if (x) begin
          present_state <= S101;
          next_state <= S101;
        end
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// the following state transition table is the result of the finite state machine

// S1 -> S10
//     0  1  0  0
//     0  0  0  1
//     0  0  1  0
//     0  1  0  0
//     1  0  0  0
//     1  0  1  1
//     1  1  0  0
//     1  1  1  0
//     0  0  0  0
// S10 -> S101
//     0  0  0  1
//     0  1  1  0
//     0  0  0  1
//     0  0  1  0
//     1  1  0  0
//     1  0  0  0
//     1  0  1  1
//     1  1  0  0
================================================================
