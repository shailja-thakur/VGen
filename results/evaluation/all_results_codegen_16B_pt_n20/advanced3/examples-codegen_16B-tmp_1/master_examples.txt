example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge reset) begin
if(reset == 1) begin
           present_state = 0; 
           next_state = 0; 
end

always @(posedge clk) begin
if (present_state == IDLE) begin
        if (x == 1) begin
                if (present_state != next_state) begin
                       present_state <= next_state; 
                end
        end
        else end
else begin
        if (present_state == S1 || present_state == S10) begin
                if (x == 0) begin
                       next_state = S1; 
                end
                else begin
                       next_state = S10; 
                end
        else begin
           if (present_state == S101) begin
                if (x == 1) begin
                       next_state = S101; 
                
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
	if(reset and present_state==IDLE) begin
		present_state = IDLE;
	end
	else begin
		present_state <= next_state;
		next_state := IDLE;                
    	if(present_state == S1) begin
    	    next_state := S10;
    	end 
    	else if(present_state == S10 && x==1) begin
    	    next_state := S101;
    	end
    	else if(present_state == S10 && x==0) begin
    	    next_state := S1;
    	end
    	else if(present_state == S101 && x==1) begin
    	    next_state := IDLE;
    	end
    end
end


================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always #(0) begin: FSM_prst 
  if (reset == 1) begin
     present_state <= IDLE;  // capture reset, initial state
     next_state <= IDLE;
  end else if (x == 1) begin
     present_state <= S1;  // capture positive edge
     if (rising_edge(clk)) present_stateNext <= S10;
  end else if (x == 0) begin
     present_stateNext <= IDLE;
  end else begin
    present_stateNext <= S1;
  end

  z <= present_state;
end  // end FSM_prst


================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE










always @(posedge clk or negedge reset) begin 
if (reset) begin 
present_state <= IDLE; 
else begin
present_state <- integer(~x); 
next_state <- present_state;
end
end 



//u_next_state <= next_state;
//assert next_state & u_present_state == 1;

always @(posedge clk) begin 
if (present_state == S101) {
z <= 1;
} else {
z <= 0;
}
end




always @(posedge clk or negedge reset) begin 
if (reset) begin 
present_state <= IDLE; 
end else if ((present_state == IDLE) && x) begin 
present_state <= S1; 
end else if ((present
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


event rset;
event clk'event();
event e;
reg e;


initial begin
    present_state = IDLE;
    next_state = IDLE;
     e <= (clk or ~rset);
end


always begin
  //initialization
 private event rset, clk'event();
 private reg rset, clk;
 process(rset or clk)
 begin
 	case(present_state)
 		IDLE ->
		       []S1 ->
			present_state <= S1;
		       [S1]S10 ->
       		      []S101-> present_state <= S101
		              [S1]S10-> null 
			present_state <= S10;
       		      [S10]S101 -> null
			present_state <= S101;
       		      else -> L
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
// perform startup operation
present_state <= S1;

// carry-rippling calculation for encoder input, assuming only -0.5 .. 0.5 values
// if x is more than 0.5 (clip, overdrive) make sure you use the repeat register to express new values 
// if x is less than -0.5 (discordance or underdrive) incorporate -0.5 into true/false at the end 
// (remember x - 0.5) was taken earlier to prepare input, no long lost in tmp_x
// (x_pre, x_tmp) are the same amount of distance apart unless the bigX is enabled, then x_tmp is farther out by 1/2
// because of this pre-truncation/post-truncation, original clip values mean post-clip values; i.e. missing .5 = .75,
// and
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @* rst0
  begin
    rst0 <= !reset;
    present_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end


always @(posedge clk)
  begin
    present_state <= next_state - 1;
    next_state <= IDLE;
  end

always @(posedge clk)
  begin
    if !rst0 and x
      begin   // RS being asserted
        next_state <= S1;  // Switching to first state
      end     // RS being assert  
    else   
      begin   // CS being de-asserted
        if rst0 and present_state == S101
          begin
            next_state <= IDLE;
          end // Switching to Idle Check ;for next reg_cycle
        else if present_state
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @* rst_u => {
	next_state = IDLE;
	present_state = IDLE;
		else if (x == 1) then
		next_state = S1;
		else if (x == 0) then
		next_state = S10;
	end
}	

always @(posedge clk) {
	if (reset == 1)
	{
		present_state <= IDLE;
		next_state <= IDLE;
	}
	else
	{
		if (PRESENT_STATE == IDLE)
		{
			if (x == 1)
			{
				present_state <= S1;
				next_state <= IDLE;
			}
			else
			{
				present_state <= IDLE;
				next_state <= IDLE;
			}
		}
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always begin
    present_state <= IDLE;
    next_state <= IDLE;
  end
  
  always #(0) begin
    next_state <= S1 ;
    if (IDLE || S10) begin
      next_state <= IDLE;
    end 
    else if (x) begin
      next_state <= S10;
    end  
    else begin
      next_state <= IDLE;
    end
  end 
  
  always #(0) begin
    z <= present_state;
  end


================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge c1, posedge clk, posedge rst ) begin 
if reset = 0
next_state <= IDLE;
else
next_state = IDLE;
only begin
  if present_state = IDLE && c1) begin
    if x = 0
    next_state <= S1;
    elif x = 1
    next_state <= S10;
    end
    else begin
      next_state <= IDLE;
    end
  end
end
end

assert [present_state] @ '20;

================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


input reset; 
input clk; 
input x;
output z; 

begin
  // state registers
  reg [1:0] present_state, next_state; 
  // connections
  present_state <= present_state; 
  next_state <= present_state;
  
  assign present_state = S101; 
  assign next_state = S1; 
  next_state <= present_state;
  assign present_state = S10; 
  assign next_state = S101; 

  always @(posedge clk or posedge reset)
  begin
    present_state <= next_state;
  end
  assign z = present_state == [3'b101];
  always @(posedge clk or posedge reset) begin
  begin
    present_state <=
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
   if (reset) begin
      present_state <= IDLE;
   end

   // if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
   if (present_state == IDLE)
   next_state <= ( x == 1) ? S1 : IDLE;
   end 

   // if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at S1
   if (present_state == S1)
       next_state <= ( x == 0) ? S1 : IDLE;
   end 

   // if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at S10
   if (present_state == S10)

================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) begin
if(reset == 1) begin
present_state <= IDLE;
next_state <= IDLE;
end 
else begin
if(present_state > IDLE) begin
// receiving 101 has precedence on present_state switching, so it stays in IDLE
next_state <= IDLE;
end
else begin
case (present_state)

  case(IDLE) begin
    if(x == 1) begin
      next_state <= S1;
    end else begin 
      next_state <= IDLE;
    end
  case(S1) begin
    if((x == 0) || (present_state > S10)) begin
      next_state <= IDLE;
    end else begin
      next_state <= IDLE;
    end
  case(S10) begin
    if
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
    case(present_state) is
    case(present_state): {
        case(0): 
            next_state := S1;
            break;
        case(1): 
            next_state := S10;
            break;
        case(2): 
            next_state := S101;
            break;
        default: 
        case(3): next_state := IDLE; 
            break;
    endcase;
    reset <= 0;
    present_state <= IDLE;
end;

always  begin
    case(present_state) is
        case(CLK) is
            present_state <= next_state;
        default:
            next_state <= present_state;
endcase;
end;
  
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always
begin
    next_state := IDLE;
end

always @(posedge clk) begin
    #if $display == 1
        if (present_state == IDLE)
            d = 0;
        else if (present_state == S1)
            d = x;
        else if (present_state == S10)
            d = ~x;
    #else
        if (present_state == IDLE)
            if (x == 1) {
                d = 1;
                present_state = S1;
            } else {
                present_state = IDLE;
            }
        else if (present_state == S1)
            if (x == 0) {
                d = 0;
                present_state = S10;
            } else {
                d = 1;
                present_state = IDLE;
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 reg [31:0] ba;
reg [31:0] z = ba, x = ba;
reg [31:0] i = ba;
always {
if(x) ba=01;
else ba = 00;
z = ba;
}
always {
i = present_state;
present_state = i + ba;
if (present_state < 0) {
	present_state = IDLE;
	}
if(present_state == IDLE && x == 1)  next_state = S1;
else if(present_state == IDLE && x == 0) next_state = S1;
else if(present_state == S1 && x != 1) next_state = S1;
else if(present_state == S1 && x != 0) next_state = S1;
else if(present_state == S1 && x
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// Execute a single transition of the state machine. On error, assert high.
function void next_transition( x );

void next_transition( x )
{ 
	switch(present_state) 
	{ 
		case IDLE: 
			switch( x )
			{
				case 1: 	// S1 
					present_state = S1; 
					next_state = S10; 
					break;
				default: 	// SH,L 
					break;
			}
			break; 
		case S1: 
			switch( x )
			{ 
				case 0: 	// S10 
					present_state = S10; 
					break; 
				default: 	// IDLE 
					break; 
			}
			break; 
		case S10:
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always block_synced
begin
  if rst is high
    present_state <= IDLE;
  else begin
    if (x='0') undefined; 
    else begin
      present_state <= S10;
    end 
    switch (present_state)
    reg [7:0] char;
    a external;
        with char
        begin
         if ((char == 0b1101) | (char == 0b0011))
           next_state <= S10;

         else if char == 0b0010
           next_state <= S101;
         if char == 0b0000
           next_state <= S11;
         default:
           next_state <= IDLE;
        end
    end
  end
end

================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge reset) begin :rst begin :z = 2; end
always @(posedge clk) begin:presentState <= present_state; begin :idle if (reset == 1) begin :presentState <= IDLE; end 
        else begin :nextState <= IDLE; if (present_state == S1) begin :nextState <= S10; end 
            if (present_state == S10) begin:nextState <= S101; end 
            if (present_state == S101) begin:nextState <= IDLE; end
            :z <= nextState; end
end

always @(negedge clk) begin:presentState <= IDLE; begin :idle if (reset == 1) begin :presentState <= IDLE; end 
        else begin :nextState <= IDLE; if (present_state == S1) begin :
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin

        casez(present_state)
            casez(1, S1)
                next_state <= 2;
            casez(0, S10)
                next_state <= 2; 
            casez(1, S101)
                next_state <= 3;
            casez(IDLE, IDLE)
                next_state <= IDLE;
            default:
                next_state <= IDLE;
        endcase
        present_state <= IDLE;
        // assign output z to 1 when present_state is S101 and the result should be in fsm as z

================================================================
