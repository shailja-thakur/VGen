example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=1, in1b=x. When in2b=x, out=1
always @*
case(in) 
3'b000 : pos = 2'b00;	
3'b001 : pos = 2'b01;	
3'b010 : pos = 2'b10;	
3'b011 : pos = 2'b11;
endcase

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin	
	casex( in ) 
	4'b0xxx:	pos=2'b00;	// Inputs 0-5
	4'b100x:	pos=2'b01;
	4'b1000:	pos=2'b10;
	4'b0000:	pos=2'b11;
	default:	pos=2'bxx;
	endcase
end
// if none of the input bits are high, output is zero

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) begin
case( in )
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos=(2'b11);
3'b100: pos=(2'b11);
3'b101: pos = (2'b10);
3'b110: pos = (2'b01);
3'b111: pos=(2'b00);
 default: pos=(2'b00);

endcase
end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
casex( in )
3'bxxx: pos = 2'bxx;
3'b000: pos = 2'bxx;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
3'b100: pos = 2'b10;
3'b101: pos = 2'b11;
3'b110: pos = 2'bxx;
3'b111: pos = 2'b11;
default: pos = 2'bxx;
endcase

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) 
 begin
casex (in)
3'b0xx: pos = 2'b10;
3'b001: pos = 2'b01;
3'b010: pos = 2'b00;
3'b011: pos = 2'b00;
3'b100: pos= 2'b00;
default pos = 2'b00;
 endcase
end

================================================================
