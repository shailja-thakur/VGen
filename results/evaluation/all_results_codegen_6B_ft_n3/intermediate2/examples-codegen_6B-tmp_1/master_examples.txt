example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q	<= 4'd0;
	end
	
	//Case that only occurs when Q == 12...
	else if(q == 4'd12)
	begin
	q	<= 4'd0;
	end
	
	//If the counter hasn't reached the desired maximum value of 13, increment q.
	else
	begin
	q	<= q+1;
	end
	
	//This case only occurs when the user is trying to reset the counter to 0.
	if(reset)
	begin
	q	<= 4'd0;
	end
	
	end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
	if (reset) 
	// on reset
	q <= 4'b0000; 
	else if (q == 4'b1111) 
	// if q is 12
	q <= 4'b0000; 
	else 
	// else increment
	q <= q + 1'b1;
end 

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk )//positive edge triggered
begin
	if(reset) // on reset or if q == 12...(specifically the 12th)
	begin	
	q = 0; //this is our defining an output q=0
	end
	else if (q==12) //if q is 12...
	begin
	q = 0; // set it to 0
	end
	else //all other times keep q=q+1
	begin
	q = q + 1;
	end
end 

================================================================
