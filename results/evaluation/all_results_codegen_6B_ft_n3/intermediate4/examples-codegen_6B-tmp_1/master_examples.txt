example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Simulate this with a JK-FF

//Propagate an clk signal through our state set, and a reset signal through J.K

JK_FF ff00(clk, reset, in, out, next_state[0]);
JK_FF ff01(clk, reset, ~in, out, next_state[1]);

always@(posedge clk or posedge reset) 
	begin
	if(reset) 
	present_state <= `A;
	else 
	present_state <= next_state[0];
	end

//To get a 2-bit output, the next block equivalent is as follows
next_state = {j,k}; //Outputs a signal if the state is a k,j state

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
/*output present_state, next_state;
// Register World implementation
// connects output with input in the same module
// connects output with the present_state 
// connects input with output in the same module
// connects input with next_state
assign present_state = ~next_state;
assign next_state = (in==1'b1) ? 1'b1 : ( (in==1'b0) ? 1'b0 : 1'b1 );
assign out=(present_state == 1'b1)?(in):(~in); */
// D flip-flop implementation with synchronous reset
// connects output with input on clock
// connects output with reset
// Clock-and-Bound system for corner case timing
parameter bound = 10000000;
always @(posedge clk)
begin
if(reset)
	present_state <= #(bound)
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state&(in);
// This always block will "always" execute even if not explicitly called. The procedural block of code inside it will execute only once.
// Control always shift registers. 
// Note that the procedural block should have a named output.
always @(*) 
	begin: control_block
	case(present_state)
	// nets related to state 0
	0: next_state = (in)? 1:0;
	1: next_state = (in)? 1:0;
	// nets related to state 1
	2: next_state = (in)? 0:1;
	3: next_state = (in)? 0:1;
	endcase
	end 
always @(posedge clk or posedge reset)
	// First, deal with the reset
	if (reset)
	begin
	present_
================================================================
