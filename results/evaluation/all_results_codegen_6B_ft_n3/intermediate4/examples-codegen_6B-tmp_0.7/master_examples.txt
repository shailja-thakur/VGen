example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
begin 
	if(reset) // if the reset button is pressed, go to state 0
	begin
	 present_state <= next_state;
	end
	else 
	begin
	 present_state <= next_state;
	end
end
always @(posedge clk)
begin 
	if(present_state == 1 && in == 0) // detect transitions to state 1
	begin
	 next_state = 1;
	end
	else if (present_state == 0 && in == 1) // detect transitions to state 1
	begin
	 next_state = 0;
	end
	else 
	begin
	 next_state = present_state; // do nothing
	end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @ (posedge clk, posedge reset)
begin
	if (reset) 
	begin
	present_state <= 1'b0;
	next_state <= 1'b0;
	end
	else 
	begin
	// State transition logic
	present_state <= next_state;
	// Output logic
	out <= present_state;
	end
end

always @ (present_state or in)
begin
	if (present_state == 1'b0 && in == 1) 
	begin
	next_state <= 1'b1;
	end
	else if (present_state == 1'b1 && in == 1) 
	begin
	next_state <= 1'b0;
	end
	else 
	begin
	next_state <= present_state;
	end
end

end
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	begin
	if(reset)
	 present_state<=2'b00;
	else
	 present_state<=next_state;
	end
always @(present_state or in)
	case(present_state)
	2'b00:
	if(in)
	 next_state<=2'b10;
	else
	 next_state<=2'b01;
	2'b10:
	if(in)
	 next_state<=2'b10;
	else
	 next_state<=2'b11;
	2'b11:
	next_state<=2'b00;
	endcase
// output logic
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out
================================================================
