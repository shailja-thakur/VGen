// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n#include \"sysc_util.h\"\n#include \"sysc_simple_tb.h\"\n\n//------------------------------------------------------------------------------\n#define Q_WIDTH 64\n#define Q_ENABLE_MASK 0x1\n\n//------------------------------------------------------------------------------\nvoid test_advshft(const char * test_name, sc_core::sc_simulation_time t1, sc_core::sc_simulation_time t2,\n\t\t\t\t  bool shift_left, bool shift_right, int shift_amount, int val) {\n\tsc_core::sc_simulation_time t = t1;\n\n\tsc_core::sc_signal<bool> load_signal;\n\tsc_core::sc_signal<bool> ena_signal;\n\n\tsc_core::sc_signal<bool> shift_amount_signal;\n\tsc_core::"
    }
  ],
  "created": 1663519230,
  "id": "cmpl-Dyn2ZIMbHHHsRe0X1jZ09ZuCdm93s",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 200,
    "prompt_tokens": 184,
    "total_tokens": 384
  }
}