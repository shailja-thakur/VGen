example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
	begin
	if (reset)
	begin
	r_reg <= 5'b11001;
	end
	else
	begin
	assign r_next = q ^ {1'b0,feedback_value||r_reg[4|r_reg[0]|r_reg[2],r_reg[4]|r_reg[1]|r_reg[3]|r_reg[2]|r_reg[0]};	 // case 4 is included for r_reg[4]
	end
	end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
assign r_next = (reset) ? 5'b11011 : r_reg | (~q[4]&q[3]) | (~q[4]&q[3]&q[2]&q[1]);
always @(posedge clk)
if(reset)
r_reg <= 5'b11011;
else
r_reg <= r_next;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
initial begin
r_reg <= 5'b11111;
end
assign q = r_reg;
assign feedback_value = (reset) ? 5'b0 : (r_reg[0] ^ r_reg[1] ^ r_reg[2] ^ r_reg[3]) 
hsi_traverse bus
lfsr_def_reg s33
reset wire s_reset
eed > s33
 // designing the reset max length path with the above two issues
 // modified the design so that when reset is held low,
 // nothing changes in register as it will need to be created for messages
 /*
 // propagate the reset into the rest
 // assign reset only to 8,9,1,2 bits of q3,0,
 // 0 -> 0101 (25msb 6,5,4,3,2)
 // assign r_next[0] = r_reg
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
// Feeds a random number into the DB111 long LSFR function (combinatorial)
initial r_reg = 5'b0;
bitwise binary_to_bc #MAX50495 (.c({q[3],q[2],q[1],q[0]}), {r_reg[0],r_reg[1],r_reg[2],r_reg[3]}) /* synthesis symbol bitwise_binary_inst*/;
concat # (1) {%.0vrvhbsdonevfvf(VF,H,B,D)} 
inst_concat # (MAX50495) R1 (.inc(1'b1),
.alsoEBAR(r_reg(1))
);
always @(posedge clk = r_reg[4] ^ r_reg[3])
begin 
#1 r_reg = r_next;
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk) 
if (reset) r_reg <= 5'b1 << 0; 
else r_reg <= r_next;
lpm_compare comp_next(

	.aeb (1'b0),
	.agb (),
	.ageb (),
	.aleb (),
	.aneb (),
	.dataa ({5{r_reg[1]}}),
	.datab ({5{r_reg[2]}}),
	.datae (),
	.dane (),
	.denb (),
	.diffbit (),
	.e abh (),
	.e bbh (),
	.faeb (),
	.nageb (),
	.paeb (),
	.sageb (),
	.slba (),
	.slceb (),
	.slnb (),
	.slpage
================================================================
