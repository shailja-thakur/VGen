// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk or negedge reset)\n  if (load)\n    out = data;\n  else\n    out = left_rotate(out,amount[0],out,amount[1],out,amount[2]);\nend\n\n// right shift and rotate operation\nmodule right_rotate(clk,reset,amount,data,load,out);\ninput clk,reset;\ninput [2:0] amount;\ninput [7:0] data;\ninput load;\noutput reg [7:0] out;\n// when load is high, load data to out\n// otherwise rotate the out register followed by right shift the out register by amount bits\nalways @(posedge clk or negedge reset)\n  if (load)\n    out = data;\n  else\n    out = right_rotate(out,amount[0],out,amount["
    }
  ],
  "created": 1663519212,
  "id": "cmpl-Nay6AjjVrgE28UmHXTaCa5I94NFIz",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 200,
    "prompt_tokens": 94,
    "total_tokens": 294
  }
}