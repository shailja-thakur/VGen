example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
if (load) q<=data;
else if (ena)
begin
case(amount)
2'b00: q<={q[62:0], q[63]};
2'b01: q<={q[63], q[62:0]};
2'b10: q<={q[63], q[63:1]};
2'b11: q<={q[63], q[63:8]};
endcase
end
end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// always @(posedge clk)
// if load is high, assign data[63:0] to shifter.
always @(posedge clk)
 if (load)
	 q <= data;
	 
// always @(posedge clk)
// if ena is high, shift q.
always @(posedge clk)
 if (ena)
	 begin
	 case (amount)
	 2'b00: 
	 begin
	 q <= {q[62:0], 1'b0};
	 end
	 2'b01:
	 begin
	 q <= {q[62:0], 8'b0};
	 end
	 2'b10: 
	 begin
	 q <= {q[62:0], 1'b0};
	 end
	 2'b11:
	 begin
	 q <= {q
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load)
	begin
	q <= data;
	end
	else if (ena)
	begin
	case(amount)
	2'b00:
	begin
	q <= {q[62:0], q[63]};
	end
	2'b01:
	begin
	q <= {q[63], q[63:1]};
	end
	2'b10:
	begin
	q <= {q[63], q[63:8]};
	end
	2'b11:
	begin
	q <= {q[63], q[63:16]};
	end
	endcase
	end
end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (negedge clk)
if (load) 
q <= data;
else if (ena)
begin
case (amount)
2'b00: q <= {q[62:0], 1'b0};
2'b01: q <= {q[59:0], 2'b00};
2'b10: q <= {q[56:0], 4'b0000};
2'b11: q <= {q[55:0], 8'b00000000};
endcase
end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk) begin
	if(load)
	begin
	q <= data;
	end
	if(ena)
	begin
	case(amount)
	2'b00: begin
	q <= q << 1;
	end
	2'b01: begin
	q <= q << 8;
	end
	2'b10: begin
	q <= q >> 1;
	end
	2'b11: begin
	q <= q >> 8;
	end
	endcase
	end
end

================================================================
