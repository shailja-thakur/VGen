example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// For each adder, a full adder is created on the inputs. The output from each adder is added to the output.
// The output of the full adder is also added to the output.

wire signed [7:0] a_minus_b;
wire signed [7:0] s_minus_b;
wire [7:0] sum_minus_b;

wire signed [7:0] a_plus_b;
wire signed [7:0] s_plus_b;
wire [7:0] sum_plus_b;

wire signed [7:0] a_minus_b_minus_s;
wire signed [7:0] s_minus_b_minus_s;
wire signed [7:0] sum_minus_b_minus_s;

wire signed [7:0] a_plus_b_plus
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] sum;
wire [8:0] carry;

assign sum = a + b;
assign carry = (a[7]) ? b : (a[7]) ? a : 1'b0;

assign s = carry[7:0];
assign overflow = carry[8];


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign overflow = ((~a[7]) & b[7] & (~s[7]) & (~a[7] | b[7])) |

// check the sign of the numbers a and b for the cases where the numbers have opposite signs
// the overflow is high if the most significant bit of s is high and the most significant bit of a is low or b is high and the most significant bit of s is low
((~a[7]) & (~b[7]) & (~s[7]) & (~a[7] | b[7]));

// when a and b have opposite signs, the a and b are added and the result is negated
// the result of addition is stored in the output s
assign s[7:0] = (~a[7]) & (~b[7]) & (~s[7]) & (~a[7] | b[7]) ? (~
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// if the most significant bit of a is low and the most significant bit of b is high, the signed adder will add the numbers and set the overflow high
assign overflow = (a[7] & b[7]) | ((~a[7]) & (~b[7]) & s[7]);

// if the most significant bit of a is high and the most significant bit of b is low, the signed adder will add the numbers and set the overflow low
assign overflow = (a[7] & (~b[7])) | ((~a[7]) & b[7]);

// if the most significant bit of a and b are both high or both low, the signed adder will not add the numbers to the output s
assign overflow = 0;

// assign the output to the output s
assign s = a + b;


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// The output overflow is the first bit of the result that is 1.
// For example, if a is 128 and b is 127, the result will be 1. 
// If the result is negative, then it is zero.

assign overflow = a[7] ^ s[7]; 

// The addition is done using a two's complement adder. 
// The overflow is added to the result. 

assign s = a + b + overflow;


================================================================
