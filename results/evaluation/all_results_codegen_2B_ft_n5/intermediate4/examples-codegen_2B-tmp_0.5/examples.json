// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "// States are binary encoded\nparameter s0 = 2'b00, s1 = 2'b01, s2 = 2'b10;\nalways @ (posedge clk or posedge reset)\n// Combinational logic\nif (reset)\n\tpresent_state <= s0;\nelse\n\tpresent_state <= next_state;\n// Next state\nalways @ (present_state or in)\n// State transition\ncase (present_state)\ns0: begin\n\tif (in == 1)\n\tnext_state <= s0;\n\telse\n\tnext_state <= s1;\n\tend\ns1: begin\n\tif (in == 1)\n\tnext_state <= s1;\n\telse\n\tnext_state <= s0;\n\tend\ns2: begin\n\tif (in == 1)\n\tnext_state <= s2;\n\t"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\n if (reset)\n present_state <= 0;\n else\n present_state <= next_state;\n// Next state logic\nalways @(present_state, in)\n case (present_state)\n 0: next_state <= in ? 0 : 1;\n 1: next_state <= in ? 1 : 0;\n endcase\n// Output logic\nassign out = (present_state == 1) && (next_state == 0);\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase (present_state)\n0 : next_state <= in ? 0 : 1;\n1 : next_state <= in ? 0 : 1;\ndefault : next_state <= 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0 : out <= 1;\n1 : out <= 0;\ndefault : out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nalways @(present_state, in)\ncase (present_state)\n0 : next_state <= in ? 0 : 1;\n1 : next_state <= in ? 0 : 0;\ndefault : next_state <= 0;\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: begin\nif (in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nend\n1: begin\nif (in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nend\ndefault: next_state <= 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    }
  ],
  "created": 1663606741,
  "id": "cmpl-5Z03qo0mHfE85KJoXSpmyQ0iEzfdc",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 687,
    "prompt_tokens": 148,
    "total_tokens": 835
  }
}