example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// func specify how counter effects (https://decanongweb.com/circuits/faq/faq.html#3)
always @(posedge clk) begin
 if (reset) 
	begin
	q <= 4'd1;
	end
 else if (q == 4'd12) 
	q <= 4'd1;
 else if (q == 4'd0 || q == 4'd4 || q == 4'd6 || q == 4'd8|| q == 4'd10 || q == 4'd12)
	q <= q + 4'd1;
 end
 endmodule
//modified to write data to RAM
module RAM( CLK, W, R, W_INPUT, read_write, RESET, READY, data_out); 
input CLK, W, R, RESET, READY;
input signed [15:0] W_INPUT;
================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or negedge reset)
 begin
	if( (reset == 1'b0) || (q == 4'b0100) )
	 begin
	 q <= 4'b0;
	 end
	 else
	 begin
	 case(q)
	 4'b1110 : q <= 4'b0111;
	 4'b1101 : q <= 4'b1022;
	 4'b1011 : q <= 4'b1110;
	 4'b0111 : q <= 4'b1110;
	 default : q <= q + 1'b1;
	 endcase
	 end
 end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reg [3:0] old_q;
reg q_is_one;

always @(posedge clk)
begin
 if (reset)
begin
 old_q = 0;
 q_is_one = 1'b0;
 q = q‘ /* remove 'id=' inside "(" and ")", "\'"; */;
 end
// checking if q is <= 12
else if ( q <= 12)
begin
 old_q = q;
 q_is_one = 1;
 q = q + 1’b1; 
 end
// q is 12
else
begin
 old_q = q;
 q_is_one = 1;
 q = 4'b1;
 end
end
always @(posedge clk)
begin
 if (!q_is_one) // saving 4 quaterials
 quoicate_out = 4'b
================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
if(reset) q <= 1; 
else if(q == 4'b1_11) q <= 1; 
else if(q == 4'b11_0) q <= 4'b1_1;
else q <= q + 1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk, posedge reset) 
begin 
 if (reset) 
	q <= 4'h1;
 else 
	if(q==4'h12)
	q <= 4'h1;
	else 
	q <= q+4'h1;
end 

================================================================
