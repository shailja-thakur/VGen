example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) q <= 4'd0;
	else if (slowena && q < 9) q <= q + 4'd1;
	else;
end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// ignored input always assert ena.
// Delays can easily be measured by averaging fast flash and slow flash time; makes counting flicker less fable.

always @(posedge clk)
begin
 if (reset)
 q <= 4'b0000;
 else
 begin
 if (~slowena)
 q <= 4'b0000;
 else
 if (q == 4'b1001) 
 q <= 4'b0000;
 else
 q <= q + 4'b0001;
 end 
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
 if (reset)
 	q <= 4'b0000;
 else if (slowena && ~q[3])
 	q <= q + 1;


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

rancounter a(.slowena(slowena), .clk(clk), .reset(reset), .enain(1'b1), .q(q));


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// (This is known as a "combinational logic" design)
// If the input ena is high, clear the q at the edge of the clock.
initial begin
q=4'b0000;
	repeat(8) begin
	#5 if (q!=4'b1010) begin
	$display("setup");
	q<=#5 {1'b0,q[3:1]};
	end
	else q<=#5 4'b0000;
	end
end

================================================================
