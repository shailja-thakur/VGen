example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'd0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'd0;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
	end
end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
if (reset)
q <= 4'b0;
else begin
if (slowena) begin
if (q < 4'b1001)
q <= q + 1'b1;
end
end
end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 0;
	end
	else
	begin
	if(slowena && (q < 9))
	begin
	q <= q + 1;
	end
	end
end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset)
 q <= 4'b0000;
 else begin
 if (slowena) begin
 if (q < 4'b1001)
 q <= q + 1'b1;
 end
 end
 end
 endmodule
 
 
 module count_fast(
 input clk,
 input reset,
 input ena,
 output reg [3:0] q);
 
 always @(posedge clk) begin
 if (reset)
 q <= 4'b0000;
 else begin
 if (ena) begin
 if (q < 4'b1001)
 q <= q + 1'b1;
 end
 end
 end
 endmodule
 
 
 module count_up(
 input clk,
 input reset,
 input [3:0] limit,
 input ena,
 output reg [3:0]
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	//	q <= 4'b0; 
	end
	else
	begin
	//	q <= (slowena && q < 9)? q + 1'b1 : 4'b0; 
	end
end

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena && q < 4'b1001) begin
	q <= q + 1'b1;
	end
	end
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset)
begin
	if (reset == 1'b0)
	begin
	// reset
	q <= 4'b0;
	end
	else
	begin
	if (slowena == 1'b1 && q != 4'd9)
	begin
	q <= q + 1'b1;
	end
	end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
if (reset)
	q <= 4'b0;
else
	if (slowena)
	begin
	if (q == 4'd9)
	q <= 4'd0;
	else
	q <= q + 4'd1;
	end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 9) begin
	q <= q + 1'b1;
	end
	end
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 4'b1;
	end
	end
	end
end


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Notice how the output is only incremented when the enable is high and the counter is not at 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1;
	end
	end
	end
end

================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (reset)
 q <= 4'b0;
 else begin
 if (slowena) begin
 if (q != 9)
 q <= q + 1;
 end
 end
 end
 

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001)
	begin
	q <= q + 4'b1;
	end
	end
end


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	
	q <= 4'd0;
	
	end
	else
	begin
	
	if (slowena)
	begin
	
	if (q == 9)
	begin
	
	q <= 4'd0;
	
	end
	else
	begin
	
	q <= q + 4'd1;
	
	end
	
	end
	
	end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk, posedge reset) begin
if(reset)
 q <= 4'b0;
else if(slowena && q < 9)
 q <= q + 1;
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	// when reset is high, set q to 0
	q <= 4'b0;
	end
	else begin
	// when reset is low or when ena is low, do not change the value of q
	if (slowena) begin
	if (q < 4'b1001) begin
	// when ena is high and q is less than 9, increment q
	q <= q + 4'b0001;
	end
	else begin
	// when ena is high and q is 9, set q to 0
	q <= 4'b0;
	end
	end
	end

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	q <= 4'd0;
	else begin
	if (slowena) begin
	if (q == 4'd9)
	q <= 4'd0;
	else
	q <= q + 4'd1;
	end
	end
end


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if(reset) begin
	q <= 4'b0;
	end
	else begin
	if(slowena && q < 4'b1001) begin
	q <= q + 1'b1;
	end
	end
end


================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) begin
	if (reset) begin
	
	//note that this only changes the value of the output q, but is not stored in a register
	//this is because q is only updated at the rising edge of the clock
	q <= 4'b0000;
	
	end
	
	else begin
	
	if (slowena && q < 9) q <= q + 1;
	
	end
	
end


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) begin
	q <= 4'd0;
	end
	else begin
	if(slowena && q < 9) q <= q + 1;
	end
end

================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
if(reset)
q <= 4'b0;
else begin
if(slowena) begin
if(q == 4'd9)
q <= 4'd0;
else
q <= q + 1'b1;
end
end
end


================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk) begin
if (reset) q <= 4'b0;
else begin
if (slowena && q < 9) q <= q + 1;
end
end

================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q==9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
begin
 if (~reset)
 begin
 q <= 4'b0;
 end
 else begin
 if (slowena)
 begin
 case (q)
 4'b0: q <= 4'b1;
 4'b1: q <= 4'b2;
 4'b2: q <= 4'b3;
 4'b3: q <= 4'b4;
 4'b4: q <= 4'b5;
 4'b5: q <= 4'b6;
 4'b6: q <= 4'b7;
 4'b7: q <= 4'b8;
 4'b8: q <= 4'b9;
 4'b9: q <= 4'b0;
 endcase
 end
 end
 end


================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
if (reset) q <= 4'b0;
else if (slowena && q < 9) q <= q + 1;
end


================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset) begin
q <= 4'b0;
end
else begin
if (slowena) begin
if (q < 9) begin
q <= q + 1;
end
else begin
q <= 4'b0;
end
end
end
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(negedge clk) begin
if (reset) begin
q <= 4'b9;
end
else begin
if (slowena) begin
if (q > 0) begin
q <= q - 1;
end
else begin
q <= 4'b9;
end
end
end
end


================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	
	// if reset is high, reset the output q to 0. 
	
	q <= 4'b0;
	
	end
	else begin
	
	// if reset is high, reset the output q to 0. 
	// Otherwise, only increment the output q if the ena input is high and q is not 9.
	
	if (slowena) begin
	
	if (q != 4'd9) begin
	
	q <= q + 4'b1;
	
	end
	else begin
	
	q <= 4'b0;
	
	end
	
	end
	
	end
	
	
	// if reset is high, reset the output q to 0. 
	// Otherwise, only decrement the output q if the
================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
if(reset)
	q <= 4'b0;
else if(slowena && q < 9)
	q <= q + 1;

================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if(reset)
	begin
	q <= 4'd0;
	end
	else
	begin
	if(slowena)
	begin
	if(q != 4'd9)
	begin
	q <= q + 4'd1;
	end
	else
	begin
	q <= 4'd0;
	end
	end
	end
end


================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'd0;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
	end
end


================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 9) begin
	q <= q + 1;
	end
	end
end


================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset)
q <= 4'd0;

else if (slowena && q != 4'd9)
q <= q + 4'd1;
end

================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
if (reset)
q <= 4'b0;
else begin
if(slowena) begin
if(q < 4'b1001)
q <= q + 4'b0001;
end
end
end


================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'd0;
	end
	else
	begin
	if (slowena)
	begin
	if (q < 4'd9)
	begin
	q <= q + 4'd1;
	end
	else
	begin
	q <= 4'd0;
	end
	end
	end
end

================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
if (reset)
q <= 4'b0;
else if (slowena && q < 9)
q <= q + 1;
end


================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk) begin
	if (reset)
	begin
	// if reset is high, reset the output q to 0. 
	q <= 4'b0;
	end
	else
	begin
	// if reset is high, reset the output q to 0. 
	if (slowena)
	begin
	// if ena is high, increment the output q.
	if (q < 4'b1001)
	begin
	q <= q + 1;
	end
	else
	begin
	// if q is 9, reset it to 0.
	q <= 4'b0;
	end
	end
end


================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
 if (reset)
 q <= 4'b0;
 else if (slowena)
 begin
 if (q === 4'd9)
 q <= 4'd0;
 else
 q <= q + 4'd1;
 end
 end


================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	
	q <= 4'b0;
	end
	else begin
	
	if (slowena && q < 9) begin
	
	q <= q + 1;
	end
	end
end

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 4'd9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 4'b0001;
	end
	end
	end
end


================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena && q != 4'd9)
	begin
	q <= q + 4'b1;
	end
	else
	begin
	q <= q;
	end
	end
end


================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	// reset the counter to a known state
	q = 4'b0;
	end
	else
	begin
	if (slowena && q < 4'b1001)
	begin
	// if slowena is high, then only allow q to increment
	q = q + 1;
	end
	end
end

================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset)
q <= 4'b0;
else begin
if (slowena) begin
if (q != 4'd9)
q <= q + 4'd1;
end
end
end

================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset)
begin
if (reset)
q <= 4'b0000;
else begin
if (slowena) begin
if (q == 4'd9)
q <= 4'd0;
else
q <= q + 4'd1;
end
end
end


================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
 if (reset) begin
 q <= 4'h0;
 end
 else begin
 if (slowena) begin
 if (q < 4'h9) begin
 q <= q + 4'h1;
 end
 else begin
 q <= 4'h0;
 end
 end
 end
 end


================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end

================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset)
	q <= 4'b0;
else begin
	if (slowena) begin
	if (q == 4'd9)
	q <= 4'b0;
	else
	q <= q + 1'b1;
	end
end
end


================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if (slowena)
	begin
	if(q == 4'd9)
	begin
	q <= 4'd0;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
	end
end


================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1;
	end
	end
	end
end


================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk)
 begin
	if (reset)
	 begin
	 	q <= 4'd0;
	 end
	else
	 begin
	 	if (slowena)
	 	 begin
	 	 	if (q == 4'd9)
	 	 	 begin
	 	 	 	q <= 4'd0;
	 	 	 end
	 	 	else
	 	 	 begin
	 	 	 	q <= q + 4'd1;
	 	 	 end
	 	 end
	 end
 end

================================================================
