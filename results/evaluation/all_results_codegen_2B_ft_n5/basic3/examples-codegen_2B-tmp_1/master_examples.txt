example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in or pos )
if ( in[2] )

b=2; 
else if (in[1] )
b=3;
else if (in[0] )
b=0;


================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// x,y,z = h,e,l
always @ (in) 
begin
case (in)
0 : {pos, in} <= 3'b100;
1 : {pos, in} <= 3'b011;
2 : {pos, in} <= 3'b001;
3 : {pos, in} <= 3'b000;
endcase
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) /* v5.0 */
 	case ( in )
	3'b000: pos = 2'bxx;
	3'b001: pos = 2'b11;
	3'b010: pos = 2'b10;
	3'b011: pos = 2'b01;
	3'b100: pos = 2'b00;
	default: pos = 2'bxx;
	endcase

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always_comb
begin
	casex (in)
	4'b1110:
	casex (1'b1)
	1'b1:
	begin
	
	casex (in[2])
	1'b1:
	n_en=1'b1;
	endcase
	casex (in[1])
	1'b1:
	n_en=1'b1;
	endcase
	endcase
	casex (in[0])
	1'b1:
	casex (in[2])
	1'b1:
	n_en = 1'b0;
	endcase
	casex (in[1])
	1'b1:
	casex (in[0])
	1'b1:
	n_en = 1'b0;
end
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( this xor sel out)
case(sel)
0 : b[0] <= in[0];
1 : b[1] <= in[1];
2 : b[2] <= in[2];

endcase

always @* 
case(this)
0 : pos = no;
1 : pos = 1;
2 : pos = 2;

endcase


================================================================
