example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
if (reset == 1) out <= 8'b00000000;
else if (load == 1) out <= data;
else if (amount != 0) begin
case(amount)
3'b000: out <= {data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]};
3'b001: out <= {data[1],data[2],data[3],data[4],data[5],data[6],data[7],data[0]};
3'b010: out <= {data[2],data[3],data[4],data[5],data[6],data[7],data[0],data[1]};
3'b011: out <= {data[3],data[4],data[5
================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
begin
	if (reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	out <= data;
	else
	begin
	out <= {data[7] , data[6] , data[5] , data[4] , data[3] , data[2] , data[1] , data[0]};
	end
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// assign out to data
always@(posedge clk)
if(reset)
out <= 0;
else if(load)
out <= data;
else if(amount == 3'b000)
out <= data << 1;
else if(amount == 3'b001)
out <= {data[1], data[0], data[7], data[7], data[6], data[5], data[4], data[3], data[2], data[1], data[0], data[7], data[7], data[6], data[5], data[4], data[3], data[2], data[1], data[0]};
else if(amount == 3'b010)
out <= {data[2], data[1], data[0], data[7], data[7], data[6], data[5], data[4], data[3],
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// Note: it is very important that the rotates be done in the same direction!
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 0;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	case(amount)
	3'b000:
	begin
	out <= {data[0],data[7:1]};
	end
	3'b001:
	begin
	out <= {data[1],data[7:2]};
	end
	3'b010:
	begin
	out <= {data[2],data[7:3]};
	end
	3'b011:
	begin
	out <= {data[3],data[7:4]};
	end
	
================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out<=8'b0;
else if(load)
out<=data;
else
begin
out<={data[7:0],data[15:8]};
out<={out[7:0],out[15:8]};
end
end

================================================================
