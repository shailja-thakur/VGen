example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	cur_state <= IDLE;
	next_state <= IDLE;
	if (a == 1 && b == 1) next_state <= SAB;
	else if (a == 1) next_state <= SA;
	else if (b == 1) next_state <= SB;
	else next_state <= IDLE;
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE)
    begin
        if (a)
        begin
            next_state = SA;
        end
        else if (b)
        begin
            next_state = SB;
        end
        else
        begin
            next_state = SAB;
        end
    end
    else if (cur_state == SA)
    begin
        if (b)
        begin
            next_state = SAB;
        end
        else
        begin
            next_state = IDLE;
        end
    end
    else if (cur_state == SB)
    begin
        if (a)
        begin
            next_state = SAB;
        end
        else
        begin
            next_state = IDLE;
        end
    end
    
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) begin
        next_state = IDLE;
        if (a == 1) next_state = SA;
        if (b == 1) next_state = SB;
        if (a == 1 && b == 1) next_state = SAB;
        cur_state <= next_state;
    end
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge a or b)
  if (cur_state == IDLE)
  {
    if(a) next_state = SA;
    else next_state = SB;
  }
  else if (cur_state == SA)
  {
    if(b) next_state = SAB;
    else next_state = IDLE;
  }
  else if (cur_state == SB)
  {
    if(a) next_state = SAB;
    else next_state = IDLE;
  }
  else if (cur_state == SAB)
  {
    next_state = IDLE;
  }
  else
  {
    next_state = IDLE;
  }
  cur_state = next_state;

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
z <= (a && b);

always @(posedge clk or negedge reset)
next_state <= (cur_state == IDLE) ? SAB :
    ((cur_state == SA) ? SAB :
     (cur_state == SB) ? SAB : IDLE);


================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge a or b)
  z <= cur_state;

// The FSM is implemented with the following transition table
// Note that SAB is the only state that can transition to IDLE
// The input a and b are used to identify the transition
always @(posedge clk)
  if (next_state == IDLE) next_state <= SA;
  else if (next_state == SA) next_state <= SB;
  else if (next_state == SB) next_state <= SAB;
  else if (next_state == SAB) next_state <= IDLE;
end

// The following is a simple test harness
// It uses the FSM and the z output to identify the state
// of the FSM.
always @(posedge clk)
  if (next_state == IDLE) {
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// The state machine is implemented with a finite state machine (FSM)
always @(posedge clk or negedge reset)
  begin
    cur_state = IDLE;
    next_state = IDLE;
    if (a == 1) {
      if (b == 1) {
        cur_state = SAB;
      }
    }
    else if (a == 1) {
      if (b == 1) {
        cur_state = SA;
      }
    }
    else if (b == 1) {
      cur_state = SB;
    }
    else if (cur_state == SA && a == 1) {
      cur_state = SAB;
    }
    else if (cur_state == SB && b == 1) {
      cur_state = SAB;
    }
    else if (cur_
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  begin
    cur_state <= next_state;
    next_state <= SA;
    next_state <= SB;
    next_state <= SAB;
    next_state <= IDLE;
  end
end

// The following code is a finite state machine
// The FSM is constructed using the abro module and the clk and
// reset pins of the microcontroller.
module fsm(
input clk,
input reset,
input a,
input b,
input a_in,
input b_in,
input z_out,
output clk_out,
output reset_out);
  // This is the FSM state machine
  always @(posedge clk)
    begin
      if (cur_state == IDLE)
        z_out <= 1;
      else if (cur_state
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= SA;
  if (cur_state == SA)
    next_state <= SAB;
  else if (cur_state == SB)
    next_state <= SAB;
  else if (cur_state == SAB)
    next_state <= IDLE;
  else 
    next_state <= IDLE;
  if (next_state == SAB)
    z <= 1;
end
end

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    if (reset) begin
        cur_state <= IDLE;
    end
    else begin
        if (a == 1) begin
            if (b == 1) next_state <= SAB;
            else next_state <= SA;
        end
        if (b == 1) begin
            if (a == 1) next_state <= SAB;
            else next_state <= SB;
        end
        if (cur_state == IDLE) begin
            if (a == 1) next_state <= SA;
            else next_state <= SB;
        end
        if (cur_state == SA) begin
            if (b == 1) next_state <= SAB;
            else next_state <= IDLE;
        end
        if (cur_state == SB) begin
            if (a == 1)
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	if (cur_state == IDLE && a && b) next_state = SAB;
	else if (cur_state == IDLE && a) next_state = SA;
	else if (cur_state == IDLE && b) next_state = SB;
	else if (cur_state == SA && b) next_state = SAB;
	else if (cur_state == SB && a) next_state = SAB;
	else if (cur_state == SAB) next_state = IDLE;
	else next_state = IDLE;
	cur_state = next_state;
	z = z || cur_state == SAB;
end

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (a) cur_state = SA;
  else if (b) cur_state = SB;
  else cur_state = IDLE;
  if (cur_state == IDLE) next_state = IDLE;
  else if (cur_state == SA && b) next_state = SAB;
  else if (cur_state == SA && a) next_state = SA;
  else if (cur_state == SA && !a) next_state = SB;
  else if (cur_state == SB && a) next_state = SAB;
  else if (cur_state == SB && b) next_state = SA;
  else if (cur_state == SAB) next_state = IDLE;
  else next_state = IDLE;
  if (next_state == IDLE
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(*)
begin
    if (cur_state == IDLE)
    begin
        if (a == 1 and b == 1)
        begin
            next_state = SAB;
            z = 1;
        end
        else
            next_state = IDLE;
    end
    else if (cur_state == SA)
    begin
        if (b == 1)
        begin
            next_state = SAB;
            z = 1;
        end
        else
            next_state = IDLE;
    end
    else if (cur_state == SB)
    begin
        if (a == 1)
        begin
            next_state = SAB;
            z = 1;
        end
        else
            next_state = IDLE;
    end
    else if (cur_state == SAB)
    begin

================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end else begin
        cur_state <= next_state;
        next_state <= next_state;
    end
end

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= cur_state;
  next_state <= IDLE;
  if (next_state == IDLE)
  begin
    if (a == 1) then z <= 1;
    else if (b == 1) then z <= 1;
    else z <= 0;
  end
end

================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset == 1) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (a == 1 && b == 1) begin
      cur_state <= SAB;
    end
    else if (a == 1) begin
      if (cur_state == IDLE) begin
        cur_state <= SA;
      end
    else if (b == 1) begin
      if (cur_state == IDLE) begin
        cur_state <= SB;
      end
    end
    if (cur_state == SA) begin
      if (b == 1) begin
        cur_state <= SAB;
      end
    end
    if (cur_state == SB) begin
      if (a == 1) begin
        cur_state <= S
================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  cur_state <= next_state;

always @(posedge clk)
  if (a == 1 && b == 1)
    next_state <= SAB;
  else if (a == 1)
    next_state <= SA;
  else if (b == 1)
    next_state <= SB;
  else
    next_state <= IDLE;


================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset) begin
  if (cur_state == IDLE) begin
    cur_state <= next_state;
    next_state <= (a == 1 and b == 1) ? SAB :
                (a == 1) ? SA :
                (b == 1) ? SB : IDLE;
  end
end

// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to
================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end
    else begin
        if (a) begin
            cur_state <= SA;
        end
        else if (b) begin
            cur_state <= SB;
        end
        else begin
            cur_state <= SAB;
        end
    end
end

// This is a model of the counter.
// It counts from 0 to n-1, then to 0 again.
// The output z is high when n-1 is received.
// If cur_state is IDLE and n-1 is high, state changes to SAB
// If cur_state is IDLE, and n-1 is high, state changes to SA
// If cur_state is IDLE, and n-1 is low,
================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  begin
    if (next_state == IDLE and a == 1) next_state = SA;
    if (next_state == IDLE and b == 1) next_state = SB;
    if (next_state == SA and b == 1) next_state = SAB;
    if (next_state == SB and a == 1) next_state = SAB;
    if (next_state == SAB) next_state = IDLE;
    cur_state = next_state;
  end
end

// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_
================================================================
