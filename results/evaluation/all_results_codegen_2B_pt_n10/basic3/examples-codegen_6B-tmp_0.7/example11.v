// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  begin
    if(sel)
      pos = in;
  end
end

module sync_divider() // divides the clock rate by the divisor, and resets to zero
  // if more than one clock cycle has passed in the same direction
  // Note: the clock frequency has been reduced by two to make this work
  reg [3:0] div;
  always @(posedge clk)
    div = ((div + 1) & 127) | (div & 128);
end

// Synchronization module. This is a generic synchronization module
// that can be used to generate two streams of pulses synchronously.
// The pulse streams are generated by the two priority encoders above,
// and can be used to synchronize two synchronized processes.
module sync_module(
  input reg [1:0] sel1endmodule
