example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [3:0] out; 
assign out = ( pos[0] | ( in[0] << 1 ))  & 0b111^ 0b11^ ( rmatrix[pos[1]] ) ? 1 : 0; 
);


================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to pos
assign pos = 1'b0
# clamp pos to [0, 63] and sel=1 to respective bits and sel=0 to zero
wire b
wire a;

endcase 


================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos1 = (in[0]||in[1])?1b:0b;
assign roler1 = (in[0]||in[1])?in[0]:0b;
assign param@pos1 = {1b,5b,9b};
)

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
    
wire q;
// "n" is the size of the "in" input.
    
always @(posedge in[1])  
// Assign position based on input and assign "n" to q
    q <= if ( in[1] ) 
         ( "00" & n & 
           "11" & (q>=3) &
           "00" & (q>=2) &
           (in[0] & in[1]) &
           q
         ) else
         ( "01" & n &
           "10" & (q>=3) &
           "10" & (q>=2) &
           "01" & q
         ) else
         ( "10" & n &
           "11" & (q>=3) &
           "01" & (q>=2) &
           "
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = +(in[3] | in[2]+in[1]+in[0])<<2;
);
void main(){
    pos = 1;
    priority_encoder <= (1,1,0);
}

#include "registers/register_my-program.h"
const attribute MAXLINE=25;
/*
I/O pin mapping
printer:
gpio_1----out----p_62
------------------------------------------------------------------
vt320:
gpio_2----agc---p_63
dt|     DS|DS|DS|DS|DS|DS|DS|SP|DS|PC -----------FCR--------
---S---S---S---S---S---S---S---S------------------------------
          agc
  8xb   fs'|   fo'|rs   21   22   23   24   25   26   27   28
================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out = b[pos];

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = in[BITS_1BIT[0:0]:1] ^ (FIELD_BOOL1[0:0] << 1);     
wire 
[] decode_args[63] dump_opts[63];

wire 
[] out_to_dl_sel;

/* Select clock input specified in @$PRIORITY*/
wire general_timer4_in_4;
reg [2:0] dcomp;

wire general_timer4_out;
out [2:0] out_bits;

// Priority encoder
cap @"out_to_dl_sel"
	sel<bool> out_to_dl_sel;
// select internal clock or general_timer4
wire internal_clock_sel;

reg general_timer4_freq_sel; // general_timer4 clock in or internal_clock
reg [14
================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
algorithm
always @ (*)
begin
assign b=in & 1;
end
begin
assign out=sel^b;
end

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (others=>in_valid, !pos ) 
 {{0'd(pos[!(in & 3)])<<0}pos<=11}, 
 // log from: 3 bits including the MSB and bits required for ordering!
 ldb0 cas3, [mpnat.mem, in, pos]#1 ; 
 // go past the MSB in the next line
 cas3_bits.l  [pos]#3, pos < 5, (in &~pos[2L])>>5 | (in & pos[3L]) << 5 ; 
// dpb only map 4 bits and 'structadram#10' covers 4 bits
 cas3_low.l typos 0 4, b #0
 // 'codeword' only maps 0..31
	sc_logic r##(1)[31],w###(0); 
 w##(0) <=
================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
posedge posedge;
// Enable the clock of the input pin, if it is high
input [3:2] clk  = in[1] ? 2'b01  : 2'b00;
// Include the clock-ready signal, if it is high
posedge clkr;
// If in[2] is high disable rst
posedge clkrst;
// Defines the bit number of the rising edge of the selected clock
relay bit;  
// Define the output signals of the startup state
reg [1:0] output;
// The priority encoder outputs one of three possible phases. The order is determined by the && operator
// This field selects which phase is used to output some specific bit
reg [3:2] &select;      
// When &select=0 output the selected order from top to bottom. When &select=1 the opposite.
posedge posed
================================================================
