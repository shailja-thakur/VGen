example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//  When reset is high, q is always 0.
//

initial begin
    clk <= 1;
    slowena <= 1;
    q = 0;
    reg[3] <= q;
end;

initial begin
    while (slowena)
    {
        q[1] <= q[0] + 1;
        q[2] <= q[0] + 1;
        q <= q[0] + 1;
    }
end;

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, return q.

// On the negative edge of the clock:
// if slowena is high, increment the output q by one.
// Otherwise, return q.

// Whenever q is 9, increment the output q by 10.

wire [3:0] q;

// ----------------------------------------------------------------------------
// Function declarations
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Utility Functions
// ----------------------------------------------------------------------------

// The reference for byte operations is:
//   http://www.graphics.cornell.edu/~bjw/bitsandwords.html

// Bitwise operations are performed on each bit of the inputs.
// For example, "input x" is "x[7:0]", while "input y" is "y[7:0]".

// 32-bit operations are performed on each byte of the inputs.
// For example, "input x" is "x[
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q[3:0] < 10) {
            q[3:0] = q[3:0] + 1;
        }
    }

always @(posedge clk)
    if (slowena) {
        if (reset) {
            if (q[3:0] == 9)
                q[3:0] = 0;
        } else if (q[3:0] == 0) {
            if (q[2:1] == 0)
                q[2:0] = 1;
            else if (q[2:1] == 1)
                q[2:0] = 2;
            else if (q[2:1] ==
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// q = q + 1
// At the negative edge of the clock:
// if ena is low, reset the output q to 9.
// Otherwise, only increment the output q if the ena input is high and q is not 0.

always @(posedge clk)
    if (reset) {
        q[3:0] = 0;
    } else {
        if (slowena) {
            if (q[3:0] != 9) {
                q[3:0] = q[3:0] + 1;
            }
        } else {
            if (q[3:0] != 0) {
                q[3:0] = q[3:0] + 1;
            }
        }
    }

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
wire input [6:0];

initial begin
    q = 0;
    slowena <= 1;
    clk <= 1;
end

always @(posedge clk)
    if (slowena && (((input[5] ^ input[4]) ^ input[3]) ^ input[2] ^ input[1] ^ input[0] ^ input[7] ^ input[6] ^ input[5]))
        q <= q + 1;

end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (slowena && !reset) {
        q[3:0] = q[3:0] + 1;
    }
end

// On the negative edge of the clock:
// increment the output q unless it is 0.
always @(negedge clk) begin
    if (reset && (!slowena) && q[3:0] == 0) {
        q[3:0] = 9;
    }
end
);


int main() {
    count_slow clk(clk, reset);

    for (int i = 0; i < 10; i++) {
        wait(1);
        clk.write(10-i);
    }
    wait(1);
    clk.write(10);

    return 0;
}

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena)
        q = q + 1;

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena == 1) {
        q[3] = q[2] + 1;
        q[2] = q[1] + 1;
        q[1] = q[0] + 1;
        q[0] = q[3] + 1;
    }


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena) {
        if (!rst) {
            q[3:0] = 0;
        }
    } else {
        if (rst) {
            q[3:0] = 0;
        } else if (q[3:0] < 9) {
            q[3:0] = q[3:0] + 1;
        }
    }

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 0. 
always @(negedge clk)
    if (slowena) {
        if (rst) {
            q[3:0] = 0;
        } else if (q[3:0]
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena) q <= q + 1;

// On the positive edge of the slow
// If reset is high, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge slowena)
    if (slowena) q <= q + 1;

// On the negative edge of the clock:
// if reset is low, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is low and q is not 0.
always @(negedge clk)
    if (reset) q <= 0;

// On the negative edge of the slow
// If reset is low, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is low.
always @
================================================================
