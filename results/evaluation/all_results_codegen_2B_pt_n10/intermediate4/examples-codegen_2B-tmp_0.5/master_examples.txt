example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset) next_state = 0;
    else if (in) next_state = 1;
    else next_state = 0;
    if (reset) present_state = 0;
    else if (in) present_state = next_state;
    else present_state = present_state | next_state;
    out = (present_state & 1) ? 1 : 0;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (~clk && reset)
        present_state = 0;
    else if (~clk)
        present_state = 1;
    else
        present_state = next_state;
    next_state = (present_state == 0 ? 1 : 0);
    out = (present_state == 1 ? 1 : 0);

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    next_state = 0;
    out = 1;
    present_state = 0;
    clk <= 1;
    reset <= 1;
    in <= 0;
end

initial begin
    next_state = 0;
    out = 0;
    present_state = 0;
    clk <= 1;
    reset <= 1;
    in <= 1;
end

always @(posedge clk)
    if (reset == 1)
        present_state = 0;
    else if (in == 1)
        present_state = 1;
    else
        present_state = next_state;
    next_state = present_state;
    out = out & present_state;
end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
    {
        reset = 0;
        out = 0;
        present_state = 0;
        next_state = 0;
    }
    else
    {
        if (in == 1)
        {
            if (present_state == 0)
            {
                out = 1;
                next_state = 1;
            }
            else
            {
                out = 0;
                next_state = 0;
            }
        }
        else
        {
            if (present_state == 1)
            {
                out = 1;
                next_state = 1;
            }
            else
            {
                out = 0;
                next_state = 0;
            }
        }
        present_state = next_state;
    }
end
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset == 1)
        reset = 0;
    if (reset == 0)
        present_state = 0;
    else
        present_state = reset;
    if (in == 1)
    {
        if (present_state == 0)
            out = 1;
        else
            out = 0;
        next_state = 0;
    }
    else
    {
        if (present_state == 0)
            out = 0;
        else
            out = 1;
        next_state = 1;
    }
end
begin
    if (present_state == 1)
        out = 1;
    else
        out = 0;
end
end
""");

#define DATAREG(x) "reg " x " = 0;"
#define DAT
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  // Start a transition
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }

  // If in=1, go to next state
  if (in == 1)
  {
    next_state = 1;
  }

  // If in=0, go to next state
  if (in == 0)
  {
    next_state = 0;
  }

  // If in=1, go to next state
  if (reset == 1)
  {
    next_state = 0;
  }

  // If in=0, go to next state
  if (reset == 0)
  {
    next_state = 1;
  }

  // Transition
  if (next_state != present_state)
  
================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk,posedge reset)
    if (reset == 1) {
        next_state = 0;
        present_state = 0;
    }
    else {
        next_state = present_state;
    }
    out = (present_state == 0) ? 1 : 0;
    present_state = next_state;

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign present_state = 0;
assign next_state = 0;

always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    out = 1;
    next_state = 0;
    present_state = 0;
  }
  else
  {
    out = 0;
    next_state = 1;
    present_state = 1;
  }
}

always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    out = in;
    next_state = present_state;
    present_state = next_state;
  }
}

always @(posedge cl
================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    out = 0;
    next_state = 0;
    present_state = 0;
    in = 1;
end
initial begin
    out = 1;
    next_state = 1;
    present_state = 1;
    in = 0;
end
always @(posedge clk)
    if (reset) begin
        next_state = 0;
    end
    if (in) begin
        next_state = present_state;
    end
    if (reset && in) begin
        next_state = 1;
    end
    if (reset && !in) begin
        next_state = 0;
    end
    if (reset) begin
        out = 0;
    end
    if (in) begin
        out = 1;
    end
end

// Design a Moore state machine with two states 0 and
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset)
        next_state = 0;
    else if (in)
        next_state = 1;
    else
        next_state = 0;
    out = next_state;

================================================================
