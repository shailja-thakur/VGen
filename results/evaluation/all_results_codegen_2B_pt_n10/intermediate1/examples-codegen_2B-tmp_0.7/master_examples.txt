example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// half_adder is a half-adder with a carry-out and a final carry-out.
// The state of the half-adder is (x,y,z,carry) where x is the input a,
// y is the input b, z is the output sum, and carry is the carry-out.
// The carry-out is a boolean that indicates whether error occurred.
// The half-adder adds two bits and produces a sum and carry-out.
// The carry-out is one-based, which is to say, a value of 1 is the carry.
// The sum of a and b is 2*a + b.
// The carry-out is the carry-out of the sum, 1 or 0.
// The carry-out is set to 1 if the sum is 1, 0 otherwise. The result is 0x80.
module half_adder_adder( 
input a
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// prepare inputs
reg a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18;

// on inputs
reg carry_out;

// on outputs
reg sum;

// Local variables
reg T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18;

assign a1 = a >> 1;
assign a2 = a1 & 0x1;
assign carry_out = a1 >> 1; // carry-out
assign a3 = a2 & 0x1;
assign a4
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 

// 4-bit registers
register unsigned reg_a, reg_b, reg_c, reg_d;

// inputs

// outputs

// state

// inputs

// outputs

// 4-bit registers
// state 

// inputs

// outputs

// 4-bit registers

// state 

// inputs

// outputs

// 4-bit registers

// state 

// inputs

// outputs

// 4-bit registers

// state 

// inputs

// outputs

// 4-bit registers

// state 

// inputs

// outputs

// 4-bit registers

// state 

// inputs

// outputs

// 4-bit registers

// state 

// inputs

// outputs

// 4-bit registers

// state 


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder has a carry-out.
module half_adder_carry_out( 
output cout, sum ); // The carry-out is the last value in the output.

// The half adder adds two bits and produces a sum and carry-out.
module half_adder_saturating( 
input a, b,
output cout, sum );

// This is a fixed-point adder.
module fixed_point_adder( 
input a, b,
output cout, sum );

// This is a fixed-point adder.
module fixed_point_adder_carry_out( 
output cout, sum ); // The carry-out is the last value in the output.

// This is a fixed-point adder.
module fixed_point_adder_saturating( 
input a, b,
output cout, sum );

================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input clk;
input carry;

input sum;

const int SIZE = 5;
const int BITS_PER_WORD = 32;

//******************************************************************************
// This is the half-adder, with a carry-out.
void half_adder_with_carry(
input a, 
input b, 
output cout, 
output sum, 
input clk, 
input carry) {
  // Check for carry-out
  if (carry == 0) {
    sum = a ^ b;
  } else {
    sum = a ^ b ^ carry;
  }
  cout = clk;
}

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

#include "term.h"

#include "../term.h"
#include "../term_adder.h"
#include "../sum_carry_o.h"

#include "../loop.h"
#include "../loop_adder.h"
#include "../loop_loop_adder.h"
#include "../loop_sum_carry_o.h"

#include "print.h"

int main() {

  printf( "The tests run with:\n" );
  print( "\t" ); print( library_print_flags() );

  printf( "The half_adder test:\n" );
  const int NUMBER_OF_INPUTS = 3;
  term< half_adder<> > aa[NUMBER_OF_INPUTS];
  sum_
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input bit_a,
input bit_b;

input carry_in,
input sum_in;

/*
    This is a 3-bit adder that adds three bits.
    This is a multiply-accumulate with carry-in and sum-out.
    The adder has three inputs:
    a, b and carry_in.
    a is the current input.
    b is the carry_in.
    carry_in is the carry_out.
    sum_out is the sum_out.
    The adder has three outputs:
    cout is the sum_out when it is positive.
    sum_out is the sum_out when it is negative.
*/
module three_adder( 
input a, b,
output cout, sum, carry_in, sum_out );

input bit_a,
input bit_b
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

begin
  sum = 0;
  if (a > 0) cout = 1;
  if (a > b) cout = 1;
  sum = a + b;
  cout = sum + (sum >> 1);
end

-------------------------------------------------------------------------------------
*/

#include <iostream>
#include <cstdlib>
#include "adder.h"

using namespace std;

Adder::Adder( )
{
	// Initialize the output, the sum, and the carry-out.
	sum = 0;
	carry_out = 0;
	output = 0;
}

void Adder::init_adder( 
	unsigned int a, 
	unsigned int b, 
	unsigned int& sum, 
	unsigned int& output, 
	unsigned int& carry_out )
{
	// Initialize
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void half_adder::execute( 
){
  // Add two bits together.
  sum.add( a, b );

  // Compute the carry-out.
  cout.set( sum.get_carry() );

  // Clear the carry bit.
  sum.clear_carry();
}

// =============================================================================
// DYNAMICALLY GENERATED MODULE IMPLEMENTATION:
// =============================================================================

void half_adder::execute()
{
  // Add two bits together.
  sum.add( a, b );

  // Compute the carry-out.
  cout.set( sum.get_carry() );

  // Clear the carry bit.
  sum.clear_carry();
}

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void
main()
{
  sum = 0;

  cout = a & b;
  sum += a | b;
  sum += a ^ b;

  while ( sum < 0xFFFF )
  {
    sum += a;
    sum += b;
  }

  while ( sum < 0x10000 )
  {
    sum += a;
    sum += b;
    sum += a ^ b;
  }

  while ( sum < 0x1000000 )
  {
    sum += a;
    sum += b;
    sum += a ^ b;
    sum += a ^ b;
  }

  while ( sum < 0x100000000 )
  {
    sum += a;
    sum += b;
    sum += a ^ b;
    sum += a ^ b;
    sum += a ^ b;
  
================================================================
