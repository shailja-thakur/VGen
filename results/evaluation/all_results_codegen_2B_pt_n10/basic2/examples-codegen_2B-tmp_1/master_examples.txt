example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assIGN input >= = a & b;

    // place the outcome of the AND into out
    assIGN out, < assignment(out,a,b);


================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 
    task repeatable_and
    {
        while (true) {
            out<$rst(0);          
	    wait();
	    out<$rst(0);           
            out<$rst(1);          
	    wait();
	    out<$rst(1); 
        }
    }


================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    
    assign out = a + b; 
  
  //Design function of and gate. (2)
  
  subroutine and_gate( a, b, out )
  {
    input[7:0] a(7 to 0); // Input of a
    input[7:0] b(7 to 0); // Input of b
    output out;
    reserved[7:0] out(7 to 0);   // For storing output denested

    // Denested OR function; outline of the OR function  
    
    _block    
    and.guard = a == 0
     or.guard  = b == 0
         
         acquire::sem::disqualify(out ); // // Not guard = status of output
         and.trigger = b == 1
                    or.trigger = a == 1     
     release::reto::ac
================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    void and_gate::run() {
       out = and( a, b );
   }

    // keep the inputs from outside the module invalid.
    void and_gate::reset() {
   }


================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

function main()
    out := and_gate( IN0, IN1, OUT );


================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate(
    aIn = lsb(in1), 
    bIn = lsb(in2), 
    outOut = nor(aIn, bIn)
    );
================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

module gate = and_gate( 
    input[ fpm1:2 -> px
          ,, 4 -> cx, 2 -> cy ] 
    output[ fpm1:2 -> px,
            ,, 4 -> cx, 2 -> cy ]  
);


================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

    var out: and_gate 

    // when a and b are both true, program 1 executes 

    when a = 1, b = 1
        out = true;

    // when a is 1, but not b, program 2 executes 

    when a = 1, not b
        out = false;


    // when neither is true, program 3 executes 

    when a == 0 
        and b == 0 
        out = 0;


    and_gate
    universe
    input a, b, out;

  and_gate:
	$display("in and_gate for $a and $b");
	$display("out for $out");

  case when a = 1:
    show ("a is 1", 1);
  case when b == 1:
    show ("b is 1", 1);
  case when b == 0:

================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out


================================================================
