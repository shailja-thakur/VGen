example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate( 
    a, 
    b, 
    out 
    )
    
    // output out is true when both a and b are true

// And Gate example
// input a and b
// output out is true when both a and b are true

================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    // the output is 1 when a and b are both 1
    // the output is 0 when a and b are both 0
    // the output is 0 when a is 1 and b is 0
    // the output is 1 when a is 0 and b is 1

// [ 1 ]
// [ 0 ]
// [ 0 ]
// [ 0 ]
// [ 1 ]
// [ 0 ]

// [ 1 ]
// [ 1 ]
// [ 0 ]
// [ 0 ]
// [ 0 ]

// [ 1 ]
// [ 0 ]
// [ 1 ]
// [ 1 ]
// [ 1 ]

// [ 1 ]
// [ 0 ]
// [ 1 ]
// [ 1 ]
// [ 1 ]

// [ 1 ]
// [ 0 ]
// [ 0 ]
// [ 1 ]
// [ 1 ]

// [ 1 ]

================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

function and_gate( 
    input a, 
    input b, 
    output out )
{
    // Declare a variable to hold the result of the AND
    var result = 0;

    // If a is 1 and b is 1, set the result to 1
    if ( a == 1 && b == 1 ) {
        out = 1;
    }
    // Else if a is 0 and b is 0, set the result to 0
    else if ( a == 0 && b == 0 ) {
        out = 0;
    }
    // Else, set the result to the AND of a and b
    else {
        out = a & b;
    }
}

================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate( 
    a, 
    b, 
    out );

// design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out

or_gate( 
    a, 
    b, 
    out );

// design a module that implements a NAND gate

module nand_gate( 
    input a, 
    input b, 
    output out );

    // assign the NAND of a and b to out

nand_gate( 
    a, 
    b, 
    out );

// design a module that implements a NOR gate

module nor_gate( 
    input a, 
    input b, 
    output out );


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( a, b, out ) =>
        out === a && out === b;

// Assign the AND gate to the input pins
and_gate(a,b,out) =>
    a && b
    ? out
    : out === a || out === b;

// Assign the AND gate to the output pin
and_gate(a,b,out) =>
    a && b && out === a && out === b;
================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( a, b, out )
    {
      if ( a == 1 && b == 1 )
        out = 1;
      else
        out = 0;
    }

//------------------------------------------------------------------------------

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out
    or_gate( a, b, out )
    {
      if ( a == 1 || b == 1 )
        out = 1;
      else
        out = 0;
    }

//------------------------------------------------------------------------------

module not_gate( 
    input a, 
    output out );

    // assign the NOT of a to out
    not_gate( a, out )
    {
      if ( a == 0 )
        out = 1;
      else
        out =
================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

    // function definition
    input and_gate( input a, input b, output out );

// Design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assing the OR of a and b to out

    // function definition
    input or_gate( input a, input b, output out );

// Design a module that implements a NAND gate

module nand_gate( 
    input a, 
    input b, 
    output out );

    // assing the NAND of a and b to out

    // function definition
    input nand_gate( input a, input b, output out );

// Design a module that implements a NOR gate

module nor_gate( 
    input a, 
    input b, 
    output out
================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    // out is a wire

// design a module that implements an OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out
    // out is a wire

// design a module that implements an XOR gate

module xor_gate( 
    input a, 
    input b, 
    output out );

    // assign the XOR of a and b to out
    // out is a wire

// Design a module that implements a NAND gate

module nand_gate( 
    input a, 
    input b, 
    output out );

    // assign the NAND of a and b to out
    // out is a wire

// Design a module that implements a NOR gate

module nor_gate( 
    input
================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

and_gate( 
    input a, 
    input b, 
    output out ) {
  
  out = a & b;
}

// Design a module that implements a XOR gate

module xor_gate( 
    input a, 
    input b, 
    output out );

    // assign the XOR of a and b to out

xor_gate( 
    input a, 
    input b, 
    output out ) {
  
  out = a ^ b;
}

// Design a module that implements a OR gate

module or_gate( 
    input a, 
    input b, 
    output out );

    // assign the OR of a and b to out

or_gate( 
    input a, 
    input b, 
    output out ) {

================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    and_gate( a, b, out );



================================================================
