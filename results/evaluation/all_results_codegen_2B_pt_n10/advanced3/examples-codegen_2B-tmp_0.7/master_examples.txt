example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) {
        present_state = IDLE;
    } else {
        present_state = IDLE;
        if (reset) next_state = IDLE;
        if (x) {
            if (present_state == IDLE) next_state = S1;
            if (present_state == S1) next_state = S10;
            if (present_state == S10) next_state = S101;
        }
    }
    z <= next_state;

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin 
    next_state = IDLE;
    present_state = IDLE;
end

always @(posedge clk) begin
    if (reset) next_state = IDLE;
    else if (x==1) next_state = S1;
    else if (x==0) next_state = S10;
    else next_state = S101;
    present_state = next_state;
    z = (next_state==IDLE);
end

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) begin
    next_state = IDLE;
    z = 0;
    present_state = IDLE;
end

always @(*) begin
    if ( clk == 1 && reset == 0 )
        next_state = IDLE;
    else if ( x[1] )
    {
        if ( present_state == IDLE )
            next_state = S1;
        else if ( present_state == S1 )
            next_state = S10;
        else if ( present_state == S10 )
            next_state = S101;
        else
            next_state = IDLE;
    }
    else
    {
        if ( present_state == IDLE )
            next_state = IDLE;
        else if ( present_state == S1 )
            next_state = IDLE;
        
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    next_state = IDLE;
    present_state = IDLE;
    z = 1;
end

always @(posedge clk)
    if (x == 1)
    {
        if (next_state == IDLE)
        {
            if (reset == 0)
            {
                next_state = S1;
            }
            else
            {
                next_state = S10;
            }
        }
        else if (next_state == S1)
        {
            if (reset == 0)
            {
                next_state = S101;
            }
            else
            {
                next_state = IDLE;
            }
        }
        else if (next_state == S10)
        {
            if (reset == 0)
            {
                next_state = ID
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @*
begin
    next_state = IDLE;
    
    if (reset) next_state = IDLE;
    
    if (clk) 
        if (x == 1) 
            if (present_state == IDLE)
                next_state = S1;
            else 
                next_state = IDLE;
        else
            if (present_state == S1) 
                next_state = IDLE;
            else 
                next_state = IDLE;
    else 
        if (x == 1)
            if (present_state == IDLE)
                next_state = S10;
            else
                next_state = IDLE;
        else
            if (present_state == S10) 
                next_state = IDLE;
            else 
                next_state = IDLE;
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) present_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
    z = (next_state == IDLE);

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
  if ((present_state == IDLE) && (x == 1))
    next_state = S1;
  else
    next_state = present_state;
  //if ((next_state == S1) && (x == 1) && (present_state == IDLE))
  //  next_state = S10;
  //else
  //  next_state = present_state;
  //if ((next_state == S1) && (x == 0) && (present_state == IDLE))
  //  next_state = S101;
  //else
  //  next_state = present_state;
  z = next_state;
end

// Wish to change to a block of simple functions in the future
void main( void )
{
  clk = 0;
  
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
    case S101:
        if (reset == 1) {
            z <= 1;
            next_state <= IDLE;
        } else {
            if (x == 1) {
                z <= 1;
                present_state <= S101;
                next_state <= S10;
            } else {
                z <= 0;
                next_state <= IDLE;
            }
        }
    endcase

always @(posedge clk)
    case S10:
        if (reset == 1) {
            z <= 1;
            next_state <= IDLE;
        } else {
            if (x == 0) {
                z <= 1;
                present_state <= S10;
                next_state <= S101;
            } else {
                z <= 0;
                next
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
  if (reset == '0')
    present_state <= IDLE;
  else
    present_state <= next_state;
  next_state <= present_state;
end

always @(posedge clk)
begin
  if (x == '1')
    present_state <= S1;
  else if (x == '0')
    present_state <= S10;
  else
    present_state <= IDLE;
  z <= (present_state == S101);
end
end

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @*
begin
    next_state <= IDLE;
    present_state <= IDLE;
    if ~clk'event and reset = '1' and x = '0' then
        next_state <= S1;
    elsif clk'event and x = '0' then
        next_state <= IDLE;
    elsif ~clk'event and reset = '1' and x = '1' then
        next_state <= S1;
    elsif clk'event and x = '1' then
        next_state <= S10;
    end if;
    if reset = '0' then
        present_state <= IDLE;
    else
        if reset = '1' and x = '0' then
            if x = '0' and present_state = IDLE then
                next_state <= IDLE;

================================================================
