example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    next_state = IDLE;
    present_state = IDLE;
    z = 1;
end

always @(posedge clk)
    if (rst) begin
        next_state = IDLE;
        z = 1;
    end

always @(posedge clk)
    if (reset) begin
        next_state = IDLE;
        z = 1;
    end

always @(posedge clk)
    if (x) begin
        if (present_state == IDLE) begin
            next_state = S1;
        end
        if (present_state == S1) begin
            next_state = S10;
        end
        if (present_state == S10) begin
            next_state = S101;
        end
    end
    else begin
        if (
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (*)
begin
    if (x == 1)
        next_state = S1;
    else if (x == 0)
        next_state = S10;
    else
        next_state = IDLE;
    if (present_state == IDLE) {
        if (rst == 1)
            present_state = next_state;
        else {
            present_state = IDLE;
            next_state = IDLE;
        }
    }
    if (clk == 1)
        present_state = next_state;
end


always @ (*)
begin
    if (z == 1) {
        if (present_state == IDLE) {
            if (x == 1)
                next_state = S1;
            else if (x == 0)
                next_state = S10;
            
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    next_state=IDLE;
    present_state=IDLE;
end

always @(posedge clk) begin
    if(reset == 0)
    {
        if(x == 0)
        {
            present_state=IDLE;
        }
        else
        {
            next_state=IDLE;
        }
    }
    else
    {
        if(x == 1)
        {
            next_state=S1;
        }
        else
        {
            next_state=IDLE;
        }
    }
    z=next_state;
end
end

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin
    if (clk==1)
        next_state = IDLE;
    else
        next_state = present_state;
    if (reset==1)
        z = 1;
    else
        z = 0;
    present_state = next_state;
end

always @(*)
begin
    if (z==1)
        next_state = S1;
    else
        next_state = IDLE;
    if (x==1)
        next_state = S10;
    else
        next_state = IDLE;
    if (x==0)
        next_state = S101;
    else
        next_state = IDLE;
end

always @(*)
begin
    if (reset==1)
        z = 1;
    else
        z = 0
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) begin
  if (clk == 1) present_state = IDLE;
  else
  begin
    if (reset == 1) present_state = IDLE;
    else if (x == 1) present_state = S1;
    else if (x == 0) present_state = S10;
    else present_state = IDLE;
  end
  if (present_state == IDLE)
  begin
    next_state = S1;
  end
  if (present_state == S1)
  begin
    if (x == 0) next_state = S10;
    else next_state = S101;
  end
  if (present_state == S10)
  begin
    if (x == 1) next_state = S101;
    else next_state = IDLE;
  end
  
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset == 0)
    z = 0;
  else
    z = 1;
  present_state = IDLE;
  next_state = IDLE;
  if (x == 1)
    present_state = S1;
  else if (x == 0)
    present_state = S10;
  else
    present_state = S101;
end

always @(posedge clk) begin
  if (reset == 0)
    z = 0;
  else
    z = 1;
  if (present_state == IDLE)
    next_state = S1;
  else if (present_state == S1)
    next_state = S10;
  else if (present_state == S10)
    next_state = S101;
  else if
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
{
  next_state = IDLE;
  if (reset) next_state = IDLE;
  if (reset && (x == 1)) next_state = S1;
  if (reset && (x == 0)) next_state = S10;
  if (x == 1) next_state = S101;
}


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
    if (reset == 1) 
    {
        next_state = IDLE;
        z = 0;
    } 
    else if (x == 1)
    {
        if (next_state == IDLE)
        {
            next_state = S1;
        }
        else if (next_state == S1)
        {
            next_state = S10;
        }
        else if (next_state == S10)
        {
            next_state = S101;
        }
    }
    else
    {
        if (next_state == IDLE)
        {
            next_state = IDLE;
        }
    }
end

// here we have a finite state machine that recognizes the sequence 101 on the input signal x. 
//
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (x == 1)
    {
        if (reset == 1)
        {
            next_state = IDLE;
        }
        else
        {
            next_state = S1;
        }
    }
    else
    {
        if (reset == 1)
        {
            next_state = IDLE;
        }
        else
        {
            next_state = S10;
        }
    }

always @(posedge clk)
    if (reset == 0)
    {
        next_state = IDLE;
    }

always @(posedge clk)
    if (x == 0)
    {
        if (reset == 1)
        {
            next_state = IDLE;
        }
        else
        {
            next
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        present_state = IDLE;
        next_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            if (clk == 1)
            {
                present_state = S1;
                next_state = S10;
            }
            else
            {
                present_state = IDLE;
                next_state = S1;
            }
        }
        else if (present_state == S1)
        {
            if (clk == 1)
            {
                present_state = S10;
                next_state = S101;
            }
            else
            {
                present_state = IDLE;
                next_state
================================================================
