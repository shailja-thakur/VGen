example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 

wire [4:0] in;

mux mux_in;

mux_in [4:0] a;
mux_in [4:0] b;

mux_in [4:0] in;

mux_out [4:0] out;

mux_out [4:0] a;
mux_out [4:0] b;

mux_out [4:0] out;

`

func TestMux(t *testing.T) {
	p := NewProg()
	p.Add(NewInstruction(0, "mux", "mux", "a,b,sel,out"))
	p.Add(NewInstruction
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] c;

assign out[4:0] = ( a == sel ? a : b );

assign c = a;

always @(posedge clk)
begin
    if (sel == 0)
        out[0] = a;
    else
        out[0] = b;
end

always @(posedge clk)
begin
    if (sel == 1)
        out[1] = b;
    else
        out[1] = a;
end

always @(posedge clk)
begin
    if (sel == 2)
        out[2] = a;
    else
        out[2] = b;
end

always @(posedge clk)
begin
    if (sel == 3)
        out[3] = b;
    else
================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
begin
    if (sel == 0)
        out[0] = a;
    else
        out[0] = b;
end

// The following is the same as the above, except that the
// multiplexer is inverted.
module mux_inv( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
begin
    if (sel == 0)
        out[0] = b;
    else
        out[0] = a;
end

// The following is the same as the above, except that the
// multiplexer is inverted.
module mux_inv_inv
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Multiplexer with a single input port.
module mux_port( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Multiplexer with a single output port.
module mux_port_out( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

//
================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

// The following design is not correct because of the fact that
// the output is not a multiplexer.
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0
================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-2 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-4 multiplexer.
module mux4( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-8 multiplexer.
module mux8( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0,
================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 

wire [3:0] c;

mux mux_1(
a, b,
sel,
out );

mux mux_2(
c,
sel,
out );

mux mux_3(
a, c,
sel,
out );

mux mux_4(
b, c,
sel,
out );

mux mux_5(
a, b, c,
sel,
out );

mux mux_6(
a, b, c, d,
sel,
out );

mux mux_7(
a, b, c, d, e,
sel,
out );

mux mux_8(
a
================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
// When sel=4, assign a to out. 
// When sel=5, assign b to out. 
// When sel=6, assign a to out. 
// When sel=7, assign b to out. 
// When sel=8, assign a to out. 
// When sel=9, assign b to out. 
// When sel=10, assign a to out. 
// When sel=11, assign b to out. 
// When sel=12, assign a to out. 
// When sel=13, assign b to out. 
// When sel=14, assign a to out. 
// When sel=15, assign b to out. 
// When
================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 2-to-1 demultiplexer.
module demux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 4-to-1 multiplexer.
module mux4( 
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign c to out.
// When sel=3, assign d to out.

// Design a 4-to-1 demultiplexer.
module demux4( 
================================================================
