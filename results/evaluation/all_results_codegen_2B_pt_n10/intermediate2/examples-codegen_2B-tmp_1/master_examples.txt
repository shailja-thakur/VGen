example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 


================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign counter.q = ( _not reset | q == 12 )? 1 : ( q + 1 );

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk) 
    if (!reset) 
        q = 1;	
    else if (q == 12)
        q = 1; 
    else 
        q = q + 1; 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
void main(void)
{
    initializations(); 
    counter clock_gen;

    clock_gen_edge event;
    #pragma vector=clock_gen0
    #pragma handler=clock_gen0
    #pragma module_stats enable=1
        event{rpcc.Clock <- 1};
    #pragma vector=clock_gen1
    #pragma handler=clock_gen1
    #pragma module_stats enable=1
        event{rpcc.Clock <- 1};
    #pragma vector=clock_gen2
    #pragma handler=clock_gen2
    #pragma module_stats enable=1
        event{rpcc.Clock <- 1};
    #pragma vector=clock_gen3
    #pragma handler=clock_gen3
    #
================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
  // first read counter and assign
  if (reset) q = 1;
  else if ( q[CLKcntr] == 2) {
    q(CLKcntr) = 1;
  } else {
    q(CLKcntr) = q[CLKcntr] + 1;
  }
end
); 

void interupt(
    input clk,
    input reset,
    output reg [10:0] smsr,
    output reg [4:0] stdcr,
    output reg [5:0] stdr,
    output reg [7:0] stdh,
    output reg [7:0] interrupt_status
);

reg [3:0]  q; 

request update_rom[0:1] rom_update; 
================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

wire [2::8] tmp; // special case: temporary storage for the counter

bool requests[3]; // array of bool timestamps; when true, receive a request
static counter clock(clock p0, reset p1, q p2); // wrapper to avoid bloody pin calls

#THESMADES
#ENDTHESMADES

// this module counter has three inputs: requests[3]


component counter(
    input clk,
    input reset,
    output reg [3:0] q
); 

void reset_logic(event reset_event) {
    if (reset) {
        q = 3;
    }
}

#A0 FSM
#1:VDC:CFG
#N:PULLGO
#N:GDRS
#I;IN
#R;PD

#C LOWER =
================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

y gate( clk,
       reset, 
       register reg <14:0> q,
       q' IMPDEV width[3:0]
); 

x1 gate( clk,
        reset,
        register reg <16:0> w1,
        register inter sensor v1
); 
x2 gate( clk,
        reset,
        register reg <16:0> w2,
        register inter sensor v2
); 
xall gate( clk,
          reset,
          register reg <16:0> wx,
          register inter sensor vx
); 
y1 gate( clk,
        reset,
        register reg [14:0] q1,
        register inter sensor v1
); 
y2 gate( clk,
        reset,
        register reg [14:0] q2,
================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
void module::counter::proc() {
  if (reset == true)  // if on reset, assing 1 to 1,2,3,4,5,6,7,8,9,10,11,12
    q = 1;            // assign 1
  else if (name == "counter")
    log.log("reset q to 1 on counter " + name + ", on clock " + clk.name());
  else if (q==12)
    q=1;               // assign 1 if q is 12
  else
    q+=1;              // else increment by 1 
}

///////// 
/*
  
 
*/
================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
void main (void)
{
  if(clk == 1) {
      if(reset == 1) q = 0b011111;
      else if(q == 12) q = 0b011111;
      else q++;
  }
  
  // no explicit BUSY: send last value 
  $display(q);  
  wait();
  // no explicit BUSY: send clock pulse to LCD controller 
  wait(clk == 1);
}

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
    if (// reset is low and q is 1
        (reset == 1) && (q == 1)
        // or q is 13 and clock is up
        || (q == 6 && !clk) || 
         (q == 12 && !clk)
        // or q if incrementing 
        || (q < 12 
            // and clock is down
            && !clk)
       )
        q = 1;
    else if (q < 6)
        q = q +1;
end
// latch q on the falling edge of clock 
always @(negedge clk)
begin 
    if (clk && (q == 7) && (~reset))
        q = 2;
end 
end 
analogWrite(q, 0b110000); // 0b0000110/
================================================================
