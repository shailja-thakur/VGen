example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset) // on reset
	begin
	q <= 4'b0001;
	end
	else if(q == 12'b1111111111111111) // if q is 13,
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 1; // increment q
	end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk or posedge reset)
begin
	if (reset) q = 4'b0001;
	else if(q == 12'b1111111111111111) q = 4'b0001;
	else 
	begin
	if(q == 4'b0001)
	q = 4'b0000;
	else 
	q = q + 1;
	end
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
	if (reset) 
	begin 
	q <= 4'b0001; 	
	end 
	else if (q == 4'b1111) 
	begin 
	q <= 4'b0001; 	
	end 
	else 
	begin 
	q <= q + 4'b0001; 	
	end 
end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) //case 0
	q <= 1;
	 
	else if (q == 12) //case 1
	q <= 1;
	
	else //case 2
	q <= q + 1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk or posedge reset)
begin
	if (reset) // if (reset)
	begin 
 	 	q <= 4'b0001; // reset to 0001
	end
	else if (q == 4'd12) // if (q == 12)
	begin
	 	q <= 4'b0001; //reset to 0001
	end
	// I don't know if this will work in all cases. I will put it there for now,
	// although I think it will.
	else
	begin
	 	q <= q + 4'b0001; // increment q by 1
	end
end

================================================================
