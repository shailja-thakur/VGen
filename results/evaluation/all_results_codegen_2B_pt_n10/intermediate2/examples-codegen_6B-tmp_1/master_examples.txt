example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
if(reset | q == 12'hc0) 
	q <= 4'h1; 
else if (q == 8'hf0)
	q <= 4'hf;
	else
	q <= q + 4'h1;	

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset )
begin
	if (reset) //this is what you should use instead of posedge
	begin
	q <= 4'b1;
	end
	
	else if (q == 4'b1111) // a bug in the code (or the way I write it)
	begin 
	q <= 4'b1;
	end
	
	
	else 
	begin
	q <= q + 4'b1;
	end
	end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@( posedge clk )
begin
	if( reset )
	begin 
	q <= 4'b0001; 	
	end 
	else if( q == 4'b0110 ) 
	begin 
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 1;
	end 
end 

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset )
begin
 if ( reset ) q <= 1;
 else if ( q == 12'b111111111111111 ) q <= 1;
 else q <= q + 1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset)
//we've reached 12, then reset
begin
 if(reset) q<=4'b0001;
 else if (q == 4'b0101) q<=4'b0001;
 else if (q == 4'b1101) q<=4'b0001;
 else q<=q+4'b0001;
end

================================================================
