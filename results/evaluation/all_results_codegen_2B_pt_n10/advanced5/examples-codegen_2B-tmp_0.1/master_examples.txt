example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
    {
        if (a == 1)
            cur_state = SA;
        else if (b == 1)
            cur_state = SB;
        else
            cur_state = SAB;
    }
    next_state = cur_state;
    if (cur_state == SAB)
        z = 1;
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// This is an FSM module abro(
// input clk,
// input reset,
// input a,

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
    {
        cur_state = IDLE;
        next_state = IDLE;
    }
    else
    {
        if (a == 1)
        {
            if (b == 1)
            {
                next_state = SAB;
            }
            else
            {
                next_state = SA;
            }
        }
        else
        {
            if (b == 1)
            {
                next_state = SB;
            }
            else
            {
                next_state = IDLE;
            }
        }
    }
    if (cur_state != next_state)
    {
        z = next_state;
    }
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        cur_state = SAB;
        next_state = IDLE;
    }
    if (cur_state == SAB) {
        if (a == 1 && b == 1) {
            next_state = SAB;
        } else if (a == 1) {
            next_state = SA;
        } else if (b == 1) {
            next_state = SB;
        }
    }
    if (cur_state == SA) {
        if (a == 1) {
            next_state = SAB;
        } else if (b == 1) {
            next_state = SA;
        }
    }
    if (cur_state == SB) {
        if (a == 1) {
            next_state
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = cur_state;
    if ((a == 1) && (b == 1))
        next_state = SAB;
    if ((a == 1) && (b == 0))
        next_state = SA;
    if ((a == 0) && (b == 1))
        next_state = SB;
    if ((a == 0) && (b == 0))
        next_state = IDLE;
    cur_state = next_state;
    z <= cur_state;
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
