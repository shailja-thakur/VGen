example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is other states
always @ (clk, reset, a, b)
begin
if (a == z)
z = 1;
else if (b == z)
z = 1;
else if (a == 1)
z = 1;
else if (b == 1)
z = 1;
else if (cur_state == IDLE)
cur_state = SAB;
else if ((next_state == IDLE) && (cur_state == SAB))
next_state = SA;
else if ((next_state == IDLE) && (cur_state == SA))
next_state = SB;
else if ((next_state == IDLE) && (cur_state == SAB))
next_state = SAB;
else if ((next_state == IDLE) && (cur_state == SB))
next_
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire [7:0] z;
assign z = (cur_state == SAB) ? 1 : 0;
begin
next_state <= SA;
cur_state <= IDLE;
end
*/

// A NAND gate

/*
This is an NAND gate module

input clk,reset,a,b,z;
output clk,reset,z;
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    case(cur_state)
    begin
        if((a == 1) && (b == 1))
        {
            next_state = SAB;
        }
        else if(a == 1)
        {
            next_state = SA;
        }
        else if(b == 1)
        {
            next_state = SB;
        }
        else
        {
            next_state = IDLE;
        }
    end
    if(cur_state == IDLE)
    {
        //idle
        z = 0;
    }
    else if(cur_state == SA)
    {
        if(next_state == SAB)
        {
            z = 1;
        }
    }
    else if(cur_state == SB)
    {

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state = IDLE;
  next_state = IDLE;
end
begin
  if (a == 0)
    next_state = SA;
  else
    z = 1;

  if (b == 0)
    next_state = SB;
  else
    z = 1;

  if (cur_state == IDLE && a == 1)
    next_state = SAB;
  else
    z = 1;

  if (cur_state == SA && b == 1)
    next_state = SAB;
  else
    z = 1;

  if (cur_state == SB && a == 1)
    next_state = SAB;
  else
    z = 1;

  if (cur_state == SAB && b == 1)
    next_state =
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state = not ((a == 0) and (b == 0));
    next_state = not(cur_state);
end
always @(posedge reset)
begin
    if (reset != 0)
        cur_state = IDLE;
    else
        cur_state = next_state;
end
initial begin
    if (reset == 1)
        cur_state = IDLE;
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
    if (cur_state == IDLE) {
        next_state = IDLE;
    } else if (cur_state == SA) {
        next_state = SAB;
    } else if (cur_state == SB) {
        next_state = IDLE;
    } else if (cur_state == SAB) {
        next_state = SAB;
    }
    if (next_state != cur_state) {
        cur_state = next_state;
        z <= (cur_state == SAB);
    }

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @*
begin:
if ( next_state == SAB )
{
    z = 1;
    next_state = IDLE;
}

if ( next_state == SA )
{
    z = 1;
    next_state = IDLE;
}

if ( next_state == SB )
{
    z = 1;
    next_state = IDLE;
}

if ( next_state == SAB && a == 0 && b == 1 )
{
    z = 1;
    next_state = SAB;
}

if ( next_state == SA && a == 1 && b == 0 )
{
    z = 1;
    next_state = SA;
}

if ( next_state == SB && a == 1 && b == 1 )
{
    z = 1;
    next_state =
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if (reset == 1)
{
	cur_state = SB;
}
else
{
	if ((a == 1) && (b == 1))
	{
		if (cur_state == SAB)
		{
			cur_state = IDLE;
		}
		else
		{
			cur_state = SAB;
		}
	}
	else
	{
		if (cur_state == SB)
		{
			cur_state = SA;
		}
		else
		{
			cur_state = SB;
		}
	}
}
next_state = cur_state;
end
);
// This is a FSM for the logic of the decimal point on the inputs for which a and b are
// high at the same time.
module abro_decimal
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire [1:0] idle,xa,xb;
// The output z is high when 1 is received for signal a in any order.
// If cur_state is IDLE and a is high, state changes to SA
// If cur_state is IDLE, and a is high, state changes to SB
// If cur_state is SA, state changes to SB
// If cur_state is SB, state changes to IDLE
wire [1:0] a_high,b_high;
// The output z is high when 1 is received for signal b in any order.
// If cur_state is IDLE and b is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, state changes to SB
// If cur_state is SB, state changes to IDLE
wire [1:0] a_
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    case(next_state) :
        cur_state = (a == 1) ? sab :
                   (a == 0) ? IDLE :
                   (b == 1) ? sb :
                   (b == 0) ? IDLE :
                   (cur_state);
    endcase
    case(IDLE) :
        z = 1;
    endcase
    case(SAB) :
        z = 0;
    endcase
    case(SB) :
        z = 0;
    endcase
    case(SA) :
        z = 0;
    endcase
end
""",

# The trigger (rising/falling) input
"""
// This is an FSM
module abro_t(
input clk,
input reset,
input a,
input b,
output z
================================================================
