example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk) 
    // Write out the input priority chip command, and clock in the input mux command
sum_input_sel_funs {
    static const int sel_cnt = 32;
    static const bool sel_or = false;
    static const bool sel_and = true;
    output logic sel_and sel_or ^ in AND priority_sel[7]^priority_sel[6];
} sum_input_sel_fun( priority_sel[7], priority_sel[6] );
always @( 
        negedge clk 
)
begin
    const res_type res_bits = sum_input_sel_fun_val;
    res_type npos = ~res_bits[1..0];   // nibble to position of our nonpositive edge
    const int nbits = 8*
================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk || posedge i1)
  begin
  case (in) ++pos :
    out = 1; 
    break;
  end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk ) // clk_i is active high
void priority_encoder()
{ 
  if ( 0 && in[0] & in[1] )
  { 
    pos = 0;
  } else {
    pos = 1;
  }
}


================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( falling edge, ^rst )
  rvk <= (in[0] | ~(sel ^ 0x1)) & 2;
always @ ( rising edge, ^(in[0] ^ sel) ) ||(in[0]^sel) & b
  output NV1 pulses low to indicate a 1 bit in PAL, NCA, or M sequence;
  NV1 <= NV1;
never @(posedge ~sei)                // TODO -> or ~!interrupt == 0 ? 
  V1 <= ((30 [unsigned(rvk)]<in[0] ^ sel) | 1);

always @(posedge ~rising, input ~pullup) 
  rep(p_count) 
  {
    if (0)
    {
      delay(t1);
      dout <= b ^ !(rvk or ~st
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or ~clk)
  pos <= in[1] | ~sel;

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  begin
    in <= ~sel & in;
    if(sel) 
      pos[0] = b;
  end
end

// next_state constructor
reg [4:0] next_state(
  input [5:0] state,
  output reg dQdq 
  );

// MPL - Classic MuxAlign
reg [3:0] mux[3:0];
MuxAlign mux_alig(clk,srq,sel,mux);

// MPL4 - MuxptrA
MuxptrA(mux_alig[0],  mux_alig[3],// mux_alig[0:1]
        mux_alig[1],  mux_alig[4],// mux_alig[1:
================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
prio_enc = in[1]*3+1'b1;
always @(posedge clk) 
begin 
  if (sel) begin
    if (prio_enc) begin 
      // Set priori encoder to pointer to current bit.
      pos <= b;
    end
  end else begin
    // DON'TORTOUCH COPY from p7 to end for now.
    //b <= 0;
  end
end
================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst) begin
  if (in[in.IN_FST] == 1) begin
    sel := 0;
    dout := 0;
  end
  else begin
    sel := in[in.IN_SEL];
    dout |= ((sel == 0)? 128 : 0); // MSB set if low-nibble selected
  end
    if (sel == 0) begin
      dout <<= 1; // Shift to the left by one bit.
      dout &= 0x7; // Clear the last bit by ANDing with 1.
    end
    dout <<= d2_b[sel]; // x2 is highest bit and d2 is low-Nibble/LSB priority.
    pos <= dout; // Output bit fst_clk.
  end
end

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
begin 
	if(sel) begin 
		b <= in[2];
	end
end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge reset)
  b <= in[sel];

always @(posedge clk or posedge reset)
  reg[pos] <= 1'b0; //! default value if input not high

always @(posedge clk or posedge reset)
  if(sel) // send new bit
  {
	reg[pos] <= 1'b1;
	pos <= reg[pos] ^ in[sel]; // let new value propagate through
  }

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk)
  if (sel) begin
	 pri_mem(picrad)    <= b;
	 pos <= b;
  end

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk) priority_encoder(`INIT')
  out[1:0] = 0;
  priority_encoder(sel)
  begin
    if( in[1] && in[2] )               lane01 priority; 
    else if( !in[1] && !in[2] )        lane02 priority;
    else                            lane12 priority;
    priority_encoder(sel) <= s_low && reg_enable;
  end
end
`;

const checker = checkerLite
    .dataOut(regMux.dataOut)
    .dataIn(1)
    .resetOut(regMux.resetOut)
    .enableIn(regMux.enableOut)
    .readIn(1);

const assertAndCheck = (memory, expected, expression, expOrTrue) =>
================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
priority_encoder( const2410.I_sel_one, const2410.I_bit_b )
	LITERAL in, pos
	IF(const2410.I_bit_b) THEN
		c_fput( b, 1'b0 )
		c_fput( 31-4*(1'b1), in.G0 )
		c_fput( 31-4*(in.I), in.I )	
		c_fput( 32-4*(1'b1), in.G1 )
		c_fput( 32-4*(in.I), in.I )
	ELSE
		c_fput( 31-4*(1'b1), in.G0 )
		c_fput( 31-4*(in.I), in.I )	
    ENDIF 

================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos = (~(sel | in));

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
priority_encoder dip_sel = 0b00;
// The only 1-bit worth of output--important!
pos <= 0 ? 
out[0] <= 0 ? 0x00 : out[0]
: dip_sel != 0b00 || dip_sel != 0b10 ? out[0]
: out[0] <= 0 ? out[0]
: 
>= 0 ? 
(out[1] <= 0 ? 0x08 : out[1]
<< 2 )
+ ((out[0] & 0b11) | (out[1] & 0b11) << 1)
: out[0];


================================================================
example-15: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
	if (sel) begin
		pos <= 1'b1;
	end else begin
		case(in) begin
			pos <= 1'b0;
		end
	end
end

================================================================
example-16: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk or posedge rst)
  priority_encoder( in[2:0] ) 
      .assign(&pos[1:0],in[2:0]);
end

encoder_array( input 
	      [1:0] encoder_sel_RMSMmga, // Decoder A/B
	      output cpm_common.ca, // Counters A/B
	      output acc_data 
)
#end

edge_triggered begin
	non_reset.next			= 1'b0;
	idle_en.next			= 1'b0;
	or_state_sel.next			= 1'b0;
	idle_hwm_in.next			= 1'b0;
	idle_off.next			= 1'b0;
	in
================================================================
example-17: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge activity or negedge sck)
    if(select)
	pos <= (in ? 7 : 0);
endscope

module priority_decoder( 
input [4:0] b,
output reg [1:0] pos,
output reg pout ); 
// Always output 0 if in is zero.
always @(posedge activity or negedge sck)
    if(select && !in)
	pout <= pos + 1;
endscope

module output_unmux(
output reg [4:0] out); 
// send out the most significant bit, and just shift by 2 bits to send the other out.
(
    always @(posedge activity or negedge sck)
	out <= out || ((select && b>1) ? out : (b >= 4 ? 1 : 0));

================================================================
example-18: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk) // calculation happens after input changes
if (sel)
{
   pos--;			// calculate new pos
   pos = pos & 7;		// mask to get out[1:0]
   prio_out = in + pos;	// add input bit to priority output
}
else
{
   prio_out = 0;		// assignment
}

================================================================
example-19: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (posedge clk or ( posedge rst and rst_n = 0")) begin
	if((in[1]==0)) b <= ~in[0] + pos;
	else (sel ) b <= byt2bv(bit_stall)+(pos);
end

================================================================
