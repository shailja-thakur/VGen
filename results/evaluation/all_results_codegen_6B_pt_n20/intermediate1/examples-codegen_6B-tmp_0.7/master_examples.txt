example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );


a <= 1'b0;
b <= 1'b0;
cout <= sum;
sum <= a + b + carryout;


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
{
    sum <= sum + a + b;
    cout <= sum;
}

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
  if( clk ) 
    sum <= a + b + 0;
  else 
    cout <= sum;
end


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_i(
input a, b,
input cout, sum )
{
    output carry = sum_carry( a, b, cout );
    sum = sum_adder( a, b, cout, sum );
    return carry;
}

// Half adder that runs with a delay.
//
// The half adder has a delay of 'delay' cycles.
//
// Adding two bits with the half adder takes 'delay' cycles.
// The sum of the two bits is added with the half adder
// after 'delay' cycles.
//
// The output of the half adder is a carry-out signal.
module half_adder_d( 
input a, b,
input cout, delay,
output sum );

function half_adder_di(
input a, b,
input cout, delay,
input sum,

================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder() {
  cout <= sum & a & b;
  input carry_out, sum;
  output carry_in;
  carry_in <= carry_out;
  sum <= carry_out & a & b;
  identity;
}

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder receives two bits and produces a sum and carry-out.
function half_adder( 
input a, b,
output cout, sum );

// The half adder receives two bits and produces a sum and carry-out.
function half_adder( 
input a, b,
output cout, sum );

// The half adder receives two bits and produces a sum and carry-out.
function half_adder( 
input a, b,
output cout, sum );

// The half adder receives two bits and produces a sum and carry-out.
function half_adder( 
input a, b,
output cout, sum );

// The half adder receives two bits and produces a sum and carry-out.
function half_adder( 
input a, b,
output cout, sum );

// The half adder receives two bits
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Note that with vhdl the "r" part is implicit in the power expression,
// and so the following syntax is acceptable.
//
// The output is the carry-out bit.
//
// The sum is the sum bit.
//
// The input is the addition bit.
//
// The inputs a and b are 16-bit unsigned integers.
//
// The outputs cout and sum are 16-bit unsigned integers.
//
// The half adder adds two bits and produces a sum and carry-out.
//
// The output is the carry-out bit.
//
// The sum is the sum bit.
//
// The input is the addition bit.
//
// The inputs a and b are 16-bit unsigned integers.
//
// The outputs cout and sum are 16-bit unsigned integers.
//
// The half adder adds two bits and produces a sum
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. An adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carryout );

// This is a carry-clear adder.
// The sum and cout are stored and the carryout is set to zero.
module carry_clear_adder( 
input a, b,
output cout, sum,
output carryout );

// This is a carry-set adder.
// The sum and cout are stored and the carryout is set to one.
module carry_set_adder( 
input a, b,
output cout, sum,
output carryout );

// This is a carry-set and carry-clear adder.
// The sum and cout are stored and the carryout is set to one.
module half_carry_adder( 

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
  cout <= sum + a + b;

always @(posedge clk)
  sum <= a + b + ~cout;
`

func HalfAdder(inputA uint, inputB uint) uint {
	var sum uint
	var carry uint
	for i := 0; i < 32; i++ {
		sum = (sum + uint(inputA)) & 0xFFFFFFFF
		sum = (sum + uint(inputB)) & 0xFFFFFFFF
		carry = (sum >> 32) & 1
	}
	return uint(sum) + uint(carry)
}

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

stdout <= 'a';
stdout <= 'b';

input a <= b;

output cout <= sum <= high;


================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder()
{
  input a, b, cout, sum;
  output cout_, sum_;
  var cout_;
  var sum_;
  var _low_;
  var _high_;
  var _sum_;
  var low_;
  var high_;
  var sum_;
  var _carry_;
  var carry_;
  var _low_;
  var _high_;
  var _sum_;
  var low_;
  var high_;
  var sum_;
  var _carry_;
  var _low_;
  var _high_;
  var _sum_;
  var low_;
  var high_;
  var sum_;
  var _carry_;
  var _low_;
  var _high_;

================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a carry only adder. A carry only adder adds two bits and produces a sum and carry-out.
module carry_only_adder(
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder(
input a, b,
output cout, sum,
output carry_out );

// This is a carry and a half adder. A carry and half adder adds two bits and produces a sum and carry-out.
module half_carry_adder(
input a, b,
output cout, sum,
output carry_out );

// This is a carry and a fully adder. A carry and fully adder adds two bits and produces a sum and carry-out.
module full_carry_adder(
input a, b,
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Outputs the sum and carries out.
function half_adder_out( input ){
  var x = a + b + carry_out;
  carry_out = x >> 32;
  cout = x & 0xffffffff;
}

// The bit-wise sum of a and b.
function bit_sum( a, b ){
  var x = a + b;
  carry_out = x >> 32;
  return x & 0xffffffff;
}

// The bit-wise sum of a and b with carry-out.
function bit_sum_with_carry_out( a, b, carry_out ){
  var x = a + b + carry_out;
  carry_out = x >> 32;
  return x & 0xffffffff;
}

// The bit-wise sum of a and b with
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder takes two bits, adds them, and produces a sum and
// carry-out.
function half_adder()
end

// The main module contains a half adder that adds two bits for each
// of the inputs and produces a sum and a carry-out.
module main( 
input a, b,
output cout, sum );

// The main module contains a half adder that adds two bits for each
// of the inputs and produces a sum and a carry-out.
function main()
end


================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

parameter Cin_a = 0;
parameter Cin_b = 0;

wire sum;

always @(posedge clk)
begin
    sum <= a + b + Cin_a + Cin_b;
end

================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function sum = a + b + cout;


================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_test( 
input a, b,
output cout, sum );

function half_adder_init( 
input a, b,
output cout, sum );

function half_adder_run( 
input a, b,
output cout, sum );

function half_adder_done( 
input a, b,
output cout, sum );

`;

================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

local int _sum = 0;

always @(posedge clk or posedge rst)
begin
    _sum <= sum + (a[_n] ^ b[_n]) + _sum;
    cout <= _sum;
end

================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Inputs are 40 bits and carry-out is 32 bits.
assign cout = sum + b + a + 0x80000000;


================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
cout <= sum + b + a;

always @(posedge clk)
sum <= a + b + carryout;


================================================================
