example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


`)

func Single(s State) {
	fmt.Println("??")
}

func main() {
	fmt.Printf("program")
}

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 
begin
int i;
for (i=0; i < 64; i++) begin
    if (load == high) begin
        q[63-i] = data[63-i];
    end else begin
        q[63-i] = 0;
    end
end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This is a very simple testbench for the shift register.
// The simulated shift register has a fixed size of 8 bits.

begin

  // reset register.
  reg [63:0] q = 0;

  assign load = 1;
  assign ena = 1;
  for (int i=0; i<8; i++)
    assign q = q | ((data [i] & 1) << (7-i));
//  assign q = q | ((data [8] & 1) << (7-8));

  assign load = 0;
  assign ena = 1;
  assign amount = 0;

  while (1) begin
    if (ena) begin
      if (load) assign q = data [63:0];
      assign ena = 0;
    end
    begin
      if (load
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module rf_advshift(input [63:0] data,
output reg q); 
// shift data left by 1 bit.
// shift data right by 1 bit.
// shift data left by 8 bits.
// shift data right by 8 bits.

module rf_advshift_1(input [63:0] data,
output reg q,
input reg ena);
// shift data left by 1 bit.
// shift data right by 1 bit.
// shift data left by 8 bits.
// shift data right by 8 bits.

module rf_advshift_8(input [63:0] data,
output reg q,
input reg ena);
// shift data left by 1 bit.
// shift data right by 1 bit.
// shift data left by 8 bits.
// shift data right by 8 bits.

module rf_advshift_64
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module
  mod1 (
    clk,
    load,
    ena,
    amount,
    data,
    q);
  mod1_load = load_reg;
  mod1_ena = ena_reg;
  mod1_amount = amount_reg;
  mod1_data = data_reg;
  mod1_q = q_reg;
  reg mod1_load;
  reg mod1_ena;
  reg mod1_amount;
  reg mod1_data;
  reg mod1_q;
  int mod1_load_load;
  int mod1_load_ena;
  int mod1_load_amount;
  int mod1_load_data;
  int mod1_load_q;
  int mod1_ena_load;
  int mod1_ena_amount;
  
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#pragma pipeloop(0)
#
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


#include <stdint.h>
#include <complex.h>
#include "rtos_types.h"
#include "rtos_assert.h"
#include "rtos_handoff.h"
#include "rtos_priority.h"
#include "rtos_periodic.h"
#include "rtos_semaphore.h"
#include "rtos_wait.h"
#include "rtos_event.h"
#include "rtos_queue.h"
#include "rtos_mailbox.h"
#include "rtos_timer.h"
#include "rtos_message.h"
#include "rtos_shell.h"
#include "rtos_malloc.h"
#include "rtos_task.h"
#include "rtos_service.h"

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


#include "reg.h"
void test_advshift() {
  
    reg r;
    r = advshift(clk, load, ena, amount, data, r);
    
}

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


`

func TestADVSHIFT(t *testing.T) {
	for _, g := range generators{
		g.Run(t)
	}
}

func TestADVSHIFT_TR(t *testing.T) {
	for _, g := range generators{
		g.Run(t)
	}
}

func BenchmarkADVSHIFT(b *testing.B) {
	for _, g := range generators{
		g.Benchmark(b)
	}
}

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module uart_fifo(input [31:0] payload,
output reg [31:0] data,
output reg en);

module uart(input clk,
input en,
input [1:0] rxd,
input [3:0] tf,
input [3:0] rxf,
input [3:0] tx,
input [3:0] txf,
input [1:0] ctl,
input [31:0] payload,
output reg [31:0] data,
output reg en);

module uart_decoder(input clk,
input en,
input data,
output reg [31:0] payload,
output reg en);

module uart1(input clk,
input en,
input [1:0] rxd,
input [3:0] tf,
input [
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module print_state(input clk, input state_enum);
// output any state to the screen.

module print_all_states(input clk, input [63:0] data);
// output all the states to the screen.

module print_state_counter(input clk, input state_counter_enum);
// output the current state (counter) to the screen.

module print_state_bit(input clk, input state_bit_enum);
// output the current state (bit) to the screen.

// Read from a counter.  
// Reads the current state of the counter.

module print_state_bit_counter(input clk, input state_bit_counter_enum);
// output the current state (bit) to the screen.

module print_state_counter_zero(input clk, input state_counter_zero_
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


//module advshift(input clk,
//input load,
//input ena,
//input [1:0] amount,
//input [63:0] data,
//output reg [63:0] q); 
//when load is high, assign data[63:0] to shift register q.
//if ena is high, shift q.
//amount: Chooses which direction and how much to shift.
//2'b00: shift left by 1 bit.
//2'b01: shift left by 8 bits.
//2'b10: shift right by 1 bit.
//2'b11: shift right by 8 bits.


//#define bit(i) (1<<i)
//#define bit_or(a,b) ((a)|b)
//#define bit_and(a,b) ((a)&(b))


================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



// This is code to generate the testbench.
reg [63:0] comp;
reg [63:0] data;
reg data_load;
@(posedge clk, negedge load, negedge ena)
begin
  if (load) begin
    data_load = data;
  end
  if (ena) begin
    data = data_load;
    comp = data << (amount[0] + 1); // shift left by 1 bit
    q = comp;
  end
end



#define TESTBENCH
#ifdef TESTBENCH
// Test bench
reg [63:0] data;
reg data_load;
reg ena_load;
reg clk_load;
reg load_load;
reg amount_load;
reg [63:0] comp;
reg [63:0] result
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module test_advshift(input clk,
input ena);


module test_advshift2(input clk,
input ena);

module test_advshift3(input clk,
input ena);


module test_advshift4(input clk,
input ena);


// ---------------------------------------------------
module test_advshift(input clk,
input ena)
{
  reg [63:0] q;
  reg int i;
  reg int tmp;
  reg int load_tmp;
  always @(posedge clk)
  {
    i = 0;
    tmp = load_tmp;
    load_tmp = (load) ? (data[63:0]) : (tmp);
    if (ena)
    {
      q = shift_register_q(load_tmp, i, amount);

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module test_advshift(input clk,
input [31:0] q);
module test_advshift2(input clk,
input [31:0] q);
module test_advshift3(input clk,
input [31:0] q);
module test_advshift4(input clk,
input [31:0] q);
module test_advshift5(input clk,
input [31:0] q);
module test_advshift6(input clk,
input [31:0] q);
module test_advshift7(input clk,
input [31:0] q);
module test_advshift8(input clk,
input [31:0] q);
module test_advshift9(input clk,
input [31:0] q);
module test_advshift10(input clk,
================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module shft(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

//------------------------------------------------------------------------------
#include <stdint.h>
#include "bitop.h"
#include "reg_mux.h"
#include "clock_utils.h"
#include "sync_reg.h"

//
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



// Check whether the shift register is empty.
always @(posedge clk)
begin
  if (load)
  begin
    if (ena)
      reg[63:0] <= data[63:0];
  end
  else
    reg[63:0] <= 0;
end


================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module clk_divider(input clk, output div);
module clk_divider(input clk, output div);

module cin_clk_3(input clk, output div);
module cin_clk_3(input clk, output div);

module cin_clk_4(input clk, output div);
module cin_clk_4(input clk, output div);

module cin_clk_5(input clk, output div);
module cin_clk_5(input clk, output div);

module cin_clk_6(input clk, output div);
module cin_clk_6(input clk, output div);

module cin_clk_7(input clk, output div);
module cin_clk_7(input cl
================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Synchronously load data into the shift register q.
// The load cycle is followed by a 100ns pulse to ensure the load 
// is stable.
function load_data(input load, input ena, input load_data, input ena_load, input [1:0] amount, input [63:0] data)
{
  if (ena == 1'b1) {
    if (amount == 2'b00) {
      while (load == 1'b1) {
        q = data;
        wait(100.0ns);
      }
    } else if (amount == 2'b01) {
      while (load == 1'b1) {
        q = data << 8;
        wait(100.0ns);
      }
    } else if (amount == 2'b10) {
      while (load == 1'b
================================================================
