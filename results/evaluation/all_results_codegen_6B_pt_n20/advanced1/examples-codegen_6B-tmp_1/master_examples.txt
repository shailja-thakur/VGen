example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


#const a = (1<<8)-1; // 0x7F = 127
#const b = (1<<8)-2; // 0x7E = 126
#const firstBitHigh = 153; // 0x7F = 127 but is down nice and easy
#const secondBitHigh = 125; // 0x7F = 127 but is low NICE EVEN !


if (a == firstBitHigh)
{
    if (b == secondBitHigh)
    {
        s[7:0] = 0; // correct!
    } else {
        s[7:0] = firstBitHigh; // correct!
    }
    
} else {
    if (b == secondBitHigh)
    {
        s[7:0] = a;
    } else {
        s[7:0] = a + b; // okay, FIB violated
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


preference high_byte(1)
(preference new_value_of_a = preference(0) )
(preference new_value_of_b = preference(0) )
(preference result_overflow = preference(0) );

assign output_sum = op_a_plus_b;


always @(posedge clk2)
     if (a != 0)
	 new_value_of_a = a;
     
     if (b != 0)
            new_value_of_b = b;
            
//     if (result_overflow equals "1")
//         s = (new_value_of_a + new_value_of_b + result_overflow) / 2;
//     else
//         s = (new_value_of_a + new_value_of_b);
     

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always union @ a, b, s {
    m_input_overflow: 1;
    m_input0: a[0:0];
    m_input1: a[1:8];
    m_input2: a[2:16];
    m_input3: a[3:24];
    m_input4: b[0:0];
    m_input5: b[1:8];
    m_input6: b[2:16];
    m_input7: b[3:24];
    m_output_overflow: overflow;
  }

`;

compute(dut, data, messages);

function compare(results, expected) {
    console.log("results = ", results);
    console.log("expected = ", expected);
    const fail = false;
    const fail_message
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signal s_rst, p_rst, overflow;
always @ (posedge s_clk)
begin
        p_rst <= 1'b0;         //Default
        s <= 0;
        v <= 0;
        r <= 0;
        p <= 1'b0;             //Copy of input
        overflow <= overflow'h1;
        next_state <=
		        a == 1'b00000000
                					? next_state = 1'b00010001                	// Carry propagation on
                					: next_state = 1'b01010001                	// reset | warning about overflow
                        | ((b==1'b00000000) & (a==1'b00000000))
                        & ! ((a==1'b01011111) & (b==1'b10101010))
                        & ! ((a==1'b111001111)
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// in order to turn on the "_n" input, we need to have "- 1.0"
// to convert them into as binary, the computer accepts the format like:
// numbera: 00000000-11110000-11101101-11111111-11111111-11111111-11111111111111111111111111111111
// numberb: 00000000-11110000-11101101-11111111-11111111-11111111-11111111-111111-11111111111111111111111111111111
// and it provides the usr the word formula, that is, 12345 and formula is 0000 12345 , we need to truncate the front end and convert
// to the bianry format, that is, 12345 becomes 10101010, and then convert to the 
// unsigned format, that is, 10101010! we converted total 2 occurrences of the signed overflow and return how many are there.


signed_adder(a
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s == (a[7:0] + b[7:0])
assign overflow ok == not (b[7:0] + a[7:0] > 127)








assign a sum 32-bit signed int
assign overflow 32-bit signed int
assign b sum 32-bit signed int
assign s sum 32-bit signed int
assign o sum 32-bit signed int

assign overflow ok smooth
assign overflow ok smooth init 1

module sum 32-bit signed int(init="00000000")
begin
  if (x = ( b[31:24] + a[31:24] ) > 127)
    init = "80008000" 
end
s = (b[31:24] + a[31:24] < -128 ? '1' * sizeof(b) : 0)   //x ? x :
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Input a * 2 - b more than 3268 because the most significant bit of the result may appear to be rounded up (mod 2)


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  sign a;
  sign b;
  sign s;

  if ((signed a > 0) || (signed b > 0))
  {
    s = a + b;
  }
  else if (signed a < 0)
  {
    s = b - abs(a);
  }
  else if (signed b < 0)
  {
    s = a - abs(b);
  }
  else
  {
    overflow = s[0];
  }

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


create signed_adder p1(a, b, s, overflow);


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


    enable signed_adder(n1, n2, output_n, output_bit)
        @(output_n = n1 + 1,
        if(signed_overflow)
           @(output_bit = 1,
            set n1 = n1 + 1,
            set n2 = n2 + 1,
            disable signed_adder))else
            @(output_bit = 0,
             n1 = n1 + 1nl n2 = n2 + 1,
             disable signed_adder);


NOTES AND TODO LIST
--------------
1 fix the conversion into pseudo-code
3 document what to expect from the inputs

sp

"""
coin = input [7:0]
a = input [7:0]
b = input [7:0]
s = output [7:0]
bt = input [7:0]

#
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign (output#1) = (a[7] & b[7]) + a[7:0] + b[7:0] - 0x80;
    assign (output#2) = (a[7] & b[7]) + a[7:0] + b[7:0] + 0x80;


================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


module adder(input [31:0] a,
    input [31:0] b,
    input [31:0] c,
    output [31:0] s);

module subtractor(input [31:0] a, 
    input [31:0] b,
    output [31:0] s);

module tricky_adc(input [7:0] a_ext,
    input [7:0] stored_a[7:0],
    input [7:0] stored_b[7:0],
    input [7:0] c,
    output [31:0] sum_out,
    output carry);

 module most_significant_bits(input [7:0] a,
    input [7:0] b,
    input b0,
    output bit,
    output b_less_sign
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    always @(posedge clk)
    begin
        if (a[6] != b[6]) 
        begin
            s[6] <= '0' when a[6:0]^b[6:0] > 0 else s[6] <= '1'; 
        end
        s[5] <= '0' when a[6:0]^b[6:0] > 0 else s[5] <= '1';
        s[4] <= '0' when a[6:0]^b[6:0] > 0 else s[4] <= '1';
        s[3] <= '0' when a[6:0]^b[6:0] > 0 else s[3] <= '1';
        s[2] <= '0' when a[6:0]^b[6:0] > 0 else
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


  always @ (posedge clk or negedge activating)
  if (clk)        
    begin
      a <= signed_b + one   
      b <= signed_a + two
  	s <= a + b
    end
 
  signed_adder(a, b, s, overflow);
  @end

================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



version 3

// signd_adder input 
  //a 76 
  //b 52 
  //s 78 
  //overflow c

signal signd_adder:a;
signal signd_adder:b;
signal signd_adder:s;
signal signd_adder:overflow;
end

architecture behavior of signd_adder is
{ (* is a user signal *) 
before is: 
  signd_adder.a <= 83;
  signd_adder.b <= 83;
  signd_adder.s <= 86;
  overflow <= a < b;
after is: 
  signd_adder.a <= 83;
  signd_adder.b <= 83;
  signd_adder.s <= 83 + 85;
  overflow <=
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


{
    if (signed_bit(a) > unsigned_bit(b))
        s[7] = 1;
}


================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Fault setting mode,
// Type: fault set for the input from the ports a, b to the selection device that issues the fault to the output of the adder
// Mode: fault set when the internal sum of two inputs is greater of less than 2^31-1 - 8K
/* Type: fault set for the output of the adder to the selection device that issues the fault to the output of the adder
 Mode: fault set when a overflow occurs during the addition of the inputs */
 
always@ (posedge clk or negedge clk) // do busy wait if
 begin
   if (posedge count3) begin
       if (n[26] == 0) begin
           if (n[24] == 1) begin // error in positive
               n[21] <= a[7:0];
           end
           n[23] <= b[7:0];
           n
================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// @param a: An 8-bit 2's complement number
// @param b: An 8-bit 2's complement number
// @param c: Must be instantiated and 0 first
// @return: The result of a + b + c + 1 <= 126
fast rtosrt_full_adder(input [7:0] a,
    input [7:0] b,
    input [7:0] c,
    output [7:0] s,
    output overflow
);


================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


output [7:0] s = logic c = ((a[7:0] + b[7:0]) + a[6:0] + b[6:0]) + ((a[5:0] + b[5:0] + 1)..64) + a[4:0] + b[4:0];

assign fail = pc6'now_carry == b'X;

if now_carry == a[6:0] || b[6:0] or logic c[1:0] == logic 1'b1; then
	overflow[7:0] = 1;
end else overflow[7:0] = 0;

================================================================
