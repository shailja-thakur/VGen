example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state,x)
case (present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: begin
if(~x)
next_state = IDLE;
else
next_state = S10;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
end
default : next_state = IDLE;
endcase
 
always @(posedge clk)
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
 


// output z is asserted to 1 when present_
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk)
	begin 
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	always @(x,present_state)
	begin
	case(present_state)
	IDLE : begin
	z = 1'b0;
	if(x == 1)
	next_state = S1;
	else
	next_state = IDLE;
	end
	S1 : begin
	z = 1'b0;
	if(x == 0)
	next_state = S10;
	else
	next_state = IDLE;
	end
	S10 : begin
	z = 1'b0;
	if(x == 1)
	next_state = S101;
	else
	next_state
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state, x )

begin

case ( present_state )
IDLE:
begin
if ( x )
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
if ( !x )
next_state = IDLE;
else
next_state = S10;
end
S10:
begin
if ( x )
next_state = S101;
else
next_state = IDLE;
end
S101:
begin
next_state = IDLE;
end
endcase

end

always @ ( present_state, x )

begin

case ( present_state )
IDLE:
z = 0;
S1:
z = 0;
S10:
z = 0;
S101:
z = 1;
endcase


================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state,x)
begin
case(present_state)
IDLE:
begin
case(x)
0: next_state = IDLE;
1: next_state = S1;
endcase
end

S1:
begin
case(x)
0: next_state = IDLE;
1: next_state = S10;
endcase
end

S10:
begin
case(x)
0: next_state = IDLE;
1: next_state = S101;
endcase
end

S101:
begin
case(x)
0: next_state = IDLE;
1: next_state = IDLE;
endcase
end
endcase
end

always @(posedge clk)
begin
if(reset)
present_state = IDLE;
// if r
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset) 
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state,x)
begin
case(present_state)
IDLE=2'b00;
S1=2'b01;
S10=2'b10;
S101=2'b11;
endcase
end

always @(*)
begin
case(present_state)
IDLE:
begin
z=0;
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1:
begin
z=0;
if(x)
next_state = S10;
else
next_state = IDLE;
end
S10:
begin
z=0;
if
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk)
	begin
	if(reset) 
	begin
	present_state <= IDLE;
	z <= 0;
	end
	else 
	begin 
	case (present_state)
	IDLE: 
	begin 
	if(x) 
	begin 
	next_state <= S1;
	z <= 0;
	end 
	else 
	begin 
	next_state <= IDLE;
	z <= 0; 
	end 
	end 
	S1: 
	begin 
	if(!x) 
	begin 
	next_state <= S10;
	z <= 0;
	end 
	else 
	begin 
	next_state <= IDLE;
	z <= 0; 
	end 
	end
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end

always @(present_state,x) begin
case(present_state)
IDLE : begin
if(x) 
next_state = S1;
else 
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = S10;
else 
next_state = IDLE;
end
S10 : begin
if(x)
next_state = S101;
else 
next_state = IDLE;
end
S101 : begin
if(~x) 
next_state = IDLE;
else 
next_state = IDLE;
end
endcase
end
assign z = (present_state == S
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state ) 
// always block to change next state.
begin
case(present_state)
IDLE : begin
if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
end
S1 : begin
if(~x) 
next_state <= IDLE; 
else 
next_state <= S10; 
end
S10 : begin
if(x) 
next_state <= S101; 
else 
next_state <= IDLE; 
end
S101 : begin
if(~x) 
next_state <= IDLE; 
else 
next_state <= IDLE; 
end
endcase
end

always @ (posedge clk, posedge reset) 
// always block to reset present state. 
begin
if(
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(rset)
	present_state <= IDLE;
else
	present_state <= next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: if(x)
	begin
	next_state <= S1;
	z <= 0;
	end
	else
	begin
	next_state <= IDLE;
	z <= 0;
	end
S1: if(x)
	begin
	next_state <= S10;
	z <= 0;
	end
	else
	begin
	next_state <= IDLE;
	z <= 0;
	end
S10: if(x)
	begin
	next_state <= S101;
	z <= 1;
	end

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state)
begin
case(present_state)
IDLE: if (x) begin next_state = S1; end else begin next_state = IDLE; end
S1: if (x) begin next_state = S10; end else begin next_state = IDLE; end
S10: if (x) begin next_state = S101; end else begin next_state = IDLE; end
S101: begin next_state = IDLE; end
default: next_state = IDLE;
endcase
end

always @(present_state)
begin
case(present_state)
IDLE: z = 0;
S1: z = 0;
S10: z = 0;
S101: z = 1;
default: z = 0;
endcase
end

always @(posedge clk or neged
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always@(x or present_state)
begin
case(present_state)
IDLE: 
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(~x)
next_state <= IDLE;
else
next_state <= S10;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= IDLE;
end
endcase
end
assign z = (present_state
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// this block generates the next state when the present state is IDLE
always @(posedge clk)
begin
if(reset)
present_state <= IDLE; // reset the present state
else
present_state <= next_state; // this is the new assignment for present state
end

// this block generates the next state 
always @(present_state,x)
begin
case(present_state)
IDLE : begin
 if(x)
 next_state = S1; // S1 is the next state
 else
 next_state = IDLE;
 end
S1 : begin
 if(x)
 next_state = S10; // S1 is the present state and x is high, hence next state is S10
 else
 next_state = IDLE;
 end
 S10 : begin
 if(x)
 next_state = S101; // S
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
// state transition logic
always @( present_state or x )
begin
case(present_state)
IDLE: if(x)
next_state <= S1;
else
next_state <= IDLE;
S1: if(~x)
next_state <= IDLE;
else
next_state <= S10;
S10: if(~x)
next_state <= S101;
else
next_state <= S1;
S101: if(x)
next_state <= IDLE;
else
next_state <= IDLE;
default:
next_state <= IDLE;
endcase
end
// output logic
assign z = (present_state
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x)
begin
case(present_state)
IDLE: if(x==1)
begin
next_state = S1;
z = 1;
end
else 
begin
next_state = IDLE;
z=0;
end
S1: if(x==0)
begin
next_state = S10;
z = 0;
end
else
begin
next_state = IDLE;
z=0;
end
S10: if(x==1)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z=0;
end
S101: begin
next_state = IDLE;
z=0;
end

endcase
end
// whenever reset is high, present state is set to IDLE
always
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk)
	begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	always @(*)
	begin
	case(present_state)
	IDLE: 
	begin
	if(x)
	next_state = S1;
	else
	next_state = IDLE;
	end
	S1: 
	begin
	if(!x)
	next_state = S10;
	else
	next_state = IDLE;
	end
	S10: 
	begin
	if(x)
	next_state = S101;
	else
	next_state = IDLE;
	end
	S101: 
	begin
	next_state = IDLE;
	end

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x)
begin
	case(present_state)
	IDLE:	if(x)
	 	next_state = S1;
	 	else
	 	next_state = IDLE;
	S1:	if(~x)
	 	next_state = S10;
	 	else
	 	next_state = IDLE;
	S10:	if(x)
	 	next_state = S101;
	 	else
	 	next_state = IDLE;
	S101:	next_state = IDLE;
	default: 	next_state = IDLE;
	endcase
end

// always block to generate the output signal
always @(posedge clk)
begin
	if(reset)
	present_state = IDLE;
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// state table
always@( present_state, x )
begin
case( present_state )
IDLE: if( x )
begin
next_state <= S1;
z = 1;
end
else
begin
next_state <= IDLE;
z = 0;
end
S1: if( !x )
begin
next_state <= IDLE;
z = 0;
end
else
begin
next_state <= S10;
z = 0;
end
S10: if( x )
begin
next_state <= S101;
z = 1;
end
else
begin
next_state <= IDLE;
z = 0;
end
S101: begin 
next_state <= IDLE;
z = 0;
end
endcase
end

// control signals
always@( posedge clk or negedge reset
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset) begin
if(!reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x) begin
case(present_state)
IDLE : begin
z=0;
if(x)
next_state=S1;
else
next_state=IDLE;
end
S1 : begin
z=0;
if(x)
next_state=S10;
else
next_state=IDLE;
end
S10 : begin
z=0;
if(x)
next_state=S101;
else
next_state=IDLE;
end
S101 : begin
z=1;
next_state=IDLE;
end
endcase
end

================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
	present_state <= IDLE;
else 
	present_state <= next_state;
end
always@(x)
begin
case(present_state)
	IDLE: if(x)	begin next_state = S1; z = 1; end 
	else 	next_state = IDLE;
	S1: 	begin next_state = S10; z = 0; end
	S10: if(x) begin next_state = S101; z = 1; end 
	else 	next_state = S1;
	S101: 	begin next_state = IDLE; z = 1; end
endcase
end

================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state ) 
begin
case ( present_state ) 
	IDLE : begin 
	if(x) 
	begin
	next_state = S1;
	z = 0;
	end
	else begin
	next_state = IDLE;
	z = 0;
	end
	end
	S1 : begin
	if(x) 
	begin
	next_state = S10;
	z = 0;
	end
	else begin
	next_state = IDLE;
	z = 0;
	end
	end
	S10 : begin
	if(x) 
	begin
	next_state = S101;
	z = 0;
	end
	else begin
	next_state = IDLE;
	z = 0;
	end
	end
	S
================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end


always @(present_state,x)
begin
case(present_state)
IDLE : 
begin
if(x)
next_state = S1;
else 
next_state = IDLE;
end
S1 : 
begin
if(~x) 
next_state = IDLE;
else
next_state = S10;
end
S10 : 
begin
if(x) 
next_state = S101;
else 
next_state = IDLE;
end
S101 :
begin
next_state = IDLE;
end
default : 
next_state = IDLE;
endcase
end

================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x)
begin
case (present_state)
IDLE :	begin
	if (x)
	begin
	next_state = S1;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	end

S1 :	begin
	if (!x)
	begin
	next_state = S1;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	end

S10 :	begin
	if (x)
	begin
	next_state = S10;
	z = 0;
	end
	else
	begin
	next_state = IDLE;
	z = 0;
	end
	
================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(*)
begin 
case (present_state)
IDLE: if(x)
begin 
next_state = S1;
z = 1'b1;
end 
else
begin 
next_state = IDLE;
z = 1'b0;
end 
S1: if (x)
begin 
next_state = S10;
z = 1'b1;
end 
else 
begin 
next_state = IDLE;
z = 1'b0;
end 
S10: if (x)
begin 
next_state = S101;
z = 1'b1;
end 
else 

================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin 
case(present_state)
IDLE:if(x)
begin
next_state = S1;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end

S1:if(~x)
begin
next_state = S10;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end

S10:if(x)
begin
next_state = S101;
z = 1;
end
else
begin
next_state = IDLE;
z = 0;
end

S101:if(~x)
begin
next_state = IDLE;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
endcase

================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @ ( present_state ) 
	begin
	case ( present_state ) 
	IDLE:
	begin
	if ( x == 1 ) 
	begin
	next_state = S1;
	end
	else 
	begin
	next_state = IDLE;
	end
	end
	S1:
	begin
	if ( x == 0 ) 
	begin
	next_state = S10;
	end
	else 
	begin
	next_state = IDLE;
	end
	end
	S10:
	begin
	if ( x == 1 ) 
	begin
	next_state = S101;
	end
	else 
	begin
	next_state = IDLE;
	end
	end
	S101:
	begin
	if ( x == 1 ) 
================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	present_state <= IDLE;
	end
	else
	begin
	present_state <= next_state;
	end
end

always @(x, present_state)
	case(present_state)
	IDLE : 
	begin
	if(x) 
	begin
	next_state <= S1;
	z = 1'b0;
	end
	else
	begin
	next_state <= IDLE;
	z = 1'b0;
	end
	end
	S1 : 
	begin
	if(~x)
	begin
	next_state <= S10;
	z = 1'b0;
	end
	else
	begin
	next_state <= IDLE
================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(*)
	begin
	 case(present_state)
	 IDLE : if(x)
	 next_state = S1;
	 else
	 next_state = IDLE;
	 S1: if(~x)
	 next_state = S10;
	 else
	 next_state = IDLE;
	 S10: if(x)
	 next_state = S101;
	 else
	 next_state = IDLE;
	 S101 : next_state = IDLE;
	 endcase 
	end
	
always @(posedge clk or posedge reset)
begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
end
assign z = (present_state == S101);

================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x)
begin
	case(present_state)
	IDLE : begin
	if(x) next_state = S1;
	else next_state = IDLE;
	end
	S1 : begin
	if(~x) next_state = S10;
	else next_state = IDLE;
	end
	S10: begin
	if(x) next_state = S101;
	else next_state = IDLE;
	end
	S101: begin
	if(~x) next_state = IDLE;
	else next_state = S101;
	end
	endcase
end

always @(posedge clk)
begin
	if(reset) present_state <= IDLE;
	else present_state <= next_state;
end



assign z
================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE : begin
if (x)
next_state = S1;
else
next_state = IDLE;
z = 0;
end
S1 : begin
if (x)
next_state = S1;
else
next_state = IDLE;
z = 0;
end
S10 : begin
if (x)
next_state = S101;
else
next_state = IDLE;
z = 0;
end
S101 : begin
if (x)
next_state = IDLE;
else
next_state = IDLE;
z = 1;
end
endcase
================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state, x )
begin
	case( {present_state,x} ) 
	{IDLE, 1'b1} : next_state = S1;
	{IDLE, 1'b0} : next_state = IDLE;
	{S1, 1'b1} : next_state = S10;
	{S1, 1'b0} : next_state = IDLE;
	{S10, 1'b1} : next_state = S101;
	{S10, 1'b0} : next_state = IDLE;
	{S101, 1'b1} : next_state = IDLE;
	{S101, 1'b0} : next_state = IDLE;
	default : next_state = IDLE;
	endcase
end

always @ ( posed
================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//always block to assign values to present state and to next state
always @(posedge clk) 
begin
	if (reset) present_state <= IDLE;
	else present_state <= next_state;
end

//always block to decide output signals
always @(*) 
begin
	case(present_state)
	IDLE: 
	begin
	if (x) next_state = S1;
	else next_state = IDLE;
	z = 0;
	end
	S1: 
	begin
	if (x) next_state = S10;
	else next_state = IDLE;
	z = 0;
	end
	S10:
	begin
	if (x) next_state = S101;
	else next_state = IDLE;
	z = 0;
	end

================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always@(present_state,x)
	begin
	case(present_state)
	IDLE: begin 
	if(x) next_state = S1;
	else next_state = IDLE;
	end
	S1: begin
	if(!x) next_state = IDLE;
	else next_state = S10;
	end
	S10: begin
	if(x) next_state = S101;
	else next_state = IDLE;
	end
	S101: begin
	if(!x) next_state = IDLE;
	else next_state = IDLE;
	end
	default: next_state = IDLE;
	endcase
	end
	always@(posedge clk)
	begin
	if(reset) present_state <= IDLE;
	else present
================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always@(present_state,x)
begin
case(present_state)
IDLE: begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
z = 1'b0;
end
S1: begin
if(~x)
next_state <= S10;
else
next_state <= IDLE;
z = 1'b0;
end
S10: begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
z = 1'b0;
end
S101: begin
if(x)
next_state <= IDLE;
else
next_state <= IDLE;
================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state)
begin
case(present_state)
IDLE: if (x) begin next_state = S1; end else begin next_state = IDLE; end
S1: if (x) begin next_state = S10; end else begin next_state = IDLE; end
S10: if (x) begin next_state = S101; end else begin next_state = IDLE; end
S101: begin next_state = IDLE; end
endcase
end

always @ (posedge clk or posedge reset)
begin
if (reset)
present_state = IDLE;
else 
present_state = next_state;
end

// output is asserted to 1 when present_state is S101
assign z = (present_state == S101);


================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state, x) 
begin 
case(present_state) 
IDLE : 
begin 
z = 0; 
if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
end 
S1 : 
begin 
z = 0; 
if(~x) 
next_state <= S10; 
else 
next_state <= IDLE; 
end 
S10 : 
begin 
z = 0; 
if(x) 
next_state <= S101; 
else 
next_state <= IDLE;
================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= IDLE;
	end
	else 
	present_state <= next_state;
end
always @(x)
begin
case(present_state)
IDLE : 
	begin
	if(x) 
	begin
	next_state <= S1;
	end
	else 
	begin
	next_state <= IDLE;
	end
	end
S1 : 
	begin
	if(!x) 
	begin
	next_state <= S10;
	end
	else 
	begin
	next_state <= IDLE;
	end
	end
S10 : 
	begin
	if(x) 
	begin
	next_state <= S101;
	end
	
================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( present_state, x ) 
begin
case( present_state ) 
IDLE: if( x==0 ) begin 
	next_state = S1; 
	z = 1'b0; 
	end 
	else begin 
	next_state = IDLE;
	z = 1'b0; 
	end 
S1: if( x==0 ) begin 
	next_state = S10; 
	z = 1'b0; 
	end 
	else begin 
	next_state = S1; 
	z = 1'b0; 
	end 
S10: if( x==0 ) begin
	next_state = S101; 
	z = 1'b0; 
	end 
	else begin 
	next_state = S10; 
================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state)
begin
case (present_state)
IDLE : begin
if (x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if (!x)
next_state = IDLE;
else
next_state = S10;
end
S10 : begin
if (x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end

default : begin
next_state = IDLE;
end

endcase
end

always @(posedge clk)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

assign z = (present_state == S101) ? 1 : 0;
================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @*
begin
case(present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1 : begin
if(~x)
next_state = IDLE;
else
next_state = S10;
end
S10 : begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101 : begin
next_state = IDLE;
end
default : next_state = IDLE;
endcase
end
//assigning outputs
always @(posedge clk)
begin
case(present_state)
IDLE : z
================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end 
always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else 
next_state <= IDLE;
end
S1:
begin
if(~x)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
if(x)
next_state <= IDLE;
else 
next_state <= IDLE;
end
endcase
end
assign z = (
================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
if (reset) present_state <= IDLE;
else 
case (present_state)
IDLE: if(x) next_state <= S1;
else next_state <= IDLE;

S1: if (~x) next_state <= S10;
else next_state <= IDLE;

S10: if (x) next_state <= S101;
else next_state <= IDLE;

S101: if (x) next_state <= IDLE;
else next_state <= IDLE;

default: next_state <= IDLE;
endcase
// always block with assign statements
always @(posedge clk) 
if (reset) present_state <= IDLE;
else 
case (present_state)
IDLE: if(x) present_state <= S1;
else present_state <=
================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state, x )
begin
case ( present_state )
IDLE: begin
	if ( x==1 )
	begin 
	next_state = S1;
	end
	else
	begin
	next_state = IDLE;
	end
end
S1: begin
	if ( x==0 )
	begin 
	next_state = IDLE;
	end
	else
	begin 
	next_state = S10;
	end
end
S10: begin
	if ( x==1 )
	begin 
	next_state = S101;
	end
	else
	begin 
	next_state = IDLE;
	end
end
S101: begin
	if ( x==1 )
	begin 
	next_state = IDLE;
	end
	else
================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case(present_state)
IDLE: 
begin 
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: 
begin 
if(~x)
next_state = S10;
else
next_state = IDLE;
end
S10: 
begin 
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101: 
begin 
next_state = IDLE;
end
endcase
end

assign z = (present_state == S101)?1:0;
end
================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end 
always @(present_state) 
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE; 
end
S1:
begin
if(!x)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end
default:
next_state <= IDLE;
endcase
end

always @(present_state)
begin 
case(present_
================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk) 
begin
if (reset) 
	present_state <= IDLE;
else 
	begin
	case (present_state) 
	IDLE: 
	if (x)
	begin
	next_state <= S1;
	end
	else 
	begin
	next_state <= IDLE;
	end
	S1: 
	if (!x)
	begin
	next_state <= S10;
	end
	else 
	begin
	next_state <= IDLE;
	end
	S10: 
	if (x)
	begin
	next_state <= S101;
	end
	else 
	begin
	next_state <= IDLE;
	end
	S101: 
	begin
	next_state <= IDLE;
	
================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset) present_state <= IDLE;
else present_state <= next_state;
end

always @(x or present_state)
begin
case (present_state)
IDLE : begin
	if (x) next_state = S1;
	else next_state = IDLE;
	end
S1 : begin
	if (~x) next_state = S10;
	else next_state = IDLE;
	end
S10 : begin
	if (x) next_state = S101;
	else next_state = IDLE;
	end
S101 : begin
	if (~x) next_state = IDLE;
	else next_state = IDLE;
	end
default : next_state = IDLE;
endcase
end
ass
================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
begin 
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end
// This block contains the finite state machine 

always @(x or present_state)
case(present_state)
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(~x) 
next_state = S10; 
else 
next_state = IDLE; 
S10: if(x) 
next_state = S101; 
else 
next_state = IDLE; 
S101: next_state = IDLE; 
default: next_state = IDLE; 
endcase

assign z = (present_state == S101);
end
================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @( present_state or x ) 
begin 
case( present_state ) 
IDLE : if( ~x ) 
begin next_state = S1; end 
else 
begin next_state = IDLE; end 
S1 : if( ~x ) 
begin next_state = S1; end 
else 
begin next_state = IDLE; end 
S10 : if( ~x ) 
begin next_state = S1; end 
else 
begin next_state = IDLE; end 
S101 : if( ~x ) 
begin next_state = S1; end 
else 
begin next_state = IDLE; end 
default : next_state = IDLE; 
endcase 
end


always @(posedge clk) 
begin 
if(reset) 

================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state, x) 
case (present_state) 
IDLE : begin 
z = 1'b0; 
if ( x == 1 ) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1 : begin 
z = 1'b0; 
if ( x == 1 ) 
next_state = S10; 
else 
next_state = IDLE; 
end 
S10 : begin 
z = 1'b0; 
if ( x == 1 ) 
next_state = S101; 
else 
next_state = IDLE; 
end 
S101 : begin 
z = 1'b1; 
next_state = IDLE; 
end 
default : begin 
z = 1'b0;
================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk ) begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(*) begin
case(present_state)
IDLE: begin
if(x)
next_state = S1;
else
next_state = IDLE;
end
S1: begin
if(~x)
next_state = IDLE;
else
next_state = S10;
end
S10: begin
if(x)
next_state = S101;
else
next_state = IDLE;
end
S101: begin
if(x)
next_state = IDLE;
else
next_state = IDLE;
end
endcase
end

always @(posedge clk) begin
case(present_state)
IDLE: z = 0
================================================================
