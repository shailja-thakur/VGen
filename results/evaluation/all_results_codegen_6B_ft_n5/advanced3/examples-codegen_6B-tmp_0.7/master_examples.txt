example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state;

assign next_state = (present_state == IDLE && x == 1'b1) ? S1 :((present_state == S1 && x == 1'b0) ? S10 : IDLE);
assign z = (present_state == S101 && x == 1'b1); 

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(present_state or x) 
case(present_state) 
IDLE: begin 
if(x) 
next_state=S1; 
else 
next_state=IDLE; 
end 
S1: begin 
if(x) 
next_state=S10; 
else 
next_state=IDLE; 
end 
S10: begin 
if(x) 
next_state=S101; 
else 
next_state<=IDLE; 
end 
S101: begin 
if(x) 
next_state<=S1; 
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
 
case(present_state) 

IDLE: next_state=x?S1:IDLE; 

S1: next_state=x?S10:IDLE; 

S10: next_state=x?S1:S101;

S101: next_state=x?S1:IDLE; 

default: next_state=IDLE;

endcase

end 


always @(posedge clk) begin 
if (reset) present_state<=IDLE; 
else present_state<=next_state; 
end 

assign z=(present_state==S101); 


================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//state transitions
always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end

// next_state is a combinational output of the Moore/DFF/TFF equations
// it is output to z when the equation is satisfied

//z is the output of the Moore/DFF/TFF equation
assign z = (present_state==S101);

//next_state is the input to the Moore/DFF/TFF equations
assign next_state = (x==1'b1) ? S1 : ((x==1'b0) ? S10 : IDLE);
 


================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// if x is 0,next_state = S1
// if x is 1,next_state = S10
// if x is 1,next_state = S101
// if x is 0,next_state = S101

always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

always @(present_state)
begin 
	case(present_state) 
	IDLE: 
	begin 
	if (x) next_state = S1; 
	else next_state = IDLE; 
	end 
	S1: 
	begin 
	if (x) next_state = S10; 
	else next_state = IDLE; 

================================================================
