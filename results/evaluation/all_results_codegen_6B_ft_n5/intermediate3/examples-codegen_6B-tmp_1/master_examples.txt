example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) 
	if(reset) 
	r_reg <=6'b000000; 
	else 
	r_reg <= r_next; 
// transition logic, used by other internal muxes
always @(*)
	case(r_reg[4:2])
	0: r_next ={r_reg[3:1],q[0]};
	1: r_next ={r_reg[3:1],q[1]};
	2: r_next ={r_reg[3:1],q[2]};
	3: r_next ={r_reg[3:1],q[3]};
	4: r_next ={r_reg[3:1],q[4]};
	default: r_next = {r_reg[3
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// internal registers and wires and their sizes
//`include "assign_static_l.v"
assign r_next[0] = r_reg[0];
assign r_next[4:1] = r_reg[2:0];
assign where_to_come_from = ((r_reg[2] == 1) | (r_reg[4] == 1))? {r_reg[1], 2'd0}: {r_reg[3], r_reg[1], 2'd2};
assign feedback_concat = {{!where_to_come_from[0], where_to_come_from[1], where_to_come_from[2]},{where_to_come_from[3]}};
assign feedback_xor = (r_reg[0] ^ r_reg[2] ^ r_reg[
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
if (reset)
r_reg <= 5'b10000;
else
r_reg <= r_next;
end
assign xor2 = r_reg[0]^r_reg[3]; // a^b
assign xor4 = r_reg[1]^r_reg[2]; // c^d
assign q[0] = r_reg[4]^xor2; // e^a
assign q[1] = r_reg[3]^xor2; // d^a
assign q[2] = r_reg[2]^xor2; // e^c
assign q[3] = r_reg[1]^xor2; // d^c
assign q[4] = r_reg[0]^xor2
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// q = ~0101;
assign q = {~r_reg[3]^r_reg[2]^feedback_value^r_reg[0],r_reg[3],r_reg[2],r_reg[1],r_reg[0]};


always @ * 	
	case( {reset,feedback_value,r_reg[3],r_reg[2],r_reg[1],r_reg[0]} ) 
	//case block to handle all 8-bit inputs
	0: 	r_next = {1'b0,q[2],q[0],q[3],q[4],q[1],q[2]^q[3]};
	1: 	r_next = {1'b0,q[1],q[3],q[2],q[0],q
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
if (reset == 1'b0)
	begin
	r_reg <= 5'b0;
	end 
else
	begin
	r_reg <= r_next;
	end
end
assign r_next = {r_reg[4],r_reg[3]^r_reg[4]};
assign feedback_value = r_reg[2]^r_reg[4];
assign q = r_reg;

================================================================
