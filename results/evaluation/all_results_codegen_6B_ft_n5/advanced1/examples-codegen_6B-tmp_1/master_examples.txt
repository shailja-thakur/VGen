example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [6:0] newa = {a[7], a[7/(2*2)-1], a[6:(2*2)-1], a[4],a[3],a[2],a[1]}; 
wire [6:0] newb = {b[7], b[7/(2*2)-1], b[6:(2*2)-1], b[4],b[3],b[2],b[1]}; 

wire [5:0] sum = newa+ newb; 


assign s = {sum[7], sum[7/(2*2)-1],sum[5:(2*2)-1], sum[3],sum[2],sum[1],sum[0]};

assign overflow = newa[7] & newb[7];



================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



post_accum_adder<=16'h0001;//(a[7]==0)?((a<<1)+(a<<4))+b:(a-(~a) + (<Failed> a[7] + b[7] )*(((a[7]^b[7])^post_accum_adder[7])^(a[7]^s[7])));

// the buffer 'post_accum_adder' is used to delay the second adder output 
// until the final output is delayed for all the 16 channels

//the output is a two 8-bit number
assign s[0]=(!a[7]&!b[7]&post_accum_adder[8])|(a[7]&b[7]&post_accum_adder[9]);
// final output of adder
assign
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// positive overflow from a + b report the sign of s
// negative overflow from a - b report NX card

// saturate to 32bits if number is to big to use single 256 bit number. 

 asigndecoder sadd (.in(s),.out(poss));

 wire ne ; // wrong output , we have a bool instead of a number 
 sdecoder scl (.in(poss[7:3]),.out(ne),.errorbits(overflow));
 ne=!(ne);
	
assign signe= p[3]^nh; // a nh xor bx sets a sign if b is negative


assign s[2:0]= { p[3],poss[3],nh ,poss[4]^p[2]};

assign s[5:3]= { nne,nppp,nhz
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



always @(*) begin
case(b) 
8'b00000001: s = a + {8'b00000000,b}; // a is the signed output, pure addition 

8'b00000000: s = a + {b,8'b00000000}; //b is the signed output, pure addition 
 // Technically 0+0=0 is unitary 1 but imposant it gets compiled away in verilog 

8'b10000000:s=a-{b,8'b00000001}; //subtraction

8'b10010000:s=a+{b,8'b00000010}; // addition

8'b100000000:s={b,8'b00000000}-a; //reverse of subtraction 
//{b,8'b00000010} is arbitrary value of maximum magnitude of b and maximum magnitude of a
//magnitude
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s = a + b;
	assign overflow = (a[7]&b[7]&~s[7])|(s[7]&b[7]&a[7]);	

================================================================
