example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if (load) q<=data;
	else if (ena) begin
	case(amount)
	2'b00:	q<=q<<1'b1;
	2'b01:	q<=q<<8'b1;
	2'b10:	q<=q>>1'b1;
	2'b11:	q<=q>>8'b1;
	endcase
	end
	end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 
always @ (posedge clk) // always because v is always positive in a posedge block
begin //starting
if(load) // if load is HIGH, then output is 0.
q <= data; //assign 0 as the new output and data as the input
 
else if(ena) // if ena is HIGH then 2 output bits of AV are HIGH, indicating a positive edge on A. The output is q[62:0], where q[63] is a copy of q[31]
q <= {q[30:0],q[63:31]}; // To sum, the previous output (here q[31]) is added onto q[62:0], which is the output we want.
 
end // ending 

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	case (amount)
	2'b00 : 	begin
	case (ena)
	1'b0 : 	begin
	q <= {q[62:0], 1'b0};//shift left by 1
	end
	1'b1 : 	begin
	q <= {1'b0, q[63:1]};//shift right by 1
	end
	endcase
	end
	2'b01 : 	begin
	case (ena)
	1'b0 : 	begin
	q <= {q[60:0], q[63]};//shift left by 8
	end
	1'b1 : 	begin
	q <= {q[63], q[63:1]};//shift right by 8
	end
	endcase
	end
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if(~load && ~ena) //snapshot
	q <= data[63:0];
	if(~load && ena) //snapshot
	q <= {q[62:0], 1'b0};
	if(load && ~ena) //snapshot
	q <= {q[55:0], data[63:56]};
	if(load && ena) //snapshot
	q <= {q[63], q[62:1]};
	if(ena) //snapshot
	q <= {q[55:0], data[63:56]};
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load)
	begin
 
//*************Code to shift based on next two inputs.*****************************
// The Output is assigned (like a Register) to a Behavioral Blocking Assignment.
	assign q[0] = data[0];
	assign q[1] = data[1];
	assign q[2] = data[2];
	assign q[3] = data[3];
	assign q[4] = data[4];
	assign q[5] = data[5];
	assign q[6] = data[6];
	assign q[7] = data[7];
	assign q[8] = data[8];
	assign q[9] = data[9];
	assign q[10] = data[10];
	
================================================================
