example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// Register output

always@(posedge clk)
	present_state <= next_state;
	
// Next State Logic

always@(present_state, in)
	case(present_state)
	0: if(in==1) next_state=1;
	else next_state=0;
	1: if(in==1) next_state=1;
	else next_state=0;
	endcase

// Output Logic

always@(posedge clk)
	out <= (present_state == 1);


================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

assign out = present_state[1] & ~in;

always @ (posedge clk)
reset
if (reset) begin
	present_state <= `S0;
end
else begin
	present_state <= next_state;
end

always @ (present_state or in)
begin
next_state <= `S1;
case(present_state)
`S0: if (in == 1) next_state = `S0;
	else next_state = `S1;
`S1: if (in == 1) next_state = `S1;
	else next_state = `S0;
endcase
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

assign next_state = present_state & ~in;
assign out = present_state & in;

always @(posedge clk)
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	//present_state <= next_state;
	present_state <= {next_state, present_state[1:1]};
	end


================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & ~next_state & in;
always @(posedge clk or posedge reset)
	if (reset) // state 0
	begin
	next_state = 1'b0;
	present_state = 1'b0;
	end
	else
	begin
	//state transitions
	next_state = present_state & ~out;
	present_state = next_state;
	end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==0 && in) || (present_state==1 && ~in);
always @(posedge clk)
begin
if(reset)
present_state<=0;
else
present_state<=next_state;
end
//State transition logic: next_state=fsm(present_state,in)
always @(fsm, in)
case(fsm)
0: if(in==1)
next_state=1;
else
next_state=0;
1: if(in==1)
next_state=1;
else
next_state=0;
endcase

================================================================
