example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (present_state or in)
begin
case (present_state)
0: if (in)
next_state <= 0;
else
next_state <= 1;
1: if (in)
next_state <= 1;
else
next_state <= 0;
default: next_state <= 0;
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk or posedge reset) begin
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end

always @(present_state or in) begin
	case(present_state)
	0: begin
	if(in)
	begin
	next_state <= 0;
	out <= 0;
	end
	else
	begin
	next_state <= 1;
	out <= 0;
	end
	end
	1: begin
	if(in)
	begin
	next_state <= 1;
	out <= 1;
	end
	else
	begin
	next_state <= 0;
	out <= 1;
	end
	end
	end
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (present_state or in)
begin
case(present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1) ? 1 : 0;
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0:
begin
if(in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1:
begin
if(in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case (present_state)
1'b0: if (in)
next_state <= 1'b0;
else
next_state <= 1'b1;
1'b1: if (in)
next_state <= 1'b1;
else
next_state <= 1'b0;
endcase
end
assign out = (present_state == 1'b0) ? 1'b1 : 1'b0;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state = 0;
	next_state = 0;
	end
	else
	begin
	present_state = next_state;
	end
end
always @(in or present_state)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state = 0;
	end
	else
	begin
	next_state = 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state = 1;
	end
	else
	begin
	next_state = 0;
	end
	end
	endcase
end
assign out = (present_state == 1);

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @ (posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0 = 0, state1 = 1;
always @(posedge clk)
begin
if (reset)
present_state <= state0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case (present_state)
state0: begin
if(in)
next_state <= state0;
else
next_state <= state1;
end
state1: begin
if(in)
next_state <= state1;
else
next_state <= state0;
end
endcase
end
assign out = (present_state == state1);

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk or posedge reset)
begin
if(reset) begin
present_state <= 1'b0;
next_state <= 1'b0;
end
else begin
present_state <= next_state;
end
end
always @(present_state or in) begin
case(present_state)
1'b0: begin
if(in) begin
next_state <= 1'b0;
end
else begin
next_state <= 1'b1;
end
end
1'b1: begin
if(in) begin
next_state <= 1'b1;
end
else begin
next_state <= 1'b0;
end
end
endcase
end
assign out = (present_state == 1'b1)? 1:0;

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always@(in, present_state)
begin
case(present_state)
1'b0: if(in)
begin
next_state <= 1'b0;
out <= 1'b0;
end
else
begin
next_state <= 1'b1;
out <= 1'b0;
end
1'b1: if(in)
begin
next_state <= 1'b1;
out <= 1'b0;
end
else
begin
next_state <= 1'b0;
out <= 1'b1;
end
endcase
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	1'b0:
	begin
	if(in == 1'b1)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	end
	end
	1'b1:
	begin
	if(in == 1'b1)
	begin
	next_state <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	end
	end
	endcase
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
begin
present_state <= 0;
end
else
begin
present_state <= next_state;
end
end
always @(present_state or in)
begin
case(present_state)
0:
begin
if(in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
end
1:
begin
if(in)
begin
next_state <= 1;
end
else
begin
next_state <= 0;
end
end
endcase
end
assign out = (present_state == 1)?1:0;

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(present_state or in)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 0) ? (in) : (~in);
always @(posedge clk)
begin
if(reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(*)
begin
case(present_state)
0: begin
if(in)
	next_state = 0;
else
	next_state = 1;
	end
1: begin
if(in)
	next_state = 1;
else
	next_state = 0;
	end
endcase
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always@(posedge clk or posedge reset)
begin
if(reset)
	present_state <= 1'b0;
else
	present_state <= next_state;
end
always@(in or present_state)
begin
case(present_state)
	1'b0: if(in)
	begin
	next_state <= 1'b0;
	out <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;
	out <= 1'b1;
	end
	1'b1: if(in)
	begin
	next_state <= 1'b1;
	out <= 1'b1;
	end
	else
	begin
	next_state <= 1'b0;
	
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case (present_state)
1'b0: begin
if (in)
next_state <= 1'b0;
else
next_state <= 1'b1;
out <= 1'b0;
end
1'b1: begin
if (in)
next_state <= 1'b1;
else
next_state <= 1'b0;
out <= 1'b1;
end
endcase
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'b0: if(in)
begin
next_state = 1;
out = 1;
end
else
begin
next_state = 1;
out = 0;
end
1'b1: if(in)
begin
next_state = 1;
out = 1;
end
else
begin
next_state = 0;
out = 0;
end
endcase
end

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk or posedge reset)
begin
if(reset)
present_state <= 1'd0;
else
present_state <= next_state;
end
always@(in or present_state)
begin
case(present_state)
1'd0:
begin
if(in)
next_state <= 1'd0;
else
next_state <= 1'd1;
end
1'd1:
begin
if(in)
next_state <= 1'd1;
else
next_state <= 1'd0;
end
endcase
end
assign out = (present_state == 1'd1) ? 1'd1 : 1'd0;

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter state0 = 0;
parameter state1 = 1;
always @(posedge clk)
begin
if (reset)
present_state <= state0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case (present_state)
state0:
begin
if (in)
next_state <= state0;
else
next_state <= state1;
end
state1:
begin
if (in)
next_state <= state1;
else
next_state <= state0;
end
endcase
end
assign out = (present_state == state1);

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// reset=1 resets the machine to state 0
always @(posedge clk)
begin
if(reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0:
	begin
	if(in)
	begin
	next_state <= 0;
	out <= 0;
	end
	else
	begin
	next_state <= 1;
	out <= 0;
	end
	end
1:
	begin
	if(in)
	begin
	next_state <= 1;
	out <= 0;
	end
	else
	begin
	next_state <= 0;
	out <= 1;
	end
	end
default:
	begin
	next_state <= 0;
	
================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk) begin
	if(reset) begin
	present_state <= 0;
	end
	else begin
	present_state <= next_state;
	end
end
always @(in or present_state) begin
	case(present_state)
	0: begin
	if(in) begin
	next_state <= 0;
	end
	else begin
	next_state <= 1;
	end
	end
	1: begin
	if(in) begin
	next_state <= 1;
	end
	else begin
	next_state <= 0;
	end
	end
	default: begin
	next_state <= 0;
	end
	endcase
end
assign out = (present_state == 0)? 1:0;
================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(in or present_state)
begin
case(present_state)
0:
if(in)
next_state <= 0;
else
next_state <= 1;
1:
if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case (present_state)
1'b0: begin
if (in)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1: begin
if (in)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end

================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
parameter state0 = 0, state1 = 1;
always @(posedge clk)
begin
if(reset)
present_state <= state0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
state0: begin
if(in)
next_state <= state0;
else
next_state <= state1;
end
state1: begin
if(in)
next_state <= state1;
else
next_state <= state0;
end
endcase
end
assign out = (present_state == state1);

================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0: if(in)
next_state <= 0;
else
next_state <= 1;
1: if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0 : begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1 : begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end

================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
	if (reset) begin
	present_state <= 0;
	end
	else begin
	present_state <= next_state;
	end
end
always @ (present_state or in)
begin
	case (present_state)
	0: begin
	if(in)
	next_state <= 0;
	else
	next_state <= 1;
	end
	1: begin
	if(in)
	next_state <= 1;
	else
	next_state <= 0;
	end
	endcase
end
assign out = (present_state == 1);

================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Go to state 0 if reset=1
always @ (posedge clk) begin
	if (reset)
	begin
	present_state <= `STATE0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @ (present_state or in) begin
case(present_state)
`STATE0: 
begin
next_state = in ? `STATE0 : `STATE1;
out = 0;
end
`STATE1: 
begin
next_state = in ? `STATE1 : `STATE0;
out = in ? 0 : 1;
end
endcase
end

================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(in or present_state)
begin
case(present_state)
0: if(in)
next_state <= 0;
else
next_state <= 1;
1: if(in)
next_state <= 1;
else
next_state <= 0;
endcase
end
assign out = (present_state == 1);

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter [1:0] s0=2'b00, s1=2'b01, s2=2'b10;
// State transition
always @(posedge clk)
begin
if(reset)
present_state <= s0;
else
present_state <= next_state;
end
// State transition
always @(present_state, in)
case(present_state)
s0: if(in)
begin
next_state = s0;
out = 0;
end
else
begin
next_state = s1;
out = 0;
end
s1: if(in)
begin
next_state = s2;
out = 0;
end
else
begin
next_state = s0;
out = 0;
end
s2: if(in)
begin
next_state = s0;

================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always@(posedge clk)
begin
if (reset)
begin
present_state <= 1'b0;
next_state <= 1'b1;
end
else
begin
present_state <= next_state;
end
end
assign out = (present_state == 1'b1 && in == 1'b1) ? 1'b1 : 1'b0;

================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk, posedge reset)
begin
if(reset)
present_state <= 1'd0;
else
present_state <= next_state;
end
always@(present_state, in)
begin
case(present_state)
1'd0: begin
	if(in == 1'd1)
	next_state = 1'd0;
	else
	next_state = 1'd1;
	end
1'd1: begin
	if(in == 1'd1)
	next_state = 1'd1;
	else
	next_state = 1'd0;
	end
endcase
end
assign out = (present_state == 1'd0)? 1'd1:1'd0;

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 1) ? 1 : 0;

================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset) begin
	if (reset) begin
	present_state <= 0;
	end
	else begin
	present_state <= next_state;
	end
end
always @(*) begin
	case (present_state)
	0: begin
	if (in==1'b1)
	next_state <= 0;
	else
	next_state <= 1;
	end
	1: begin
	if (in==1'b1)
	next_state <= 1;
	else
	next_state <= 0;
	end
	endcase
end
assign out = (present_state == 1'b1) ? 1'b1 : 1'b0;

================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(*)
begin
	// Default values
	next_state = 0;
	out = 1'b1;
	case (present_state)
	0: begin
	if(in)
	begin
	next_state = 0;
	out = 1'b1;
	end
	else
	begin
	next_state = 1;
	out = 1'b0;
	end
	end
	1: begin
	if(in)
	begin
	next_state = 1;
	out = 1'b0;
	end
	else
	begin
	next_state = 0;
	out = 1'b1;
	end
	end
	endcase
end
always @(posedge clk)
begin
	if(reset)
	present_state <= 0;
	else
	present_
================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial 
begin
	present_state <= 1'b0;
end
always @(posedge clk)
begin
	if (reset)
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	1'b0:
	begin
	next_state <= in ? 1'b0 : 1'b1;
	out <= in ? 1'b0 : 1'b1;
	end
	1'b1:
	begin
	next_state <= in ? 1'b1 : 1'b0;
	out <= in ? 1'b1 : 1'b0;
	end
	endcase
end

================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or posedge reset)
begin
if (reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @ (present_state or in)
begin
case(present_state)
	0: if(in)
	begin
	next_state = 0;
	out = 1;
	end
	else
	begin
	next_state = 1;
	out = 0;
	end
	1: if(in)
	begin
	next_state = 1;
	out = 1;
	end
	else
	begin
	next_state = 0;
	out = 0;
	end
endcase
end

================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=0 in state 0 and out=1 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(in, present_state)
begin
case(present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk, posedge reset)
begin
if(reset)
begin
present_state <= 0;
next_state <= 0;
out <= 0;
end
else
begin
present_state <= next_state;
out <= (next_state == 1) ? 1 : 0;
end
end
always@(present_state, in)
begin
case(present_state)
0:
begin
if(in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
end
1:
begin
if(in)
begin
next_state <= 1;
end
else
begin
next_state <= 0;
end
end
endcase
end

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'b0: begin
if(in==1'b0)
next_state <= 1'b0;
else
next_state <= 1'b1;
end
1'b1: begin
if(in==1'b0)
next_state <= 1'b1;
else
next_state <= 1'b0;
end
endcase
end
assign out = (present_state == 1'b1) ? 1'b1 : 1'b0;

================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter S0=0, S1=1;
always @(posedge clk)
begin
if(reset == 1'b1)
	present_state <= S0;
else
	present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
	S0: if(in == 1)
	next_state <= S0;
	else
	next_state <= S1;
	S1: if(in == 1)
	next_state <= S1;
	else
	next_state <= S0;
	default: next_state <= S0;
endcase
end
assign out = (present_state==S0);

================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(*)
begin
case(present_state)
0: begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1: begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// reset=1 resets the state machine to state 0
always@(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always@(present_state, in)
begin
case(present_state)
0:
begin
if(in)
next_state = 0;
else
next_state = 1;
end
1:
begin
if(in)
next_state = 1;
else
next_state = 0;
end
default:
next_state = 0;
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @ (in, present_state)
begin
case(present_state)
0:
begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
default:
next_state <= 0;
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
parameter S0=0, S1=1;
always @(posedge clk)
begin
if(reset)
present_state <= S0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
S0: if(in)
begin
next_state <= S0;
out <= 0;
end
else
begin
next_state <= S1;
out <= 0;
end
S1: if(in)
begin
next_state <= S1;
out <= 0;
end
else
begin
next_state <= S0;
out <= 1;
end
endcase
end

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Use next_state to store the next state of the fsm
always @(posedge clk)
begin
if (reset)
present_state <= 1'b0;
else
present_state <= next_state;
end
// Use state_table to store the next state
always @(present_state, in)
begin
case (present_state)
1'b0: begin
if (in)
next_state = 1'b0;
else
next_state = 1'b1;
end
1'b1: begin
if (in)
next_state = 1'b1;
else
next_state = 1'b0;
end
endcase
end

================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
begin
present_state <= 1'b0;
next_state <= 1'b0;
out <= 1'b0;
end
else
begin
case (present_state)
1'b0:
begin
if (in)
begin
next_state <= 1'b0;
out <= 1'b0;
end
else
begin
next_state <= 1'b1;
out <= 1'b0;
end
end
1'b1:
begin
if (in)
begin
next_state <= 1'b1;
out <= 1'b0;
end
else
begin
next_state <= 1'b0;
out <= 1'b1;
end
end
endcase
end
end
always @(in or present_state
================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in) begin
case(present_state)
0: begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1: begin
if(in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state or in)
begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
