example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
 always@(posedge clk or posedge reset) 
 begin
 if(reset)
 q <= 1; 
 else if(q==4'b1111)
 q <= 1; 
 else
 q <= q + 1; 
 end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if(reset)
q<=4'b0001;
else begin
if(q==12)
q<=4'b0001;
else
q<=q+4'b0001;
end
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @(posedge clk) case (reset)
	0: q<=4'd1;
	1: q<=4'd12;
	default: q<=q+4'd1;
endcase

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset)
	begin
	if (reset == 1)
	q <= 4'b0000;
	else
	begin
	if (q == 4'd12)
	q <= 4'b0000;
	else
	q <= q + 4'b0001;
	end
	end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
 if(reset)
 q <= 4'b1;
 else begin
 case(q)
 4'b1111: q <= 4'b1111;
 4'b1111: q <= 4'b1111;
 4'b1111: q <= 4'b1111;
 4'b1111: q <= 4'b1111;
 4'b1111: q <= 4'b1111;
 4'b1111: q <= 4'b1111;
 default: q <= q + 4'b0001;
 endcase
 end
 end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
reg startIdle; 
always @ (posedge clk) begin
	if (reset != startIdle) begin
	// case when reset occurs
	 q <= 4'b1000;
	end
	else if (q == 12) begin
	// case when q reaches 12
	 q <= 4'b1000;
	end
	else begin // otherwise
	// default
	q <= q + 4'b0001;
	end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk ) begin
 case ( {reset,q} )
 // on reset or q is 12, q = 4'b0001
 32'h000_0001: q <= 4'h1;
 // else, q + 1
 default: q <= q + 4'h1;
 endcase
 end

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(negedge clk, posedge reset) begin
 if(reset)
 q = 4'b0000;
 else if(q == 4'd12)
 q = 4'b0000;
 else
 q = q + 4'b0001;
 end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if(reset == 1'b0)
	q <= 4'b0000;
else if(q == 4'd9)
	q <= 4'b0000;
else
	begin
	if (q == 4'd5)
	q <= 4'b0000;
	else 
	begin
	q <= q + 4'b0001;
	end
	end
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
	if (reset == 1'b1) 
	// on reset, assign q to zero 
	begin
	// synthesis full_case
	case (q) 
	// synthesis parallel_case

	1'd0:
	begin
	// synthesis full_case
	q <= 1'd1; 
	end
	9'd11:
	begin
	// synthesis full_case
	q <= 1'd0; 
	end
	default:
	begin
	// synthesis full_case
	q <= q + 1'b1; 
	end
	// end case statement
	end 
 // end case statement
end 
// end always block 

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk)
begin
if(reset)
q <= 4'd1;
else if(q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
if(reset)
q <= 1; 
else if(q == 12)
q <= 1;
else
q <= q + 1;
end 

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin 
if (reset == 1)
	q <= 4'd1;
else if(q == 12)
	q <= 4'd1;
else
	q <= q + 4'd1;
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk )
begin
	if(reset)
	begin
	q <= 0;
	end
	else if(q == 4'd11)
	begin
	q <= 0;
	end
	else
	begin
	q <= q + 1'b1;
	end	
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
 begin
if(reset)
q <= 0;
else
q <= (q == 3) ? 1 : q + 1 ;
end // end always block block elements to the inner

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@ (posedge clk or posedge reset)
begin
if(reset)
begin
q <= 1'b0;
end
else
begin
case (q)
// starting detection #0 in a 12 so 4th bit is '1'
4'b0111:
begin
q <= 4'b0001;
end
// detect q = 12, 4th bit is '0' resulting in q being incremented to 5
4'b0010:
begin
q <= q + 1'b1;
end
// detect q = '10010' (q is incremented and q[3] is '0'). The incremented to itself so 4th bit is now '0'
4'b0101:
begin
q <= q + 1'b1;
end
// detect q = '10011' (q remains equal to '10011'). The 4th bit is unchanged
================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
	if ( reset == 1'b0)
	// at end of reset, give each case a default q assigned
	// to set up counter that's still adding j and k after reset
	// ( the only way to access q[3:0] is at end of reset when
	// q[3:0] is assigned to 0 - and completes an increment from 1 to 12)
	begin 
	case ( q[3:0] )
	0: q[3:0] <= 4'b0000;
	1: q[3:0] <= 4'b1000;
	2: q[3:0] <= 4'b0100;
	3: q[3:0] <= 4'b0010;
	4: q[3:0] <= 4'b0001;
	5: q[3:0
================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
	if (reset)
	begin
	//Pulses once to facilitate a shift in the signal
	q = q + 1;
	end 
	else if (q == 12) // because bit 0 has a value of 1
	begin
	q = 1;
	//Pulses once to facilitate a shift in the signal
	end
	else 
	begin
	q = q + 1;
	end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
 if (reset | ( q == 12) ) begin 
q <= 1; 
end 
else begin 
if (q == 12) q<=1; 
else q<=q+1; 
end 
end 

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk, posedge reset) 
begin 
if (reset) 
q <= 4'h1; 
else 
begin 
if (q == 4'hC) 
q <= 4'h1; 
else 
q <= q + 4'h1; 
end 
end 

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk) begin 
if(reset == 1)
q <= 1'b1;
else if(q == 4'd9)
q <= 1'b1;
else
q <= q + 1'b1;
end

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or reset) 
begin 
	if (reset) 
	begin 
// how do i report an error here? 
// i have found which always block doesnt run. copying q to 0? 
// what about an infinite loop if i copy q to 1? 
// ugly codes: int q_big = q[3]; int q_already_12 = 0; 
// and clk = 0 is big enough to get into this block? 
// there's code here but i have no idea how and why it works 
	q <= 4'h1;
// the follow code will only run once per time step, and only if q is equal to 12 
// i am using a timing check above the reset check, but maybe i need another update 
	if(q_big == 1) 
	begin 
	// ensure q hasn't
================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
 begin
 if(reset)
 q<=4'b1;
 else begin 
 case(q)
 4'd12 : q<=4'd1;
 4'd255: q <=q + 4'd 1;
 default: q<= q<<1 + q;
 endcase
 end
 end
 

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b1;
else begin
case(q)
4'b1: 
	q <= 4'b2;
4'b2: 
	q <= 4'b3;
4'b3: 
	q <= 4'b4;
4'b4: 
	q <= 4'b5;
4'b5: 
	q <= 4'b6; 
4'b6: 
	q <= 4'b7;
4'b7: 
	q <= 4'b8;
4'b8: 
	q <= 4'b9;
4'b9: 
	q <= 4'b10;
4'b10: 
	q <= 4'b11;
4'b11: 

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (negedge clk or posedge reset)
begin
if (~reset)
q <= 4'b0000;
else
case (q)
4'b0000:
q <= 4'b0001;
4'b0001:
q <= 4'b0010;
4'b0010:
q <= 4'b0011;
4'b0011:
q <= 4'b0100;
4'b0100:
q <= 4'b0101;
4'b0101:
q <= 4'b0110;
4'b0110:
q <= 4'b0111;
4'b0111:
q <= 4'b1000;
4'b1000:
q <= 4'b1001;
4'b1001:
q <= 4'b1010;
4'b1010:
q <= 4'b1011;
================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset) 
	begin
	if (reset) q<=4'b0001; //on reset, q = 1 
	else
	if(q==12) q<=4'b0001; // adjust for 12
	else q<=q+1; //otherwise, increment q
end



================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset) 
begin
 if(reset) 
 begin
q <= 0; 
 end
 else
 begin
if (q == 12) 
 q <= 0; 
 else 
q <= q + 1; 
 end
end 

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if(reset) q <= 0;
 else if(q == 12) begin
q <= 0;
 end
 else q <= q + 1;
 end

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// assignments 
always @ (posedge clk or posedge reset) begin
	if (reset)
	begin 
	q <= 4'b0000; // reset the fifo
	end
	else 
	case (q) // synopsys full_case parallel_case 
	4'b0000: begin q <= 4'b0001; end // normal increment
	4'b0001: begin q <= 4'b1101; end // increment q to 14
	4'b1101: begin q <= 4'b1111; end // increment q to 15
	4'b1111: begin q <= 4'b0011; end // increment q to 17
	4'b0011: begin q <= 4'b1011; end // increment q to 13
	4'b1011: begin q <= 4'b1100; end // increment q to 12
	4'b
================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if (reset)
	begin
	q <= 4'd1;
	end
	else if (q == 4'd12)
	begin
	q <= 4'd1;
	end
	else if (q == 4'd5 && reset==0)
	begin
	q <= q + 1;
	end
	else
	begin
	q <= q;
	end
end

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk ) begin
if (reset)
q <= 4'b0000;
else begin
if (q == 4'd12)
q <= 4'b0000;
else
q <= q + 4'b0001;
end
end

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin 
	if(reset) 
	begin
	 	q <= 4'b0001;
	end
	else 
	begin	
	 	if(q == 11) begin
	 	 	q <= 4'b0001;
	 	end
	 	else begin
	 	 	q <= q + 1;
	 	end
	end
end

================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
case(reset)
1'b0: q<=4'd1; // on reset
12'b1111111111: q<=4'd1; // on second to last value @ 12

default: q<=q+4'd1; // on every other cycle
endcase
end

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
// on reset assign the value to 1 
always @ (posedge clk) begin
 if (reset) q <= 4'b1 
 else if (q == 4'b12) q <= 4'b1 
 else q = q + 1; 
end 

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(*)
begin
	case {reset,q[3:1]} 
	{1'b0, 3'd0}: q[3:1] <= 4'd1;
	{1'b0, 3'd1}: q[3:1] <= 4'd2;
	{1'b0, 3'd2}: q[3:1] <= 4'd3;
	{1'b0, 3'd3}: q[3:1] <= 4'd4;
	{1'b0, 3'd4}: q[3:1] <= 4'd5;
	{1'b0, 3'd5}: q[3:1] <= 4'd6;
	{1'b0, 3'd6}: q[3:1] <= 4'd7;
	{1'b0, 3'd7}: q[3:1] <= 4
================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@( posedge clk or posedge reset )
if (reset)
	q = 4'b1;
else if (q==12)
	q = 4'b1;
else
	q=q+1; 

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin
	if (reset) q <= 4'd1;
	else if (q == 4'd12) q <= 4'd1;
	else q <= q + 4'd1;
end

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if (reset) process;
	else if (q >= 12) process_over; 
	else process;
end 
// synchronizer to get 12 out of the counter 
// through clock and reset
task process;	
begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	@(posedge clk)	begin
	
================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
if(reset == 1)
q<=4'b1111;
else case(q) 
4'b1111: q <= 4'b1110; 
4'b1110: q<= 4'b1101; 
4'b1101: q <= 4'b1100; 
default: q<= q+ 1'b1;
endcase
end

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
if (reset)
q = 4'd1; 
else if (q == 4'd12)
q = 4'd1; 
else 
q = q + 4'd1; 
end 

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
	begin
	if(reset) q <= 4'b0000 ;
	else if(q==12) q <= 4'b0000 ;
	else q <= q + 4'b0000 ;
	end

================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk ) begin
	if(reset == 1'b1) begin
// debug
//$display("Reset");
	// debug
	//q = 4'b0000; //reset <= 0; // force output to zero
	$display(":%t", $time," - %m : q = 0");
	q=4'b0000;
	 end 
	else begin
//debug
//$display( "Time:%t - q:%d", $time,q);
	if(q == 12)begin
//debug
//$display( "Time:%t - %m : q = 12");
	q=4'b0000;
	 end 
	else
//debug
//$display( "Time:%t - %m : q = %d", $time,q);
	q = q + 4'h1
================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
 always @(posedge clk or posedge reset) begin 
 // if reset, q should be 1 
 if (reset == 1'b1) begin 
 q <= 4'b0001; 
 end 
 // assign q to 12 when 12 can be represented as 4 bits 
 else if (q == 4'd12) begin 
 q <= 4'b0001; 
 end 
 // otherwise, increment q 
 else begin 
 q <= q + 4'b0001; 
 end 
 end

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk, posedge reset)
begin
if (reset)
q = 4'b0000;
else begin
if (q == 4'd12) 
q=4'd1;
else 
q = q + 1;
end
end

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk)
begin 
	if (reset) q <= 4'h1; // case 1
	else if (q == 12) q <= 4'h1; // case 2 
	else q <= q + 4'h1;	 // case 3 
end

================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
	if (reset)
	q<= 4'b0001;
	else if (q == 12)
	q <= 4'b0001;
	else
	q <= q + 4'b0001;
	end

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@( posedge clk) 
begin
	if(reset)
	begin
	q <= 4'b0001;
	end
	else
	begin
	if (q == 12)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q = q + 4'b0001;
	end
	end
end

================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk) begin
	if (!reset) begin
	q<=4'd1;
	end 
	else if ( q == 4'd12) begin
	q<=4'd1;
	end
	else begin
	q<=q+4'd1;
	end
 end

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ ( posedge clk or posedge reset ) 
begin
if ( reset )
q <= 4'b0000;
else if (q == 12)
q <= 4'b0000;
else 
q <= q + 4'b0001; 
end 

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always @ (posedge clk)

begin
	if (reset)
	// reset case
	begin
	// invalid values because reset could be 0
	// until there is a clock, numbers should be appended here
	q <= 4'b0000;
	end
	else if (q == 12)
	// maximum case
	begin
	/*
	if you keep this code with revision, activate the checker
	the code you can't understand will be checked, so good-bye
	*/
	q <= 4'b0000;
	end
	else
	// normal case
	begin
	q <= q + 1;
	end // flip-flop
end // block always begin


================================================================
