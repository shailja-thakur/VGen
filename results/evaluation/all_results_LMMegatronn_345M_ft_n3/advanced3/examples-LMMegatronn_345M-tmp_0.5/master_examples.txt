example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @ (present_state, x) begin
   case (present_state)
     IDLE:
       if (x==0 && x==0)                               next_state = S1; // start of start of start of start of start
       else if (x==0 && x==1)                            next_state = S2; // start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start of start
    
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset)
begin : FSM_SEQ
  if (reset) begin
    state <= IDLE;
    sm_state <= S0;
    sm_count <= 0;
    sm_count_running <= 0;
    sm_count_running_q <= 0;
    sm_count_running_q_q <= 0;
    sm_count_running_q_q <= 0;
    sm_count_running_q_q <= 0;
    sm_count_running_q_q <= 0;
    sm_count_running_q_q <= 0;
    sm_count_running_q_q <= 0;
    sm_count_running_q_q <= 0;
   
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


assign z = (present_state == S1 ||present_state == S10) && !present_state[0] && !present_state[1] && !present_state[2] && !present_state[3] && !present_state[4] && !present_state[5] && !present_state[6] );

// output logic
always@(posedge clk)
begin
  if (reset) begin
    state <=  IDLE;
    update_state <=  1'b0;
    state <=  IDLE;
    next_state <=  IDLE;
    
  end else begin
    case(state)
      IDLE: begin
        if (x) begin
          state <= 
================================================================
