example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1, and then state 0 in state 0.
always@(posedge clk)
begin
  if(reset)
    present_state <= 0;
  else
    present_state <= next_state;
end

assign out = present_state == 0 ||
                                                                                                                               
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1, if in=1, then go to state 1.
reg [1:0] next_state;
// 0 in 10 in=0, else, go to state 0
// 1 in=0, else, go to state 1
// 2 in=1, then go to state 0
// 3 in=0, else, go to state 1
// 4 in=1, then go to state 0
// 5 in=0, else, go to state 1
// 6 in=1, then go to state 0
// 7 in=0, else, go to state 1
// 8 in=1, then go to state 0
// 9 in=0, else, go to state 1
// 10 in=1, then go to state 0
// 11 in=0, else, go to state 1
// 12 in=1, then go to state 0
// 13 in=
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 1, then state 0 in state 0.
always @(posedge clk)
begin
  if (reset == 1'b1)
  begin
    state <= 1'b0;
    next_state <= 1'b0;
  end
  else
  begin
    state <= next_state;
    if (in == 1'b1)
      next_state <= 1'b0;
    else if (state == 1'b0)
      next_state <= 1'b1;
    else if (state == 1'b1)
      next_state <= 1'b0;
  end
end

assign out = (present_state == 1'b1) ? 1'b1 : 1'b0
================================================================
