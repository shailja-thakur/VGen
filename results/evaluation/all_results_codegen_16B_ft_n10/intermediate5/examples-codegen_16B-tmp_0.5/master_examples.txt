example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk, posedge reset)
begin
	if (reset)
	begin
	// when reset is high, out is 0
	out<=0;
	end
	else
	begin
	if (load)
	begin
	out<=data;
	end
	else
	begin
	// else do the rotation
	out<=out<<amount;
	// rotate by amount
	out<=out>>amount;
	// shift by amount
	end
	end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	// reset the register
	out <= 0;
	end
	else if(load)
	begin
	// load data
	out <= data;
	end
	else
	begin
	// left shift and rotate
	out <= (out << amount) | out >> (8-amount);
	//out <= (out << amount) + (out >> (8-amount));
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk, posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	out<=out<<amount;
	out[7:1]<=out[6:0];
	end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
if(reset)
begin
out <= 8'b0;
end
else if(load)
begin
out <= data;
end
else
begin
out <= {out[6:0],out[7]};
end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
	if (reset)
	begin
	// reset the register to 0
	out = 8'b00000000;
	end
	else if (load)
	begin
	// load the data
	out = data;
	end
	else
	begin
	// left shift and rotate
	out = {out[6:0],out[7]};
	out = {out[7:0],out[7:1]};
	end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	out[7:1] <= out[6:0];
	end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<={out[6:0],out[7]};
	out[7:1]<=out[6:0];
	end
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	// reset
	out <= 8'b0;
	end
	else if(load)
	begin
	// load
	out <= data;
	end
	else
	begin
	// rotate and left shift
	out <= {out[6:0],out[7]};
	out[7:1] <= {out[7],out[7:1]};
	end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	out[7:1] <= out[6:0];
	end
	end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if (reset == 1)
	begin
	// reset
	out <= 0;
	end
	else if (load == 1)
	begin
	// load
	out <= data;
	end
	else 
	begin
	// rotate and left shift
	out <= {out[6:0],out[7]};
	out = out << amount;
	end
end

================================================================
