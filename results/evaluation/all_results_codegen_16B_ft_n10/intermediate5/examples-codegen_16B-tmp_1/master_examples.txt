example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
	if (reset)
	begin
	case(load)
	0: out <= data;
	1: out <= {data [7], data [7],data [7],data [6:0]};	
	endcase	
	end
	else 
	begin
	case(load)
	0: out <= out >> amount;
	1: out <= {out [7],out [7:1]};
	endcase
	end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
	if(reset == 1'b1 && load == 1'b1) 
	begin	
	 out <= data;
	end
	else if(load == 1'b1 && reset == 1'b0)
	begin
	out <= {data[0+:amount],data[7-:8]};
	end
	else if(load == 1'b0 && reset == 1'b0)
	begin	
	 out <= left_rot(out,amount);
	end
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
//only items that are zero need not be shifted
always @(posedge clk, posedge reset)
begin
if(reset)
begin
out<= 8'b0;
end
else
begin
if(load)
out <=data;
else
begin
if ( amount>0 )
begin
out <= out << amount;
// add zeros when rotating towards 000
// set the LSB to 0
out[0] <= 1'b0;
end
else
begin
// same operation except the right most bits are rotating 
out <= out >> abs(amount);
// add the zeros when rotating towards 000
out[abs(amount)-1] <=1'b0;
end
end
end

end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// this creates the following left shift and rotation operations simulatenously
always @ (posedge clk)
begin
if (reset == 1'b1)
	out = 8'b00000000;
else if (load == 1'b1)
	out = data;
else
begin
out = out << amount;
out = out >> amount;
end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	begin
	if(reset) out<=0;
 	else if(load) out<=data;
	else begin 
	out->left_shift(amount);
	out<=out;
	end
	end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
	if(!reset) begin
	// reset
	out = 8'h00;
	end
	else	if(load)
	begin
	// load
	out = data;
	end
	else
	begin
	// rotate and left shift
	out = {out[6:0],out[7]};
	out = {out[0],out[7:1]};
	// add correction at the end of rotation
	// to had a 1 in the msb of the rotation instead of all 0
	out = out + {8'h01} + {8'h01} - {8'h00};
	end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
	if(reset)
	begin
	// resetting the register
	out=0;
	end
	else if(load)
	begin
	// when load is high, load data to out
	out=data;
	end
	else
	begin
	// else rotate the register and left shift
	out=({data[0],data[7:1]});
	if(amount > 2)
	begin
	// greater than 2, then do the rotate and left shift in one loop
	// to prevent generating excess stressed value in internal registers
	out=~out;
	end
	if((amount > 2) && (amount <7 )) begin
	// width less than 8, so add while loop and a generate
	// capped at 4 bit addition.
	while(amount <5 )
	begin
	out
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out = 8'b00000001;
	end
	else
	if(load)
	begin
	out = data;
	end
	else begin
	out = {out[6:0],out[7]};
	end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
	if (reset) begin
	case (load)
	1'b0:	begin	out = data; end
	1'b1:	begin	out = data <<< amount; end
	endcase
	end // reset case
	else begin
	case (load)
	1'b0:	begin	out = out; end
	1'b1:	begin	out = data; end
	endcase
	end
	end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk )
if (load) begin
	out <= data;
	end
else begin
	//rotate
	out <= {out[6:0],out[7]};
	//left shift
	out <= {out[0+amount:amount],out[7:1+amount]};
	end

================================================================
