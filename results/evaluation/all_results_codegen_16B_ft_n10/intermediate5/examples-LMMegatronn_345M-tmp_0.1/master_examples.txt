example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_2;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_3;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_4;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_5;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_6;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_7;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_8;

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;

// This is the exclusive part of the shift register
reg [7:0] data_hold;
// This is the exclusive part of the shift register
reg [7:0] data_hold_r;

// This is the exclusive part of the shift register
reg [7:0] data_hold_r_r;

// This is the exclusive part of the shift register
reg [7:0] data_hold_r_r;

// This is the exclusive part of the shift register
reg [7:0] data_hold_r_r;

// This is the exclusive part of the shift register
reg [7:0] data_hold_r_r;

// This is the exclusive part of the shift register
reg [7:0] data_hold_r_r;

// This is the exclusive part
================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
// which is the "shift_reg" is the LSB of shift_reg
always@(posedge clk or negedge reset)
begin
    if(!reset)
    begin
        shift_reg <= 8'b0;
    end
    else
    begin
        if(load)
        begin
            shift_reg <= data;
        end
        else
        begin
            shift_reg <= {shift_reg[6:0],1'b0};
        end
    end
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_2;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_3;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_4;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_5;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_6;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_7;
// which is the "shift left" or "shift left"
reg [7:0] shift_reg_8;

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;

always @(posedge clk)
begin
    if (reset == 1'b1)
    begin
        shift_reg <= 0;
        out <= 0;
    end
    else
    begin
        if (load == 1'b1)
        begin
            shift_reg <= data;
            out <= shift_reg[7:0];
        end
        else
        begin
            shift_reg <= {shift_reg[6:0],1
================================================================
