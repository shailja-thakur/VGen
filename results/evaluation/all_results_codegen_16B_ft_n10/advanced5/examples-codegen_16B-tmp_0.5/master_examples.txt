example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE :
begin
if(a && b)
next_state = SAB;
else if(a)
next_state = SA;
else if(b)
next_state = SB;
end
SA :
begin
if(b)
next_state = SAB;
else
next_state = SA;
end
SB :
begin
if(a)
next_state = SAB;
else
next_state = SB;
end
SAB :
begin
next_state = IDLE;
end
default :
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk) begin
if (reset) begin
cur_state <= IDLE;
z <= 0;
end
else begin
case (cur_state)
IDLE: begin
if (a && b) begin
cur_state <= SAB;
z <= 0;
end
if (a) begin
cur_state <= SA;
z <= 0;
end
if (b) begin
cur_state <= SB;
z <= 0;
end
end
SA: begin
if (b) begin
cur_state <= SAB;
z <= 0;
end
end
SB: begin
if (a) begin
cur_state <= SAB;
z <= 0;
end
end
SAB: begin
cur_state <= IDLE;
z <= 1;
end
endcase
end
end

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
// z is assigned zero when cur_state is SB
// z is assigned zero when cur_state is SA
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
z=0;
if(a)
next_state = SA;
else if(b)
next_state = SB;
else
next_state = IDLE;
end
SA: begin
z=0;
if(b)
next_state = SAB;
else
next_state = SA;
end
SB: begin
z=0;
if(a)
next_state = SAB;
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always@(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE : begin
if(a==1 && b==1)
next_state = SA;
else if(a==1)
next_state = SA;
else if(b==1)
next_state = SB;
else
next_state = IDLE;
z = 0;
end
SA : begin
if(a==1 && b==1)
next_state = SAB;
else if(a==1)
next_state = SA;
else if(b==1)
next_state = SAB;
else
next_state = SA;
z = 0;
end
SB
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always@(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state,a,b)
begin
case(cur_state)
IDLE : begin
if(a == 1 && b == 1)
next_state = SA;
else if(a == 1)
next_state = SB;
else if(b == 1)
next_state = SAB;
else
next_state = IDLE;
end
SA : begin
if(b == 1)
next_state = SAB;
else
next_state = SA;
end
SB : begin
if(a == 1)
next_state = SAB;
else
next_state = SB;
end
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(cur_state)
begin
case(cur_state)
IDLE : begin
if(a)
cur_state <= SA;
else if(b)
cur_state <= SB;
else
cur_state <= IDLE;
end
SA : begin
if(b)
cur_state <= SAB;
else
cur_state <= IDLE;
end
SB : begin
if(a)
cur_state <= SAB;
else
cur_state <= IDLE;
end
SAB : begin
cur_state <= IDLE;
end
default : begin
cur_state <= IDLE;
end
endcase
end
// FSMD flip-flops with synchronous reset
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// cur_state and next_state are both assigned based on the input signals a and b.
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE: begin
if(a == 1 && b == 1)
next_state <= SA;
else
next_state <= IDLE;
end
SA: begin
if(a == 1)
next_state <= SB;
else if(b == 1)
next_state <= SAB;
else
next_state <= SA;
end
SB: begin
if(b == 1)
next_state <= SAB;
else if(a == 1)
next_state <= SA;
else
next_state <= SB
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk,posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state,a,b)
begin
case(cur_state)
IDLE:
begin
if(a==1 && b==1)
begin
next_state = SA;
z=0;
end
else if(a==0 && b==0)
begin
next_state = IDLE;
z=0;
end
else
begin
next_state = IDLE;
z=0;
end
end
SA:
begin
if(a==0 && b==0)
begin
next_state = SB;
z=0;
end
else if(a==1 && b==1)
begin
next_state = S
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk or posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @ (cur_state or a or b)
begin
case (cur_state)
IDLE:
begin
if (a==1 && b==1)
begin
next_state = SA;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
end
SA:
begin
if (a==1)
begin
next_state = SB;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
end
SB:
begin
if (b==1)
begin
next_state = SAB;
z = 1;
end
else
begin
next_
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a == 1 && b == 1)
begin
next_state = SA;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
end
SA:
begin
if(b == 1)
begin
next_state = SB;
z = 0;
end
else
begin
next_state = IDLE;
z = 0;
end
end
SB:
begin
if(a == 1)
begin
next_state = SAB;
z = 1;
end
else
begin
next_
================================================================
