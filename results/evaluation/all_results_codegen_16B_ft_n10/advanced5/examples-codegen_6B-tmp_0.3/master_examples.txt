example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a == 1) {
    if (b == 1) {
      next_state <= SAB;
    }
    else {
      next_state <= SA;
    }
  }
  else {
    if (b == 1) {
      next_state <= SB;
    }
    else {
      next_state <= IDLE;
    }
  }
  z <= next_state;
end
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    next_state = IDLE;
    cur_state = IDLE;
  end else begin
    if (a) begin
      next_state = SA;
    end else begin
      if (b) begin
        next_state = SAB;
      end else begin
        if (cur_state == IDLE) begin
          next_state = SA;
        end else begin
          if (cur_state == SA) begin
            next_state = SB;
          end else begin
            if (cur_state == SB) begin
              next_state = SAB;
            end else begin
              next_state = IDLE;
            end
          end
        end
      end
    end
  end
  z <= next_state;
end


================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= IDLE;
  if (a == 1)
    next_state <= SA;
  if (b == 1)
    next_state <= SB;
  if (a == 1 && b == 1)
    next_state <= SAB;
  if (cur_state == IDLE && a == 1)
    next_state <= SA;
  if (cur_state == IDLE && b == 1)
    next_state <= SB;
  if (cur_state == IDLE && a == 1 && b == 1)
    next_state <= SAB;
  z <= (cur_state == SAB);
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (reset) begin
    cur_state = IDLE;
    next_state = IDLE;
  end
  else if (a && b) begin
    cur_state = SAB;
  end
  else if (a) begin
    cur_state = SA;
  end
  else if (b) begin
    cur_state = SB;
  end
  else begin
    cur_state = IDLE;
  end
  next_state = cur_state;
end


================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state <= IDLE;
    end
    else begin
        cur_state <= next_state;
        next_state <= IDLE;
        next_state <= SA;
        next_state <= SB;
        next_state <= SAB;
        next_state <= SAB;
    end
end

// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB,
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (cur_state == IDLE)
    if (a == 1)
      next_state = SA;
    else if (b == 1)
      next_state = SB;
    else
      next_state = IDLE;
  else if (cur_state == SA)
    if (b == 1)
      next_state = SAB;
    else
      next_state = IDLE;
  else if (cur_state == SB)
    if (a == 1)
      next_state = SAB;
    else
      next_state = IDLE;
  else if (cur_state == SAB)
    next_state = IDLE;
  else
    next_state = IDLE;
  cur_state = next_state;
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state = IDLE;
    next_state = IDLE;
  end
  else begin
    cur_state = next_state;
    next_state = IDLE;
    if (a) begin
      if (b) next_state = SAB;
      else next_state = SA;
    end
    else if (b) next_state = SB;
  end
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else if (a && b) begin
    cur_state <= SAB;
  end
  else if (a) begin
    cur_state <= SA;
  end
  else if (b) begin
    cur_state <= SB;
  end
  else begin
    cur_state <= IDLE;
  end
  next_state <= cur_state;
end


================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= IDLE;
  if (cur_state == IDLE)
  begin
    if (a == 1)
      next_state <= SA;
    else if (b == 1)
      next_state <= SB;
    else if (a == 1 && b == 1)
      next_state <= SAB;
  end
end


================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= IDLE;
  next_state <= IDLE;
  if (a == 1)
    cur_state <= SA;
  if (b == 1)
    cur_state <= SB;
  if (a == 1 && b == 1)
    cur_state <= SAB;
  if (cur_state == IDLE && a == 1 && b == 1)
    next_state <= SAB;
  if (cur_state == IDLE && a == 1)
    next_state <= SA;
  if (cur_state == IDLE && b == 1)
    next_state <= SB;
  if (cur_state == SA && b == 1)
    next_state <= SAB;
  if (cur_state == SB && a == 1)
    next_state <= SAB
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset) begin
        cur_state = IDLE;
        next_state = IDLE;
    end else begin
        if (cur_state == IDLE) begin
            if (a) begin
                cur_state = SA;
            end else begin
                if (b) begin
                    cur_state = SB;
                end else begin
                    cur_state = IDLE;
                end
            end
        end
        if (cur_state == SA) begin
            if (b) begin
                next_state = SAB;
            end else begin
                if (a) begin
                    next_state = SAB;
                end else begin
                    next_state = IDLE;
                end
            end
        end
        if (cur_state == SB) begin
            if (a) begin

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= cur_state;
  if (cur_state == IDLE)
  begin
    if (a == 1) next_state <= SA;
    if (b == 1) next_state <= SB;
  end
  if (cur_state == SA)
  begin
    if (b == 1) next_state <= SAB;
  end
  if (cur_state == SB)
  begin
    if (a == 1) next_state <= SAB;
  end
  if (cur_state == SAB)
  begin
    next_state <= IDLE;
  end
end


================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= (a == 1 && b == 1) ? SAB :
              (a == 1 && cur_state == IDLE) ? SA :
              (b == 1 && cur_state == IDLE) ? SB : IDLE;
end

================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end else begin
    cur_state <= next_state;
    next_state <= next_state;
  end
end

// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= cur_state;
  if (cur_state == IDLE)
  begin
    if (a == 1)
    begin
      next_state <= SA;
    end
    else if (b == 1)
    begin
      next_state <= SB;
    end
    else if (a == 1 && b == 1)
    begin
      next_state <= SAB;
    end
  end
end

================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (next_state == IDLE)
    begin
        if (a == 1)
        begin
            next_state = SA;
            cur_state = SA;
        end
        else
        begin
            next_state = SB;
            cur_state = SB;
        end
    end
    else
    begin
        if (next_state == SA)
        begin
            if (b == 1)
            begin
                next_state = SAB;
                cur_state = SAB;
            end
            else
            begin
                next_state = SA;
                cur_state = SA;
            end
        end
        else
        begin
            if (next_state == SB)
            begin
                if (a == 1)
                begin
                    next_state = SAB;
================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    next_state <= cur_state;
    cur_state <= next_state;
end

================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
    next_state <= cur_state;
    if (cur_state == IDLE)
    begin
        if (a == 1)
            next_state <= SA;
        if (b == 1)
            next_state <= SB;
        if (a == 1 && b == 1)
            next_state <= SAB;
    end
end

================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= (a == 1 && b == 1) ? SAB :
              (a == 1 && b == 0) ? SA :
              (a == 0 && b == 1) ? SB :
              (a == 0 && b == 0) ? IDLE :
              (a == 1 && b == 1) ? SAB :
              (a == 0 && b == 0) ? SA :
              (a == 1 && b == 0) ? SB :
              (a == 0 && b == 1) ? SAB :
              (a == 0 && b == 0) ? IDLE :
              (a == 1 && b == 1) ? SAB :
              (a == 0 && b == 1) ? SA :
              (a == 0 && b == 0) ? SB :
              
================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge a or negedge b)
begin
  if (cur_state == IDLE)
  begin
    if (a == 1)
    begin
      next_state = SA;
      cur_state = SA;
    end
    else if (b == 1)
    begin
      next_state = SB;
      cur_state = SB;
    end
    else if (a == 1 and b == 1)
    begin
      next_state = SAB;
      cur_state = SAB;
    end
  end
  else if (cur_state == SA)
  begin
    if (b == 1)
    begin
      next_state = SAB;
      cur_state = SAB;
    end
    else if (a == 1)
    begin
      next_state = SA
================================================================
