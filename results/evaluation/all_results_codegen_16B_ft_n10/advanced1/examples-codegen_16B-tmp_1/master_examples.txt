example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s[7] = a[7] ^ b[7] ^ s[7];
// set the final carry to the final carry after adding the low 0 bits to the final result
	assign s[6] = ((~a[7]) & (b[7] ^ a[7]) & s[7]) | ((~(a[7] ^ b[7])) & ~s[7]);
	assign s[5] = ((~a[6]) & (b[6] ^ a[6]) & s[6]) | ((~(a[6] ^ b[6])) & ~s[6]);
	assign s[4] = ((~a[5]) & (b[5] ^ a[5]) & s[5]) | ((~(a[5] ^ b[5])) & ~s[5]);
	assign s
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s = a + b;
	assign overflow = (~a[7] & b[7] & s[7]) + (a[7] & ~b[7] & ~s[7]) + (a[7] & ~b[7] & s[7]);


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = (a[0]^b[0]^s[0])
assign s[1] = (a[1]^b[1]^s[1]) 
assign s[2] = (a[2]^b[2]^s[2])
assign s[3] = (a[3]^b[3]^s[3])
assign s[4] = (a[4]^b[4]^s[4])
assign s[5] = (a[5]^b[5]^s[5])
assign s[6] = (a[6]^b[6]^s[6])
assign s[7] = (a[7]^b[7]^s[7])
assign overflow = ((a[7]^b[7]
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//add two 8 bit numbers 
 wire t1,t2,t3;

x_add X1(
.a(a),
.b(b),
.cin(1'b0),
.s(s),
.cout(t1)
); 

x_add X2(
.a(a),
.b(b),
.cin(1'b1),
.s(s),
.cout(t2)
); 

x_add X3({8{1'b0}},{8{1'b1}},1'b1,s,t3);


assign overflow=(a[7]==b[7] && a[7] != s[7]) ||
(a[7]==s[7] && b[7] != s[7]) ||

(a[7
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 wire temp;
 assign temp=a[7]+b[7];
 wire [7:0] carry;
 assign carry[0]= temp[0] || ~ a[7] || ~ b[7];
 assign carry[1]= temp[1] || ~ a[7] && temp[0] || ~ b[7] && ~ temp[0];
 assign carry[2]= temp[2] || ~ a[7] && temp[1] || ~ b[7] && temp[0];
 assign carry[3]= temp[3] || ~ a[7] && temp[2] || ~ b[7] && temp[1];
 assign carry[4]= temp[4] || ~ a[7] && temp[3] || ~ b[7] && temp[2];
 assign carry[5]= temp[5] || ~ a[7] && temp[4] || ~ b[
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// body

assign s = (a ^ b) ^ {1'b0,a[7],a[0]}; // floor(a + b);
assign overflow = ((a[7] & b[7]) ? ~((a[7] ^ b[7]) & s[7]) : a[7] ^ b[7]) & (~(a[7] ^ b[7]) & s[7]);


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] c;


seven_bit_adder add1(

// input conditions
.a( a[7:0] ), .b( b[7:0] ), 
// carry out of 1 and 2 most significant bits
.s( s[7:0] ), 
// adder output
.c( c[7:0] )
);

assign overflow = (s[7]&~b[7]) | (b[7]&~a[7]) | c[5];
 

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg of1, of2; 
wire sign, sign1, sign3; 
wire [7:0] bxor;
wire [7:0] array1[0:2];
wire [7:0] array2[0:2]; 
wire [7:0] array3[0:2];
wire [7:0] array4[0:2];
wire [7:0] array5[0:2];
wire [7:0] array6[0:2];
wire [7:0] sum1[0:1];
wire [7:0] sum2[0:1];
wire [7:0] sum3[0:1];
wire [7:0] sum4[0:1];
wire [7:0] sum5[0:1];
wire [7:0] sum6[0:1];
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 assign s = a + b;
 assign overflow = (a[7] == b[7] && a[7] != s[7]) ;
 

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
