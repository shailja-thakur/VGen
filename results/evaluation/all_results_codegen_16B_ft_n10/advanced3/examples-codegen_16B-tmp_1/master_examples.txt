example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// FSM_async_reset asyncrhonous reset implementation 
always@ (reset)
case (reset)
1'b0: present_state <= IDLE;
1'b1: present_state <= next_state
endcase


// FSM_async_reset functionally generates 1 clock delay when reset is asserted
always@(posedge clk)
case(present_state)
IDLE: 
begin
if(x) 
begin
next_state <= S1;
end
else
begin
next_state <= IDLE;
end
end
S1:
begin
if(x)
begin
next_state <= S10;
end
else
begin
next_state <= IDLE;
end
end
S10:
begin
if(x)
begin
next_state <= S101;
end
else
begin

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin
 case(present_state)
 IDLE: if(x)
 present_state <= S1;
 IDLE: if(~x)
 present_state <= IDLE;
 S1: if(x)
 present_state <= S10;
 S1: if(~x)
 present_state <= IDLE;
 S10: if(x)
 present_state <= S101;
 S10: if(~x)
 present_state <= IDLE;
 S101: if(x)
 present_state <= IDLE;
 S101: if(~x)
 present_state <= S101;
 default : present_state <= IDLE;
 endcase
end

always @(posedge clk )
begin
 if(reset)
 present_state <= IDLE;
 else
 present_state <= next_state;
end

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state = IDLE;
else
present_state = next_state;
end

always @ (*)
begin
 z = (present_state == IDLE) ? 0 : 1; 
 case (present_state)
 IDLE: if(x)
 begin
z = 0;
 next_state = S1;
 end 
else 
 begin
z = 0; 
 next_state = IDLE;
 end 
 S1: if(~x)
 begin
z = 0; 
 next_state = S10; 
 end 
else 
 begin
z = 0;
 next_state = S1; 
 end 
 S10: if(x)
 begin
z = 0; 
 next_state = S101; 
 end 
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (present_state or x)
begin
case (present_state)
IDLE: if (x)
present_state <= S1;
else
present_state <= IDLE;
S1: if (!x)
present_state <= S10;
else
present_state <= IDLE;
S10: if (x)
present_state <= S101;
else
present_state <= IDLE;
S101: begin end 
default : 
present_state <= IDLE;

endcase
end

always @ (present_state or x)
begin
case (present_state)
IDLE: next_state = IDLE;
S1: next_state = S1;
S10: next_state = S10;
S101: next_state = S101;
endcase
end

// determining output signal
always @
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
	if(reset) 
	begin	
	present_state <= IDLE;
	end
	else 
	begin
	present_state <= next_state;
	end
end
always @(*)
begin

	case(present_state)
	IDLE:

	begin
	if(x & (|p_state)) 
	begin
	next_state <= S1;
	z = 0;
	end

	else 
	begin
	next_state <= IDLE;
	z = 0;
	end
	end

	S1: 

	begin
	if(~(x & (|p_state))) 
	begin
	

	next_state <= IDLE;
	z = 0;
	end

	else 
	begin
	next_state <=
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// present state can only change if there is a reset after the next statement
always @( present_state )
begin
 case( present_state )
 IDLE : begin 
if(start)begin 
next_state = S1;
z = 0;
end
 else begin
z = 0;
next_state = IDLE; end
end
 
S1 : begin 
z = 0;
if(x)begin 
next_state = S10;
end
else begin
 next_state = IDLE;
end
 end
 
S10 : begin
if(x)begin
next_state = S101;
end
else begin
next_state = IDLE;
end
end 

S101 : begin 
next_state = IDLE; 
 end
 
endcase 
 end


 always @ (posedge clk)
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 //This is how this machine will work
 not (x_inverse, x); //inverse function : X must be 1 for output z to be 1
 and(s1_and, x, present_state[0]);
 and(s10_and, x_inverse, present_state[0]);
 and(s101_and, x_inverse,x_inverse, present_state[0]); 
 or(z,s1_and, s10_and, present_state[0]);
 always@(posedge clk)
 if(reset) present_state <= IDLE;
 else 
 begin
 case(present_state)
 IDLE: if(x)
 begin
 present_state <= S1;
 end
 else 
 present_state <= IDLE;
 S1: if(x)
 present_state <= IDLE;
 else 
 begin

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// when rset is high: reset present_state to IDLE state
always @(posedge clk)begin 
if (reset) 
present_state <= IDLE;
else
present_state <= next_state;
end

// when x is high: take next_state as the specified state.
// when another source of a higher priority comes in, next_state takes the higher priority next time.
always @(*) 
case (present_state) 
IDLE:
if (x) 
next_state = S1;
else
next_state = IDLE; 

S1:
if (x) 
next_state = IDLE;
else
next_state = S10;

S10:
if (x) 
next_state = S101;
else
next_state = IDLE;

S101:

================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(present_state,x)
	begin: state_table
	case(present_state)
	IDLE: if(x==1) begin next_state=S1; end
	else begin next_state=IDLE; end
	S1: if(x==0) begin next_state=IDLE; end
	else begin next_state=S10; end
	S10: if(x==1) begin next_state=S101; end
	else begin next_state=IDLE; end
	S101: begin next_state=IDLE; end
	endcase
	end
// Test bench //////////////////////////
integer count;
initial begin
count=0;
present_state=IDLE;
repeat (4)
begin @ (posedge clk); present_state=next_state; end
	if(reset==1)
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin

if(!reset)
present_state <= IDLE;
else 
present_state <= next_state;

end

always @ (present_state or x)
begin
z = 1;
case (present_state)
IDLE: if(x) 
next_state = S1;
else
next_state = IDLE;

S1: if (!x)
next_state = S10;
else
next_state = S1;

S10: if (x)
next_state = S101;
else
next_state = IDLE;

S101: next_state = IDLE;

default : next_state = IDLE;
endcase
z = 0;
end



================================================================
