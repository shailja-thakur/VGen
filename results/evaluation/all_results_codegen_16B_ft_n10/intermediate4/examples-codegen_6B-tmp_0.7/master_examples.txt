example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)?(in):(~in);
// Register output (next state)
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	present_state=next_state;
	case(present_state)
	0: if(in==1) next_state=1; else next_state=0;
	1: if(in==1) next_state=1; else next_state=0;
	endcase
	end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)^(in);

always @(posedge clk)
begin
if(reset)
	present_state<=1'b0;
else
	present_state<=next_state;
end

always @(present_state or in)
begin
case(present_state)
1'b0: if(in)next_state<=1'b1;
	else next_state<=1'b0;
1'b1: if(in)next_state<=1'b1;
	else next_state<=1'b0;
endcase
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// State Transition logic:
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	present_state <= 0;
	end
	else 
	begin
	present_state <= next_state;
	end
// State storage logic:
always @(present_state)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase
// Output logic:
assign out = present_state == 1'b1 ? 1'b1 : 1'b0;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

assign out = present_state & in;

always @(posedge clk or posedge reset) begin
	if (reset) 
	begin
	next_state = 0;
	present_state = 0;
	end
	else 
	begin
	// State transition logic
	present_state = next_state;
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase
	end
end


================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset) 
	begin
	present_state <= 0;
	next_state <= 0;
	out <= 0;
	end
	else 
	begin
	present_state <= next_state;
	out <= next_state == 1'b1 ? 1'b0 : 1'b1;
	end
end
always @(posedge clk)
begin
	if (reset) 
	begin
	next_state <= 0;
	end
	else 
	begin
	case(present_state)
	// In state 0, go to state 1 if in=1
	0: next_state <= in ? 1 : 0;
	// In state 1, stay in state 1 if in=1
	1: next_state <= in ? 1 : 1;
	default: next
================================================================
