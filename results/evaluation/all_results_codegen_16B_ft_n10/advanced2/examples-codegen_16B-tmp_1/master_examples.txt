example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
	always @(posedge clk)
	begin
	
	if(reset)
	q <= 4'b0;
	
	else
	begin
	
	if(slowena)
	begin
	
	if(q == 4'd9)
	q <= 4'd0;
	
	else
	q <= q + 4'd1;
	
	end
	else
	q <= q;
	
	end
	
	end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if(reset) // active low by default
 q <= 4'd0;
 else begin // not reset
 if(q == 4'd9 && slowena == 1'b1) // if the enable is on q should incr
 q <= 4'd0;
 // increment if ena is high and the current value is less than 9
 else if(slowena == 1'b1 && (q < 4'd9)) 
 // increment if ena is high and this count is less than 9
 q <= q + 1'd1;
 end
 end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
//case ({reset,slowena})

end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
 
begin
 if (reset || !slowena) 
 begin //reset
 q <= 4'b0; 
 end
 else if (q == 9) 
 begin//9 reached
 q <= 1'b0; 
 end
 else 
 begin //default condition
 q <= q + 1'b1; 
 end 
 end




================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (~reset) begin
	q <= 4'd0;
	end
	else begin
	if (slowena == 1) begin
	q <= q + 4'd1;
	end
	else begin
	q <= q;
	end
	end
	
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset) q <= 0;
else if (slowena && q < 9) q <= q + 1;
end

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if(reset)
q = 4'b0000;

else if(slowena && q!= 9'b100110000)
q = q + 4'b0001;

end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
assign inc_q = (~reset)&(slowena)&((~q[3])|q[3]&(~q[2])|q[2]&q[1]&(~q[0]));

always@(posedge clk)
begin
if(reset)
q <= 4'b0000;
else
if(inc_q)
q <= q + 4'b0001;
// repeat of the above line for the other bits.
end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or negedge reset)
	// preprocessor directive
	#1
	if (!reset)
	begin
	// body
	q <= 4'd0;
	end
	else if (
	`ifdef LATCHED_MEM_REST
	 slowena)
	begin
	// body
	q <= (q == 4'd9) ? 4'd0 : q + 4'd1;
	// q = (q == 9) ? 0 : q + 1;
	`else
	q <= q + 4'd1;
	// Body
	// q <= (q==9)?0:q+1;
	`endif

// The above solution works for large mbeds as it uses always block to latch 
// the value of the current count value.
// This method works for smaller mbeds where the mbed
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
 if (reset && slowena) begin
q <= 0;
 end
 else begin
 if (~q == 8 && ena) begin
q <= q + 1;
 end
 else begin
q <= q;
 end
 end
 

================================================================
