example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in or sel ) 
	if (sel) 
 	begin 
	if (in==3'b110) 
 	pos=2'd0; 
 	else if (in==3'b100)
 	pos=2'd1; 
 	else if (in==3'b110 || in==3'b100)
 	pos=2'd2;
 	else 
 	pos=2'd3; 	
 	end 	
 	

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// Othewise return pos=0
assign out = (sel) ? b : pos;
 
always @(*) 
c1: pos[0] = (~in[2]) | (~in[1]); 
c2: pos[0] = (~in[1]) | in[2]; 
c3: pos[0] = in[1];
 
c4: pos[0] = in[2]; 
 

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
wire [1:0] a, b;

assign a[0] = in[1];
assign a[1] = in[2];
assign b[0] = ~in[1];
assign b[1] = ~in[2];

always @(*) 
	begin 
	if(in[1:0]==2'b00) 
	pos=2'b00; 
	else if(in[1:0]==2'b01) 
	pos=2'b01; 
	else if(in[1:0]==2'b10) 
	pos=2'b10; 
	else if(in[1:0]==2'b11) 
	pos=2'b11; 
	else 
	pos=2'bx; 
	end
================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in ) 
case( in ) 
 3'b000: pos = 2'b00; 
 3'b001: pos = 2'b01; 
 3'b010: pos = 2'b10; 
 3'b011: pos = 2'b11; 
endcase 

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( ) 
case (in) 
0 : pos = 0 ; 1,2,3 ; 
4 : pos = 1 ; 
5 : pos = 2 ; 
6 : pos = 2 ; 
7 : pos = 3 ; 
endcase
else /*sel=0*/ pos = 2 ; 

================================================================
