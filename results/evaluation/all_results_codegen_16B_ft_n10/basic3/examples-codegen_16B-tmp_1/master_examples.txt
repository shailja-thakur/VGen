example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( in or sel)
begin
case (sel)
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
3'b100: pos = 2'b00;
3'b101: pos = 2'b01;
3'b110: pos = 2'b10;
3'b111: pos = 2'b11;
default: pos = 2'b00;
endcase
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @* begin
case (in)
3'd0: begin pos = 2'b00; end
3'd1: begin pos = 2'b01; end
3'd2,3'd3: begin pos = 2'b10; end
3'd4,3'd5,3'd6,3'd7: begin pos = 2'b11; end
endcase
end 

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
	case (in)
	3'b000: begin
	 pos=2'b11;
	end
	3'b001: begin 
	 pos=2'b10;
	end
	3'b010: begin 
	 pos=2'b01;
	end
	3'b011: begin 
	 pos=2'b00;
	end
	default: pos = 2'b00;
	endcase
end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or pos) begin
case (in)
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
3'b100: pos = 2'b10;
3'b101: pos = 2'b11;
3'b110: pos = 2'b11;
3'b111: pos = 2'b11;
endcase
end

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(in or negedge pos)
 if(pos==0) begin
	pos=2'b11;
 	end else begin
 	if(in[2])
 	pos=2'b00;	
	else if(in[1])
	pos=2'b01;
	else if(in[0])
 	pos=2'b10;
 	
	 if(in[2] & in[1])
	 pos=2'b00;	
	 else if(in[1] & in[0])
	 pos=2'b01;
	 else if(in[2] & in[0])
 	 pos=2'b10;
 	 else pos=2'b11;
 	end

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @*
case (in)
3'd0	:	pos = 2'd0;	// inputs are cheerful and sunny
3'd1	:	pos = 2'd0;
3'd2	:	pos = 2'd1;
3'd3	:	pos = 2'd0;
3'd4	:	pos = 2'd2;
3'd5	:	pos = 2'd0;
3'd6	:	pos = 2'd3;
3'd7	:	pos = 2'd0;
3'd8	:	pos = 2'd4;
3'd9	:	pos = 2'd0;
3'd10	:	pos = 2'd6;
3'd11	:	pos = 2'd0;
3'd12	:	pos = 2'd8;
3'd13	:	pos = 2'd0;
3
================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or negedge pos[1]) begin
if ( (pos[1] == 1'b0) *& (in != 3'b000)) begin
pos[0] <= 1'b1;
pos[1] <= 1'b1;
end else begin
pos[0] <= 1'b0; // Set high impedance
pos[1] <= 1'b0;
end
end

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0 & 0 in=1, assign 1 to out
// When sel=0 & 0 in=0, check the other input bits
// When sel=0 & 1 in=1, assign 2 to out
always @ ( in or sel) begin
	// don't need pos= ( (in[0]&sel) | (in[1]&sel) |(in[2] &sel))
	 // Can also use for pos:
	 // 	assign pos = (sel) ? (~in[2:0] +2'b01) : (in[2:0]); 
	if (sel)
	// this is writing a function inside an always block.
	// 'pos' will change whenever in changes value, but not when sel changes.
	// Thus, the output is always equal to (in[2:0] xor 2
================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*) begin
 case(in)
 3'b000: pos <= 2'b00; // 000 > 2 > 00
 3'b001: pos <= 2'b01; // 001 > 5 <= 01
 3'b010: pos <= 2'b10; // 010 > 12 <= 10
 3'b011: pos <= 2'b11; // 011 > 19 <= 11
 3'b100: pos <= 2'b10; // 100 > 50 <= 20
 3'b101: pos <= 2'b11; // 101 > 77 = 61
 3'b110: pos <= 2'b11; // 110 > 90 = 71
 3'b111: pos <= 2'b11; // 111 > 99 = 79
 endcase
end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @* begin
pos <= 0;
case(in)

3'b000 : pos = 2'b00;
3'b001 : pos = 2'b01;
3'b010 : pos = 2'b11;
3'b011 : pos = 2'b10;
3'b100 : pos = 2'b01;
3'b101 : pos = 2'b10;
3'b110 : pos = 2'b11;
3'b111 : pos = 2'b00;

endcase
end

================================================================
