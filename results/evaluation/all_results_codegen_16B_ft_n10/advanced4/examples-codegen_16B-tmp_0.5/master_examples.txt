example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q <= q << 1;
	end
	if(amount == 2'b01)
	begin
	q <= q << 8;
	end
	if(amount == 2'b10)
	begin
	q <= q >> 1;
	end
	if(amount == 2'b11)
	begin
	q <= q >> 8;
	end
	end
	end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	
	if (load)
	begin
	q[63:0] <= data[63:0];
	end
	
	else if (ena)
	begin
	
	if (amount[1])
	q[63:8] <= q[55:0];
	
	else if (amount[0])
	q[63:0] <= q[31:0];
	
	else
	q[63:0] <= q[63:0];
	
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load==1)
	begin
	q[63:0]<=data[63:0];
	end
	else if(ena==1)
	begin
	if(amount==2'b00)
	begin
	q[63:1]<=q[62:0];
	q[0]<=1'b0;
	end
	else if(amount==2'b01)
	begin
	q[63:8]<=q[56:0];
	q[7:0]<=q[55:1];
	q[0]<=1'b0;
	end
	else if(amount==2'b10)
	begin
	q[63:1]<=q[62:0];
	q[0]
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if(load)
	q <= data;
	else
	begin
	if(ena)
	begin
	if(amount == 2'b00)
	q <= {q[62:0], 1'b0};
	else if(amount == 2'b01)
	q <= {q[55:0], 8'b0};
	else if(amount == 2'b10)
	q <= {1'b0, q[63:1]};
	else if(amount == 2'b11)
	q <= {8'b0, q[63:8]};
	end
	end
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
 if (load)
 begin
	q <= data;
 end
 else
 begin
	if (ena)
	begin
	if (amount == 2'b00)
	begin
	 q <= {q[62:0], 1'b0};
	end
	else if (amount == 2'b01)
	begin
	 q <= {q[55:0], 8'b0};
	end
	else if (amount == 2'b10)
	begin
	 q <= {1'b0, q[63:1]};
	end
	else
	begin
	 q <= {8'b0, q[63:8]};
	end
	end
 end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if (load)
	q <= data;
	else if (ena) begin
	if (amount == 2'b00) begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	if (amount == 2'b01) begin
	q[0] <= q[63];
	q[63:8] <= q[62:0];
	end
	if (amount == 2'b10) begin
	q[63] <= q[0];
	q[62:1] <= q[63:1];
	end
	if (amount == 2'b11) begin
	q[63] <= q[0];
	q[62:8] <= q[63:8];
	end
	end
	end
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
	if(load)
	begin
	//	q <= data;
	end
	else if(ena)
	begin
	//	q <= q[63:amount];
	end
end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load == 1'b1)
	begin
	//	q <= data;
	end
	else if (ena == 1'b1)
	begin
	//	q <= q;
	end
end


================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	end
	if(amount == 2'b01)
	begin
	q[63:8] <= q[62:0];
	end
	if(amount == 2'b10)
	begin
	q[63:1] <= q[62:0];
	end
	if(amount == 2'b11)
	begin
	q[63:8] <= q[62:0];
	end
	end
	end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load)
	begin
	q <= data;
	end
	if (ena)
	begin
	if (amount == 2'b00)
	q <= q << 1;
	else if (amount == 2'b01)
	q <= q << 8;
	else if (amount == 2'b10)
	q <= q >> 1;
	else
	q <= q >> 8;
	end
	end

================================================================
