example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk) begin

if(load) 
	q <= data;

else begin
if(ena) begin
	q[63:0] = (amount == 2'b11) ? { q[63:1],q[0] } : ((amount == 2'b10 )) ? { q[63:1] , q[0] } : q;
	q[63:1] = (amount == 2'b11) ? {1'b0,q[62:0]} : ((amount == 2'b10) ? {1'b0,q[62:1]} : { q[62:0], 1'b0 } );
	end

	end
end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	if (load)
	q <= data;
	else 
	begin
	
	if (amount==2'b00 && ena) q <= {q[56:1],q[0]};
	if (amount==2'b01 && ena) q <= {q[55:8],q[0:7]};
	if (amount==2'b10 && ena) q <= {q[63],q[63:1]};
	if (amount==2'b11 && ena) q <= {q[62:0],(1'b1)};


	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always@ (posedge clk, negedge load, negedge ena)//data)
 begin
	if(load) q <= data;
	else if(ena) begin
	//q <= {{64{q[63]}} , q[63:q]} >> amount; //enlarging incorrectly
	case(amount)
	2'b00: q <= q << 1;
	2'b10: q <= q >> 1;
	endcase
	end
 end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@ (posedge clk)
 begin
	if(load)
	 q <= data;
	else begin
	if(ena) begin
	 switch(amount)
	 case (2'b00)
	 0: q <= q;
	 // begin
	 case (2'b01)
	 6: q <= q << 8;
	 //begin
	 case (2'b10)
	 0: q <= q >> 1;
	 case (2'b11)
	 0: q <= q >> 8;
	 //endcase
	 endcase
	 end
	 ena= 0;
	 end
	 endcase
	 end
	 end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if (load) begin
	q <= data;
	 end
	if(ena) begin
//To do: the amounts are wrong. 
	if(amount == 2'b00) q[63:1] <= q[62:0];//Left shift by 1
	else if(amount == 2'b01) q[63:8] <= q[55:0];//So it is Left by 8
	else if(amount == 2'b10) q[63:1] <= q[62:0];//Right shift by 1
	else if(amount == 2'b11) q[63:8] <= q[55:0];//Right shift by 8
	end
	//else if

	
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
if (load)
	q <= data;
else
	
	begin
	if(ena)
	case(amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	if (load == 1)
	begin // loads into the shifter on a clock
	q <= data;
	end
	else if (ena)
	begin
	if (amount == 2'b11) // Shift right by 8 bits
	q <= {q[62:0], 1'b0};
	else if (amount == 2'b10) // Shift right by 1 bit
	q <= {q[62:1], 1'b0};
	else if (amount == 2'b01) // Shift left by 1 bit
	q <= {1'b0, q[63:1]};
	else if(amount == 2'b00) // Shift left by 8 bits
	q <= {1'b0, q[63:8]};
	end
	
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q<=data;
	end // if load
	else if(ena)
	begin
	if (amount==2'b00)
	q<=q<<1;
	else if(amount==2'b01)
	q<=q<<8;
	else if(amount==2'b10)
	q<=q>>1;
	else
	q<=q>>8;
	end // if else for ena
	end // always
	
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always@(posedge clk) begin
if(load) q <= data;
else begin
if(ena) begin
q <= q << amount;
end
else begin
q <= q;
end
end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	reg [63:0] shr1;
	reg [63:0] shr8;
	reg [63:0] shrDir;
	wire [63:0] shr1to8;
	
	// shr1[54:0]
	assign shr1to8 = {shr1[55:54],shr1[53:0], shr1[9]};
	
	// shr8[56:0]
	assign shr8 = {shr8[55:56], shr8[55:0]};

	 // shrDir[63:0]
	always @ (*) begin
	if (load) begin
	q <= #1 data;
	end
	
	
	case(amount)
	2'b00: begin // left 1 bit
	shrDir = shr1to8;
	end
	2'b01: begin
================================================================
