example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder is implemented as a 2-bit register.
// The input registers are treated as a single bit register.
// The output register is treated as a single bit register.
// The carry out is a single bit register.

always @(posedge clk)
begin
  if (clk)
  begin
    sum <= a + b;
    cout <= sum;
  end
end

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum, carry-out, and carry-in.
module full_adder( 
input a, b,
output cout, sum, carry_in );

// This is a full adder with carry-in. A full adder adds two bits and produces a sum, carry-out, and carry-in.
module full_adder_with_carry_in( 
input a, b,
output cout, sum, carry_in );

// This is a full adder with carry-out. A full adder adds two bits and produces a sum, carry-out, and carry-in.
module full_adder_with_carry_out( 
input a, b,
output cout, sum, carry_out );

// This is a full adder with carry-in and carry-out.
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
  cout <= sum + a + b;


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder outputs the sum and carry-out.
always @ (posedge clk)
  cout <= sum;

// The half adder adds two bits.
always @ (posedge clk)
  sum <= a + b + carryout;


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder is a two-input function.
function half_adder( a, b ) {
  cout = a + b;
  sum = a + b + carry_out;
}

// The carry-out is a single bit that is the sum of the inputs plus one.
function carry_out( a, b ) {
  return a + b + 1;
}

// The carry-out is a single bit that is the sum of the inputs plus one.
function carry_out( a, b ) {
  return a + b + 1;
}

// The carry-out is a single bit that is the sum of the inputs plus one.
function carry_out( a, b ) {
  return a + b + 1;
}

// The carry-out is a single bit that is the sum of the inputs plus one.
function
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The half adder is a single register.
always @(posedge clk)
  cout <= sum + a + b;

// The half adder is a single register.
always @(posedge clk)
  sum <= a + b;


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a carry-out shifter. It shifts the carry-out bit to the left and
// produces the carry-out.
module carry_out_shifter( 
input cout,
output cout_out );

// This is a carry-out shifter. It shifts the carry-out bit to the right and
// produces the carry-out.
module carry_out_shifter_rev( 
input cout,
output cout_out );

// This is a carry-out shifter. It shifts the carry-out bit to the right and
// produces the carry-out.
module carry_out_shifter_rev2( 
input cout,
output cout
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
begin
  sum <= a + b + carryout;
  carryout <= a + b + carryout_in;
end

================================================================
