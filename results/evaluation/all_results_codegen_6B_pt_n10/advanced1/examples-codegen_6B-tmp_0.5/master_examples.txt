example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end
    else begin
        if (a[7:0] > 127) begin
            s <= b[7:0];
            if (a[7:0] > 127) begin
                if (b[7:0] > 127) begin
                    s <= 255;
                end
            end
        end
        else begin
            s <= a[7:0] + b[7:0];
            if (s[7:0] > 127) begin
                if (b[7:0] > 127) begin
                    s <= 255;
                end
            end
        end
        if (s[7:0] > 127) begin
            overflow <= 1;
        end

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



#include "port.h"

int main()
{
  int a, b, s, overflow;
  int a_plus_b;

  while (1) {
    a = get_int();
    b = get_int();
    s = a + b;
    overflow = (int) (s >> 31);
    a_plus_b = a + b;

    if (overflow == 0) {
      put_int(s);
    } else {
      put_int(a_plus_b);
    }
  }
}

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// main
begin
    input[0] = 0;
    input[1] = 0;
    input[2] = 0;
    input[3] = 0;
    input[4] = 0;
    input[5] = 0;
    input[6] = 0;
    input[7] = 0;
    output[0] = 0;
    output[1] = 0;
    output[2] = 0;
    output[3] = 0;
    output[4] = 0;
    output[5] = 0;
    output[6] = 0;
    output[7] = 0;
    overflow = 0;
    
    while (1) {
        if (a[7:0] < 0) {
            if (b[7:0] < 0) {
                if (a[7
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if(rst == 1)
        s <= 0;
    else if(a <= 127)
        s <= a + b;
    else if(b <= 127)
        s <= a + b + 128;
    else if(a < 0)
        s <= a + b + 128;
    else if(b < 0)
        s <= a + b + 128;
    else
        s <= a + b + 128;
    if(s > 255)
        overflow <= 1;
    else
        overflow <= 0;
end

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (a[7] == 1 && b[7] == 1) begin
        s[7] <= 0;
        s[6] <= 0;
        s[5] <= 0;
        s[4] <= 0;
        s[3] <= 0;
        s[2] <= 0;
        s[1] <= 0;
        s[0] <= 0;
        overflow <= 1;
    end
    else begin
        if (a[7] == 1 && b[7] == 0) begin
            s[7] <= a[6];
            s[6] <= a[5];
            s[5] <= a[4];
            s[4] <= a[3];
            s[3] <= a[2];
            s[2] <= a[1
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder should be able to accept inputs in the range -128 to 127.

always @(posedge clk)
begin
    if (a <= 127) begin
        s <= a + b;
    end else begin
        s <= b - a;
        if (s > 127) begin
            overflow <= 1;
        end
    end
end


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @ (posedge clk or negedge rst) begin
    if (rst) s <= 0;
    else if (a[7:0] <= 0) s <= b[7:0];
    else if (b[7:0] <= 0) s <= a[7:0];
    else if (a[7:0] > b[7:0]) s <= a[7:0] - b[7:0];
    else if (b[7:0] > a[7:0]) s <= b[7:0] - a[7:0];
    else if (a[7:0] == b[7:0]) s <= 0;
    else if (a[7:0] < b[7:0]) s <= b[7:0] - a[7:0];
    else if (b[7
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed overflow is high if the most significant bit of s is high. 
// The most significant bit of s is high if the most significant bit of a and b are high and the most significant bit of s is low.
// The most significant bit of s is high if the most significant bit of a and b are low and the most significant bit of s is high.

always @(posedge clk or negedge rst) begin
   if (rst) begin
      s <= 0;
      overflow <= 0;
   end else begin
      if (a > 127 or b > 127) begin
         s <= 0;
         overflow <= 1;
      end else begin
         s <= a + b;
         overflow <= 0;
      end
   end
end


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder will be used as follows:
// 	a: a[7:0]
// 	b: b[7:0]
// 	s: s[7:0]
// 	overflow: overflow[7:0]

always @(posedge clk)
{
	if(clk == 1)
	{
		s <= a + b;
	}
	else
	{
		s <= b - a;
	}
}


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Example 1:
// Input: a = 0x8, b = 0x9, s = 0x10, overflow = 0
// Output: a = 0x9, b = 0x9, s = 0x19, overflow = 0

// Example 2:
// Input: a = 0x8, b = 0x9, s = 0x10, overflow = 1
// Output: a = 0x9, b = 0x9, s = 0x19, overflow = 1

// Example 3:
// Input: a = 0x8, b = 0x9, s = 0x10, overflow = 0
// Output: a = 0x9, b = 0x9, s = 0x19, overflow = 1

// Example 4:
// Input: a = 0x8, b = 0x9, s = 0x10, overflow = 1
//
================================================================
