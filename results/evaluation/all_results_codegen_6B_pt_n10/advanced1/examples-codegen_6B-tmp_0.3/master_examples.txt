example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The function returns the signed overflow of a and b.

function signed_adder_add(a, b)
{
    if ((a < 0) && (b < 0))
    {
        s = a - b;
        if (s < 0)
        {
            overflow = 1;
        }
    }
    else if ((a < 0) && (b >= 0))
    {
        s = a - b;
        if (s < 0)
        {
            overflow = 1;
        }
    }
    else if ((a >= 0) && (b < 0))
    {
        s = a + b;
        if (s > 0)
        {
            overflow = 1;
        }
    }
    else
    {
        s = a + b;
        if (s < 0)

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        s <= a + b;
        if (s[7] == 1) begin
            overflow <= 1;
        end
    end
end


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (a[7] == b[7])
    begin
        s <= a + b;
        if (a[7] == 0)
            overflow <= 1'b1;
        else if (b[7] == 0)
            overflow <= 1'b0;
        else
            overflow <= a[7] < b[7];
    end
end


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The input a and b are unsigned. 
// The output s is signed. 
// The output overflow is unsigned. 

// The input a and b are unsigned. 
// The output s is signed. 
// The output overflow is unsigned. 

always @ (posedge clk)
begin
    s <= a + b;
    if (s[7] == 0)
        overflow <= 0;
    else
        overflow <= 1;
end


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (clk)
    begin
        s <= a + b;
        if (a[7] == b[7] && a[7] == 1'b1 && s[7] == 1'b0)
        begin
            overflow <= 1'b1;
        end
    end
end


================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high

always @(posedge clk)
begin
    if (a[7] == b[7])
    begin
        s <= a + b;
    end
    else
    begin
        if (a[7] == 1'b1)
        begin
            s <= a + b;
        end
        else
        begin
            s <= b + a;
        end
    end
end


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a function. 

function signed_adder(a, b, s, overflow) {
    if (a[7] < b[7]) {
        s[7] = a[7] + b[7];
    } else if (a[7] > b[7]) {
        s[7] = a[7] - b[7];
    } else {
        s[7] = a[7];
    }
    if (a[6] < b[6]) {
        s[6] = a[6] + b[6];
    } else if (a[6] > b[6]) {
        s[6] = a[6] - b[6];
    } else {
        s[6] = a[6];
    }
    if (a[5] <
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        s <= a + b;
        if (a > 127) begin
            if (b > 127) begin
                if (a > b) begin
                    overflow <= 1;
                end else begin
                    overflow <= 0;
                end
            end else begin
                if (b > 127) begin
                    overflow <= 1;
                end else begin
                    overflow <= 0;
                end
            end
        end
    end
end


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a state machine. 
// The state machine transitions from the initial state to the final state when the input is added. 
// The input is added to the output when the state transitions to the final state. 
// The state machine transitions from the final state to the initial state when the input is subtracted. 
// The input is subtracted from the output when the state transitions to the initial state. 

always @(posedge clk)
begin
  if (state == 0)
    state = 1;
  else if (state == 1)
    state = 2;
  else if (state == 2)
    state = 3;
  else if (state == 3)
    state = 0;
  else
    state = 0;
  if (state == 3)
    s <= a + b;
  else if (state == 2
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    s <= a + b;
    if (s[7] == 1'b1)
        overflow <= 1'b1;
end


================================================================
