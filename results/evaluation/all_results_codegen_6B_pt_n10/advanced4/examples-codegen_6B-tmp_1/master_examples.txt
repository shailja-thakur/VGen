example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.












//
//              Bast 
// 
// FACTORING
//
// For some reason


06.53
06.22
06.20
06.16 


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



reg [] qb = null;


process mod(final int modmin, final int modmax, final int db, final int ea) {
  if not $load$ then {
    {}
  } else if ena and clk'event and db > modmin and db < modmax then {
    reg [];
    {
      for (int y = 0; y < db; y++) {
        //Load xg
        for (int x = 0; x < 64; x++) {
          regAssert x <= 63;
          x.unused(xg[x]); 
        }
      }
    }
    ea' <= qb = max<int>[63:0]: reg[63:0];
    wait until clk'event;
  } else if not ena and clk'event then {
    ea' <= qb
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



main t = comb.comb(advshift, clk, load, ena, amount) ? 32'h0000bdd8 : init ;


================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




// Classic PLC functionality.
// 1'b0 loads the shift register from pin m and 1'b0 resets it.
// 1'b1 loads the shift register from pin m, 1'b0 and 1'b1 cause a shift.
signal mload, clk, load, ena, ma[2:0] loadpin;

// 2'b0 and highest threahold of output bit is 0;
// 5'b0 and highest threahold of output bit is 1.
// On mone pin, threshold values are for rom 1'b0, with the next
// synchronization occurs at 31'b1.
signal outthreshold0,outthreshold1,mclr,loadbit;
Contsignal fclk="clk", regsp = "reg";
reg stdout[] = {
            16'b0, 16'
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk or ena)
begin
    if (load == '1') begin
      q <= data;
    end
    else begin
      if (ena) begin
        if (amount == '01') begin
          q &= data[63:0];
        when (amount = '10') begin
          q <<= 8;
        end
        else begin
          q >>= 8;
        end
      end
    end
end


================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


`

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


int main()
{
	int a = 13;
	int b = 0;
	cout << "Advanced shift register:" << endl;
	int i = 0;
	boolean previous_input = false;
	while (i < 128)
	{
		// take clock rising edge as an input.
		// cache input changes into local storage.
		if ((a ^ b) != previous_input) // if previous conditions changed...
		{
			cout << hex << a << " " << dec << (int)ena << " " << amount << " " << data << endl;
			q[i] = a ^ (data & (amount == 1 || amount == 0 ? 0x1 : (unsigned char(data) >> amount-1)));
			previous_input = (a ^ b) != previous_input;
			for (int j = i+
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


`

func genHcl() {
	fmt.Println("package real_mcu\n\nimport (")
	fmt.Print("\"errors\"\n")
	fmt.Print(",\n\"fmt\"\n)")

	fmt.Print("\n")
	fmt.Print("\n")

	fmt.Print("\n")
	fmt.Print("func mul1(a, b int, carry int) int {\n")
	fmt.Printf("if b == 0 { return 0 }\n")
	fmt.Printf("return a*b + carry ")
	fmt.Printf("if b == 0 { return 0 }\n")
	fmt.Printf("return mul1(a, b//2, (a * b)%2) ")
	fmt
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(posedge clk)
  begin

    if (load && !ena) {
        q[63:0] = 0;
    }

    if (ena) {
      // load signals high, ena is low, data is high
      d[63:0] <= data & q[amount{0} - 1:amount{1} - 1];
    }

  end

// End behavior
`;

const expected = `module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b
================================================================
