example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset) begin
        q <= 0;
    end
    else if (slowena) begin
        if (q != 9) begin
            q <= q + 1;
        end
    end
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset) begin
        q <= 0;
    end
    else if (slowena) begin
        if (q != 9) begin
            q <= q + 1;
        end
    end
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  begin
    if (slowena) begin
      if (reset) q <= 0;
      else if ((q == 0) || (q == 9)) q <= 1;
      else q <= 2;
    end
  end

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is low and q is not 0.
always @(negedge clk)
  begin
    if (slowena) begin
      if (reset) q <= 2;
      else if (q == 0) q <= 1;
      else q <= 0;
    end
  end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena and q != 9) q <= q + 1;


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The count is a 9-bit value with the least significant bit always zero.

always @(posedge clk)
    begin
        if (reset == '1' && slowena == '1') q <= 0;
        else if (slowena == '1' && q != 9) q <= q + 1;
        else if (slowena == '1' && q == 9) q <= 0;
    end


module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The count is a 9-bit value with the least significant bit always zero.

always @
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q = 0;
  else if (slowena && q < 9) q = q + 1;

// On the negative edge of the clock:
// if the input slowena is high, then set the output q to 9, otherwise set it to 0.
always @(negedge clk)
  if (slowena) q = 9;
  else q = 0;

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always_comb
begin
    if (reset <= 0) q <= 0;
    else if (slowena <= 0) q <= 0;
    else if (slowena > 0) begin
        if (q <= 9) q <= q + 1;
        else q <= 0;
    end
end

// On the negative edge of the clock:
// if slowena is high, then only decrement the output q if q is not 0.
// Otherwise, only decrement the output q if q is not 7.
always_comb
begin
    if (slowena <= 0) begin
        q <= q - 1;
        if (q == 0) q <= 7;
    end
    else if (slowena > 0) begin
        if (q == 0) q <= 6;
        else q <= q - 1;
    end
end

module count_fast(

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (reset) q <= 0;
    else if (slowena) q <= 1;
    else q <= q + 1;


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena && q < 9)
    q <= 1;
  else
    q <= 2;

// On the negative edge of the clock:
// if the ena input is high, read the output q.
// Otherwise, if q is 9, reset the output q to 0.
always @(negedge clk)
  if (slowena)
    q <= read_q();
  else if (q == 9)
    q <= 0;
  else
    q <= 1;

reg [3:0] count = 0;

// On the positive edge of the clock:
// read the count from the input register, and increment the count register.
always @(posedge clk)
  if (slowena)
    count = count + 1
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena)
    if (q > 9) q <= 0;
    else q <= q + 1;


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena)
    if (q < 9) q <= q + 1;
    else q <= 0;

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena)
    if (q < 9) q <= q + 1;
    else q <= 0;


================================================================
