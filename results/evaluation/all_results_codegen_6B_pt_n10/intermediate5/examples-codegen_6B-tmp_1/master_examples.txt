example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] prev,next,out1;
always @(posedge clk) 
{ next=not load and prev | load;
  out1=left_shift(next,amount[1:0]);
  out=out1 | out1 >>(8-amount[0]);
}

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  if(load)
    out = data;
  else
    out = (out << amount) | (out >> (bitwidth-amount));
*/
void
SDS124_Avr::execute(Time & t)
{
  wait2cyc(clk, amount[0], bitwidth);
  wait2cyc(reset, amount[1], bitwidth);
  wait2cyc(load, bitwidth);
  out = (out << amount[0]) | (out >> (bitwidth-amount[0]));
}

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
  if(load)
  {
    out = data;
  }
  else
  {
    out = BITALSHR(out, amount);
  }

// code generated results


================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge load)
// when reset is low for at least 6 clock cycles load the data into out
// load_load: false
if(reset) out = 0;
// while clock is high and not reset high then
...
else out = left_rotate(clk,reset,amount[amount%2],data[6],out,out_load);
// assignment load_load: true
assign out = left_rotate(clk,reset,amount[1],data[5],out_load,out);
// when clk is low for at least 6 clock cycles, out is not rotated if load_load is reversed
always @(negedge clk)
reg [7:0] out_load = load;
// when clk is low, out_load is left shifted by 2^(amount[0]+1)
// when clk is high, out
================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge load)
{
	out <<= amount;
	if(load == 1)
	{
		out <- 0;
	}
	else
	{
		out <<= 1;
		out <<= data;
	}
}

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(always_comb)
begin
    if(load)
    {
        out = data;
    }
    else
    {
        out = (out << amount) | (out >> (32 - amount));
    }
end

// -------------------------------------


// ###########################################
// Core core instance
// ###########################################
begin core
    design (edge, 0 to 5) core_inst (clock, reset, write, data, load, out, #(58));
endcore
design ccore_inst (clock, reset, write, data, load, out, #(58));

// -------------------------------------

// ##########################################
// Decimator instance
// ##########################################
begin decimator
    design 0 decimator_inst (clock, reset, write, data, load, out, #(58));
    design 1 decimator
================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) // slave split setup
begin
  if(load == 1){out = data;}
  else{out = bitswap<9>(out)<<amount;}
end

// left_shift(3) slave port

#pragma HLS interface ap_none register port=out

module slave_mem_read(out_dmem_ready,out_dmem_addr,out_dmem_data,bus_id);

input out_dmem_ready;
input [36:0] out_dmem_addr;
input [64:0] out_dmem_data;
output wire [36:0] out_dmem_data_result;

ram mem_ram core(clock, default_reset, mem_clk_phase, debug_mode, debug_enable, reset);

ram_multi_port slave
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always clk@(posedge clk)
{
	out = if (load) { load_out = data; }
	else out = out_shift(out,out_shift_reg,amount,out_shift_carry,load,out);
}

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] out = 0;
always @ (posedge clk or negedge reset) begin
	if (load) out = data;
	else if (frac_part(amount))
		out = 16384 * bit(out, 7) + bit(out, 1);
	else {
		out = out << bit(amount) | bit(out, amount+1);
		out = load ? (16384 * bit(out, 7) + out) : out;
	}
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] out;
always @(posedge clk or negedge reset) // this is ok. nothing is in update cycle and so then(load) and negedge reset will happen in the
process(load)
{
  if (load)
    out = data;
  else
  {
    if(amount[1] == 0)
    {
      out = out << word(data[5:0]);
    }
    else
    {
      out = out << word(data[4:1]);
    }
    out = out << word(data[3:2]);
    out = out << word(data[2:3]);
    out = out << word(data[1:4]);
    out = out << word(data[0:5]);
  }
  out = out << word(0x80);
}

================================================================
