example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out <= 0;
else if(load)
out <= data;
else
begin
out <= out << amount;
out[7:0] <= out[0];
end
end

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always@(posedge clk,posedge reset)
begin
if (reset)
out <= 0;
else if (load)
out <= data;
else begin
out[0] <= data[7];
out[1] <= out[7];
out[2] <= out[7];
out[3] <= out[7];
out[4] <= out[7];
out[5] <= out[7];
out[6] <= out[7];
out[7] <= data[0];
end
end

================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @ (posedge clk)
begin
if (reset)
	out <= 8'b0;
else
	case(amount)
	3'b000:
	out <= data;
	3'b001:
	out <= {data[0],data[7:1]};
	3'b010:
	out <= {data[1:0],data[7:2]};
	3'b011:
	out <= {data[2:0],data[7:3]};
	3'b100:
	out <= {data[3:0],data[7:4]};
	3'b101:
	out <= {data[4:0],data[7:5]};
	3'b110:
	out <= {data[5:0],data[7:6]};
	3'b111:
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @ (posedge clk, posedge reset)
begin
if (reset)
out <= 0;
else
if (load)
out <= data;
else
if (amount != 0)
out <= {data[0],data[7:1]};
end

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
// when reset is high, reset the register and set out to 0
always@(posedge clk)
begin
	if(reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if(load)
	begin
	out <= data;
	end
	else
	begin
	if(amount == 0)
	begin
	out <= out;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	end
	end
end

================================================================
