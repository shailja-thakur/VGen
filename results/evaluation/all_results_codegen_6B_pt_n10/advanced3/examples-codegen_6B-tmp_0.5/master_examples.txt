example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// The output signal z is asserted to 1 when the input signal x is 1 and present_state is S101
// The output signal z is asserted to 0 when the input signal x is 0 and present_state is IDLE
// The output signal z is asserted to 0 when the input signal x is 1 and present_state is S1
// The output signal z is asserted to 1 when the input signal x is 0 and present_state is S10
// The output signal z is asserted to 0 when the input signal x is 1 and present_state is S101
// The output signal z is asserted to 0 when the input signal x is 0 and present_state is IDLE
// The output signal z is asserted to 1 when the input signal x is 1 and present_state is S1
// The output signal z is asserted to 0 when the input signal x is 0 and present_state is S10
// The output signal z is asserted
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
  if (reset)
    present_state <= IDLE;
  else
    present_state <= next_state;
end


================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// This is an example of an advanced finite state machine. 
// The input signal x is the digital input. 
// The output signal z is the digital output. 
// The FSM is implemented in the function adv_fsm. 
// The FSM is declared in the module adv_fsm. 
// The module adv_fsm is instantiated in the program main. 
// The module adv_fsm is instantiated in the program main. 

begin
  begin
    if (x=1) then 
      present_state=S101; 
    else 
      present_state=IDLE; 
    next_state=S1; 
  end
  begin
    if (x=0) then 
      present_state=S10; 
    else 
      present_state=IDLE; 
    next_state=
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
	if(reset)
	begin
		next_state <= IDLE;
	end
	else if(next_state == IDLE)
	begin
		next_state <= S1;
	end
	else if(next_state == S1)
	begin
		next_state <= S10;
	end
	else if(next_state == S10)
	begin
		next_state <= S101;
	end
	else if(next_state == S101)
	begin
		next_state <= IDLE;
	end
end


================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
    if (reset) next_state <= IDLE;
    else if (next_state <= IDLE) next_state <= S1;
    else if (next_state <= S1) next_state <= S10;
    else if (next_state <= S10) next_state <= S101;
    else next_state <= IDLE;
    present_state <= next_state;
end


================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// The state machine is implemented as a state-machine with a state-variable.
// The state-variable is used to store the current state of the machine.
// The input signal is used to set the current state of the state-variable.
// The output is assigned to the state-variable.
// The state-variable is set to IDLE if reset is high, otherwise it is set according to the value of the input signal.
// The state-variable is reset to IDLE after the input signal changes.
// The state-variable is reset to IDLE after the input signal changes.

// The state-variable is used to store the current state of the machine.
// The input signal is used to set the current state of the state-variable.
// The output is assigned to the state-variable.
// The state-variable is set to IDLE if reset is high, otherwise it is set according to the value
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
  present_state <= IDLE;
  next_state <= IDLE;
  if (reset) begin
    present_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
  begin
    if (x == 1) begin
      present_state <= S1;
      next_state <= S10;
    end
    else begin
      present_state <= S10;
      next_state <= S101;
    end
  end
end

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk)
  begin
    if (reset) next_state <= IDLE;
    else next_state <= present_state;
    if (next_state == S1 and x == 1) next_state <= S10;
    else next_state <= present_state;
    if (next_state == S10 and x == 0) next_state <= S101;
    else next_state <= present_state;
    if (next_state == S101 and x == 1) next_state <= IDLE;
    else next_state <= present_state;
    present_state <= next_state;
  end
end

// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm2(
input clk,
input reset,
input x,
output z ); 
reg [
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
	if (reset) begin
		present_state <= IDLE;
	end else begin
		if (x) begin
			if (present_state <= S1) begin
				next_state <= S101;
			end else begin
				if (present_state <= S10) begin
					next_state <= S101;
				end else begin
					next_state <= IDLE;
				end
			end
		end else begin
			if (present_state >= S1) begin
				next_state <= S1;
			end else begin
				if (present_state >= S10) begin
					next_state <= S10;
				end else begin
					next_state <= IDLE;
				end
			end
		end
	end
end

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
	present_state <= IDLE;
	next_state <= IDLE;
	if (x = 1) then next_state <= S1;
	else if (x = 0) then next_state <= S10;
	else next_state <= IDLE;
end

================================================================
