example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  r_next <= r_reg;
always @(posedge clk)
  if (reset)
    r_reg <= 1;
  else
    r_reg <= r_next;


================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always (clk or reset) begin
    r_reg <= 1;
    r_next <= r_reg[4:0] xor 4'b11111111;
    if (reset) begin
        r_reg <= 1;
        r_next <= r_reg[4:0] xor 4'b11111111;
    end else begin
        r_next <= r_reg[4:0] xor 4'b11111111;
        r_reg <= r_next;
    end
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg[4:0] xor (r_reg[2:0] << 5) | (r_reg[4:0] << 3);
    feedback_value <= r_next[4:0];
    q <= r_next[4:0];
end

// Testbench

#include "../../../../include/verilog/vlt_lfsr.h"

lfsr lfsr_inst;


================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset)
    begin
        r_reg <= 1;
    end
    else
    begin
        r_next <= r_reg ^ (feedback_value << 4);
    end
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
    if (reset)
    begin
        r_reg <= 1;
        r_next <= r_reg;
        feedback_value <= (r_reg[4] ^ r_reg[3]);
    end
    else
    begin
        r_next <= r_reg;
        r_reg <= r_next;
    end
end

// assign the xor of bit positions 5 and 3 of r_reg to feedback_value
// assign feedback concatenated with 5 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
    if (reset)
    begin
        r_next <= r_reg;
        feedback_value <= (r_reg[4] ^ r_
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg[4:0] ^ (r_reg[4:0] >> 4);
        feedback_value <= r_reg[4:0] >> 5;
    end
end

// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr2( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and
================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always (clk or reset) begin
    if (reset) begin
        r_reg <= 1;
        r_next <= r_reg[4:0];
        feedback_value <= r_reg[4:0] & r_reg[2:0];
    end else begin
        r_next <= r_reg[4:0] xor (r_reg[2:0] << 4);
        feedback_value <= r_reg[4:0] & r_reg[2:0];
    end
end

// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 3 and 5
module lfsr2( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always(clk or reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    r_reg <= r_next;
    feedback_value <= r_reg[4]^r_reg[3];
    q <= r_reg[4:0];
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always(clk or reset)
begin
    if (reset)
    begin
        r_reg <= 1;
        r_next <= r_reg;
        feedback_value <= (r_reg[5] ^ r_reg[3]);
    end
    else
    begin
        r_next <= (r_reg[4] ^ r_reg[2]);
        feedback_value <= (r_reg[5] ^ r_reg[3]);
    end
end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
    if (reset) begin
        r_reg <= 1;
        r_next <= r_reg;
        feedback_value <= (r_reg[4:0] ^ r_reg[2:0]);
    end else begin
        r_next <= r_reg;
        feedback_value <= (r_reg[4:0] ^ r_reg[2:0]);
    end
end

================================================================
