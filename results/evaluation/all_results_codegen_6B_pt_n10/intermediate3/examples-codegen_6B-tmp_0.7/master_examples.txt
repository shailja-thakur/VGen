example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(*)
  r_next <= r_reg ^ (
        r_reg << 6 & 
        not (r_reg << 4 & 
             r_reg << 3 & 
             r_reg << 2 & 
             r_reg << 1 & 
             r_reg << 0)
      );

//------------------------------------------------------------------------------
//  * lfsr_top.vhd
//  *
//  *   - Inputs: clk, reset
//  *   - Outputs: q
//  *               r_next
//  *               feedback_value
//  *
//  *   - Controls: r_reg, r_next, feedback_value
//  *
//  *  
//  *   - State Variables: r_reg, r_next
//  *
//  *  
//  *   - Action Elements
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset) begin
        r_reg <= 1;
    end
    else begin
        r_next <= r_reg ^ feedback_value;
        q <= r_next[5:4];
    end
end

module ff_ff_ff_ff_ff_ff_ff( 
    input clk,
    input reset,
    output [7:5] q,
    output [1:0] q_next
);
reg [6:0] r_reg;
wire [6:0] r_next;
wire [7:0] q_next_tmp;
wire [7:0] q_next;
reg [7:0] q_tmp;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign q_
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
   if (reset) begin
      r_reg <= 1;
      feedback_value <= r_reg[5] ^ r_reg[3];
      r_next <= r_reg[5] ^ r_reg[3] ^ (r_reg[4] << 4);
   end else begin
      r_reg <= 
         r_next[7] << 5 | 
         r_next[6] << 3 | 
         r_next[5] << 2 | 
         r_next[4] << 1 | 
         r_next[3];
   end
end

// Test bench

// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
 begin
    case reset: 
        r_reg = 1;
        feedback_value = 0b1111;
    end
 end

always ( clk or clk )
 begin
    r_next[4:0] <= ( r_reg[4:0] << 1 ) | feedback_value[4:0];
    r_reg <= r_next;
 end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(*) begin
    if (reset == 1) begin
        r_reg[0] = 1'b0;
        r_reg[1] = 1'b0;
    end
    else begin
        r_next = r_reg ^ feedback_value;
        r_reg = r_next;
        // for the output q
        q <= r_next[4];
    end
end

// Testbench
module lfsr_testbench()
    // input clk, inputs reset, outputs q
    input clk, inputs reset, outputs q;
    reg [4:0] r_checkout;
    always @(*) begin
        if (reset == 1) begin
            r_checkout = 0;
        end
        else begin
            r_checkout = r_reg;
        end
        // for the output q

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always( clk or reset or r_reg)
begin
  if (rst)
  begin
    r_reg <= 1;
  end
  else
  begin
    r_next <= (r_reg << 5) | (r_reg >> 3) | (((r_reg >> 2) & 1) << 4);
  end
end

module clk_gen(
    input clk,
    output clk_gen_clock,
    output clk_gen_reset
);


================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
    if (reset)
    begin
        r_reg <= 1;
    end
    else
    begin
        r_reg[4:0] <= r_reg[5:4] xor (((r_reg[0:3] == 2) or (r_reg[0:3] == 4)) and (r_reg[3] == 1));
        r_next <= r_reg;
        feedback_value <= (r_reg[0:4] xor r_reg[3:0]);
    end
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
begin
   if (reset)
   begin
      r_reg <= 1;
      r_next <= r_reg[4:0];
      feedback_value <= r_reg[4:0] xor 2 and 4;
   end
   else
   begin
      r_next <= r_reg;
      r_reg <= feedback_value;
   end
end
`

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset) begin
        r_reg <= 1;
    endelse begin
        r_next <= (r_reg[4:3] ^ r_reg[2]);
        for (int i = 0; i < 4; i++) r_next[i] <= r_reg[i];
        r_reg <= r_next;
    end
end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always ( clk or reset )
begin
    if (reset) r_next = 0;
    else r_next = r_reg;
    if (r_next[4] and (r_next[5] or r_next[3]))
        feedback_value = r_next[3] and r_next[5];
    else
        feedback_value = r_next[4];
    r_reg = r_next;
    q = feedback_value;
end

// end strong

================================================================
