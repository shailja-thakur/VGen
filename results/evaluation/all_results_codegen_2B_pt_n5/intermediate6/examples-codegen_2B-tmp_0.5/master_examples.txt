example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @ (we, clk)
begin
    if (we) ram[addr] <= data;
    q <= ram[addr];
end
// when we is low, read data from ram at address addr
always @ (we, clk)
begin
    if (we) data <= ram[addr];
end

================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(we) ram[addr][q] = data;

// when we is low, write data to ram at address addr
// assign the ram value at address addr to q
always @(clk,we) ram[addr][q] = ram[addr][q] and (data or we);


================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q = we ? data[addr] : 0;
// when we is low, read data from ram at address addr
// assign the ram value at address addr to q
assign q = we ? 0 : data[addr];
// when clk is high, increment addr by 1
assign addr[7] = we ? addr[7] + 1 : addr[7];
// when clk is low, increment addr by 1
assign addr[7] = we ? addr[7] : addr[7] + 1;
// when we is high, write data to ram at address addr
assign data[addr] = we ? data[addr] + 1 : data[addr];
// when we is low, read data from ram at address addr
assign data[addr] = we ? 0 : data[addr];

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
wire [DATA_WIDTH-1:0] write_data;
wire [ADDR_WIDTH-1:0] write_addr;

always @(posedge clk)
    if (we) begin
        if (addr[ADDR_WIDTH-1:0] == 0) begin
            q <= data[DATA_WIDTH-1:0];
        end else if (addr[ADDR_WIDTH-1:0] < 0x100) begin
            write_data <= data[DATA_WIDTH-1:0];
            write_addr <= addr[ADDR_WIDTH-1:0];
        end else begin
            ram[addr[ADDR_WIDTH-1:0]-0x100] <= data[DATA_WIDTH-1:0];
        end
    end


================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(we) begin
    if (clk == 1) begin
        ram[addr] <= data;
    end
end
// when we is low, write data to ram at address addr
// assign the ram value at address addr to q
always @(we) begin
    if (clk == 0) begin
        ram[addr] <= data;
    end
end

================================================================
