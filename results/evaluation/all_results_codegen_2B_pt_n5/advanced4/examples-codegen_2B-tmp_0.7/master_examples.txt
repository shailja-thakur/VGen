example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// shift amount is always in [0,8].
wire shift_amount;

wire shift_ena;

// data is always in [0,63].
wire data;

reg [63:0] q;

always @(posedge clk)
{
  if (ena && load)
    q = data[63:0];
  else
    q = 0;
  
  shift_amount = amount[5];
  
  if (shift_amount == 0) // if shift amount is 0, don't do this.
    q = q << 1; // shift left.
  else if (shift_amount == 1) // if shift amount is 1, don't do this.
    q = q >> 1; // shift right.
  else if (shift_amount == 8) // if shift amount is 8, don't do this.
    q =
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(posedge clk)
  begin
    if (load)
      q = data;
    else 
    {
      ena = 1;
    }
  end

  reg [63:0] q;

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(trisclk)
  always @(clk)
  begin
    if (clk == 1)
    begin
      if (ena == 1)
      begin
        if (load == 1)
        begin
          q = data[63:0];
          if (amount == 0)
          begin
            ena = 0;
          end
          if (amount == 1)
          begin
            ena = 1;
          end
          if (amount == 2)
          begin
            ena = 1;
            q = (q << 8) | data[63:8];
          end
          if (amount == 3)
          begin
            ena = 1;
            q = (q << 16) | data[63:16];
          end
          if (amount == 4)
          begin
            ena = 1;
            q = (q <<
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



//%%%********** START OF TOP **********

void dut::shift() {
  if(load) {
    int i;
    for(i = 63; i >= 0; i--) {
      q[i] = 0;
    }
    for(i = 0; i < 64; i++) {
      q[i] = data[i];
    }
  }
}

void dut::shiftout() {
  int i;
  for(i = 63; i >= 0; i--) {
    if(ena && (q[i] != 0)) {
      q[i] <<= 1;
    }
  }
}

void dut::shiftout_1() {
  int i;
  for(i = 63; i >= 0; i--) {
    if(ena && (
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
{
	if (ena)
	{
		q = data[amount] >> 1;
		if (load)
			q = data[amount];
	}
}

================================================================
