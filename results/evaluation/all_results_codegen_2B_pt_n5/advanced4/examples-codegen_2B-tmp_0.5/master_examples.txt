example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;
reg [63:0] data;
reg [63:0] shift_reg;
reg [63:0] shift_reg_out;

always @(posedge clk)
{
    if (ena == 1'b0)
        data = data << amount;

    q = data;
}

always @(negedge clk)
{
    shift_reg = q;
    shift_reg_out = shift_reg >> amount;
}

// shift right by 1 bit
assign shift_reg_out = shift_reg >> 1;
// shift right by 8 bit
assign shift_reg_out = shift_reg >> 8;

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(*)
begin
    if (load == 1) {
        q <= data;
    }
    if (ena == 1) {
        if (amount == 0) {
            q <= q;
        } else if (amount == 1) {
            q <= q << 1;
        } else if (amount == 2) {
            q <= q << 8;
        } else if (amount == 3) {
            q <= q >> 1;
        } else if (amount == 4) {
            q <= q >> 8;
        }
    }
end
// clk is the clock input, ena is the enable input, load is the load input, amount is the shift amount, and data is the shift data.
// The shifter outputs the shifted data.

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
  if (ena)
    q = data;
  else
    q = 0;
  if (ena && (load))
    data = q;
  else
    data = 0;


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// This design is a bit unusual. The shift register is a bit of a mix of hardware and software.
// It's a shift register that stores a value and loads it back when it is requested.
// It's a synchronous register, but it can be set to a synchronous mode.
// In this design, the shift register is not a hardware register, but is a software register.
// The shift register is a register that can be set to a synchronous mode.
// The shift register is set to synchronous mode when ena is high.
// The shift register is set to asynchronous mode when ena is low.
// When ena is high, the shifter loads the data register.
// When ena is low, the shifter loads the data register and sets the shift register to synchronous mode.
// When ena is low, the shifter loads the data register and sets the shift register to asynchronous mode.
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;
reg [63:0] z;
reg [63:0] s;

always @(posedge clk)
{
  if (ena)
  {
    if (load)
    {
      q = data;
    }
    else
    {
      z = q;
    }
  }
}

always @(posedge clk)
{
  if (ena)
  {
    s = q;
    q = z;
  }
}

always @(posedge clk)
{
  if (ena)
  {
    if (load)
    {
      q = (z << amount) | (s >> (64 - amount));
    }
    else
    {
      q = (z >> amount) | (s << (64 - amount));

================================================================
