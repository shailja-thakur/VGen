example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// The adder function 
// returns the signed sum of a and b.

// If a or b are negative, the sum is negative.
// If a or b are positive, the sum is positive.
// If a or b are zero, the sum is zero.

// If the most significant bit of a or b is high, then the sum is negative.
// If the most significant bit of a or b is low, then the sum is positive.
// If a or b are zero, then the sum is zero.

// If a or b are negative, then the sum is negative.
// If a or b are positive, then the sum is positive.
// If a or b are zero, then the sum is zero.

// If a or b are negative, then the sum is negative.
// If a or b are positive, then the sum is positive.
// If a or
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = {b[6:0], b[7]}; // b is treated as a signed number

assign s = a + b_signed; // a and b are added, resulting in a signed sum

assign overflow = (a[7] & b_signed[7]) | (b[7] & a[7]); // a and b are treated as signed numbers, and the carry out is the overflow


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] b_signed; // b is signed and gets the sign of the most significant bit of b

assign b_signed = ~b[7] + 1; // b is treated as a unsigned number

assign s = a + b_signed + 1; // s is a signed number

assign overflow = (a[7] & b_signed[7]) & ~s[7]; // a and b have a signed overflow if a[7] and b_signed[7] are high and s[7] is low


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// If the most significant bit of a or b is high then the signed addition of a and b will create a negative number.
// The most significant bit of s is high if the sum is negative. 
// If the sum is negative then the carry out is high, otherwise the carry out is low.

assign s = (a[7]^b[7]) ? ((~(a[7]^b[7]))^(a[6:0]^b[6:0]))^(a[7]^b[7]) : (a[7]^b[7])^(a[6:0]^b[6:0]);

assign overflow = (a[7]^b[7])^(a[6:0]^b[6:0])^(a[7]^b[7]);


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~a[7] & ~b[7] & s[7]) & (a[6:0] + b[6:0]));


================================================================
