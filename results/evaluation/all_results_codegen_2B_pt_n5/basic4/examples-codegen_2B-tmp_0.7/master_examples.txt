example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire out[2:0];

mux mux_1(
  .a(a[3:0]),
  .b(b[3:0]),
  .sel(sel[3:0]),
  .out(out[3:0])
);

mux mux_2(
  .a(a[3:0]),
  .b(b[3:0]),
  .sel(sel[3:0]),
  .out(out[2:0])
);


================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign 0 to out.  
// When sel=3, assign 1 to out.  
// When sel=4, assign 2 to out.  
// When sel=5, assign 3 to out.  
// When sel=6, assign 4 to out.  
// When sel=7, assign 5 to out.  
// When sel=8, assign 6 to out.  
// When sel=9, assign 7 to out.  
// When sel=10, assign 8 to out.  
// When sel=11, assign 9 to out.  
// When sel=12, assign 10 to out.  
// When sel=13, assign 11 to out.  
// When sel=14, assign 12 to out.  
// When sel=15, assign 13 to out.  
// When se
================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design a 3-to-1 multiplexer.
module mux3( 
input [3:0] a, b,
input sel,
output [3:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 

// Design a 3-to-1 multiplexer.
module mux3( 
input [3:0] a, b,
input sel,
output [3:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 

// Design a 4-to-1 multiplexer.
module mux4( 
input
================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Combinatorial logic is built around a set of multiplexers.
// Each multiplexer has 4 inputs.
// The multiplexer inputs are 0-indexed.
// The multiplexer outputs are 1-indexed.
// Each multiplexer has 4 outputs.
// Each multiplexer has 4 inputs and outputs.
// The multiplexer inputs are 0-indexed.
// The multiplexer outputs are 1-indexed.

// The dut uses a 4-to-1 multiplexer to decide whether or not
// we need to take the 'a' input.
// The multiplexer has a set of inputs in which the low-order
// bits are 0. Otherwise, the input is a 1.
// The multiplexer outputs are 0-indexed, with an extra 0 bit
// that is always 1.

// The dut uses a 4-
================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

wire [4:0] p;

reg [4:0] output_sel;
reg [4:0] output_p;

always @(posedge clk)
    if ( !a[1] )
	output_sel <= 0;
    else if ( !a[2] )
	output_sel <= 1;
    else 
	output_sel <= 2;

always @(posedge clk)
    if ( sel 
	&& output_sel == 0 )
	output_p <= p[1];
    else if ( sel 
	&& output_sel == 1 )
	output_p <= p[2];
    else if ( sel 
	&& output_sel == 2 )
	output_p <= p[3];

================================================================
