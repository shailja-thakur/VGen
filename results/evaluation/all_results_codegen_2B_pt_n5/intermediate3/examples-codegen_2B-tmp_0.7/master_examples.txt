example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = reset & 0x01;
    r_next = reset & 0x02;
    feedback_value = r_reg ^ r_next;
    r_reg = r_reg << 5 | 0x80 | r_next;
    q = r_reg;
end


================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  if (reset) r_reg = 1;
  else if (r_reg == 1) r_next = 1;
  else if (r_reg == 2) feedback_value = r_reg ^ (r_next << 2);
      else feedback_value = r_reg ^ (r_next >> 4);
  
  r_reg = feedback_value;
  q = r_reg;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(clk,reset,r_reg)
begin
    r_next <= r_reg;
    feedback_value <= (r_reg & 3) ^ ((r_reg >> 2) & 1);
    r_reg <= r_reg + 1;
    r_next <= r_reg;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    if (reset) begin
        r_reg = 0x00;
        r_next = 0x00;
    end else begin
        r_reg = r_reg << 1 | IF (q[3] == 0x00, 1, 0);
        r_reg = r_reg << 1 | IF (q[2] == 0x00, 1, 0);
        r_reg = r_reg << 1 | IF (q[1] == 0x00, 1, 0);
        r_reg = r_reg << 1 | IF (q[0] == 0x00, 1, 0);
        r_next = r_reg >> 4;
        feedback_value = r_reg & 0x0F;
        r_reg = r_reg << 1;
        q[0] = IF (r_
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  if (reset) r_reg = 1;
  else r_reg = r_next;
  r_next = r_reg ^ (r_reg << 2);
  // r_next = r_reg ^ (r_reg << 1)
  // r_next = r_reg ^ (r_reg << 2)
  r_reg = r_next ^ r_reg;
  r_next = r_reg;
  // r_next = r_reg ^ (r_reg << 4)
  // r_next = r_reg ^ (r_reg << 3)
  // r_next = r_reg ^ (r_reg << 2)
  // r_next = r_reg ^ (r_reg << 1)
  // r_next = r_reg ^ (r_reg << 4)
  
================================================================
