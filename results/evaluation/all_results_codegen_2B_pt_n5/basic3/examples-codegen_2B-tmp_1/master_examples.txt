example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge in || posedge clk)
    reg [1:0] b = pos;


================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( in == 3'bx0 || in == 3'bx1 ) begin
  pos <= in;
end
// When sel=0, assign b to out
always @ ( in == 3'b00 ) begin
  pos == 1;
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg        bit b;
assign b = in[pos];
// reset error state
iaf_err l_err;
wire l_ready;
inout      l_ready;
trigger fail_sel = t;
always @(p) req_ready = '0'; // when sel=0, from a low duty to high duty
always @(n) {
    if (in == '0') {
       l_err == 0;
       l_ready = '0';
       req_ready = '0'; 
    }
    else {
       l_err == 1; 
       if (some (fail_sel)&& (fail_sel == '1'))
         l_ready = '1';
       else
         l_ready = '0';
       req_ready = '0';
    }
}
always @(p) {

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign out 0
binpos_t pos = 
{ 
0{
.device_id = 1{ 
	if ( pos >> 3 ) > 0
	return ('11111100 01' + pos << 3 - 1) [0..7]
	else
	return ('00111001 000' + pos << 4 - 2) [0..7]
} 
}
) input pos $endpos;

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos[0] = ~in[0] & in[1]; 
// PBlast's implementation only has a single, three-entry priority register 
const reg enum upper : bits<3> = {val=0b1101}; // {start=0b111100000, stop=0b111111111} 
const intr_reg reg datastore<enum lower:bits<5> = {start=0b11011000}, fmt=bits<2>//{start=0b110111110}} < no sys
,       ireg esr<0>; // {sys=0b1011, clk=0b1010, data=0b3310} 
assign pos[1] = ~datastore<enum lower>(in, &fmt).pos; 
assign pos[2] = ~esr(in, &datastore<
================================================================
