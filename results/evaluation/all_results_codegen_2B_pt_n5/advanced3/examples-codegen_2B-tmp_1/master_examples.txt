example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(ylo) 
            #100 = { 0. .,  &S10, HQ=">>," } when q(x)==0 and S10 then inject key_press()"'            
// index column input #{ (X) )";'} statement, S10's index column inputs are always to S101
always @(yi)
            #100 = { 0. .,  &S10, HQ=">>," } when q(on_off)==1 and S10 then inject key_press()"'            
// index column input #{ (X) )";'} statement, S10's index column inputs are always to S101
always @(yf)
            #100 = { 0. .,  &S10, HQ=">>," } when q(fx)==1 and S10 then inject key_press()"'            
// index column input #{ (X
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
sig s1, s10, s101;
always @ (posedge clk, reset, ~clk, ~reset) 
begin 
    if (present_state==IDLE) {
        next_state = IDLE;
    }

    if (x==1) // S1
        if ( next_state==IDLE )
            present_state=S1;
        else
            present_state=S101;

    else if ( x==0 ) // S10
        if ( next_state==IDLE ) 
            present_state=S10;
        else
            present_state=S101;

    else if ( next_state==IDLE ) // S101  //??
    latecopy(s101)=x;
        if ( s101==1 )
        {
            next_state=S10;
        }

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge CLK)
issue #102
// changes present_state to next_state if x is 0
begin
if (x==0)
  {
    if(reset==1)
     begin
      present_state <- (IDLE);
      next_state <- (IDLE);     
     end
    else
     begin
      next_state <- (S1);
      present_state <- (IDLE);     
     end
  }
else
  begin
    if (next_state<=0)
      next_state<-1;
    // if (next_state<0)
    //   next_state = S1; // assume S10=2
    // else // assume S101=3
    //   next_state = S101; // assume S10=2
  end

end

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial    z_initial = 1;
initial    x_initial = (_this==1);

always @(*)   begin 
   if ( clk ~= reset) {
      present_state<=next_state; 
      z<=z_initial;
      x<=((present_state==IDLE)?x_initial:1);
   }
end 

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
{
 switch (present_state)
   {
   case IDLE: { 
        if(((X==1)||(X==0))&&(rst==0)||(reset==1)) present_state=(present_state+1)%4; } //rising edge
        //if(((X==1)||(X==0))&&(rst==1)) present_state=(present_state+1)%4; //rising edge from reset
        if(rst==1) present_state=(present_state+4)%4; //rising edge from reset,???? different state if status is reset
        if(reset==1) present_state=(present_state+1)%4; //stay in IDLE if status is reset
        if((X==1)&&(rst==1)) { next_state=
================================================================
