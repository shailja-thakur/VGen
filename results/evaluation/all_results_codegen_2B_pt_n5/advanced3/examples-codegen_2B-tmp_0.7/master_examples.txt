example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin
  if(reset) next_state = IDLE; 
    else if(x(0) == 0) next_state = IDLE; 
      else if(x(0) == 1) next_state = S1; 
        else next_state = IDLE;
  if(clk == 1) next_state = next_state; 
end

always @(*) 
begin
  present_state = next_state; 
  z = 1; 
end
'''

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (reset == 0)
        z <= 1;
    else
        z <= z;
    if (x == 1)
        present_state <= S101;
    else
        present_state <= IDLE;
    next_state <= present_state;
    if (reset == 1 && present_state == IDLE)
        next_state <= S1;
end

// state machine for state S1
// input: clk, reset, x
// output: z
module adv_fsm_s1(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
{
  if (reset) next_state = IDLE;
  else if (x == 1) next_state = S1;
  else if (x == 0) next_state = S10;
  else next_state = IDLE;
  present_state = next_state;
}

always @(posedge clk)
{
  present_state;
}

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge rst, posedge x, not reset) 
begin
  if (x == 1) 
    z <= 1;
  else 
    z <= 0;

  if (reset == 1 and rst == 1) 
    present_state <= IDLE;
  else 
    if (x == 0 and reset == 0) 
      present_state <= IDLE;
    else 
      if (x == 1 and reset == 0) 
        next_state <= S1;
      else 
        if (x == 0 and reset == 1) 
          next_state <= S10;
        else 
          if (x == 1 and reset == 1) 
            next_state <= S101;
          else 
            next_state <= IDLE;
end
  
// I have no idea why
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
   if (reset == 1)
     present_state = IDLE;
   else if (x == 1)
     present_state = S1;
   else if (x == 0)
     present_state = S10;
   else
     present_state = S101;
   next_state = IDLE; 
   z = 1;
   if (present_state == next_state)
      z = 0;
   next_state = present_state;

================================================================
