// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\nbegin\n    if (load == 1) {\n        out = data;\n    } else {\n        out = (data << amount) | (out >> (32 - amount));\n    }\nend\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk,posedge reset)\nbegin\n  if (reset) begin\n    out = 0;\n  end\n  if (load) begin\n    out = data;\n  end\n  if (out[amount]) begin\n    out = out << amount;\n    out = out >> (32 - amount);\n  end\nend\nend\nend\n\"\"\",\n    # right shift and rotate operation\n    \"right_rotate\": \"module right_rotate(clk,reset,amount,data,load,out);\\n\"\n    \"input clk,reset;\\n\"\n    \"input [2:0] amount;\\n\"\n    \"input [7:0] data;\\n\"\n    \"input load;\\n\"\n    \"output reg [7:0] out;\\n\"\n    \"// when load is high, load data"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "assign load = (load) ? (true) : (false);\nassign out = data;\nassign out[amount] = data[amount];\nassign out[7:0] = data[(amount + 1)];\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n    if (load == 1)\n        out <= data;\n    else\n        out <= (data << amount) >> amount;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 4,
      "logprobs": null,
      "text": "assign load = (out[7:0] == 0xFF);\nassign out[7:0] = data[7:0];\nassign out[15:8] = data[15:8];\nassign out[23:16] = data[23:16];\nassign out[31:24] = data[31:24];\nassign out[39:32] = data[39:32];\nassign out[47:40] = data[47:40];\nassign out[55:48] = data[55:48];\nassign out[63:56] = data[63:56];\nassign out[71:64] = data[71:64];\nassign out[79:72] = data[79:72];\nassign out[87:80] = data[87:80];\nassign out[95:88"
    }
  ],
  "created": 1663540016,
  "id": "cmpl-RgkAhWPB9fuoOEbgE5gZR0GS0IL8v",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 565,
    "prompt_tokens": 94,
    "total_tokens": 659
  }
}