example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
initial begin 
    if (reset = 0xc9d) clk <= 0x0f;
    q <= 1;
    wait 7; 
    q <= 12;
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
initial begin
  q:=0; 
  if ($reset==1 and clk==1) begin
    q:=1; 
  end else if (q==12) begin
    q:=1; 
  end else begin
    if (clk==1) q:=q+1; 
    q:=$min(q+1); 
  end 
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
initial begin
    clkport = CLK;
    rspi.ce1=0;
    clkin = clk;

    // reset value is 1, so we take the image of the reset and swap it for zero
    rspi.ce0=1 - (reset ^ 1);

    // counter assigned to bit 0
    q = (rspi.col ^ 0) & 3;
    // transitions are continously firing
    if (fcount == 0) {               
	q = (q + 1) & 3;
	fcount = 0xFF;                   // each rising edge fires 0xFF times
    } else {                        // count back down
	if (fcount-- == 0)             // reached 0
	    q = (q + 1) & 3;
    }
end;



================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
initial begin                    
    counter FIO;
    q <= (clk) ? 1'b1 :
	(reset);
end

// This sets the 4 LEDs to the configuration specified in the table
module set_leds #(
    X=1'b1,
    Y=1'b1,
    Z=1'b1,
    L=1'b1
)u;
leds [X,Y,Z,L] <= gnd;

// This sets the preset to the combination of the LD data bits specified by table
module set_lds #(
    X=1'b1,
    Y=1'b1,
    Z=1'b1,
    L=1'b1
)u;
value ld [X,Y,Z,L];

// This loads the preset field and mask
function set_
================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
void counter::main() {   
  if( risingEdge( clock ) ) {

    if ( reset ) {
      q = 1;
    }
    else {
      if ( q == 12 )
        q = 1;
      else
        q++;
    }
  } 
}
================================================================
