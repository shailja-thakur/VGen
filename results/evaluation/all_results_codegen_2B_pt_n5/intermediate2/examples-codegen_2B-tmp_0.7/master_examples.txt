example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 


================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
initial begin 
  q = 1;
  $display("counter example");
  $display_wait(clk, reset);
  q = (reset == 0);
  q = (q == 2);
  q = (q == 3);
  q = (q == 4);
  q = (q == 5);
  q = (q == 6);
  q = (q == 7);
  q = (q == 8);
  q = (q == 9);
  q = (q == 10);
  q = (q == 11);
  q = (q == 12);
  $display(q);
end

// This is a counter that counts from 1 to 12
module counter2( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

//This is a counter that counts from 0 to 12
module counter_12( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

// This is a counter that counts from 0 to 12
module counter_12_z( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

// This is a counter that counts from 0 to 12
module counter_
================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
// This counter is used for testing purposes only

/*
 *
 *
 *
 *
 *
 *
 *
 *
 */

// This is a counter that counts from 1 to 12

// We can't use a submodule because we need to declare the variable as a clk

// If we declare it as a clk, clk is a pointer to a clk object.
// If we declare it as a clk object, clk is a pointer to a clk object.

// It is a pointer to a register, two bits per register

// If you declare a register as a pointer, register is a pointer to a register

// So we can't declare a pointer to a pointer

// We can declare a pointer to a register, two bits per register

// There is no such thing as a pointer to a pointer

// We can declare a variable as a register
================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
wire out;
assign out = q[2];
initial begin
    q = (1 << 3) | (1 << 1);
    out = 0;
    reset = 0;
    clk = 0;
end
end
`

================================================================
