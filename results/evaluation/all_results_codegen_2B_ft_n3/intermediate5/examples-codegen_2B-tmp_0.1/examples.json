// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse if (amount == 3'b000)\nout <= {data[0],data[7:1]};\nelse if (amount == 3'b001)\nout <= {data[1],data[7:2]};\nelse if (amount == 3'b010)\nout <= {data[2],data[7:3]};\nelse if (amount == 3'b011)\nout <= {data[3],data[7:4]};\nelse if (amount == 3'b100)\nout <= {data[4],data[7:5]};\nelse if (amount == 3'b101)\nout <= {data[5],data[7:6]};\nelse if (amount == 3'b110"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse if (amount == 3'b000)\nout <= {data[0],data[7:1]};\nelse if (amount == 3'b001)\nout <= {data[1],data[7:2]};\nelse if (amount == 3'b010)\nout <= {data[2],data[7:3]};\nelse if (amount == 3'b011)\nout <= {data[3],data[7:4]};\nelse if (amount == 3'b100)\nout <= {data[4],data[7:5]};\nelse if (amount == 3'b101)\nout <= {data[5],data[7:6]};\nelse if (amount == 3'b110"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\nout <= 8'b0;\nelse if (load)\nout <= data;\nelse if (amount > 0)\nout <= {data[0],out[7:1]};\nend\n"
    }
  ],
  "created": 1663304515,
  "id": "cmpl-N7wiwOSuE5dJbRO4w7HXtjIN7Ez2J",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 462,
    "prompt_tokens": 93,
    "total_tokens": 555
  }
}