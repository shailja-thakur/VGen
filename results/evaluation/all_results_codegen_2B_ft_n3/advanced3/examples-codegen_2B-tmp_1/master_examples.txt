example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @ (posedge clk or posedge reset)
begin
if (reset) 
present_state = IDLE;
else
present_state = next_state ;
end

always @ (*)
begin
// always transitioning to a new state after reseting or changing values of reg
if (reset) 
next_state = IDLE;
else if (present_state == S1 && x) next_state = S10;
else if (present_state == S10 && ~x) next_state = S101;
else if (present_state == S101 && x) next_state = IDLE;
// otherwise stay in same state
end 

 
//always transitioning to new state after input value changes
always @ (*)
begin
if (reset) 
case (3'b001)
4'b0001: next_state = IDLE;

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(clk, next_state)
case (present_state)
IDLE : begin z = ~reset; next_state = (x) ? IDLE : RESET; end
IDLE : begin z = 1; next_state = (x) ? IDLE : GETZ; end
S1: next_state = (x) ? S1 : RESET;
S10: next_state = (x) ? S1 : S10;
S101:next_state = (x) ? S1 : S101;
GETZ: next_state = IDLE;
END: next_state = IDLE;
default begin z = 1'b0; next_state = IDLE; end
endcase 
always @ (present_state, x, z)
begin
if (z ===1'b1) zff = 1'b1;
else zff
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


/*initial*/
present_state <= #0 IDLE;
/*always*/
//next state variable is updated at every behavioral statement 
next_state <= #0 IDLE;
/*instantiation*/
integer clk_counter = 0;
reg [4:0] x_and;
always @(posedge clk)//counter implementation
begin
	if (reset==0)
	clk_counter = 0;
	else 
	clk_counter = clk_counter + 1;
end

always @(present_state or x)
begin
	//combinational circuit following the VHDL task "always" 
	if (present_state == IDLE)
	begin
	if (x == 1'b1)// @S1
	next_state = S1;
	else
	next_state = IDLE;
	end
================================================================
