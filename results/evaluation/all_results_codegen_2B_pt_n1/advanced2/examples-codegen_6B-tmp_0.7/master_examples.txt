example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if the reset input is high, reset the output q to 0.
// Otherwise, only decrement q if the slowena input is high.

always @(posedge clk)
if (reset)
{
	q[0] <= 0;
	q[1] <= 0;
	q[2] <= 0;
}
else if (slowena)
{
	if (q[0] < 9) q[0] <= q[0] + 1;
}
else
{
	if (q[0] > 0) q[0] <= q[0] - 1;
}


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always_comb
    begin
        if (reset) q <= 0;
        else if (slowena && q < 9) q <= q + 1;
    end
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always_comb
    begin
        if (reset) q <= 0;
        else if (slowena && q < 9) q <= q + 1;
    end
end

module count_fast_vcc(
    input clk,
    input slowena,
    input reset,
    output reg q);

// On the positive edge of the clock
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge slowena)
    if (reset)
    begin
        q <= 0;
    end
    else if (~slowena)
    begin
        q <= (slowena ? q + 1 : q);
    end
end

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge slowena)
    if (reset)
    begin
        q <= 0;
    end
    else if (~slowena)
    begin
        q <= (slowena ? q
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
when (reset = '1') begin
  q <= 0;
end else begin
  if (slowena = '1' and q < 9) begin
    q <= q + 1;
  end else begin
    q <= q;
  end
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is low and q is not 0.
when (reset = '0') begin
  q <= 9;
end else begin
  if (slowena = '0' and q > 0) begin
    q <= q - 1;
  end else begin
    q <= q;
  end
end


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// This can be done with an if-then-else statement:
begin
    if (reset = '1' and slowena = '1') begin
	q <= 0;
    end else begin
	if (slowena = '1') begin
	    q <= q + 1;
	end else begin
	    q <= q;
	end;
    end;
end

module count(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// This can be done with an if-then-else statement:
begin
    if (reset = '1' and slowena = '1')
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always clk2slow = clk2slow_a(clk, slowena, true);
always q <= clk2slow & q <= (slowena ?
        (reg[0] == 9 ? 9 : reg[0] + 1) : 0);


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if(reset)
        q <= 0;
    else if(slowena && q < 9)
        q <= 1;
    else if(slowena && q == 9)
        q <= 2;
    else
        q <= 0;

module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if(reset)
        q <= 0;
    else if(slowena && q < 9)
        q <= 1;
    else if(slowena && q == 9)

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if q is 0 and reset is high, set q to 9.
// else if q is 9, set q to 0.

always @(posedge clk)
    begin
        if(reset)
            q <= 0;
        else if(slowena)
            if(q == 9)
                q <= 0;
            else if(q == 0)
                q <= 9;
    end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    q <= q + 1;


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) reset_output_q(q); else
  if (slowena)
    if (q < 9)
    {
      q++;
      if (q == 10) slowena = 0;
    }
  end
end


module count_fast(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (slowena)
  {
    if (reset) reset_output_q(q); else
    if (q < 9)
    {
      q++;
      
================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Write the new value of q to the output gate.
always @(posedge clk)
    if (reset == 1'b1) begin
        q <= 0;
    end else 
        if (slowena == 1'b1 && q != 9) begin
            q <= q + 1;
        end

// On the negative edge of the clock:
// If ena is high, reset the output q to 9.
// Otherwise, only decrement the output q if q is not 0.
// Write the new value of q to the output gate.
always @(negedge clk)
    if (slowena == 1'b1) begin
        q <= 9;
    end else 
        if (q != 0) begin
            q <= q - 1;
        end

// On the positive edge of the clock:
// Reset the output q to 0
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
// On the negative edge of the clock:
// if the slowen is high, just output the input q.
// Otherwise, output the input q - 1 if q is not zero, otherwise output 0.

#pragma HLS INTERFACE clock port=slowena port=reset port=clk
#pragma HLS INTERFACE axis port=q
#pragma HLS DATAFLOW

reg [3:0] q;

void count_slow_process()
{
    hls_slow_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype_cell_datatype
================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    //q <= slowena && q <= 9; 
    q <= slowena;
  else
    q <= q + 1;


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q[0] <= 0;
  else if (slowena && q[0] < 9) q[0] <= q[0] + 1;

// On the negative edge of the clock:
// If the clk input is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(negedge clk)
  if (clk) q[0] <= 0;
  else if (slowena && q[0] > 0) q[0] <= q[0] - 1;


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) q <= 0;
  else if (slowena && q < 9) q <= q + 1;


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Thereby, skipping the first decade, and counting the seconds.
// On the negative edge of the clock:
// if ena is high, only decrement the output q if q is not 0.
// Otherwise, only decrement the output q if the slowena input is high and q is not 0.
// Thereby, skipping the first decade, and counting the minutes.
// On the negative edge of the clock:
// if slowena is high, only decrement the output q if q is not 0.
// Otherwise, only decrement the output q if the clock is high and q is not 0.
// Thereby, counting the hours.
// On the negative edge of the clock:
// if clock is high, only decrement the output q if q is not 0.
// Otherwise, only decrement the output q if the reset input is high and q is not 0.
// Thereby, counting the
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock, count down the output q if the ena input is high and q is not 0.
// On the negative edge of the clock again, reset the output q.

always@(posedge clk)
    q <= (slowena ? (posedge(reset) ? 0 : q[3:0]) : q[3:0] < 0 ? q[3:0] + 10 : q[3:0] - 1);


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (reset) {
    q <= 0;
  } else if (slowena) {
    if (q == 9) {
      q <= 0;
    } else {
      q <= q + 1;
    }
  }


================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (always_comb) begin
    if (reset) begin
        q <= 0;
    end else if (slowena && q < 9) begin
        q <= q + 1;
    end else begin
        q <= q;
    end
end

module count_fast(
    input clk,
    input fastena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (always_comb) begin
    if (reset) begin
        q <= 0;
    end else if (fastena && q < 9) begin
        q <= q + 1;
    end else begin
        q <= q;
    end
================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the output q is 9, then set q to 0 and increment the counter.
always @(posedge clk)
    if (reset)
    begin
        q <= 0;
    end
    else if (slowena)
    begin
        if (q < 9)
            q <= q + 1;
        else
            q <= 0;
    end
;

// On the negative edge of the clock:
// if slowena is high, set q to 0. 
// Otherwise, only decrement the output q if q is not 0.
// If q is 0 then set q to 9 and decrement the counter.
always @(negedge clk)
    if (slowena)
    begin
        q <= 0;
    end
    else if (q > 0)
    begin
        q <= q - 1;
    end
    else

================================================================
