example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

/* write your code here */
wire w1;
wire w2;
xor(w1, a, b);
xor(sum, w1, cin);
and(cout, w1, cin);

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
assign sum = a ^ b;
assign cout = a &b;

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

xor gate_1(sum, a, b); //Because this is an exclusive OR'd with one of the operands, the output will be 1 iff ONLY one of the operands are 1. (i.e. "logical XOR"
xor gate_2(cout, a, b); //Logical XOR's will result in a 1 iff the inputs are equal.


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// a_a_b and a_not_b_cout represent what the output of the full adder would be if a and b were both 1 and if the carryout was 0. Same holds for if -a-b and a_not_b_cout is 0.
// The final output is a_a_b_cout_sum. Sum is the sum of both a and b if the carryin is 0, otherwise 0.
// cout is the carryout of the full adder

assign sum = a ^ b;
assign a_a_b = a & b;
assign a_not_b_cout = a & (~b);
assign a_a_b_cout_0_sum = a_a_b_cout + a_not_b_cout;
assign cout = a_a_b_cout_0
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign sum= a ^ b;
assign cout= a & b;


================================================================
