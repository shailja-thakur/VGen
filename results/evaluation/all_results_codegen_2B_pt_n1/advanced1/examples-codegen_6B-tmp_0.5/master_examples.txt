example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (clk)
    begin
        s <= a + b;
        if (a > 127)
        begin
            if (b > 127)
            begin
                overflow <= 1;
            end
            else
            begin
                overflow <= 0;
            end
        end
        else
        begin
            if (b > 127)
            begin
                overflow <= 1;
            end
            else
            begin
                overflow <= 0;
            end
        end
    end
end


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The following is the signed_adder function

always @(posedge clk)
begin
    s <= a + b + signed(overflow);
end

// The following is the signed_adder function

always @(posedge clk)
begin
    if (s[7] == 1)
        s <= a + b + signed(overflow);
    else
        s <= a + b;
end

// The following is the signed_adder function

always @(posedge clk)
begin
    if (s[7] == 1)
        s <= a + b + signed(overflow);
    else
        s <= a + b;
end

// The following is the signed_adder function

always @(posedge clk)
begin
    if (s[7] == 1)
        s <= a + b + signed
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder function will return a value of type [7:0]

always @(posedge clk or negedge rst) begin

if (rst) begin
    s <= 0;
    overflow <= 0;
end
else begin
    s <= a + b;
    if (a > 127) begin
        if (b > 127) begin
            s <= -2;
            overflow <= 1;
        end else begin
            s <= b;
            overflow <= 0;
        end
    end else begin
        if (b > 127) begin
            s <= a;
            overflow <= 0;
        end else begin
            s <= a + b;
            overflow <= 1;
        end
    end
end

end

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    always @(posedge clk)
    begin
        case a:
            if (a[7:0] > b[7:0]) {
                s[7:0] <= a[7:0] + b[7:0] + 128;
                overflow <= 1;
            } else {
                s[7:0] <= a[7:0] + b[7:0];
                overflow <= 0;
            }
            break;
        case b:
            if (a[7:0] > b[7:0]) {
                s[7:0] <= b[7:0] + a[7:0] + 128;
                overflow <= 1;
            } else {
                s[7:0] <= b[7:0] + a[7:0];
                overflow <= 0;
            }
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The input a and b are left-justified in the input registers a and b. 
// The most significant bit of a and b is the bit that is shifted to the leftmost position in the output registers s and overflow.
// The bit of the output register s is shifted to the rightmost position in the output registers s and overflow. 
// The bit of the output register overflow is shifted to the rightmost position in the output registers s and overflow.

always @(posedge clk)
begin
  s <= a + b;
  if (s[7] == 1'b1)
    overflow <= 1;
end


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    s <= a + b + '0' when not(overflow)
    else if (a > b)
        s <= a - b + '1' when not(overflow)
    else if (a < b)
        s <= b - a + '1' when not(overflow)
    else if (a == b)
        s <= '0' when not(overflow)
    else if (a > '0' and b > '0')
        s <= a - b + '1' when not(overflow)
    else if (a < '0' and b < '0')
        s <= b - a + '1' when not(overflow)
    else if (a > '0' and b < '0')
        s <= a - b + '1' when not(overflow
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// http://www.cs.cmu.edu/~dga/cmsc-619/Revisited-1.pdf

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder does not support the addition of negative numbers.

always @(posedge clk)
begin
    if (a < 0) begin
        s <= -1;
        overflow <= 1;
    end else begin
        s <= a + b;
    end
end


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder must be able to handle the largest signed number.

// The signed adder should not overflow.

// The signed adder should not underflow.

// The signed adder should not return a negative number.

// The signed adder should not return a number that is greater than 2^31.

// The signed adder should not return a number that is greater than 2^32.



module signed_adder_2(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
	if (clk)
	begin
		s <= a + b;
		if (a[7] || b[7])
			overflow <= 1;
		else
			overflow <= 0;
	end
end


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    s <= a + b + select(overflow == 0, a[7:0], b[7:0]);
end

================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
  if(clk)
  begin
    s <= a + b;
    if(a > 0x7f)
      overflow <= a > 0xff;
    else
      overflow <= b > 0xff;
  end
end


================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// The equation for adding two numbers that are stored as two's complement numbers is:
// s = a + b
// s is two's complement, so the result is the same as the sum of the two's complement numbers.
// The equation for adding two numbers that are stored as two's complement numbers is:
// s = a + b
// s is two's complement, so the result is the same as the sum of the two's complement numbers.
// The equation for adding two numbers that are stored as two's complement numbers is:
// s = a + b
// s is two's complement, so the result is the same as the sum of the two's complement numbers.
// The equation for adding two numbers that are stored as two's complement numbers is:
// s = a + b
// s is two's complement, so the result is the same as the sum of the two's complement numbers.
// The
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


module signed_adder_output_overflow(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 


// The output s is the sum of a and b

module signed_adder_output_s(input [7:0] a,
    input [7:0] b,
    output [7:0] s
); 


// The output overflow is the bitwise OR of the occurence of the signed overflow of a and b

module signed_adder_output_overflow(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 


// The output overflow is the bitwise OR of the occurence of the signed overflow of a and b

module signed_
================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the
================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (slv_active) begin
        s <= a + b;
        if (s[7] == 1) begin
            overflow <= 1;
        end
    end
end
end


================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always@(posedge clk) begin
    if (clk) begin
        s <= a + b;
        if (a < 0 and b < 0 and s < 0) begin
            overflow <= 1;
        end else begin
            overflow <= 0;
        end
    end
end


================================================================
