example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are unsigned and the output s is signed. 
// The input a and b may be negative. 
// The output s is always non-negative. 

module unsigned_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is high


// The inputs a and b are unsigned and the output s is signed. 
// The input a and b may be
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (clk)
    begin
        s <= a + b;
        if (s[7] == b[7] && s[6] == b[6] && s[5] == b[5] && s[4] == b[4] && s[3] == b[3] && s[2] == b[2] && s[1] == b[1] && s[0] == b[0])
        begin
            overflow <= 1;
        end
    end
end


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high

// The inputs a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

// The inputs a and b are added to the output s. 
// assign the occ
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        if (a[7:0] > 127) begin
            s <= a[7:0] - 127;
            overflow <= 1;
        end else begin
            s <= a[7:0] + b[7:0];
            overflow <= 0;
        end
    end
end


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The following code is the same as the code above except with the addition of the signed_overflow variable

module signed_adder_v1(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The following code is the same as the code above except with the addition of the signed_overflow variable

module signed_adder_v2(input [7:0] a,
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a function.

function signed_adder(a, b, s, overflow) {
    if (a[7] == b[7] && a[6] == b[6] && a[5] == b[5] && a[4] == b[4] && a[3] == b[3] && a[2] == b[2] && a[1] == b[1] && a[0] == b[0]) {
        s[7] = 0;
        s[6] = 0;
        s[5] = 0;
        s[4] = 0;
        s[3] = 0;
        s[2] = 0;
        s[1] = 0;
        s[0] = 0;
        overflow[0] = 0;
    } else {

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented using the following logic:
// if (a[7:0] > 127) {
//   s[7:0] = a[7:0] - 256
// } else {
//   s[7:0] = a[7:0]
// }

// if (b[7:0] > 127) {
//   s[7:0] = s[7:0] - 256
// } else {
//   s[7:0] = s[7:0] + b[7:0]
// }

// The signed adder is implemented using the following logic:
// if (a[7:0] > 127) {
//   s[7:0] = a[7:0] - 256
// } else {
//   s[7:0] = a[7:0]
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (a[7] == b[7])
    begin
        s[7] <= a[7];
        s[6] <= a[6] + b[6];
        s[5] <= a[5] + b[5];
        s[4] <= a[4] + b[4];
        s[3] <= a[3] + b[3];
        s[2] <= a[2] + b[2];
        s[1] <= a[1] + b[1];
        s[0] <= a[0] + b[0];
        if (a[7] == 1'b1 && b[7] == 1'b1)
        begin
            s[7] <= 1'b0;
            s[6] <= 1'b0
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The input a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high

// The input a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

always @(posedge clk)
begin
    if (clk == 1)
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bits of a and b are high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bits of a and b are low and the most significant bit of s is high

always @(posedge clk)
  s <= a + b + (overflow & 1);


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        a <= a + b;
        if (a[7] == 1) begin
            s <= b;
        end else begin
            if (a[7] == -1) begin
                s <= -b;
            end else begin
                if (b[7] == 1) begin
                    s <= a;
                end else begin
                    if (b[7] == -1) begin
                        s <= -a;
                    end else begin
                        s <= a + b;
                        if (s[7] == 1) begin
                            overflow <= 1;
                        end else begin
                            if (s[7] == -1) begin
                                overflow <= 1;
                            end
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a function that returns the sum of a and b and the
// signed overflow bit. 

always @(posedge clk)
  begin
    s <= a + b + signed(overflow);
  end
end


================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk) begin
    s <= a + b;
    if (a > 127) begin
        s <= b;
        overflow <= 1;
    end else begin
        s <= a;
        overflow <= 0;
    end
end

================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @ (posedge clk or negedge rst) begin
    if (rst) begin
        s <= 0;
        overflow <= 0;
    end else begin
        s <= a + b;
        if (a > 127) begin
            if (b > 127) begin
                overflow <= 1;
            end else begin
                overflow <= 0;
            end
        end
    end
end


================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed_adder module is a two-input module. 
// The inputs are a and b. The output is s. 
// The following constraints are imposed on the module: 
// The inputs a and b are of type int. 
// The output s is of type int. 
// The output overflow is of type boolean. 
// The inputs a and b are not modified by the module. 
// The output s is not modified by the module. 
// The output overflow is not modified by the module. 

always @(posedge clk)
  s <= a + b;

always @(posedge clk)
  if (overflow)
    s <= a + b + 1;


================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder will be used to add the two numbers.
// The result of the addition is the most significant bit of the sum.
// The result of the addition is also the most significant bit of the sum.
// The result of the addition is the least significant bit of the sum.
// The result of the addition is the least significant bit of the sum.

// The signed adder will be used to add the two numbers.
// The result of the addition is the most significant bit of the sum.
// The result of the addition is the most significant bit of the sum.
// The result of the addition is the least significant bit of the sum.
// The result of the addition is the least significant bit of the sum.

// The signed adder will be used to add the two numbers.
// The result of the addition is the most significant bit of the sum.
// The result of the addition is
================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The following code is a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 
// The result is stored in the output s[7:0]. 
// The result is saturated to 8-bit 2's complement if the result is negative. 
// The result is saturated to the most significant bit of the input a and b if the result is positive. 
// The result is saturated to the least significant bit of the input a and b if the result is negative. 
// The result is saturated to the least significant bit of the input a and b if the result is positive. 

module signed_adder_saturated(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the
================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (a[7] == 1'b1 and b[7] == 1'b1)
    begin
        s[7] <= a[7] + b[7];
        if (s[7] == 2'b10)
        begin
            overflow <= 1;
        end
    end
end


================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (a[7] == b[7] && a[6] == b[6] && a[5] == b[5] && a[4] == b[4] && a[3] == b[3] && a[2] == b[2] && a[1] == b[1] && a[0] == b[0])
        s <= a;
    else if (a[7] == b[7] && a[6] == b[6] && a[5] == b[5] && a[4] == b[4] && a[3] == b[3] && a[2] == b[2] && a[1] == b[1] && a[0] == b[0] && s[7] == 1)
        s <= a;
    
================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented in the following function:

function signed_adder(a, b, s, overflow) {
    if (a >= 128) {
        if (b >= 128) {
            s = a + b + 128;
            overflow = 1;
        } else {
            s = a + b;
            overflow = 0;
        }
    } else {
        if (b >= 128) {
            s = a + b;
            overflow = 0;
        } else {
            s = a + b + 128;
            overflow = 1;
        }
    }
}

================================================================
