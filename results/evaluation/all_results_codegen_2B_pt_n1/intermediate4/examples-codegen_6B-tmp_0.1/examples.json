// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n    present_state <= 0;\n  end\n  else begin\n    if (in) next_state <= 1;\n    else next_state <= 0;\n    present_state <= next_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n  end\n  else begin\n    if (next_state == 0) begin\n      if (in) next_state <= 1;\n    end\n    else begin\n      next_state <= 0;\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= 0;\n  out <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset)\n        next_state <= 0;\n    else if (in)\n        next_state <= 1;\n    else\n        next_state <= 0;\n    present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n  end\n  else begin\n    if (next_state == 0) begin\n      if (in) next_state <= 1;\n    end\n    else begin\n      next_state <= 0;\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset)\n        next_state <= 0;\n    else if (next_state == 0)\n        next_state <= in;\n    else if (next_state == 1)\n        next_state <= in;\n    else\n        next_state <= 0;\n    present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= 0;\n  out <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= 0;\n  out <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    next_state <= in;\n  else if (next_state == 1)\n    next_state <= in;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n    present_state <= 0;\n  end\n  else begin\n    if (in) next_state <= 1;\n    else next_state <= 0;\n    present_state <= next_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= 0;\n  out <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n    present_state <= 0;\n  end\n  else begin\n    if (in) next_state <= 1;\n    else next_state <= 0;\n    present_state <= next_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset)\n        next_state <= 0;\n    else if (next_state == 0)\n        if (in)\n            next_state <= 1;\n    else if (next_state == 1)\n        if (in)\n            next_state <= 0;\n    else\n        next_state <= 0;\n    out <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 16,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (in)\n    next_state <= 1;\n  else\n    next_state <= 0;\n  present_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset) begin\n    next_state <= 0;\n    present_state <= 0;\n  end\n  else begin\n    if (in) begin\n      next_state <= 1;\n      present_state <= next_state;\n    end\n    else begin\n      next_state <= 0;\n      present_state <= next_state;\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    next_state <= 0;\n  else if (next_state == 0)\n    if (in)\n      next_state <= 1;\n  else if (next_state == 1)\n    if (in)\n      next_state <= 0;\n  else\n    next_state <= 0;\n  out <= next_state;\nend\n"
    }
  ],
  "created": 1663520664,
  "id": "cmpl-O1bPMd1bRplTXCN5KELpPj0GK0XL0",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1708,
    "prompt_tokens": 148,
    "total_tokens": 1856
  }
}