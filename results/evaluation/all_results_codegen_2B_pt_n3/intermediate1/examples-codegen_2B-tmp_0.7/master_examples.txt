example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. It takes two inputs and produces a sum and carry-out.
module full_adder( 
input a, b,
input cout, sum, carry );
    
// The following is a local network. It takes two inputs and produces a sum and carry-out.
module local_network( 
input a, b,
input cout, sum, carry );

// The following is a bit-flipper. It takes two inputs and produces a carry in and a sum.
module bit_flipper( 
input a,
input b,
output cout, carry, sum );

// The following is a local network that takes two inputs and produces two outputs.
module local_network_with_two_outputs( 
input a,
input b,
output cout1, cout2, sum, carry );

// The following is a simple local net
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input alpha, beta;
input sum_in, carry_in;

reg a_reg;
reg b_reg;
reg sum_reg;
reg carry_reg;

always_comb
{
  a_reg = a;
  b_reg = b;
  sum_reg = sum;
  carry_reg = carry_in;
}

always_comb
{
  sum_reg = sum_reg + alpha;
  carry_reg = carry_reg + beta;
  sum_reg = sum_reg & 0xffff;
  carry_reg = carry_reg & 0x1;
  sum_reg = sum_reg & 0xffff;
  sum_reg = sum_reg + carry_reg;
  cout = sum_reg;
}

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

{
	sum   = (a + b) >> 1;
	cout  = (a + b) >> 1;
}
================================================================
