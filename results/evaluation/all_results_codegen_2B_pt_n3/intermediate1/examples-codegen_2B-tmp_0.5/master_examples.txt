example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The adder has a carry-out.
module adder(
input a, b,
output cout, sum, carry );

// The adder has a sum and carry-out.
module sum_and_carry(
input a, b,
output cout, sum, carry );

// The adder has a sum and no carry-out.
module sum_and_no_carry(
input a, b,
output cout, sum );

// The adder has a sum and a carry-out.
module sum_and_carry(
input a, b,
output cout, sum, carry );

// The adder has a carry-out.
module carry_out(
input a, b,
output cout, sum, carry );

// The adder has no sum and a carry-out.
module no_sum_and_carry(
input
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts three bits and produces a sum and carry-out.
module full_subtractor( 
input a, b,
output cout, sum, carry );

// This is a half multiplier. A half multiplier multiplies two bits and produces a sum and carry-out.
module half_multiplier( 
input a, b,
output cout, sum );

// This is a full multiplier. A
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_in, b_in;
output cout_out, sum_out;

input a_clk, b_clk;
output cout_clk, sum_clk;

input a_rst, b_rst;
output cout_rst, sum_rst;

void add_clk_proc( void )
{
  if ( a_clk == 1 )
  {
    sum_out = 0;
    sum_out = sum_out + a_in;
    sum_out = sum_out + b_in;
    cout_out = 1;
  }
  else
  {
    sum_out = sum_out + a_in;
    sum_out = sum_out + b_in;
    cout_out = 1;
  }
}

void add_
================================================================
