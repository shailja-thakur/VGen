// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (load)\n    {\n        out = data;\n    }\n    else\n    {\n        out <<= amount;\n        out <<= amount;\n        out <<= amount;\n        out <<= amount;\n    }\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n    if (load)\n        out = data;\n    else\n        out = (data << amount) | (out >> (32 - amount));\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "assign load_out = (load == '1') ? out : (out << amount) | (out >> (32 - amount));\n// when load is high, load data to out\n// otherwise rotate the out register followed by left shift the out register by amount bits\nassign out_out = (load == '1') ? out : (out << amount) | (out >> (32 - amount));\n// when load is high, load data to out\n// otherwise rotate the out register followed by left shift the out register by amount bits\nassign out_load = (load == '1') ? out : (out << amount) | (out >> (32 - amount));\n// when load is high, load data to out\n// otherwise rotate the out register followed by left shift the out register by amount bits\nassign out_out_out = (load == '1') ? out : (out << amount) | (out >>"
    }
  ],
  "created": 1663536962,
  "id": "cmpl-EYuGDILeyR3MX8y2RnDEO6WcjY2OB",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 318,
    "prompt_tokens": 94,
    "total_tokens": 412
  }
}