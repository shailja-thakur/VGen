example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
    if (load)
    {
        out = (data << amount) | (data >> (32 - amount));
    }
    else
    {
        out = (data << amount) | (data >> (32 - amount));
        // rotate the data register by amount bits
        data = data << amount;
    }

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

// add this to the primary clock and latch
// then add this to the primary clock


================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (clk, reset, load)
begin
    if (reset) out <= 0;
    else {
        if (load) out <= data;
        else out <= data << amount;
    }
end
// left shift and rotate operation
module left_shift(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (clk, reset, load)
begin
    if (reset) out <= 0;
    else {
        if (load) out <= data >> amount;
        else out <= data << amount;
    }
end

module right
================================================================
