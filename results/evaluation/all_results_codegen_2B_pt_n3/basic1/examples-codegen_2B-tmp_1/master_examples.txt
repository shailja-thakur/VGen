example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign(wire &in, wire out) {
  out = in;
}

// use a function call to emit a wire id to a module of a function
function wire_out( in, out ) {
  out( in );
}

// The Output function for the Wire out module

function wire_out(in, out) {
  out(in);
}

//  Use a function call and an Id to emit a call to a function call
function wire_out_id(in, out) {
  // Get the Id we would like to emit from a function call
  let id = in;
  // Set it logically for the function_call we would like to emit to

  out(function_call(id ));
}

// mapping a counter
function counting_module( input in, output out )   {
  out.repeat( insign
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

let a = 5
let b = 6;
let out = ( 
	// viewer has to indent the // here and enforce 
	// indentation. Can easily get selected output
	// if we had a console above. 
	// print ( "a = in, b = ", in )
	// and print ( "a = ", a, " and b = ", b )
	a = in,
	b = in
);


================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
export { wire_assign as out_to_in1 } from './out_to_in1.js';
export { wire_assign as out_to_in2 } from './out_to_in2.js';
export { wire_assign as out_to_in3 } from './out_to_in3.js';
export { wire_assign as out_to_in } from './out_to_in.js';

// Spec a module which takes a wire type as parameter and 
// prepends a lower cased wire-mode. Pads the wires in both directions.
module wire_prepend( in0, out0 );
// looks like the here '/text' is what the wire is going to be encoded to ? 
module wire_prepend2( level0, out0 );
// looks like this is what output is going to be
================================================================
