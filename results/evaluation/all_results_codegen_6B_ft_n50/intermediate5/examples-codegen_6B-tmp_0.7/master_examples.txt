example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=0;
	end
	else if(load)
	begin
	out<=data;
	end
	else
	begin
	out<={out[6:0],out[7]};
	end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk)
if(reset)
	begin
	out <= 8'b0;
	end
else if (load) 
	begin
	out <= data;
	end
else 
	begin
	out = {out[6:0],out[7]};
	end
	

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else 
	begin
	out[2:0]<={out[5:3],out[6],out[7]};
	out[7:3]<={out[4:0],1'd0};
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
if(load) begin
out<=data;
end
else begin
out<={out[6:0],data[7]};
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(load)
	begin
	out<=data;
	end
	else
	begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101||amount==3'b100)
	begin
	out<={out[6:0],out[7]};
	end
	else if(amount==3'b011||amount==3'b010)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if(amount==3'b001||amount==3'b000)
	begin
	out<={out[4:0],out[5],out[6],out[7]};
	end
	end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if (load) 
	out <= data;
	else begin
	// out <= {out[6:0],out[7]};
	out[6:0] <= out[7:1];
	out[7] <= out[0];
	// out <= {out[5:0],out[6]};
	end
	end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out = 0;
	else if(load)
	out = data;
	else begin
	// shift left by 1
	out = out << 1;
	// rotate right by amount
	out = out >> amount;
	end
	end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	out<= 0;
	end
	else
	begin
	if (load) out<=data;
	else
	begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<=out>>1;
	3'b010: out<=out>>2;
	3'b011: out<=out>>3;
	3'b100: out<=out>>4;
	3'b101: out<=out>>5;
	3'b110: out<=out>>6;
	3'b111: out<=out>>7;
	endcase
	end
	end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk)
	begin
	if (reset)
	out <= 0;
	else
	begin
	if (load)
	out <= data;
	else 
	begin
	if(amount == 3'b110 || amount == 3'b101)
	out = {out[6:0],out[7]};
	else if(amount == 3'b111 || amount == 3'b100)
	out = {out[5:0],out[7:6]};
	else if(amount == 3'b110 || amount == 3'b100)
	out = {out[4:0],out[7:5]};
	else if(amount == 3'b111 || amount == 3'b101)
	out = {out[3:0],out[7:4]};
	else if(amount
================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else
	begin
	if (load==1'b1)
	out<=data;
	else 
	begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101||amount==3'b100)
	out<={out[5:0],out[6]};
	else if(amount==3'b011||amount==3'b010)
	out<={out[4:0],out[5],out[6]};
	else if(amount==3'b001||amount==3'b000)
	out<={out[3:0],out[4],out[5],out[6]};
	end
	end
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	out<=8'b0;
	end
	else if (load)
	begin
	out<=data;
	end
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out
================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
	always@(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else
	begin
	// shift left by 2^(amount)
	// shift right by 2^(amount)
	out<={out[6:0],out[7]};
	end
	end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if(reset==1'b1)
	out<=data;
	else if(load==1'b1)
	out<={out[6:0],data[7]};
	else 
	begin
	for(int i=0;i<amount;i++)
	out<={out[5:0],out[6]};
	end
	end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if(reset)
	begin
	out <= 0;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	out <= {out[6:0],out[7]};
	end

================================================================
example-15: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else begin
	case(amount) // number of bits to shift
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={out[0],
================================================================
example-16: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out<=0;
else if(load)
	out<=data;
else begin
	if(amount==3'b110)
	out<={out[5:0],out[6]};
	if(amount==3'b110|amount==3'b101)
	out<={out[4:0],out[5]};
	if(amount==3'b110|amount==3'b101|amount==3'b100)
	out<={out[3:0],out[4]};
	if(amount==3'b110|amount==3'b101|amount==3'b100|amount==3'b011)
	out<={out[2:0],out[3]};
	if(amount==3'
================================================================
example-17: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out<=0;
else if(load)
out<=data;
else begin
	if(amount==3'b110)
	out<=out;
	else if(amount==3'b101 || amount==3'b100)
	out<=out>>1;
	else if(amount==3'b011 || amount==3'b010)
	out<=out>>2;
	else if(amount==3'b001 || amount==3'b000)
	out<=out>>3;
end
end

================================================================
example-18: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if(reset)
	out<=8'b0;
else if(load)
	out<=data;
else
	begin
	out[2:0]<={out[5:3],out[5:3]};
	out[5:3]<={out[5:3],out[5:3]};
	out[6:4]<={out[7:5],out[5:3]};
	out[7:5]<={out[6:4],out[5:3]};
	out[8:7]<={out[7:5],out[5:3]};
	end
end

================================================================
example-19: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if (reset == 1'b1)
	out <= 8'b00000000;
	else if (load == 1'b1)
	out <= data;
	else begin
	
	case(amount)
	3'b000: out <= out; // No operation
	3'b001: out <= {out[6:0],out[7]}; // Right shift
	3'b010: out <= {out[5:0],out[6]}; // Left shift
	3'b011: out <= {out[4:0],out[5]}; // Both shift
	3'b100: out <= {out[3:0],out[4]}; // Reverse order
	endcase
	end
	end

================================================================
example-20: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	if (load) out<=data;
	else begin
	//$display("amount=%d",amount);
	//$display("out=%d",out);
	out<={out[6:0],1'b0};
	end

================================================================
example-21: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
if (load) out <= data;
else begin
	case(amount)
	3'd1: out = {out[6:0],out[7]};
	3'd2: out = {out[5:0],out[6]};
	3'd3: out = {out[4:0],out[5]};
	3'd4: out = {out[3:0],out[4]};
	3'd5: out = {out[2:0],out[3]};
	3'd6: out = {out[1:0],out[2]};
	3'd7: out = {out[0],out[1]};
	default: out = {out[6:0],out[7]};
	endcase
end

================================================================
example-22: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk or posedge reset)
	if (reset)
	begin
 	out<=0;
	end
	else if (load)
	begin
	out<=data;
	end
	else begin
	out<={out[6:0],data[7]};
	end

================================================================
example-23: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk or posedge reset)
	begin
	if(reset)
	out <= 0;
	else if(load)
	out <= data;
	else 
	begin
	out = {out[5:0],out[6]};
	case(amount)
	3'b000: out = out;
	3'b001: out = {out[5:0],out[6]};
	3'b010: out = {out[4:0],out[5]};
	3'b011: out = {out[3:0],out[4]};
	3'b100: out = {out[2:0],out[3]};
	3'b101: out = {out[1:0],out[2]};
	3'b110: out = {out[0],
================================================================
example-24: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
	if (load) begin
	out <= data;
	end
	else begin
	//$display($time,"R: %d",out);
	//$display($time,"L: %d",out);
	out <= {out[6:0],out[7]};
	//$display($time,"O: %d",out);
	end
end

================================================================
example-25: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
	if(reset)
	begin
	out <= 8'b00000000;
	end
	else if(load)
	begin
	out <= data;
	end
	else
	begin
	out = {out[7:amount],out[6:amount-1]};
	end
end

================================================================
example-26: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	//TODO: implement
	//if(load)
	//	begin
	//	out = data;
	//	end
	end
	//if(!load)
	//	begin
	//	out = {out[6:0],out[7]};
	//	end

================================================================
example-27: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else
	begin
	case(amount)
	3'd1: out<=out;
	3'd2: out<={out[5:0],out[6]};
	3'd3: out<={out[4:0],out[5]};
	3'd4: out<={out[3:0],out[4]};
	3'd5: out<={out[2:0],out[3]};
	3'd6: out<={out[1:0],out[2]};
	3'd7: out<={out[0],out[1]};
	default: out<=out;
	endcase
	end
	end
end
================================================================
example-28: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	out<=0;
	end
	else if (load)
	begin
	out<=data;
	end
	else if (amount==3'b110)
	begin
	out<=out;
	end
	else if (amount==3'b101)
	begin
	out<={out[6:0],out[7]};
	end
	else if (amount==3'b100)
	begin
	out<={out[5:0],out[6],out[7]};
	end
	else if (amount==3'b011)
	begin
	out<={out[4:0],out[5],out[6],out[7]};
	end
	else if (amount==3
================================================================
example-29: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out<=0;
	else if (load)
	out<=data;
	else begin	
	case(amount)
	3'b000:out<=out;
	3'b001:out<={1'b0,out[6:1]};
	3'b010:out<={2'b0,out[6:2]};
	3'b011:out<={3'b0,out[6:3]};
	3'b100:out<={4'b0,out[6:4]};
	3'b101:out<={5'b0,out[6:5]};
	3'b110:out<={6'b0,out[6:6]};
	3
================================================================
example-30: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
	if(reset) begin
	out = 0;
end
	else if(load) begin
	out = data;
end
	else begin
	out = {out[6:0],out[7]};
	case(amount)
	3'b000: out = out;
	3'b001: out = {out[5:0],out[6]};
	3'b010: out = {out[3:0],out[4]};
	3'b011: out = {out[2:0],out[3:3]};
	3'b100: out = {out[1:0],out[2]};
	3'b101: out = {out[0],out[1]};
	3'b110: out = out;
	3
================================================================
example-31: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk or posedge reset)
	begin
	out = 0;
	if (load)
	out = data;
	else begin
	for (int i=0;i<amount;i++)
	out[7-i]=out[6-i];
	end
	end

================================================================
example-32: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else
	begin
	case(amount)
	3'o0: out<=out;
	3'o1: out<={out[6:0],out[7]};
	3'o2: out<={out[5:0],out[6:6]};
	3'o3: out<={out[4:0],out[5:5]};
	3'o4: out<={out[3:0],out[4:4]};
	3'o5: out<={out[2:0],out[3:3]};
	3'o6: out<={out[1:0],out[2:2
================================================================
example-33: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
	if(reset)begin
	out<=0;
	end
	else if(load)begin
	out<=data;
	end
	else begin 
	//$display("clk: %d, out: %d",clk, out);
	out<={out[6:0],out[7]};
	end
end

================================================================
example-34: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk or posedge reset)
begin
	if (load) begin
	out = data;
	end
	else begin
	//out = {out[5:0],out[6]};
	out = {out[6:0],out[7]};
	end
end

================================================================
example-35: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	if (load) out = data;
	else begin
	/*	for (i = 0; i < amount; i++) begin
	out[7-i] = out[6-i];
	end
	out[0] = 0;*/
	out = {out[6:0],out[7]};
	end

================================================================
example-36: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk or posedge reset)
	if (reset)
	begin
	out <= 8'b11111111;
	end
	else if (load)
	begin
	out <= data;
	end
	else begin
	case(amount)
	3'd1: out = out >> 1;	// shift right
	3'd2: out = out >> 2;	// shift right
	3'd3: out = out >> 3;	// shift right
	3'd4: out = out >> 4;	// shift right
	3'd5: out = out >> 5;	// shift right
	3'd6: out = out >> 6;	// shift right
	3'd7: out = out >> 7;	// shift right
	endcase
	end

================================================================
example-37: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
	out <= 8'b11111111;
else if(load)
	out <= data;
else begin
	if(amount == 3'd0)
	out <= {out[6:0],out[7]};
	else if(amount == 3'd1)
	out <= {out[5:0],out[6]};
	else if(amount == 3'd2)
	out <= {out[4:0],out[5]};
	else if(amount == 3'd3)
	out <= {out[3:0],out[4]};
	else if(amount == 3'd4)
	out <= {out[2:0],out[3]};
	else if(amount == 3'd5)
	out <= {out[1:0],
================================================================
example-38: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else if(amount==3'b110)
	out<=out;
	else if(amount==3'b101)
	out<={out[6:0],out[7]};
	else if(amount==3'b100)
	out<={out[5:0],out[6],out[7]};
	else if(amount==3'b011)
	out<={out[4:0],out[5],out[6],out[7]};
	else if(amount==3'b010)
	out<={out[3:0],out[4],out[5],out[6],out[7]};
	else
================================================================
example-39: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk)
begin
if (reset)
	out <= 8'b0;
else if (load)
	out <= data;
else begin
	// shift left the out if amount is greater than 0
	if (amount > 0) begin
	out = out << (amount);
	end
	// rotate right the out if amount is less than 0
	if (amount < 0) begin
	out = out >> (-amount);
	end
end

================================================================
example-40: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk)
if (load) out=data;
else begin
	if (amount==3'b110) out=out;
	else if (amount==3'b101) out={out[6:0],out[7]};
	else if (amount==3'b100) out={out[5:0],out[6],out[7]};
	else if (amount==3'b011) out={out[4:0],out[5],out[6],out[7]};
	else if (amount==3'b010) out={out[3:0],out[4],out[5],out[6],out[7]};
	else if (amount==3'b001) out={out[2:0],out[3],out[4],out[5],out[6],out[7]
================================================================
example-41: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
	begin
	if (load)
	out<=data;
	else begin
	//$display($time,"amount=%d,out=%d",amount,out);
	out<={out[6:0],data[7]};
	end
	end

================================================================
example-42: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if (reset) // prevents any dicey input
	begin
	if (load)
	out = data;
	else
	begin
	case(amount) // amount is the number of 1 in the binary representation of the number
	3'b000: out = out; // nothing is changed
	3'b001: out = {out[6:0],out[7]}; // shift right
	3'b010: out = {out[5:0],out[6]}; // shift left
	3'b011: out = {out[4:0],out[5]}; // shift right
	3'b100: out = {out[3:0],out[4]}; // shift left
	3'b101: out = {out[2:0],out[3]}; // shift right

================================================================
example-43: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits

always @(posedge clk or posedge reset)
	begin
	if(reset)
	out = 0;
	else if (load)
	out = data;
	else begin // shift left by 2^(amount)
	out = {out[6:0],out[7]};
	end
	end

================================================================
example-44: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if (reset)
	out<=0;
	else if (load)
	out<=data;
	else begin
	case(amount)
	3'b000: out<=out;
	3'b001: out<={out[6:0],out[7]};
	3'b010: out<={out[5:0],out[6]};
	3'b011: out<={out[4:0],out[5]};
	3'b100: out<={out[3:0],out[4]};
	3'b101: out<={out[2:0],out[3]};
	3'b110: out<={out[1:0],out[2]};
	3'b111: out<={
================================================================
example-45: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
	if(reset)
	begin
	out = 0;
	end
	else if(load)
	begin
	out = data;
	end
	else
	begin
	out = {out[6:0],out[7]};
	// rotate the 7-bit word
	end

================================================================
example-46: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out <= 8'b0;
	else if(load)
	out <= data;
	else begin
	if(amount==3'b110)
	out <= {out[6:0],out[7]};
	else if(amount==3'b101)
	out <= {out[5:0],out[6]};
	else if(amount==3'b100)
	out <= {out[4:0],out[5]};
	else if(amount==3'b011)
	out <= {out[3:0],out[4]};
	else if(amount==3'b010)
	out <= {out[2:0],out[3]};
	else if(amount==3'b001)
	
================================================================
example-47: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
	begin
	if(reset)
	out<=0;
	else
	begin
	if(load)
	out<=data;
	else
	begin
	if(amount==3'b111)
	out<=out;
	else if(amount==3'b110)
	out<={out[6:0],out[7]};
	else if(amount==3'b101)
	out<={out[5:0],out[6]};
	else if(amount==3'b100)
	out<={out[4:0],out[5]};
	else if(amount==3'b011)
	out<={out[3:0],out[4]};
	else if(amount==3'b010)
	out<={out[2:
================================================================
example-48: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
	if (load)
	begin
	out<=data;
	end
	else if (amount==3'b111)
	begin
	out<=out;
	end
	else if (amount>0)
	begin
	out<={out[6:0],out[7]};
	end
	else
	begin
	out<={out[5:0],out[6]};
	end

================================================================
example-49: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else
	begin
	out<={out[6:0],out[7]};
	end
end

================================================================
