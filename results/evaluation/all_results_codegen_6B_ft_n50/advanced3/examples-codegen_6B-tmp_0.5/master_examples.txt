example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
case(present_state)
IDLE: next_state=x?S1:IDLE;
S1: next_state=x?S10:IDLE;
S10: next_state=x?S101:IDLE;
S101: next_state=x?S1:IDLE;
default: next_state=IDLE;
endcase

always @(posedge clk)
begin 
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end
assign z=(present_state==S101);

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state<=S1; 
else 
next_state<=IDLE; 
end 
S1: begin 
if(x) 
next_state<=S10; 
else 
next_state<=S1; 
end 
S10: begin 
if(x) 
next_state<=S101; 
else 
next_state<=S1; 
end 
S101: begin 
if(x) 
next_
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
always @(posedge clk) //always block to update present_state
begin
if(reset) //if reset is high, present_state is reset to IDLE
present_state <= IDLE;
else 
present_state <= next_state; //otheriwse the present state is assigned next state
end 

always @(x,present_state) // always block to compute next state
begin
next_state = IDLE; //initial state is set to IDLE
case(present_state) //case statement to compute next state
IDLE: if(x) next_state = S1; //if x is 1 next state is S1
S1: if(x) next_state = S10; //if x is 1 next state is S10
S10: if(x) next_state = S101; //if x is 1 next state is S101
S
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	
	
always @(present_state or x)
	begin
	case(present_state)
	IDLE: if(x) next_state = S1; else next_state = IDLE;
	S1: if(x) next_state = S10; else next_state = IDLE;
	S10: if(x) next_state = S101; else next_state = IDLE;
	S101: if(x) next_state = S1; else next_state = IDLE;
	default: next_state = IDLE;
	endcase
	end
	
	
	assign z = (present_
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
if(present_state == IDLE)
	begin 
	next_state = x?S1:IDLE;
	end

else if (present_state == S1)
	begin 
	next_state = x?S10:IDLE;
	end

else if (present_state == S10)
	begin 
	next_state = x?S101:IDLE;
	end

else if (present_state == S101)
	begin 
	next_state = x?IDLE:S1;
	end

else 
	begin 
	next_state = x?S1:S10;
	end

always @(posedge clk)
begin 
if(reset)
	present_state = IDLE;
else 
	present_state = next_state;
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if(reset) 
	present_state<=IDLE;
	else 
	present_state<=next_state;
end 

always @(present_state or x)
begin
	case(present_state)
	IDLE: if(x) next_state=S1; else next_state=IDLE;
	S1: if(x) next_state=S10; else next_state=IDLE;
	S10: if(x) next_state=S101; else next_state=IDLE;
	S101: if(x) next_state=S1; else next_state=IDLE;
	default: next_state=IDLE;
	endcase
end 

always @(present_state or x)
begin

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if (reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(present_state,x) 
case (present_state) 
IDLE: if (x) next_state=S1; else next_state=IDLE;
S1: if (x) next_state=S10; else next_state=IDLE;
S10: if (x) next_state=S101; else next_state=IDLE;
S101: if (x) next_state=S1; else next_state=IDLE;
default: next_state=IDLE;
endcase

assign z=(present_state==S101);


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
	present_state <= IDLE; 
else 
	present_state <= next_state; 
end 

always @(present_state,x) 
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE;
S1: if(x) next_state = S10; 
	else next_state = IDLE;
S10: if(x) next_state = S101; 
	else next_state = IDLE;
S101: if(x) next_state = S1; 
	else next_state = IDLE;
default: next_state = IDLE;
endcase 
end 

always @(posedge clk) 
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
	if(reset)
	 present_state<=IDLE;
	else
	 present_state<=next_state;
end
//assign z=present_state==S101;

always @(present_state or x)
begin
case(present_state)
IDLE: begin
	if(x) next_state=S1;
	else next_state=IDLE;
	end
S1: begin
	if(x) next_state=S10;
	else next_state=IDLE;
	end
S10: begin
	if(x) next_state=S101;
	else next_state=IDLE;
	end
S101: begin
	if(x) next_state=S1;
	else next_state=IDLE;
	
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
if (reset) begin 
	present_state <= IDLE;
end 
else begin 
	present_state <= next_state;
end 

assign z = (present_state == S101) ? 1:0; 

always @(present_state or x)
case(present_state)
	IDLE: if(x)	next_state = S1; 
	S1: if(x)	next_state = S10;
	S10: if(x)	next_state = S101;
	S101: if(x)	next_state = IDLE;
	default: next_state = IDLE;
endcase


================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
S1: if(x) next_state = S10; 
	else next_state = IDLE; 
S10: if(x) next_state = S101; 
	else next_state = IDLE; 
S101: if(x) next_state = S1; 
	else next_state = IDLE; 
endcase 
end 

assign z = (present_state == S101);
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state) 
begin 
case(present_state) 
IDLE: 
begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: 
begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: 
begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: 
begin 
if(x) 

================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk or posedge reset) 
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @ (present_state or x) 
begin 
case(present_state) 
IDLE: 
begin 
if (x) next_state = S1; 
else next_state = IDLE; 
end 
S1: 
begin 
if (x) next_state = S10; 
else next_state = IDLE; 
end 
S10: 
begin 
if (x) next_state = S101; 
else next_state = IDLE; 
end 
S101: 
begin 
if (x) next_state = S1; 
else next_state =
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
begin 
case(present_state) 
IDLE: if(x)next_state = S1; 
	else next_state = IDLE;
	
S1: if(x)next_state = S10; 
	else next_state = S1;
	
S10: if(x)next_state = S101; 
	else next_state = S10;
	
S101: if(x)next_state = S1; 
	else next_state = IDLE;
	
default: next_state = IDLE;
endcase 
end 
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state;

assign z = (present_state == S101) ? 1: 0;

always @(posedge clk or posedge reset) 
if (reset) 
next_state <= IDLE; 
else 
case(present_state) 
IDLE: if (x) next_state <= S1; 
else next_state <= IDLE; 
S1: if (x) next_state <= S10; 
else next_state <= S1; 
S10: if (x) next_state <= S101; 
else next_state <= S1; 
S101: if (x) next_state <= S10; 
else next_state
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x) 
begin 
case(present_state) 
IDLE: begin 
next_state = x?S1:IDLE; 
z = 0; 
end 
S1: begin 
next_state = x?S10:IDLE; 
z = 0; 
end 
S10: begin 
next_state = x?S1:S10; 
z = 0; 
end 
S101: begin 
next_state = x?S1:IDLE; 
z = 1; 
end 
default: next_state = IDLE; 
endcase 
end
================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin 
case(present_state)
IDLE: begin 
	if(x==1) 
	next_state=S1;
	else 
	next_state=IDLE;
	end 
S1: begin 
	if(x==0) 
	next_state=S10;
	else 
	next_state=IDLE;
	end 
S10: begin 
	if(x==1) 
	next_state=S101;
	else 
	next_state=IDLE;
	end 
S101: begin 
	if(x==1) 
	next_state=S1;
	else 
	next_state=IDLE;
	end 
default: next_state=IDLE;
endcase 
end

always @(
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if (reset) 
present_state = IDLE; 
else 
present_state = next_state; 
end 

//next state logic
always @(present_state or x)
begin
case(present_state)
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
default: 
next_state
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state <= S1;
else
next_state <= IDLE;
S1: if(x)
next_state <= S10;
else
next_state <= S1;
S10: if(x)
next_state <= S101;
else
next_state <= S1;
S101: if(x)
next_state <= S1;
else
next_state <= S10;
default: next_state <= IDLE;
endcase
end

assign z = (present_state == S101);
end
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
end 

S1: begin 
if(x) 
next_state <= S10; 
else 
next_state <= S1; 
end 

S10: begin 
if(x) 
next_state <= S101; 
else 
next_state <= S1; 
end 

S101: begin 
if(x) 
next_state <= S1;
================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
end 

always @(x or present_state)
begin
	case(present_state)
	IDLE: if(x) next_state = S1;
	else next_state = IDLE;
	S1: if(x) next_state = S10;
	else next_state = S1;
	S10: if(x) next_state = S101;
	else next_state = S1;
	S101: if(x) next_state = S1;
	else next_state = S10;
	default: next_state = IDLE;
	endcase
end

always @(present_
================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
	begin
	if(reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
	end
	
assign z = (present_state==S101) ? 1:0;

always @(posedge clk)
	begin
	if(reset) 
	next_state <= IDLE;
	else 
	case(present_state)
	
	IDLE: 
	if(x) next_state <= S1;
	else next_state <= IDLE;
	
	S1: 
	if(x) next_state <= S1;
	else next_state <= S10;
	
	S10: 
	if(x) next_state <= S101;
	else next_state <= IDLE;
================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state;
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: 
begin 
if (x) next_state = S1; 
else next_state = IDLE; 
end 
S1: 
begin 
if (x) next_state = S101; 
else next_state = S10; 
end 
S10: 
begin 
if (x) next_state = S1; 
else next_state = S10; 
end 
S101: 
begin 
if (x) next_state = S1; 
else next_state = S10;
================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
if (reset) //when posedge is reached, if reset is high, output is made 0
present_state<=IDLE; 
else 
present_state<=next_state; 

always @(x,present_state)
case(present_state)
IDLE:begin 
	if (x) next_state=S1;
	else next_state=IDLE;
	end 
S1:begin 
	if (x) next_state=S10;
	else next_state=IDLE;
	end 
S10:begin 
	if (x) next_state=S1;
	else next_state=S10;
	end 
S101:begin 
	if (x) next_state=S1;
	else next_state=S10
================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin 
 if (reset) 
 present_state <= IDLE; 
 else 
 present_state <= next_state; 
end 
 
always @(present_state) 
begin 
case(present_state) 
IDLE: 
begin 
if (x) next_state = S1; 
else next_state = IDLE; 
end 
S1: 
begin 
if (x) next_state = S10; 
else next_state = S1; 
end 
S10: 
begin 
if (x) next_state = S101; 
else next_state = S1; 
end 
S101: 
begin 
if (x) next_state = S1; 
else next_state = IDLE; 

================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
present_state = next_state;
end 

always @(*) 
case(present_state) 
IDLE: begin 
	if(x) 
	begin 
	next_state = S1; 
	end 
	else 
	next_state = IDLE; 
end 

S1: begin 
	if(x) 
	next_state = S10; 
	else 
	next_state = IDLE; 
end 

S10: begin 
	if(x) 
	next_state = S101; 
	else 
	next_state = IDLE; 
end 

S101: begin 
	if(x) 
	next_state = S1; 
	else 
	next_state =
================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x) next_state<=S1;
else next_state<=IDLE;
end
S1: begin 
if(x) next_state<=S1;
else next_state<=S10;
end
S10: begin 
if(x) next_state<=S101;
else next_state<=IDLE;
end
S101: begin 
if(x) next_state<=S1;
else next_state<=S10;
end
default: next_state<=IDLE
================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( posedge clk, posedge reset ) 
	begin
	if ( reset ) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
	end
	
// combinational logic for next state
always @ ( present_state, x ) 
	begin
	next_state = IDLE;
	case ( present_state ) 
	IDLE: if ( x ) next_state = S1;
	S1: if ( x ) next_state = S10;
	S10: if ( x ) next_state = S101;
	S101: if ( x ) next_state = S1;
	default: next_state = IDLE;
	endcase
	end
	
// output logic
assign z = ( present_state == S101 );

================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: begin
if (x) next_state = S1;
else next_state = IDLE;
end

S1: begin
if (x) next_state = S10;
else next_state = IDLE;
end

S10: begin
if (x) next_state = S101;
else next_state = IDLE;
end

S101: begin
if (x) next_state = S1;
else next_state = IDLE;
end

default: next_state = IDLE;
endcase
end

assign z
================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) begin 
case(present_state)
IDLE: if(x) next_state=S1; else next_state = IDLE;
S1: if(x) next_state=S1; else next_state = S10;
S10: if(x) next_state=S101; else next_state = S10;
S101: if(x) next_state=S1; else next_state = S10;
endcase
end

always @(posedge clk) begin
if (reset)
present_state = IDLE;
else
present_state = next_state;
end

assign z = (present_state==S101);


================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
end 

always @(present_state or x)
begin 
	case(present_state)
	IDLE: begin 
	if (x) next_state <= S1;
	else next_state <= IDLE;
	end
	S1: begin 
	if (x) next_state <= S1;
	else next_state <= S10;
	end
	S10: begin 
	if (x) next_state <= S101;
	else next_state <= IDLE;
	end
	S101: begin 
	if (x) next_state <= S1;
	else next_state <= S10;
================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
	begin 
	if(reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
	end 
	
	always @(present_state or x)
	case(present_state)
	IDLE: 
	if(x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	S1: 
	if(x) 
	next_state = S10; 
	else 
	next_state = IDLE; 
	S10: 
	if(x) 
	next_state = S101; 
	else 
	next_state = IDLE; 
	S101: 
	if(x) 
	
================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if (reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(x or present_state) 
begin 
case(present_state) 
IDLE: begin 
if (x) next_state=S1; 
else next_state=IDLE; 
end 

S1: begin 
if (x) next_state=S10; 
else next_state=IDLE; 
end 

S10: begin 
if (x) next_state=S101; 
else next_state=IDLE; 
end 

S101: begin 
if (x) next_state=S1; 
else next_state=IDLE;
================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 

always @(present_state, x)
case(present_state)
IDLE: begin 
	if(x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	end 
S1: begin 
	if(x) 
	next_state = S10; 
	else 
	next_state = IDLE; 
	end 
S10: begin 
	if(x) 
	next_state = S101; 
	else 
	next_state = IDLE; 
	end 
S101: begin 
	if(x) 
	next_state = S1;
================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 

S1: begin 
if(x) next_state = S10; 
else next_state = IDLE; 
end 

S10: begin 
if(x) next_state = S101; 
else next_state = IDLE; 
end 

S101: begin 
if(x) next_state = S1; 
else next_state = IDLE; 
end 

================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset) 
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

assign z = (present_state == S101) ? 1:0; 

always @(x or present_state) 
begin 
case(present_state) 
IDLE: if(x)next_state = S1; 
	else next_state = IDLE; 
S1: if(x)next_state = S10; 
	else next_state = IDLE; 
S10: if(x)next_state = S101; 
	else next_state = IDLE; 
S101: if(x)next_state = S1; 
	else next_state = IDLE; 

================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE: begin
z<=0;
if (x)
next_state<=S1;
else
next_state<=IDLE;
end

S1: begin
z<=0;
if (x)
next_state<=S1;
else
next_state<=S10;
end

S10: begin
z<=0;
if (x)
next_state<=S101;
else
next_state<=IDLE;
end

S101: begin
z<=1;
if (x)
next_state
================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
case(present_state)
IDLE: next_state = x?S1:IDLE;
S1: next_state = x?S10:IDLE;
S10: next_state = x?S101:IDLE;
S101: next_state = x?S1:IDLE;
default: next_state = IDLE;
endcase
end

always @(posedge clk)
begin 
if(reset) 
present_state = IDLE; 
else 
present_state = next_state; 
end 
assign z = (present_state == S101);

================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset) 
	begin 
	if (reset) 
	present_state <= IDLE; 
	else 
	present_state <= next_state; 
	end 
	
always @(x, present_state) 
	case(present_state) 
	IDLE: if(x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	S1: if(x) 
	next_state = S10; 
	else 
	next_state = S1; 
	S10: if(x) 
	next_state = S101; 
	else 
	next_state = S1; 
	S101: if(x) 
	next_state = S1; 
	
================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state;
end 

always @(x,present_state) 
case(present_state) 
IDLE: if(x) 
next_state=S1; 
else 
next_state=IDLE; 
S1: if(x) 
next_state=S10; 
else 
next_state=S1; 
S10: if(x) 
next_state=S101; 
else 
next_state=S10; 
S101: if(x) 
next_state=S1; 
else 
next_state=IDLE; 
default: next_state=IDLE; 
endcase 

always
================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(x or present_state)
begin 
case(present_state)
IDLE: begin
	if(x) next_state=S1;
	else next_state=IDLE;
	end
S1: begin
	if(x) next_state=S10;
	else next_state=IDLE;
	end
S10: begin
	if(x) next_state=S101;
	else next_state=IDLE;
	end
S101: begin
	if(x) next_state=S1;
	else next_state=IDLE;
	end
default: next_state=IDLE;

================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
end

always @(present_state or x)
begin
	case(present_state)
	IDLE: 
	begin 
	if(x) 
	next_state = S1; 
	else 
	next_state = IDLE; 
	end 
	S1: 
	begin 
	if(x) 
	next_state = S10; 
	else 
	next_state = IDLE; 
	end 
	S10: 
	begin 
	if(x) 
	next_state = S101; 
	else 
	next_state = IDLE; 
	
================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @(*) 
case(present_state) 
IDLE: if(x) next_state=S1; 
else next_state=IDLE; 

S1: if(x) next_state=S10; 
else next_state=IDLE; 

S10: if(x) next_state=S101; 
else next_state=IDLE; 

S101: if(x) next_state=S1; 
else next_state=IDLE; 

default: next_state=IDLE; 
endcase 

assign z=(present_state==S101); 

================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 

always @ (present_state or x)
begin 
case(present_state) 
IDLE: begin 
if(x) next_state=S1; 
else next_state=IDLE; 
end 
S1: begin 
if(x) next_state=S1; 
else next_state=S10; 
end 
S10: begin 
if(x) next_state=S101; 
else next_state=IDLE; 
end 
S101: begin 
if(x) next_state=S1; 
else next_state=S10; 
end 
default: next_
================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state) 
case(present_state) 
IDLE: 
begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 

S1: 
begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 

S10: 
begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 

S101: 
begin 
if(x) 
next
================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk or posedge reset)
begin 
if (reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x)next_state = S1; 
	else next_state = IDLE; 
S1: if(x)next_state = S10; 
	else next_state = IDLE; 
S10: if(x)next_state = S101; 
	else next_state = IDLE; 
S101: if(x)next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always @
================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
end 
always @(present_state or x) 
begin
	case(present_state)
	IDLE: 
	begin 
	if (x) next_state = S1; 
	else next_state = IDLE; 
	end 
	S1: 
	begin 
	if (x) next_state = S10; 
	else next_state = IDLE; 
	end 
	S10: 
	begin 
	if (x) next_state = S101; 
	else next_state = IDLE; 
	end 
	S101: 
	begin 
	
================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) 
begin 
case(present_state) 
IDLE: begin 
	if(x) 
	begin 
	next_state=S1; 
	end 
	else 
	begin 
	next_state=IDLE; 
	end 
	end 
S1: begin 
	if(x) 
	begin 
	next_state=S10; 
	end 
	else 
	begin 
	next_state=S1; 
	end 
	end 
S10: begin 
	if(x) 
	begin 
	next_state=S101; 
	end 
	else 
	begin 
	next_state=S1; 
	end 
	end 
S101: begin 
	if(x)
================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


//reset, a high level signal, is connected to rset in the next finite state machine 

always @(posedge clk, posedge reset)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end 
//the next state is assigned with the output of the present state 

always @(*) 
begin 
case(present_state) 
IDLE: if(x)next_state=S1; 
else next_state=IDLE; 
S1: if(x)next_state=S10; 
else next_state=IDLE; 
S10: if(x)next_state=S101; 
else next_state=IDLE; 
S101: if(x)next_state=S1; 
else
================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin 
if(reset)
present_state <= IDLE;
else 
present_state <= next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: 
begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 

S1: 
begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 

S10: 
begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 

S101: 
begin 
if(x) 
next_state = S1; 
else 
================================================================
