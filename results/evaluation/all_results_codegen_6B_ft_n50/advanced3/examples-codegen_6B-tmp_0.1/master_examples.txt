example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: begin 
if(x) 
next_state = S1; 
else
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state=S1;
else next_state=IDLE;
end 
S1: begin 
if(x) next_state=S10;
else next_state=IDLE;
end 
S10: begin 
if(x) next_state=S101;
else next_state=IDLE;
end 
S101: begin 
if(x) next_state=S1;
else next_state=IDLE;
end 
default: next_state=IDLE;
endcase
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x)next_state = S1; 
	else next_state = IDLE; 
S1: if(x)next_state = S10; 
	else next_state = IDLE; 
S10: if(x)next_state = S101; 
	else next_state = IDLE; 
S101: if(x)next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always @(
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end

always @(x or present_state)
begin
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else
next_state=IDLE;
end
S1: begin 
if(x)
next_state=S10;
else
next_state=IDLE;
end
S10: begin 
if(x)
next_state=S101;
else
next_state=IDLE;
end
S101: begin 
if(x)
next_state=S1;
else
next_state=IDLE;
end
default: next_state=IDLE;
end
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state<=S1;
else 
next_state<=IDLE;
S1: if(x)
next_state<=S10;
else 
next_state<=S1;
S10: if(x)
next_state<=S101;
else 
next_state<=S1;
S101: if(x)
next_state<=IDLE;
else 
next_state<=S1;
default: next_state<=IDLE;
endcase
end

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x)next_state = S1; 
	else next_state = IDLE; 
S1: if(x)next_state = S10; 
	else next_state = IDLE; 
S10: if(x)next_state = S101; 
	else next_state = IDLE; 
S101: if(x)next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always @(
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
default: next_state = IDLE; 
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: begin 
if(x) 
next_state = S1; 
else
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state<=S1;
else 
next_state<=IDLE;
S1: if(x)
next_state<=S10;
else 
next_state<=S1;
S10: if(x)
next_state<=S101;
else 
next_state<=S1;
S101: if(x)
next_state<=IDLE;
else 
next_state<=S1;
default: next_state<=IDLE;
endcase
end

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
default: next_state = IDLE; 
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
default: next_state = IDLE; 
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: begin 
if(x) 
next_state = S1; 
else
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-20: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state<=S1;
else
next_state<=IDLE;
S1: if(x)
next_state<=S10;
else
next_state<=S1;
S10: if(x)
next_state<=S101;
else
next_state<=S10;
S101: if(x)
next_state<=S1;
else
next_state<=IDLE;
default: next_state<=IDLE;
endcase
end

assign z
================================================================
example-21: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-22: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-23: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state=S1;
else 
next_state=IDLE;
S1: if(x)
next_state=S10;
else 
next_state=S1;
S10: if(x)
next_state=S101;
else 
next_state=S1;
S101: if(x)
next_state=S1;
else 
next_state=IDLE;
default: next_state=IDLE;
endcase
end

assign z=(present_state==
================================================================
example-24: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state=S1;
else
next_state=IDLE;

S1: if(x)
next_state=S10;
else
next_state=S1;

S10: if(x)
next_state=S101;
else
next_state=S1;

S101: if(x)
next_state=S1;
else
next_state=S10;

default: next_state=IDLE;
endcase
end

assign z=(present_state==S
================================================================
example-25: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-26: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state=S1;
else 
next_state=IDLE;
S1: if(x)
next_state=S10;
else 
next_state=S1;
S10: if(x)
next_state=S101;
else 
next_state=S1;
S101: if(x)
next_state=S1;
else 
next_state=IDLE;
default: next_state=IDLE;
endcase
end

assign z=(present_state==
================================================================
example-27: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
endcase 
================================================================
example-28: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state=S1;
else next_state=IDLE;
end 
S1: begin 
if(x) next_state=S10;
else next_state=IDLE;
end 
S10: begin 
if(x) next_state=S101;
else next_state=IDLE;
end 
S101: begin 
if(x) next_state=S1;
else next_state=IDLE;
end 
default: next_state=IDLE;
endcase
================================================================
example-29: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x) next_state = S1; 
	else next_state = IDLE; 
S1: if(x) next_state = S10; 
	else next_state = IDLE; 
S10: if(x) next_state = S101; 
	else next_state = IDLE; 
S101: if(x) next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always @(
================================================================
example-30: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: begin 
if(x) 
next_state = S1; 
else
================================================================
example-31: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) next_state=S1;
else next_state=IDLE;
end 
S1: begin 
if(x) next_state=S10;
else next_state=IDLE;
end 
S10: begin 
if(x) next_state=S101;
else next_state=IDLE;
end 
S101: begin 
if(x) next_state=S1;
else next_state=IDLE;
end 
default: next_state=IDLE;
endcase
================================================================
example-32: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-33: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else
next_state=IDLE;
end 
default: next_state
================================================================
example-34: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-35: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-36: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-37: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
z<=0; 
if(x) next_state=S1; 
else next_state=IDLE; 
end 
S1: begin 
z<=0; 
if(x) next_state=S1; 
else next_state=S10; 
end 
S10: begin 
z<=0; 
if(x) next_state=S101; 
else next_state=IDLE; 
end 
S101: begin 
z<=1; 
if(
================================================================
example-38: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: 
begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: 
begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: 
begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: 
begin 
if(x) 
next_
================================================================
example-39: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x) 
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x) 
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x) 
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x) 
next_state=S1;
else 
next_state=IDLE;
================================================================
example-40: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: 
begin 
if(x) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1: 
begin 
if(x) 
next_state = S10; 
else 
next_state = S1; 
end 
S10: 
begin 
if(x) 
next_state = S101; 
else 
next_state = S1; 
end 
S101: 
begin 
if(x) 
next_
================================================================
example-41: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x)next_state = S1; 
	else next_state = IDLE; 
S1: if(x)next_state = S10; 
	else next_state = IDLE; 
S10: if(x)next_state = S101; 
	else next_state = IDLE; 
S101: if(x)next_state = S1; 
	else next_state = IDLE; 
default: next_state = IDLE; 
endcase 
end 

always @(
================================================================
example-42: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-43: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state<=S1;
else 
next_state<=IDLE;
S1: if(x)
next_state<=S10;
else 
next_state<=S1;
S10: if(x)
next_state<=S101;
else 
next_state<=S10;
S101: if(x)
next_state<=IDLE;
else 
next_state<=S101;
endcase
end

assign z=(present_state==S101
================================================================
example-44: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(x or present_state)
begin 
case(present_state) 
IDLE: if(x) 
next_state = S1; 
else 
next_state = IDLE; 
S1: if(x) 
next_state = S10; 
else 
next_state = S1; 
S10: if(x) 
next_state = S101; 
else 
next_state = S1; 
S101: if(x) 
next_state = S1; 
else 
next_state = S10; 
default: next_state = IDLE; 
================================================================
example-45: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-46: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
example-47: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(x or present_state)
begin 
case(present_state)
IDLE: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 
S1: begin 
if(x)
next_state=S10;
else 
next_state=IDLE;
end 
S10: begin 
if(x)
next_state=S101;
else 
next_state=IDLE;
end 
S101: begin 
if(x)
next_state=S1;
else 
next_state=IDLE;
end 

================================================================
example-48: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset)
present_state<=IDLE;
else 
present_state<=next_state;
end 

always @(present_state or x)
begin 
case(present_state)
IDLE: if(x)
next_state<=S1;
else 
next_state<=IDLE;
S1: if(x)
next_state<=S10;
else 
next_state<=S1;
S10: if(x)
next_state<=S101;
else 
next_state<=S10;
S101: if(x)
next_state<=IDLE;
else 
next_state<=S101;
endcase
end

assign z=(present_state==S101
================================================================
example-49: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state <= IDLE; 
else 
present_state <= next_state; 
end 

always @(present_state or x)
begin 
case(present_state) 
IDLE: if(x) 
next_state <= S1; 
else 
next_state <= IDLE; 
S1: if(x) 
next_state <= S10; 
else 
next_state <= S1; 
S10: if(x) 
next_state <= S101; 
else 
next_state <= S1; 
S101: if(x) 
next_state <= S1; 
else 
next_state <= S10; 
default: next_state <= IDLE; 
================================================================
