example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if (reset)
	begin 
	next_state = 0;
	present_state = 0;
	end
	else 
	begin
	// Update state on posedge in or posedge reset
	if (in or reset)
	begin
	next_state = present_state;
	// Go to next state on posedge of clock or posedge of reset
	if (reset) 
	begin
	next_state = 0;
	end
	else if (clk)
	begin
	next_state = 1;
	end
	present_state = next_state;
	end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state=present_state ^ in;
always @(posedge clk)
begin 
	if(reset) 
	begin
	present_state<=0;
	end 
	else 
	begin
	present_state<=next_state;
	end
end
assign out= present_state[1];

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// State transitions on reset
always @(posedge clk or posedge reset)
	if(reset) 
	begin
	next_state = 0;
	end
	else 
	begin
	next_state = present_state;
	end
// State flip-flops with synchronous reset
always @(posedge clk)
	if(reset) 
	begin
	present_state = 0;
	end
	else 
	begin
	present_state = next_state;
	end
assign out = (present_state == 0 && in) ? 0 : 1;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
	present_state <= next_state;
always @(posedge clk)
	if(reset)
	begin
	next_state <= 0;
	end
	else if (present_state == 1 && in == 1)
	begin
	next_state <= 1;
	end
	else if (present_state == 0 && in == 1)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= present_state;
	end
//assign out = present_state == 1 && in == 1;
assign out = present_state;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Iff reset is asserted, state 0 goes to state 1; if out is asserted, state 0 goes to state 1
always @(posedge clk or posedge reset) begin
	if (reset)
	begin 
	next_state <= "0";
	present_state <= "0";
	end
	else 
	begin
	present_state <= next_state;
	end
end
assign next_state = present_state;
assign out = (present_state == "0")?1:0;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)&(in);
always @(posedge clk)
begin
	if(reset)
	begin
	next_state<= 0;
	present_state<=0;
	end
	else
	begin
	present_state<= next_state;
	end
end
always @(present_state or in)
begin 
	case(present_state)
	0:begin
	if(in)
	begin
	next_state<= 1;
	end
	else
	begin
	next_state<= 0;
	end
	end
	1:begin
	if(in)
	begin
	next_state<= 1;
	end
	else
	begin
	next_state<= 0;
	end
	end
	endcase

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out= present_state[1] ^ in;
always @(posedge clk) 
begin
	if(reset) // if the reset button is pressed
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	// Go to next state
	present_state=next_state;
	case(present_state)
	0: if(in==1)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
	// Stay at same state
	1: if(in==1)
	begin
	next_state=1;
	end
	else
	begin
	next_state=1;
	end
	endcase
	end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;

always @(posedge clk or posedge reset)
	if (reset) 
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	check_state <= next_state;

always @(posedge clk)
	case(present_state)
	0: 
	begin
	if (in) next_state <= 0;
	else next_state <= 1;
	end
	1: 
	begin
	if (in) next_state <= 1;
	else next_state <= 0;
	end
	endcase

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if (reset) present_state <= 1'b0;
	else present_state <= next_state;
always @(posedge clk)
	if (present_state) 
	begin
	next_state = in ? 0 : 1;
	out = in ? 0 : 1;
	end
	else 
	begin
	next_state = in ? 1 : 0;
	out = in ? 1 : 0;
	end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;
	end
//next state
always @(present_state or in)
	begin
	next_state = 0;
	if (present_state == 1'b0)
	if (in)
	next_state = 1;
	else
	next_state = 0;
	end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// D-Flip-flop implementation of next state logic
always @(posedge clk or posedge reset)
if (reset) 
	 present_state <= 0;
else 
	 present_state <= next_state;
// next_state is the combinational output of the D-flip-flop. If it is 0, then the state has changed.
// output is the output of the D-flip-flop. You are implementing the D-flip-flop. You will get two clock edges.
always @(present_state or in)
case(present_state)
	0: if(in==1) 
	next_state=1;
	else begin
	next_state=0;
	out=0;
	end
	1: if(in==1) 
	next_state=1;
	else 

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state = present_state & ~in;
assign out = present_state & in;
// Register the next state
always @(posedge clk)
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ in;

always @(posedge clk or posedge reset) begin // always block to update state
	if (reset)
	// Set state to state 0
	present_state <= `S0;
	else
	// State transition, with the addition of the state output
	present_state <= {present_state[`S0], out};
end


================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)&(in);
always @(posedge clk)
	if(reset)
	present_state<=1'd0;
	else
	present_state<=next_state;
// The next state is one of two things:
// 1. If the input is 0, then next_state=0
// 2. If the input is 1, then next_state=1
always @(present_state or in)
begin
case(present_state)
1'b0: if(in==1)
next_state=1'b1;
else
next_state=1'b0;
1'b1: if(in==1)
next_state=1'b1;
else
next_state=1'b0;
endcase
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state=1;
	next_state=0;
	end
	else
	begin
	present_state=next_state;
	case(present_state)
	0: 
	begin 
	if (in==1)
	begin
	next_state=1;
	out=1;
	end
	else 
	begin
	next_state=0;
	out=0;
	end
	end
	1: 
	begin 
	if (in==1)
	begin
	next_state=1;
	out=0;
	end
	else 
	begin
	next_state=0;
	out=1;
	end
	end
	default:
	begin 
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in ^ next_state);
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	begin
	next_state <= present_state;
	present_state <= in;
	end
end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&&(in);

// State Transition
always @(posedge clk or posedge reset)
	if (reset) 
	present_state<=0;
	else 
	present_state<=next_state;

// Next State Logic
always @(present_state, in)
	case(present_state)
	0: if(in)	next_state=1;
	1: if(in)	next_state=1;
	2: if(in)	next_state=3;
	3: if(in)	next_state=0;
	endcase


================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @ (posedge clk)
begin
	if(reset) 
	begin
	next_state = 0;
	present_state = 0;
	end
	else 
	begin
	// State transition logic
	case(present_state)
	0: 
	if(in) 
	begin
	next_state = 1;
	// out=0 for all states, except 0
	present_state = 1;
	end
	else 
	begin
	next_state = 0;
	present_state = 0;
	end
	1: 
	if(in) 
	begin
	next_state = 1;
	// out=0 for all states, except 0
	present_state = 1;
	end
	else 
	begin
	next_
================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// Register output should be declared as OUTPUT and changed at the top-level of the module
// Note: I called out as OUTPUT at the top-level, but the output is really an internal wire.
assign out = (present_state==next_state) ? 1'b1:1'b0; 

// This transition condition should be the same in both states, however the state logic is different
// and you must remember to change the entire state to switch to the next state, not just the output.
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = (present_state == 0) ? 1 : ( (next_state == 1) ? 0 : 1 );
	present_state = next_state;
	end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Wires for the next state
// Complement of next state
assign next_state = ({in, present_state} == 2'b01) ? 2'b01 : ({in, present_state} == 2'b10) ? 2'b10 : 2'b00;
// This is a sequential always block
always @(posedge clk)
// This is the same as above, but with a structural always block
// A procedural always block is needed here because a procedural always block in a procedural always block is not synthesized.
begin : my_always
	present_state <= next_state;
end
// This is a combinational always block
assign out = (present_state == 2'b01) ? (in) : (not_in);

================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

assign next_state = present_state & in;
assign out = present_state ^ next_state;

always @(posedge clk or posedge reset)
	if (reset)
	present_state <= 0;
	else 
	present_state <= next_state;


================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state == 1 ? 1 : 0;
always @(posedge clk)
	if(reset) 
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	// State transition logic
	present_state <= next_state;
	// Output logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	end

================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0 && next_state==1'b1 && in==1'b1) ? 0:
(present_state==1'b1 && next_state==1'b0 && in==1'b1) ? 1:0;
always @(posedge clk or posedge reset)
	if(reset)	present_state<=1'b0;
	else	present_state<=next_state;
// State transitions (edge triggered)
always @(present_state or in)
	case(present_state)
	1'b0: next_state=in;
	1'b1: next_state=1'b0;
	endcase

================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
begin
if(reset)
	present_state <= 1;
else
	present_state <= next_state;
end
always @(present_state or in)
begin	
	case(present_state)
	1'b0: if(in)
	next_state=1;
	else
	next_state=0;
	1'b1: if(in)
	next_state=0;
	else
	next_state=1;
	endcase
end

================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state = present_state & (~in);
assign out = present_state | in;
always @ (posedge clk or posedge reset)
	if (reset) 
	begin
	next_state = 0;
	present_state = 0;
	end
	else 
	begin
	present_state = next_state;
	end

================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin 
	if (reset)
	begin 
	next_state=0; present_state=0; 
	end 
	else 
	begin 
	present_state=next_state; 
	case(present_state)
	0:begin out=0; if(in==1) next_state=1; else next_state=0; end
	1:begin out=1; if(in==1) next_state=1; else next_state=0; end
	endcase
	end

================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in);
always @(posedge clk) 
	if(reset) 
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else 
	begin
	// $display("present_state=%b",present_state);
	// $display("next_state=%b",next_state);
	// $display("out=%b",out);
	present_state <= next_state;
	next_state <= present_state;
	end

================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in==1'b1) || (present_state==1'b0 && in==1'b0);
always @(posedge clk or posedge reset)
	begin
	if (reset)
	next_state=1'b0;
	else
	next_state=present_state;
	case (next_state)
	1'b0: if (in==1'b1)
	next_state=1'b1;
	else
	next_state=1'b0;
	1'b1: if (in==1'b1)
	next_state=1'b1;
	else
	next_state=1'b0;
	endcase
	end
always @(posedge clk)
	present_state=next_state;
================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0)&(in);
always @ (posedge clk)
begin
	if(reset)
	begin
	 present_state <= 1'b0;
	end
	else
	 begin
	 	present_state <= next_state;
	 end
end
always @ (present_state or in)
begin
	if(present_state==1'b0)
	begin
	next_state = 1'b0;
	if(in)
	next_state = 1'b1;
	end
	else
	begin
	next_state = 1'b0;
	if(!in)
	next_state = 1'b1;
	end
end

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out= present_state[1] ^ in; 
always @(posedge clk)
if(reset) 
	present_state <= `A;
else 
	present_state <= next_state; 
always @(present_state)
case(present_state)
`A: if(in) next_state=`A; else next_state=`B;
`B: if(in) next_state=`A; else next_state=`B;
default: next_state=`A;
endcase

================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// When a clock or reset occurs, move from present state to next state
always @(posedge clk or posedge reset)
	if (reset)
	begin 
	present_state <= 1'b0;
	next_state <= 1'b0;
	end
	else
	present_state <= next_state;
	
always @(present_state or in)
	case(present_state)
	1'b0: 
	if(in)
	begin
	next_state <= 1'b1;
	out <= 1'b0;
	end
	else
	begin
	next_state <= 1'b0;
	out <= 0;
	end
	1'b1: 
	if(in)
	begin
	next_state <= 1'b1;
	out <= 1'b0;

================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk or posedge reset)
	if (reset)	present_state <= 1'b0;
	else	present_state <= next_state;
	
always @(present_state or in)
	case(present_state)
	1'b0: if(in) next_state = 1'b1;
	1'b1: if(in) next_state = 1'b0;
	endcase
	
assign out = present_state;

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&(in);
// Compute next state
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	next_state=0;
	end
	else
	begin
	next_state=present_state;
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state=1;
	end
	else
	begin
	next_state=0;
	end
	end
	default:
	begin
	next_state=0;
	end
	endcase
	end
================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if(reset) 
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end
always @(posedge clk or posedge reset)
	if(reset)
	out <= 0;
	else
	if(present_state == 1)
	out <= 1;
	else
	out <= 0;

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// If the next state is 0, then this is a terminal state. If the next state is 1, then this is a non-terminal state.

// State Memory
always @(posedge clk)
	if (reset)
	begin
	present_state <= `a;
	end
	else
	// You don't have to worry about concurrent activations in each input vector (or array).
	// Calculate next state
	case(present_state)
	`a: if (in) next_state = `a; else next_state = `b;
	`b: if (in) next_state = `a; else next_state = `b;
	endcase

// State output
assign out = (present_state == `a) ? 1 : (present_state == `b) ? 0 : (in) ? 1 : 0;


================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==0 & in)|(present_state==1 & ~in);
// Register Outputs to Store State
always@(posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state<=1;
	//next_state<=0;
	end
	else
	present_state<=next_state;
end
// Next State Logic
always@(present_state or in)
begin
	case(present_state)
	1'b0: if(in) next_state=1;else next_state=0;
	1'b1: if(in) next_state=1;else next_state=0;
	endcase
end
// Output Logic
assign out=(present_state==0 & in)|(present_state==1 & ~in);
end
================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Compute next state
always @(*) begin
if (reset)
present_state = 0;
else
present_state = next_state;
end
// Compute next state
always @(*) begin
if (reset)
next_state = 0;
else
next_state = {~out, present_state[2:1]};
end

================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Register output depends on the value of present_state.
// The output is registered in an always block.
// The block is executed at the positive edge of the clock.
always @(posedge clk)
if (reset)
	present_state <= 0;
else
	present_state <= next_state;
always @(posedge clk)
begin
if (reset)
	next_state <= 0;
else
	begin
	case(present_state)
	0: next_state <= (in) ? 1 : 0;
	1: next_state <= (in) ? 1 : 0;
	endcase
	end
end
assign out = (present_state == 1);

================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	begin 
	if (in == 1) 
	begin
	next_state = 0;
	present_state = 0;
	end
	else 
	begin
	next_state = 1;
	present_state = 1;
	end
	end
	1: 
	begin 
	if (in == 1) 
	begin
	next_state = 1;
	present_state = 1;
	end
	else 
	begin
	next_state = 0;
	present_state
================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	 present_state <= 0;
	 next_state <= 0;
	end
	else
	begin
	//present_state <= next_state;
	 present_state <= {next_state[0], next_state[1]};
	// $display("nextState: %b", next_state);
	// $display("presentState: %b", present_state);
	next_state <= {present_state[0], !present_state[1]};
	// $display("nextState: %b", next_state);
	// $display("presentState: %b", present_state);
	end

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state ? 1 : (next_state ? 0 : 1);
// State Transition Logic
always @(posedge clk)
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;
// Next State Logic
always @(present_state or in)
	case(present_state)
	0: if(in) next_state = 1;
	1: if(in) next_state = 1;
	else next_state = 0;
	endcase

================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0 && in==1'b1)?1'b0:((present_state==1'b1 && in==1'b1)?1'b1:1'b0);
always @(posedge clk)
begin 
	if(reset==1'b1)
	begin
	next_state=1'b0;
	present_state=1'b0;
	end
	else
	begin
	// $display("nextState: %b",next_state);
	// $display("presentState: %b",present_state);
	if(present_state==1'b0 && in==1'b1)
	begin
	next_state=1'b1;
	present_state=1'b1;
	end
	else if(present_state==1'
================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in);

// Compute next state
always @(*) begin
	if(reset)
	next_state = 0;
	else 
	next_state = present_state ^ (in);
end

// State Transition
always @(posedge clk) begin
	if(reset)
	present_state = 0;
	else 
	present_state = next_state;
end

================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
	if(reset) 
	begin
	present_state <= 0;
	next_state <= 1;
	end 
	else 
	begin
	present_state <= next_state;
	next_state <= 0;
	end
	if(in && present_state == 1)
	begin
	next_state = 0;
	end 
	else if(~in && present_state == 0)
	begin
	next_state = 1;
	end
end
assign out = present_state;

================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// register stage for next state
always @(posedge clk or posedge reset)
	if (reset)
	// go to initial state
	present_state <= `A;
	else
	present_state <= next_state;
// next_state logic
always @(present_state or in)
	case(present_state)
	`A: if(in) next_state = `A;
	`B: if(in) next_state = `B;
	`C: if(in) next_state = `C;
	`D: if(in) next_state = `D;
	default: next_state = `A;
	endcase
assign out = (present_state == `C) || (present_state == `D);

================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(*)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase
// State transition logic (sequential)
always @(posedge clk)
	if(reset)
	present_state = 0;
	else
	present_state = next_state;
// Output logic (combinational)
assign out = (present_state == 1);

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Connections for the 3 states
assign state0 = {out, present_state};
assign state1 = {out, present_state};
assign state2 = {out, present_state};
always @(posedge clk or posedge reset)
	begin
	if( reset )
	present_state <= state0;
	else
	present_state <= next_state;
	end
assign next_state = (present_state == state1) ? state2 : state1;
assign out = (present_state == state2);

================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// D is an e-mux, and D=1, means out is the output of the mux, which is in state 1
// State transitions synchronized to positive edge of clock, if reset=1
parameter s0=0, s1=1;
always @(posedge clk or posedge reset)
	if(reset)
	present_state <= s0;
	else 
	present_state <= next_state;
// State transition logic, next_state=MUX(D,present_state,in);
always @(present_state or in)
	case(present_state)
	s0: if(in) next_state=s1;
	s1: if(in) next_state=s1;
	else next_state=s0;
	endcase
assign out = (present_state==s1);

================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset) begin
	if (reset) begin
	present_state <= 0;
	end
	else begin
	present_state <= next_state;
	end
end
always @(present_state or in) begin
next_state = 0;
case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
endcase
end

================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
	present_state <= next_state;

always @(present_state or in)
	case(present_state)
	0: 	if(in)	 next_state=1;
	else	next_state=0;
	1: 	if(in)	 next_state=1;
	else	next_state=0;
	default: next_state=0;
	endcase

assign out = (present_state == 1);


================================================================
