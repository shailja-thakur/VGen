example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0)?(in):(out);
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state<=1'b0;
	else
	present_state<=next_state;
	end
always @(present_state or in)
	case(present_state)
	1'b0:
	if (in)
	next_state<=1'b1;
	else
	next_state<=1'b0;
	1'b1:
	if (in)
	next_state<=1'b1;
	else
	next_state<=1'b0;
	endcase

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
begin
if (reset)
present_state<=0;
else
present_state<=next_state;
end
always @(present_state or in)
begin
case(present_state)
0: if(in)
next_state=1;
else
next_state=0;
1: if(in)
next_state=1;
else
next_state=0;
endcase
end
assign out=(present_state==1);

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if(in)
	begin
	next_state = 1;
	present_state = 1;
	end
	else
	begin
	next_state = 0;
	present_state = 0;
	end
	1: 
	if(in)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	next_state = 1;
	present_state = 1;
	end
	default: 
	begin
	next_state = 0;

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else 
	begin
	// State transition logic
	case(present_state)
	0: 
	if (in) 
	begin
	next_state <= 0;
	out <= 0;
	end
	else 
	begin
	next_state <= 1;
	out <= 1;
	end
	1: 
	if (in) 
	begin
	next_state <= 0;
	out <= 0;
	end
	else 
	begin
	next_state <= 1;
	out <= 1;
	end
	default: 
	begin
	next_state <= 0;
	out <= 0;
	end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	// go to initial state
	present_state = 0;
	end
	else
	begin
	present_state = next_state;
	end
always @(present_state or in)
	case(present_state)
	0: if(in)
	next_state=0;
	else
	next_state=1;
	1: if(in)
	next_state=1;
	else
	next_state=0;
	endcase

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase
	// State flip-flops with synchronous reset
	if(present_state != next_state)
	begin
	present_state = next_state;
	end
	end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
begin
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	begin
	if (in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	end
	1: 
	begin
	if (in)
	begin
	next_state = 1;
	present_state = 0;
	end
	else
	begin
	next_state = 0;
	present_state = 1;
	end
	end
	end
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Register output always has a delay of one clock cycle
always @(posedge clk or posedge reset)
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
// Next-state logic
always @(present_state or in)
	case(present_state)
	0: if(in) next_state <= 1;
	1: if(in) next_state <= 1;
	else next_state <= 0;
	endcase

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[0] ^ in;
// register stage to store next state, previous state, and output
always @(posedge clk or posedge reset)
	begin
	if(reset)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	begin
	// Update state
	present_state <= next_state;
	// Store output
	next_state <= out;
	end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in ^ next_state);
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= present_state;
	end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset) //state 0
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// $display("nextState: %b",next_state);
	// $display("presentState: %b",present_state);
	// $display("input: %b",in);
	case(present_state)
	0: 
	begin 
	if (in==1) 
	begin
	next_state = 1;
	present_state = 1;
	end
	else 
	begin
	next_state = 0;
	present_state = 0;
	end
	end
	1: 
	begin 
	if (in==1) 
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==0 & in)|(present_state==1 & ~in);
// Register transition to next state
always @(posedge clk or posedge reset)
	if(reset)
	present_state<=0;
	else
	present_state<=next_state;
// Next state is a 2-bit number, with a 1 and a 0. The MSB is the next state and the LSB is the present state
always @(present_state or in)
	case(present_state)
	0: if(in)
	next_state=1;
	else
	next_state=0;
	1: if(in)
	next_state=1;
	else
	next_state=0;
	endcase

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in)|(present_state==1'b0 && ~in);
// Register output in state 0 and output out in state 1
always @(posedge clk or posedge reset)
	if (reset)
	present_state<=1'b0;
	else
	present_state<=next_state;
// Next state logic
always @(present_state or in)
	case(present_state)
	1'b0: if(in)
	next_state<=1'b1;
	else
	next_state<=1'b0;
	1'b1: if(in)
	next_state<=1'b1;
	else
	next_state<=1'b0;
	endcase

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0 && in==1'b1)?1'b0:((present_state==1'b1 && in==1'b1)?1'b1:1'b0);
// Register transition
always @(posedge clk or posedge reset)
	if (reset) present_state <= 1'b0;
	else present_state <= next_state;
// NextState logic
always @(present_state or in)
	case(present_state)
	1'b0: if(in==1'b1) next_state=1'b1;
	else next_state=1'b0;
	1'b1: if(in==1'b1) next_state=1'b1;
	else next_state=1'b0;
	endcase

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[0] & in;

always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= `A;
	else
	present_state <= next_state;
	end

always @(present_state or in)
	case(present_state)
	`A: if(in) next_state <= `A;
	`B: if(in) next_state <= `B;
	`C: if(in) next_state <= `C;
	`D: if(in) next_state <= `D;
	default: next_state <= `A;
	endcase
	
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// If a reset occurs, return to state 0.

always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end

always @(present_state or in)
begin
next_state = 0;
case(present_state)
0: if(in)
next_state = 0;
else
next_state = 1;
1: if(in)
next_state = 1;
else
next_state = 0;
endcase
end

assign out = present_state;

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 if the system is in state 0 and in=1
// out=0 if the system is in state 1 and in=1
assign next_state = present_state & ~in;
assign out = present_state & in;
always @(posedge clk or posedge reset) begin
	if(reset) 
	begin
	 present_state <= 0;
	end
	else
	present_state <= next_state;
end

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = present_state;
	case(present_state)
	1'b0: if(in) next_state = 1'b0; else next_state = 1'b1;
	1'b1: if(in) next_state = 1'b1; else next_state = 1'b0;
	endcase
	end

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)^(next_state==1'b1);
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 1'b0;
	else 
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	1'b0: if(in)	next_state <= 1'b1;
	1'b1: if(in)	next_state <= 1'b0;
	endcase

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ (present_state[0] & in);
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	next_state = 0;
	present_state = 0;
	end 
	else 
	begin
	// $display("nextState: %b", next_state);
	// $display("presentState: %b", present_state);
	case(present_state)
	0: 
	begin 
	if (in==1) 
	begin
	next_state = 0;
	present_state = 1;
	end
	else 
	begin
	next_state = 1;
	present_state = 0;
	end
	end
	1: 
	begin 
	if (in==1) 
================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = (present_state == 1) ? 1 : ((in) ? 0 : out);
always @(posedge clk or posedge reset)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	1: 
	begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	default:
	begin
	next_state <= 0;
	end
	end
================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ in;
// Register for next state
always @(posedge clk, posedge reset)
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
// Next state logic
always @(present_state, in)
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase

================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Register transition to next state
always @ (posedge clk)
if (reset)
present_state <= 0;
else
present_state <= next_state;
// Next state is combinational on the input and output
// State transitions on reset, and output are synchronous
always @ (present_state or in or out)
case (present_state)
0: if (in)
	next_state = 1;
	else
	next_state = 0;
1: if (in)
	next_state = 0;
	else
	next_state = 1;
default: next_state = 0;
endcase

================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset) // if state 0 or 1 is reset, go to state 0
	present_state <= 0;
	else 
	present_state <= next_state;
	end
always @(present_state or in) // next_state
	begin
	case(present_state)
	0: if(~in) next_state = 1;
	1: if(in) next_state = 0;
	endcase
	end

================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset) // pressing the reset button will reset the machine to state 0
	present_state <= 1'b0;
	else
	present_state <= next_state;
always @(present_state or in)
	case(present_state)
	1'b0: 	if (in)
	next_state <= 1'b1;
	else
	next_state <= 1'b0;
	1'b1: 	if (in)
	next_state <= 1'b1;
	else
	next_state <= 1'b0;
	endcase

================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&(in);
always @(posedge clk)
	if(reset)
	begin
	present_state<=0;
	next_state<=1;
	end
	else
	begin
	present_state<=next_state;
	next_state<=present_state;
	end

================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

assign out = present_state & in;

always @(posedge clk or posedge reset)
	if(reset) 
	begin
	next_state=0;
	present_state=0;
	end
	else 
	begin
	present_state=next_state;
	case(present_state)
	0: if(in) next_state=0; else next_state=1;
	1: if(in) next_state=1; else next_state=0;
	endcase
	end


================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Connections for state 0 and 1
assign next_state = present_state & ~in;
assign out = present_state & in;
// State transitions
always @(posedge clk or posedge reset)
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;

================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 	if (in)
	next_state = 0;
	else
	next_state = 1;
	1: 	if (in)
	next_state = 1;
	else
	next_state = 0;
	default: 
	next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// I'll call this a combinational always block
always @(posedge clk or posedge reset)
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;
always @(present_state or in)
	case(present_state)
	0: next_state <= in ? 0 : 1;
	1: next_state <= in ? 1 : 0;
	endcase
assign out = present_state == 1;

================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset) begin
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;
end
always @(present_state or in) begin
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase
end

================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state == 1) & (in);
always @(posedge clk)
	if(reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	// $display("next state = %b",next_state);
	// $display("present state = %b",present_state);
	next_state=(present_state == 1) & (in);
	present_state=next_state;
	end

================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;

always @(posedge clk)
	if(reset) 
	begin
	next_state=0;
	present_state=0;
	end
	else 
	begin
	next_state=present_state;
	present_state=next_state;
	end
	
always @(posedge clk)
	if(reset) 
	begin
	out=1;
	end
	else 
	begin
	case(present_state)
	0: out=0;
	1: out=0;
	endcase
	end

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in ^ present_state);
always @(posedge clk or posedge reset) begin
	if(reset)
	//go to state 0
	present_state <= 0;
	else
	present_state <= next_state;
end
always @(present_state or in) begin
	case(present_state)
	0: if(in) next_state=1;
	1: if(in) next_state=0;
	endcase
end

================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// State transitions on the positive edge of the clock.
always @(posedge clk or posedge reset) 
	if(reset) 
	present_state <= 0; 
	else 
	present_state <= next_state;
// Next-state logic, set next_state = 0 if the input is 0, and next_state = 1 if the input is 1.
// Since the above logic is non-blocking, the input latching can be carried out on the same cycle as the next_state logic.
always @(present_state, in) 
	if(present_state == 0)
	next_state <= 0; 
	else 
	next_state <= in; 
// Output logic, set out=0 when the present_state is 0, and out=1 when the present_state is 1.
assign out = present_state; 
end
================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
begin
if (reset)
	present_state <= 0;
else
	present_state <= next_state;
end
always @(present_state or in)
begin
case(present_state)
0: if (in) 
	next_state <= 1;
	else 
	next_state <= 0;
1: if (in) 
	next_state <= 1;
	else 
	next_state <= 0;
endcase
end

================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&in;

always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state<=0;
	else
	present_state<=next_state;
	end

always @(present_state or in)
	case(present_state)
	0: next_state<=in?0:1;
	1: next_state<=in?1:0;
	endcase


================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)?(in):(out);
// Register output always has a delay of one clock cycle
//Compute next state
always @(posedge clk or posedge reset)
	if(reset)
	present_state<=1'b0;
	else
	present_state<=next_state;
// Compute next state
always @(present_state or in)
	case(present_state)
	1'b0: if(in)	next_state=1'b1; else	next_state=1'b0;
	1'b1: if(in)	next_state=1'b1; else	next_state=1'b0;
	default: next_state=1'b0;
	endcase

================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// When reset is asserted, the present_state is set to state 0
// When reset is asserted, the next_state is set to state 0
always @(posedge clk, posedge reset) begin
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	present_state = next_state;
end
always @(posedge clk, posedge reset) begin
	if (reset) 
	next_state = 0;
	else 
	case(present_state)
	0: next_state = 0;
	1: next_state = 1;
	endcase
end
assign out = present_state == 1;

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
begin
	if(reset) // if the reset button is pressed, go to state 0
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) 
	begin
	next_state <= 1;
	present_state <= 1;
	end
	else
	begin
	next_state <= 0;
	present_state <= 0;
	end
	1: if(in)
	begin
	next_state <= 1;
	present_state <= 1;
	end
	else
	begin
	next_state <= 0;
	present_state <= 0;
	end
	default: 
	begin
================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;

always @ (posedge clk)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	present_state <= 1'b0;
	next_state <= 1'b0;
	end
	else 
	begin
	present_state <= next_state;
	end
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	next_state <= 1'b0;
	end
	else 
	begin
	// State transitions
	case(present_state)
	1'b0: // In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
	if (in)
	begin
	next_state <= 1'b0;
	end
	else
	begin
	next_state <= 1'b1;

================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
//
always @(posedge clk)
	if (reset) // if this statement is executed, then the present_state is reset
	begin
	 	present_state <= `A;
	end
	else
	begin
	 	present_state <= next_state;
	end
always @(posedge clk)
	if (reset) // if this statement is executed, then the next state is reset
	begin
	 	next_state <= `A;
	end
	else
	begin
	 	next_state <= `A;
	end
always @(posedge clk)
	if (reset) // if this statement is executed, then the output is reset
	begin
	 	out <= 0;
	end
	else
	begin
	 	case(present_state) // case(present_state) executes the statement
================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] & ~in;

always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= #1 2'b0;
	else
	present_state <= #1 next_state;
	end

always @(present_state or in)
	case(present_state)
	2'b00: next_state = 2'b01;
	2'b01: next_state = 2'b10;
	2'b10: next_state = 2'b11;
	2'b11: next_state = 2'b00;
	//default: next_state = 2'b00;
	endcase


================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state = present_state & (in ^ present_state);
// Register output
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
assign out = present_state;

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in)|(present_state==1'b0 && ~in);
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	next_state=1'b0;
	present_state=1'b0;
	end
	else
	begin
	// $display("nextState: %b",next_state);
	// $display("presentState: %b",present_state);
	// $display("out: %b",out);
	if(next_state==1'b1 && ~present_state==1'b1 && out==1'b0)
	begin
	next_state=1'b0;
	present_state=1'b1;
	end
	else if(next_state==1'b0 &&
================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= (present_state == 1 && in == 0) ? 0 : ( (present_state == 0 && in == 1) ? 1 : present_state );
	end
assign out = present_state == 1 && in == 0;

================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset) begin
	if (reset) // if in state 0 and reset is high, go to state 1
	begin 
	next_state <= 1;
	end
	else if (present_state == 1) // if in state 1 and reset is high, go to state 1
	begin 
	next_state <= 1;
	end
	else if (in) // if in is high, stay in state 1
	begin
	next_state <= 1;
	end
	else 
	begin 
	next_state <= 0; // if in is low, go to state 0
	end
end
// output logic
always @(posedge clk or posedge reset) begin
	if (reset) 
	begin
	present_state <= 0;
	end
	else 
	begin
	present_
================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&(in);

always @(posedge clk)
	if(reset)
	begin
	next_state=0;
	present_state=0;
	end
	else
	begin
	present_state=next_state;
	case(present_state)
	0: if(in)
	begin
	next_state=1;
	out=0;
	end
	else
	begin
	next_state=0;
	out=0;
	end
	1: if(in)
	begin
	next_state=1;
	out=0;
	end
	else
	begin
	next_state=0;
	out=1;
	end
	endcase
	end

================================================================
