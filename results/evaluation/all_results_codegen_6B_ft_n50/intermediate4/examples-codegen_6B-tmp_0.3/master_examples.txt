example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case (present_state)
	0: if (in) next_state = 1;
	1: if (in) next_state = 0;
	endcase
	end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase
	end

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: if(out) out = 1; else out = 0;
	1: if(out) out = 0; else out = 1;
	endcase
	end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1)&(in);
// The next state is a combinational output of the present state and the input
// Since this is a sequential state machine, next_state is computed on the next clock edge
always @(posedge clk)
begin
if(reset)
present_state<=1'b0;
else
present_state<=next_state;
end
always @(present_state or in)
begin
case(present_state)
1'b0: if(in)
next_state=1'b1;
else
next_state=1'b0;
1'b1: if(in)
next_state=1'b1;
else
next_state=1'b0;
endcase
end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0 && in==1'b0) || (present_state==1'b1 && in==1'b1);
// Register transition
always @(posedge clk or posedge reset)
	if (reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;
// NextState combinational logic
always @(present_state or in)
	case(present_state)
	1'b0: if(in==1'b1) next_state = 1'b1; else next_state = 1'b0;
	1'b1: if(in==1'b1) next_state = 1'b1; else next_state = 1'b0;
	default: next_state = 1'b0;
	endcase
// Output
================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	//present_state <= State0;
	present_state <= 0;
	end
	else
	begin
	//present_state <= next_state;
	present_state <= present_state;
	end
always @(present_state or in)
	case(present_state)
	0: 
	begin 
	if(in)
	next_state = 0;
	else
	next_state = 1;
	end
	1: 
	begin 
	if(in)
	next_state = 1;
	else
	next_state = 0;
	end
	endcase

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if (in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	1: 
	if (in)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	default: 
	begin
	next_state
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state <= in ? 0 : 1;
	1: next_state <= in ? 1 : 0;
	endcase

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&&(in);

always @(posedge clk)
	begin
	if(reset)
	present_state<=0;
	else
	present_state<=next_state;
	end

always @(present_state or in)
	case(present_state)
	0: if(in)
	next_state<=0;
	else
	next_state<=1;
	1: if(in)
	next_state<=1;
	else
	next_state<=0;
	endcase


================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in==1) next_state = 1;
	1: if(in==1) next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: if(out==1) out = 0;
	1: if(out==0) out = 1;
	endcase
	// State flip-flops with synchronous reset
	present_state <= next_state;

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: if(out) out = 1; else out = 0;
	1: if(out) out = 0; else out = 1;
	endcase
	end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0 && in==1'b1) || (present_state==1'b1 && in==1'b0);
always @(posedge clk)
	if(reset)
	begin
	next_state=1'b0;
	present_state=1'b0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	1'b0: if(in==1'b1)
	begin
	next_state=1'b1;
	present_state=1'b1;
	end
	else
	begin
	next_state=1'b0;
	present_state=1'b0;
	end
	1'b1: if(in==1'b1)
	begin
	next_state
================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// When reset is asserted, the present_state and next_state are set to 0
assign next_state = present_state & ~in;
assign out = present_state & in;
// Register to store the state
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state = 0;
	end
	else
	begin
	present_state = next_state;
	end

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state[1] ^ (present_state[0] & in);
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: present_state[1] = out;
	1: present_state[0] = out;
	endcase
	end

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	begin
	if(in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	end
	1: 
	begin
	if(in)
	begin
	next_state = 1;
	present_state = 0;
	end
	else
	begin
	next_state = 0;
	present_state = 1;
	end
	end

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase

================================================================
example-20: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// Register output depends on the current state.
// If the current state is 0, then out=0. If the current state is 1, then out=1.

always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

assign out = present_state;


================================================================
example-21: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: if(in)
	next_state <= 0;
	else
	next_state <= 1;
	1: if(in)
	next_state <= 1;
	else
	next_state <= 0;
	endcase

================================================================
example-22: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if(in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	1: 
	if(in)
	begin
	next_state = 1;
	present_state = 0;
	end
	else
	begin
	next_state = 0;
	present_state = 1;
	end
	default: 
	begin
	next_state = 0;

================================================================
example-23: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if(in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	1: 
	if(in)
	begin
	next_state = 1;
	present_state = 0;
	end
	else
	begin
	next_state = 0;
	present_state = 1;
	end
	default: 
	begin
	next_state = 0;

================================================================
example-24: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase
	end

================================================================
example-25: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;

always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end

always @(present_state or in)
	begin
	next_state = 0;
	if (present_state == 0 & in)
	next_state = 1;
	else if (present_state == 1 & ~in)
	next_state = 0;
	end


================================================================
example-26: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-27: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 & in) | (present_state==1'b0 & ~in);
always @(posedge clk or posedge reset)
	begin
	if(reset)
	 present_state<=1'b0;
	else
	 present_state<=next_state;
	end
always @(present_state or in)
	case(present_state)
	1'b0: if(in)
	next_state=1'b1;
	else
	next_state=1'b0;
	1'b1: if(in)
	next_state=1'b1;
	else
	next_state=1'b0;
	endcase

================================================================
example-28: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-29: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase
	end

================================================================
example-30: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if(in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	1: 
	if(in)
	begin
	next_state = 1;
	present_state = 0;
	end
	else
	begin
	next_state = 0;
	present_state = 1;
	end
	default: 
	begin
	next_state
================================================================
example-31: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state <= in ? 1 : 0;
	1: next_state <= in ? 0 : 1;
	endcase

================================================================
example-32: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

================================================================
example-33: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-34: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	// State transition logic
	present_state <= next_state;
	// Output logic
	case(present_state)
	0: next_state <= in;
	1: next_state <= in;
	endcase
	end

================================================================
example-35: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
	if (reset) 
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else 
	begin
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: 
	begin 
	if (in) 
	next_state <= 0;
	else 
	next_state <= 1;
	end
	1: 
	begin 
	if (in) 
	next_state <= 1;
	else 
	next_state <= 0;
	end
	endcase
assign out = present_state;

================================================================
example-36: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	if (in == 1'b1)
	begin
	next_state = 1;
	present_state = 1;
	end
	else
	begin
	next_state = 0;
	present_state = 0;
	end
	1: 
	if (in == 1'b1)
	begin
	next_state = 1;
	present_state = 1;
	end
	else
	begin
	next_state = 0;
	present_state = 0;
	end
	default
================================================================
example-37: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in==1'b1)|(present_state==1'b0 && in==1'b0);
// Register transition
always @(posedge clk or posedge reset)
	if (reset) present_state<=1'b0;
	else present_state<=next_state;
// Next state
always @(present_state or in)
	case(present_state)
	1'b0: if(in==1'b1) next_state<=1'b1;
	else next_state<=1'b0;
	1'b1: if(in==1'b1) next_state<=1'b1;
	else next_state<=1'b0;
	endcase
// Output logic
assign out=present_state;

================================================================
example-38: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	begin
	next_state = 0;
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase
	end

================================================================
example-39: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	//	present_state <= `S0;
	//	next_state <= `S0;
	end
	else
	begin
	//	present_state <= next_state;
	end
always @(present_state or in)
begin
	case(present_state)
	`S0: if(in) next_state = `S0; else next_state = `S1;
	`S1: if(in) next_state = `S0; else next_state = `S1;
	endcase
end

================================================================
example-40: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Register output always has a delay of one clock cycle
always @(posedge clk)
	present_state <= next_state;
// next_state is the next state to go to, and is based on the
// current state and the input.
always @(present_state or in)
	case(present_state)
	0: if(in)
	next_state = 0;
	else
	next_state = 1;
	1: if(in)
	next_state = 1;
	else
	next_state = 0;
	endcase

================================================================
example-41: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

================================================================
example-42: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset) begin
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: 
	begin
	if(in)
	begin
	next_state = 0;
	present_state = 1;
	end
	else
	begin
	next_state = 1;
	present_state = 0;
	end
	end
	1: 
	begin
	if(in)
	begin
	next_state = 1;
	present_state = 0;
	end
	else
	begin
	next_state = 0;
	present_state = 1;
	end
	end
================================================================
example-43: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase

================================================================
example-44: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	present_state <= 0;
	next_state <= 1;
	end
	else
	begin
	present_state <= next_state;
	next_state <= 0;
	end

================================================================
example-45: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	present_state = next_state;
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase
	end

================================================================
example-46: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	1'b0: 
	if (in)
	next_state <= 1'b1;
	else
	next_state <= 1'b0;
	1'b1: 
	if (in)
	next_state <= 1'b1;
	else
	next_state <= 1'b0;
	endcase

================================================================
example-47: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase

================================================================
example-48: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in==1'b1) || (present_state==1'b0 && in==1'b0);
always @(posedge clk or posedge reset)
	if(reset)
	begin
	next_state=1'b0;
	present_state=1'b0;
	end
	else
	begin
	//next_state=out;
	present_state=next_state;
	end
always @(posedge clk or posedge reset)
	if(reset)
	next_state=1'b0;
	else
	case(present_state)
	1'b0: if(in==1'b1)
	next_state=1'b1;
	else
	next_state=1'b0;
	1'b
================================================================
example-49: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
