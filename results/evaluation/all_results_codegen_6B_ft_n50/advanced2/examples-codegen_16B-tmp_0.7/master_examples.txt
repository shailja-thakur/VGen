example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q = 0;
	end
	else begin
	if (slowena && q < 9) begin
	q = q + 1; 
	end
	end
	end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	//if (reset && (!slowena))
	//	q <= 0;
	//else if (clk && q < 8 && slowena)
	//	q <= q + 1;
	//else 
	//	q <= q;
	if (slowena)
	begin
	q[3] <= q[2];
	q[2] <= q[1];
	q[1] <= q[0];
	q[0] <= 0;
	end
	else
	begin
	q[3] <= 0;
	q[2] <= 0;
	q[1] <= 0;
	q[0] <= 0;
	end
	end
	//else
	//	q <= q;
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
 q <= (reset) ? 0 : ((slowena) && (q < 8) ? q + 1 : q);
end



================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 0;
	end
	else
	begin
	if (slowena && (q < 9))
	q <= q + 1;
	else 
	q <= q;
	end
end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always@(posedge clk)
begin
if(reset)
 q = 4'd0;
else
 begin
if(slowena && q < 9)
 q = q + 1;
end
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if (reset)
q <= #1 0;

else if (slowena) begin

if(q == 9)
q <= #1 0;
else
q <= #1 q + 1;

end

end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if(reset)
	q <= 4'b0;
	else begin
	if(slowena && q != 9)
	q <= q + 1;
	end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk)
begin
	if (reset) q <= 4'd0;
	else
	begin
	if (q == 4'd9 & slowena == 1'b1) q <= 4'd0;
	else q <= q + 4'd1;
	end
end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	q <= 0;
	else begin
	if (slowena && q <9)
	q <= q + 1;
	end
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	
	end else begin
	
	end
end

// On the negative edge of the clock, always set the output q to a value of 9.
always @(negedge clk) begin
	q = 4'b1001;
end

// On the positive edge of the slowena input, always set the output q to a value of 0.
always @(posedge slowena) begin
	q = 4'b0000;
end


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk or posedge reset) begin
if (reset) q <= 4'b0;
else if (slowena && q!=4'd9) q <= q + 4'h1;
end

================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @ (posedge clk)
begin
	if (reset)
	q <= 4'b0000;
	else if (slowena && q < 10)
	q <= q + 1;	
end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
	if (reset) begin
	// reset the count
	q <= 4'd0;
	end
	else begin
	// increment the count only if the enable is high
	if (slowena) begin
	if (q == 4'd9) begin
	// prevent q from incrementing past 9 if the enable is still high
	q <= 4'd0;
	end
	else begin
	// otherwise, increment the count
	q <= q + 4'd1;
	end
	end
	end

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
case (reset)

0: q <= 4'b0000;

// Otherwise: decrement q if q is 9, otherwise increment q. 
1: q <= (q == 9) ? 4'b0000 : (slowena && q < 9) ? q + 1 : q - 1;

endcase
end

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
if (reset)
	q <= #1 4'b0;
else
	if (slowena)
	begin
	if (q == 9)
	q <= #1 4'b0;
	else
	q <= #1 q + 1;
	end
end


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk)
begin
	if (reset)
	begin
	// if (slowena && q < 9)
	// begin
	// 	q = q + 1;
	// end
	end
	// else begin
	// 	q = 0;
	// end
end


================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin

if (~reset) begin
	q <= 4'b0;
end

else begin
	if (slowena) begin
	if (q < 4'b1001) q <= q + 1;
	end
end
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, do not change the value of q, but set the output to 1 when q is 9.

always @(negedge clk) begin

if (~reset) begin
	q <= 4'b1001;
	end
	
else begin
	if (q == 4'b1001) q <= 4'b1;
	else q <= q;
end
end


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 8'b0000_0001)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 4'b0001;
	end
	end
	end
end

================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if(reset)
q<=0;
else begin
if(slowena) begin
if(q<9)
q<=q+1;
end
end
end

================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena && q < 9)
	q <= q + 1'b1;
	end
end


================================================================
example-20: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) begin
	q <= 4'd0;
	end
	else begin
	if(slowena && q < 9) q <= q + 4'd1;
	else q <= q;
	end
end


================================================================
example-21: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset) begin
	if (~reset) q <= 4'b0;
	else if (slowena && q < 4'd9) q <= q + 4'b1;
end


================================================================
example-22: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) 
begin
	if (reset)
	begin
	// reset the count to zero
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q == 9)
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 4'b0001;
	end
	end
	end
end


================================================================
example-23: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	// if reset is high, then the output should be 0
	q <= 4'b0;
	end
	else begin
	// if reset is low, then the output should be 1
	q <= 4'b1;
	end
	// if the ena input is high and the current value q is 9, then set q back to 0
	if (slowena && q == 4'd9) begin
	q <= 4'b0;
	end
	// if the ena is low, then increment the counter and then set it back to 1
	if (!slowena) begin
	q <= q + 4'b1;
	q <= 4'b1;
	end
end


================================================================
example-24: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// The output q is only updated when the slowena input is high and the output q is 9.

always @(posedge clk)
begin
if (reset)
q <= 0;

else if (slowena && q == 9)
q <= 0;

else if (slowena)
q <= q + 1;

else
q <= q;
end

================================================================
example-25: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset)
	if (~reset)
	
	// Reset case
	// q = 0
	else if (slowena)
	begin
	
	// Counting case
	// q = q + 1
	q = q + 1;
	
	// Ensure that the output is always 0 when the input is 0
	end
	else
	begin
	
	// Not counting, so output q as it is
	q = q;
	
	end

================================================================
example-26: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
 if (reset) begin
 q <= 4'd0;
 end
 else begin
 if (slowena) begin
 if (q !== 4'd9) begin
 q <= q + 4'd1;
 end
 end
 end

================================================================
example-27: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk)
begin
	if (reset)
	begin
	
	end
	else
	begin
	
	end
end

// On the negative edge of the clock:
// Set the output q to the next value, which is q plus 1.
// If the ena input is not high, set the output to 0.

always@(negedge clk) 
begin
	if (reset)
	begin
	
	end
	else
	begin
	
	end
end


================================================================
example-28: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset)
	q <= 4'b0000;
	else begin
	if (slowena) begin
	if (q != 9)
	q <= q + 1;
	end
	end
	end

================================================================
example-29: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk or posedge reset)
begin
	if (reset)
	begin
	
	q <= 4'b0;
	
	end

	else
	begin
	
	if (slowena)
	begin
	
	if (q == 9)
	begin
	
	q <= 4'b0;
	
	end
	
	else
	begin
	
	q <= q + 4'b1;
	
	end
	
	end
	
	end

end


================================================================
example-30: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if(slowena && q < 4'b1001)
	q <= q + 1;
	else
	q <= q;
	end
end


================================================================
example-31: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @ (posedge clk or posedge reset)
begin
if (reset)
	q <= 4'b0;
else begin
	if (slowena) begin
	if (q == 9)
	q <= 4'b0;
	else
	q <= q + 1;
	end
	end
end

================================================================
example-32: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
if(reset)
q=0;
else
begin
if(slowena && q<9)
q=q+1;
end
end


================================================================
example-33: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if (reset)
	q <= 4'd0;
else begin
	if (slowena) begin
	if (q == 9)
	q <= 4'd0;
	else
	q <= q + 1;
	end
	end
end

================================================================
example-34: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if(reset)
	begin
	q <= 4'b0;
	end
	else begin
	if(slowena && q < 4'b1001)
	begin
	q <= q + 1'b1;
	end
	end
	end

================================================================
example-35: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
if(reset) begin
	q <= 4'd0;
end
else begin
	if(slowena && q < 4'd9) begin
	q <= q + 1;
	end
end
end

// On the negative edge of the clock, 
// if reset is high, set the output q to 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(negedge clk) begin
if(reset) begin
	q <= 4'd9;
end
else begin
	if(slowena && q > 4'd0) begin
	q <= q - 1;
	end
end
end

================================================================
example-36: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	// if the reset button is pushed, set the output to 0. 
	q <= 4'b0000;
	
	// ...and don't increment the counter while the output is 0.
	// (The counter counts from 1 to 10, not 0 to 9.)
	end
	else if (slowena && q < 4'b1001)
	// if the ena input is high and the output is not 9, increment the output.
	q <= q + 4'b0001;

end


================================================================
example-37: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 9) begin
	q <= q + 1'b1;
	end
	end
	end

================================================================
example-38: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
if (reset)
q <= 0;
else begin
if (slowena) begin
if (q != 9)
q <= q + 1; 
end
end
end

================================================================
example-39: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	//if (slowena)
	case (q)
	4'b0000:
	begin
	if (slowena)
	q = 4'b0001;
	end
	4'b0001:
	begin
	if (slowena)
	q = 4'b0010;
	end
	4'b0010:
	begin
	if (slowena)
	q = 4'b0011;
	end
	4'b0011:
	begin
	if (slowena)
	q = 4'b0100;
	end
	4'b0100:
	begin
	if (slowena)
	q = 4'b0101;
	end
	4'b0101:
	begin
	if (
================================================================
example-40: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
 begin
	if (reset == 1'b1)
	 begin
	 q <= 4'b0000;
	 end
	else
	begin
	if (slowena == 1'b1 && q < 4'b1001) q <= q + 1'b1;
	end
 end
 

================================================================
example-41: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if (reset) begin
q <= 0;
end

else begin

if (slowena) begin

if (q != 9) begin
q <= q + 1;
end
else begin
q <= 0;
end
end

else begin
q <= q;
end
end

end


================================================================
example-42: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) begin
 if (reset) q <= 4'b0;
 else if (slowena) begin
 q <= (q == 4'b0) ? q : (q + 1'b1);
 end
 end
 

================================================================
example-43: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
always @ (posedge clk, posedge reset) begin
if (reset)
q <= 4'b0000;
else begin
if (slowena) begin
if (q < 4'b1001)
q <= q + 1;
end
else
q <= q;
end
end


================================================================
example-44: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
// if reset is high, q <= 0
	if (reset)
	begin
	q <= 4'b0000;
	end

// if reset is not high and slowena is not high, q <= q
	else if (~slowena)
	begin
	q <= q;
	end

// if reset is not high and slowena is high, 
// then only increment the count if the ena input is high and q is not 9.
	else if (slowena)
	begin
	if (q < 4'b1001 && ena)
	begin
	q <= q + 1;
	end
	else
	begin
	q <= 4'b0000;
	end
	end

end


================================================================
example-45: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
 if (reset)
 begin
 q <= 4'd0;
 end // end if
 else begin
 if (slowena && q != 9)
 q <= q + 4'd1;
 end // end else
 end // end always


================================================================
example-46: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
if (reset)
q <= 4'b0;
else if (slowena)
begin
if (q == 4'd9)
q <= 4'b0;
else
q <= q + 1'b1;
end
end

// On the negative edge of the clock, make the count one 
// cycle shorter.

always @(posedge clk)
begin
if (reset || slowena)
q <= q - 1'b1;
end


================================================================
example-47: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if (reset)
	begin
	// if reset is high, reset the count.
	q <= 4'b0000;
	end
	else if (slowena)
	begin
	// if slowena is high, increment the count. 
	if (q < 4'b1001)
	q <= q + 1;
	end
	else
	q <= q;
end


================================================================
example-48: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
	if(reset) q <= 4'b0;
	else begin
	if(slowena && q < 9) q <= q + 1'b1;	
	end
end


================================================================
example-49: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena && (q !== 4'b1001)) begin
	q <= q + 1'b1;
	end
	end
	end


================================================================
