example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin 
	q = 1; 
	end 
	else if(q == 12) 
	begin 
	q = 1; 
	end 
	else 
	begin 
	q = q + 1; 
	end 
end 

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin
	 
	if( reset ) 
	begin 
	q <= 4'b0001;
	end 
	else if( q == 4'b1111 ) 
	begin 
	q <= 4'b0001;
	end 
	else 
	begin 
	q <= q + 4'b0001;
	end 
	end 

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin 
	q <= 4'b0001;
	end 
	else if (q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 1'b1;
	end
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q = 4'b0001;
	end
	// if q is 12, set it to 1
	else if (q == 4'b0101) 
	begin
	q = 4'b0001;
	end
	// else, increment q by 1
	else 
	begin
	q = q + 1;
	end
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 1;
	else if(q == 12)
	q <= 1;
	else
	q <= q + 1;
	end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset)
	begin
	q <= 4'b0001;
	end 
	else if (q == 12)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 1;
	end
	end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin 
	q <= 4'b0001; 
	end 
	else if (q == 4'b1111) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 4'b0001; 
	end 
end 

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin
	if (reset) 
	begin
	q = 0;
	end 
	else if (q == 12) 
	begin
	q = 1;
	end 
	else 
	begin
	q = q + 1;
	end
	end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 12'b1111111111) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 1;
	end
end 

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin 
	q <= 4'b0001; 
	end 
	else if (q == 4'b1111) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if( reset )
	begin 
	q <= 4'b0000;
	end
	else if( q == 4'b1111 )
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if (reset) 
	begin
	q = 4'd1;
	end 
	else if (q == 4'd12) 
	begin
	q = 4'd1;
	end 
	else 
	begin
	q = q + 1;
	end
end 

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 4'b0001;
	end
	else if(q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q = 4'b1;
	end 
	else if (q == 4'b1) 
	begin
	q = 4'b0;
	end 
	else 
	begin
	q = q + 4'b1;
	end
end 

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 4'b0001;
	end
	else if(q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-15: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
	if(reset) 
	begin 
	q <= 4'b0001; 	
	end 
	else if(q == 4'b1111) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 4'b0001; 
	end 
end 

================================================================
example-16: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin 
	q <= 4'b0001; 	
	end 
	else if (q == 12'b1111111111111111) 
	begin 
	q <= 4'b0001; 	
	end 
	else 
	begin 
	q <= q + 1'b1; 	
	end 
end 

================================================================
example-17: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) //on reset, set counter to 1
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'b1111) //if q is 1, then set it to 0
	begin
	q <= 4'b0000;
	end
	else //increment q
	begin
	q <= q + 1;
	end
end

================================================================
example-18: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
if (reset) 
q <= 4'b0001; 
else if (q == 4'b1111) 
q <= 4'b0001; 
else 
q <= q + 1; 

================================================================
example-19: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin 
 	 	q <= 4'b0001; 
	end 
	else if(q == 12'b1111111111111111) 
	begin 
 	 	q <= 4'b0001; 
	end 
	else 
	begin 
 	 	q <= q + 4'b0001; 
	end 
end 

================================================================
example-20: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0001;
	end
	else if (q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-21: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if(reset) 
	begin
	q <= 4'b0001;
	end 
	else if(q == 4'b1111) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 4'b0001;
	end
end 

================================================================
example-22: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q = 4'b0001;
	end 
	else if (q == 12) 
	begin
	q = 4'b0001;
	end 
	else 
	begin
	q = q + 4'b0001;
	end
end 

================================================================
example-23: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q = 4'b0001;
	end
	else if(q == 4'b1111)
	begin
	q = 4'b0001;
	end
	else
	begin
	q = q + 1;
	end
end

================================================================
example-24: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin 
	 	q <= 4'b0001;
	end
	else if (q == 4'b1111)
	begin
	 	q <= 4'b0001;
	end
	else 
	begin
	 	q <= q + 1;
	end
end 

================================================================
example-25: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q = 4'b0001;
	end 
	else if (q == 4'b1111) 
	begin
	q = 4'b0001;
	end 
	else 
	begin
	q = q + 4'b0001;
	end
end 

================================================================
example-26: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q = 4'd1;
	end 
	else if(q == 4'd12)
	begin
	q = 4'd1;
	end
	else
	begin
	q = q + 4'd1;
	end
end

================================================================
example-27: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'b1110) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 1;
	end
end 

================================================================
example-28: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if (reset) // case 1
	begin
	q <= 1;
	end
	else if (q == 12) // case 2
	begin
	q <= 1;
	end
	else // case 3
	begin
	q <= q + 1;
	end
end

================================================================
example-29: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q = 4'b1;
	end 
	else if (q == 4'b1111) 
	begin
	q = 4'b1;
	end 
	else 
	begin
	q = q + 1;
	end
end

================================================================
example-30: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk or posedge reset )
begin
	if( reset )
	begin
	q <= 4'b0000;
	end 
	else if( q == 4'b1111 )
	begin
	q <= 4'b0000;
	end
	else
	begin
	q <= q + 1;
	end
end 

================================================================
example-31: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset) 
	q <= 4'b0000;
	else 
	case(q)
	4'b0000: q <= 4'b0001;
	4'b0001: q <= 4'b0010;
	4'b0010: q <= 4'b0011;
	4'b0011: q <= 4'b0100;
	4'b0100: q <= 4'b0101;
	4'b0101: q <= 4'b0110;
	4'b0110: q <= 4'b0111;
	4'b0111: q <= 4'b1000;
	4'b1000: q <= 4'b1001;
	4'b1001: q <= 4'b1010;
	4'b1010: q <=
================================================================
example-32: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0001;
	end
	else if (q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 4'b0001;
	end
end 

================================================================
example-33: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-34: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if (reset)
	q <= 4'b0001;
	else if (q == 4'b1111)
	q <= 4'b0001;
	else 
	q <= q + 4'b0001;
	end

================================================================
example-35: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin 
	q <= 4'b0001; 
	end 
	else if(q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 4'b0001;
	end
end 

================================================================
example-36: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin
	if(reset) 
	begin 
	q <= 1; 
	end 
	else if(q == 12) 
	begin 
	q <= 1; 
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 

================================================================
example-37: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 4'b0001;
	end 
	else if (q == 4'b1111) 
	begin
	q <= 4'b0001;
	end 
	else 
	begin
	q <= q + 1;
	end
	end

================================================================
example-38: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin
	 	if( reset )
	 	 	q <= 4'b0001;
	 	else if( q == 4'd12 )
	 	 	q <= 4'b0001;
	 	else
	 	 	q <= q + 4'b0001;
	end

================================================================
example-39: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin
	q <= 1;
	end 
	else if (q == 12) 
	begin
	q <= 1;
	end
	else 
	begin
	q <= q + 1;
	end
end

================================================================
example-40: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	q = 4'b1;
	else if(q == 4'd12)
	q = 4'b1;
	else
	q = q + 4'd1;
end

================================================================
example-41: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
	if(reset) 
	begin 
	q <= 1; 
	end 
	else if(q == 12) 
	begin 
	q <= 1; 
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 

================================================================
example-42: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
	begin
	if(reset) 
	q =4'b0001; 
	else if(q == 4'b1111) 
	q = 4'b0001; 
	else 
	q = q + 1; 
	end 

================================================================
example-43: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin 
	if (reset) 
	begin 
	q <= 4'b0001; 
	end 
	else if (q == 4'b1110) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 1'b1; 
	end 
end 

================================================================
example-44: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if(reset) 
	begin 
	q <= 1; 
	end 
	else if(q == 12) 
	begin 
	q <= 1; 
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 

================================================================
example-45: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin 
	q <= 4'b0001;
	end 
	else if (q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 4'b0001;
	end
end 

================================================================
example-46: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	q <= 4'b0001;
	end
	else if(q == 4'b0110)
	begin
	q <= 4'b0001;
	end
	else if(q == 4'b1011)
	begin
	q <= 4'b1;
	end
	else
	begin
	q <= q + 4'b0001;
	end
end

================================================================
example-47: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'b0001;
	end
	else if(q == 4'b1111)
	begin
	q <= 4'b0001;
	end
	else
	begin
	q <= q + 1;
	end
end 

================================================================
example-48: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @( posedge clk )
begin
	if( reset )
	begin
	case( q )
	4'b0000: q = 4'b0001;
	4'b0001: q = 4'b0001;
	4'b0010: q = 4'b0001;
	4'b0011: q = 4'b0001;
	4'b0100: q = 4'b0001;
	4'b0101: q = 4'b0001;
	4'b0110: q = 4'b0001;
	4'b0111: q = 4'b0001;
	4'b1000: q = 4'b0001;
	4'b1001: q = 4'b0001;
	4'b1010: q = 4'b0001;
	4'b1011: q = 4'b0001;

================================================================
example-49: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin 
	q <= 4'b0001;
	end 
	else if (q == 4'hf)
	begin 
	q <= 4'b0001;
	end 
	else if (q == 4'hc)
	begin 
	q <= 4'b0001;
	end 
	else 
	begin 
	q <= q + 1;
	end 
end 

================================================================
