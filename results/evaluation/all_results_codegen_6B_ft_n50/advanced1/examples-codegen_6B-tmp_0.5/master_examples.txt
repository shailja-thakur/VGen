example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



//the carry is the output of a full adder that adds a and b

wire [8:0] carry;

//the 8-bit sum is the output of the adder

wire [8:0] sum;

//the number which is the sum of a and b

wire [8:0] sum_w_o;

//the carry output of the adder

wire carry_w_o;


//carry in is the output of a full adder that adds a and b

assign carry_in = carry;

//the carry is the output of a full adder that adds a and b

assign carry_out = carry_w_o; 

//the number which is the sum of a and b

assign sum = sum_w_o;

//carry out is the output of a full adder that adds
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



//if the most significant bit of a is high then it is said to be a signed number
//if the most significant bit of b is high then it is said to be a signed number

//if a and b have opposite signs then the sum may or may not be a signed number
//if a and b have the same signs then the sum is a signed number

// if a and b are both signed then the sum is a signed number



//if the most significant bit of s is high then it is said to be a signed number
//if the most significant bit of s is low then it is not a signed number

//if a and b have opposite signs then the sum may or may not be a signed number
//if a and b have the same signs then the sum is a signed number

// if a and b are both signed then the sum is a signed number

// if s is a signed number
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] b_signed; // b is the signed version of b

assign b_signed = (b[7]) ? ~b[7:0] + 1'b1 : b[7:0]; // b_signed is signed b

// perform the signed addition
adder add1(a[7:0], b_signed[7:0], s[7:0], carry[0]);
adder add2(a[7:0], b_signed[7:0], s[7:0], carry[1]);

// detect the signed overflow
assign overflow = carry[0] ^ carry[1];


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed; // b is added with 2s complement of b

assign b_signed = ~b[7] + 1; // 2s complement of b

// if a and b have opposite signs, add a 2s complement of a to b_signed
assign s = a[7]^b_signed[7] ? a+b_signed : a-b_signed; 

assign overflow = a[7]^b_signed[7] ? 1'b1 : 1'b0;


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed; // b is treated as signed, therefore we have to use signed [7:0] in the adder

assign b_signed = -b; // b is added with 2s complement of b, therefore we have to add 2s complement of b to b_signed

adder adder1(a, b_signed, s, overflow); // adder1 is a normal adder that adds two numbers

assign overflow = (a[7] & b_signed[7]) | (b_signed[7] & a[7]); 


================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// if a[7] is high then the most significant bit of a is high and the most significant bit of b is low. 
// if b[7] is high then the most significant bit of b is high and the most significant bit of a is low. 

// if a[7] is high then the most significant bit of a is high and the most significant bit of b is low. 
// if b[7] is high then the most significant bit of b is high and the most significant bit of a is low. 

assign s = {a[6:0], b[6:0]}; // Concatenate the two numbers in the 7-digit output. 
assign overflow = a[7] & b[7]; // Check if the most significant bit of a and b is high. 


================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7]&b[7])&~s[7]) | ((~(a[7]|b[7]))&s[7]);


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] & b[7]) | ((a[7] | b[7]) & s[7]); 


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~a[7] & ~b[7] & s[7]) & (a[6] | b[6]) & (a[5] | b[5]) & (a[4] | b[4]) & (a[3] | b[3]) & (a[2] | b[2]) & (a[1] | b[1]) & (a[0] | b[0]);


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]);


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] s;
wire [7:0] b_signed; // b is a signed number

assign b_signed = ~b[7] + 1; // b is treated as a signed number

assign s = a + b_signed + 1; // s is a signed number

assign overflow = ((a[7] & b_signed[7]) & ~s[7]) | ((~a[7] & ~b_signed[7] & s[7]) & s[7]); // the carry out is the most significant bit of s.


================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] b_ext; // the most significant bit of b is extended with a high impedance

assign b_ext = {b[6:0],1'b0}; // b is padded with a high impedance of 1 bit

assign s = a + b_ext; // the two numbers are added to get the final result

assign overflow = (a[7] & b_ext[7]) & ~s[7]; // the second most significant bit is high if a and b have a signed overflow.
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = {b[6:0], b[7]};

wire [7:0] a_and_b_signed;

assign a_and_b_signed = a & b_signed;

wire [7:0] s_signed;

assign s_signed = a_and_b_signed + b;

assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]);

// assigns the least significant bit of s to s[0], the most significant bit of s to s[7]
assign s[0] = s_signed[0];
assign s[7:1] = s_signed[7:1];


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] c; // The carryout is the 9th element of the output, {1'b0,s[7:1]}.
// This is the carryout of the 9 bit adder and is the output of the adder.

assign c[0] = 0; // The most significant bit of c is always zero.
assign c[1] = (a[0]^b[0])^(s[0]^s[7]); // This is the carryout of the ripple carry adder.
assign c[2] = (a[1]^b[1])^(s[1]^s[0])^c[1];
assign c[3] = (a[2]^b[2])^(s[2]^s[1])^(s[0]^s[1])^c[1];
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b;
assign overflow = (a[7]^b[7]) & (a[7]^s[7]);
// if a or b has a signed overflow, then s has a signed overflow



================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implementation of the adder

assign s = a + b;

assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]); 


================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b;

assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]);


================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low




================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// the output s is set to the unsigned value of the sum.
assign s = a + b;

assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]);


================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~a[7] & ~b[7] & s[7]) & (a[6] | b[6] | a[5] | b[5] | a[4] | b[4] | a[3] | b[3] | a[2] | b[2] | a[1] | b[1] | a[0] | b[0]));


================================================================
example-20: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// 

//wire [7:0] a_s; // The most significant bits of a
//wire [7:0] b_s; // The most significant bits of b
//wire [7:0] s_s; // The most significant bits of s

// The next three wires are used to transport the carry out of the signed adder back into the overall carry out
wire [7:0] c_s;
wire [7:0] d_s;
wire [7:0] e_s;

// Instantiate the eight 2's complement numbers

twos_complement tca1(b, b_s);
twos_complement tca2(a, a_s);
twos_complement tca3(s, s_s);

signed_adder sa1(a_s, b_s, c_s,
================================================================
example-21: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] b_signed; // b is the signed version of the input b

assign b_signed = ((b[0] == 1'b1) ? ~b : b); // if b is a negative number, b_signed is its absolute value

assign s = a + b_signed; // add the signed versions of a and b

assign overflow = ((a[7] == b_signed[7]) && (a[7] != s[7])) ? 1'b1 : 1'b0; // if a and b have opposite signs, a + b = - (a + b)

// if a and b are both negative, s is a negative number, too. If a and b are both positive, s is positive.
// if a and b are both zero, s is zero. If a or b is NaN, s is NaN

================================================================
example-22: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] & b[7] & ~s[7]) | (a[7] & ~b[7] & s[7]);


================================================================
example-23: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0]^b[0]; // a0 xor b0 = s0
assign s[1] = a[1]^b[1]^(a[0]&b[0]); // a1 xor b1 xor (a0&b0) = (s1 xor c1)
assign s[2] = a[2]^b[2]^(a[1]&b[1])^(a[0]&b[0]); // a2 xor b2 xor (a1&b1) xor (a0&b0) = (s2 xor c2)
assign s[3] = a[3]^b[3]^(a[2]&b[2])^(a[1]&b[1])^(a[0]&b
================================================================
example-24: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = {{6{b[7]}},b}; // since b is signed, we "borrow" the sign of b

assign s = a + b_signed; // a and b are added, and the final result is s

assign overflow = ((a[7]&b_signed[7])&~s[7]) | ((~(a[7]|b_signed[7]))&s[7]);
// s is high if a and b have opposite signs, and the sum has a negative sign


================================================================
example-25: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7]&b[7])&(~s[7]))|((~a[7])&(~b[7])&s[7]);


================================================================
example-26: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]);


================================================================
example-27: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] & b[7]) & ~s[7]; 


================================================================
example-28: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~a[7] & ~b[7]) & s[7]);


================================================================
example-29: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign overflow = ((~a[7])&(~b[7])&s[7])|((a[7])&(~b[7])&(~s[7]));

// assign s = a + b;

assign s = {a[6:0], b[6:0], 1'b0};

// The numbers a and b are added to the output s. 
// The carry out is the third bit of s.
// If the two most significant bits of a and b are equal to the most significant bit of s, then there is a carry out.


================================================================
example-30: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] s_mux_a;
wire [7:0] s_mux_b;

mux2to1 mux_a(.x(a), .y(b), .s(s_mux_a[7]), .m(s[7]));
mux2to1 mux_b(.x(a), .y(b), .s(s_mux_b[7]), .m(s[6]));

mux2to1 mux_ab(.x(s_mux_a), .y(s_mux_b), .s(s[5]), .m(s[4]));
mux2to1 mux_abc(.x(s_mux_a), .y(s_mux_b), .s(s[3]), .m(s
================================================================
example-31: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



wire [7:0] b_signed; 

assign b_signed = ~b[7] + 1; // if b is a negative number, then b_signed is a negative number

assign s = a[7] + b_signed[7] + {a[6:0],b[6:0]};

assign overflow = (a[7]^b_signed[7])&(a[6:0]^b[6:0]);


================================================================
example-32: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~a[7] & ~b[7]) & s[7]);


================================================================
example-33: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7]&b[7])&~s[7]) | ((~a[7]&~b[7])&s[7]);


================================================================
example-34: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] c; // The 9-bit carry out

assign c[0] = 0; // c is the 9-bit carry out

// The 9-bit carry out is added to the 8-bit sum
fulladder add1(a[7], b[7], c[8], s[7], c[7]);
fulladder add2(a[6], b[6], c[7], s[6], c[6]);
fulladder add3(a[5], b[5], c[6], s[5], c[5]);
fulladder add4(a[4], b[4], c[5], s[4], c[4]);
fulladder add5(a[3], b[3], c[4], s[3], c[3]);
fulladder add6(a[2], b[2], c[3
================================================================
example-35: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = ~b[7] + 1; //2's complemented

assign s = a + b_signed; 

assign overflow = (a[7] & b_signed[7]) | (b[7] & a[7]); 

================================================================
example-36: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



always @(*) 
begin
	if(a[7]&b[7]) // if a and b have opposite signs, the sum has negative sign
	begin
	s[7]= ~a[7];
	end
	else 
	begin
	s[7]=a[7];
	end
	
	if(a[6]&b[6]) 
	begin
	s[6]= ~a[6];
	end
	else 
	begin
	s[6]=a[6];
	end
	
	if(a[5]&b[5]) 
	begin
	s[5]= ~a[5];
	end
	else 
	begin
	s[5]=a[5];
	end
	
	if(a[4]&b[4]) 
	begin
	
================================================================
example-37: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] & b[7]) & ~s[7]) | ((~(a[7] | b[7])) & s[7]); 


================================================================
example-38: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] c;
wire [7:0] b_signed;
wire signed_overflow;

assign b_signed = ~b; // Inverse because bitwise And uses 'and'

assign c = a + b_signed + 8'h00000001; // The carry is c[8].

assign signed_overflow = c[8]; // Get the most significant bit of c. 

// If the sum of a and b is negative, the most significant bit is 0. 

assign s = (~a[7] & ~b_signed[7]) ? c[7:0] : c[7:8]; // If a and b are negative, the most significant bit is 0.

assign overflow = signed_overflow | (a[7] & b_signed[7]); // Get the overflow flag. 

end
================================================================
example-39: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a+b;
assign overflow = ((a[7]&b[7])&~s[7]) | ((~(a[7]|b[7]))&s[7]);


================================================================
example-40: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign overflow = a[7] & b[7] & ~s[7];

// if a and b have opposite signs, the sum is negative
assign s[7] = ~(a[7]^b[7]) & s[6] & ~a[6] & ~b[6];

// if a is negative, the sum is negative
assign s[6] = ~a[6] & ~b[6] & s[5] & ~a[5] & ~b[5];

// if b is negative, the sum is negative
assign s[5] = ~b[5] & ~a[5] & s[4] & ~b[4] & ~a[4];

// if a or b are negative, the sum is negative
assign s[4] = ~a[4] & ~b[4
================================================================
example-41: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// reg [7:0] s;

// wire signed_overflow;

// adder add1(a, b, s, signed_overflow);

// assign overflow = signed_overflow;

// initial begin
// 	s = 8'b00000000;
// end


================================================================
example-42: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [7:0] b_signed; // b is treated as signed and unsigned

assign b_signed = {b[6:0], b[7]}; // b is treated as signed and unsigned

// bitwise xor of a and b is used in the xor of the carry that is output

assign s = {a[6:0], a[7]^b_signed[6:0], c[0]}; 

// The carry is the output of the xor of the most significant bit of a and b.

assign c = a[7]^b_signed[7]; 

assign overflow = c^s[7]; // xor of the most significant bit of c and s is the overflow.


================================================================
example-43: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a+b;
assign overflow = (a[7]&b[7]&~s[7]) | (a[7]&~b[7]&s[7]);

//or
//assign overflow = a[7]^b[7]^s[7];


================================================================
example-44: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] & b[7]) & ~s[7];


================================================================
example-45: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = ~b[7] + 1; //2s complement of b

assign s = a + b_signed + {8'b0,overflow}; //s is the sum of a and b, where the carry is the overflow.

//assign overflow = (a[7] & b[7]) & ~s[7]; //the carry is the overflow if the sum has a carry and the carry is high where it should be.


================================================================
example-46: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] b_signed = ~b[7] + 1; // b is treated as a signed number

assign s = a + b_signed;
assign overflow = (a[7] & b_signed[7]) | (b[7] & a[7]); 


================================================================
example-47: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire [8:0] c; // internal wire that holds the carry during the 4-bit carry lookhead adder

wire [3:0] d; // d is the fourth digit of the sum

wire [7:0] e; // e is the third digit of the sum

wire [6:0] f; // f is the second digit of the sum

wire [5:0] g; // g is the first digit of the sum

wire [4:0] h; // h is the fourth digit of the sum

wire [3:0] i; // i is the third digit of the sum

wire [2:0] j; // j is the second digit of the sum

wire [1:0] k; // k is the first digit of the sum


// instantiate the carry lookhead adder

carry_lookahead_adder_4bit
================================================================
example-48: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [8:0] ca_sum; // the carry out of the adder

// The sign of the output is the same as the most significant bit of the sum
assign s[7] = ca_sum[8];

// The carry in is the second most significant bit
assign ca_sum[1:0] = 2'b00;

// All other bits are zero
assign ca_sum[9:2] = 9'b0;

assign overflow = ca_sum[8];

// The adder is instantiated
adder8
adder_inst
(
	.a(a),
	.b(b),
	.s(s),
	.overflow(overflow)
);


================================================================
example-49: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



assign s = a + b;
assign overflow = ((a[7]&b[7])&~s[7])|((~a[7]&~b[7])&s[7]);


================================================================
