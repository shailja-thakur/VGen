example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
out = in;
// fuser-unused result CAN be removed

assign( private(long&) )
// assign private(long)
{ long& v = *(long*)out;
  v = in;
}

//
append
// append
input in2;
output out2;
empty_sequence(out2);
sequential_app_name(out2,in2,"append");
assign( public( long) )
{ out2 += in2;
}

//
slice( input in1[2], output outw[2] )
// slice and its parameters are mutable. To reset the output you need to reset both
util.require("Mutable_base");
new_base(side_by_side,swi.side_by_side(input(),out(),out,new(MSELECT,two,MUTABLE,"M
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module wire_assign_in( input in, output out ) list<U> (wire_assign(input in,output out) b);
  rst in1, in2;
   wire_assign(\
    in1,
    in2,
    .clk(in1),
    list_advance(
      .in_next = in1.index("next"),
      .data = in1.index("value"))
  );
rtl begin assume(int a) {
  int input 0;
    for (input = 0; input < 1000; input++) {
        name user1 = "user1";
        input new_input(user1);
        val input_new_input = r_cast(int->user1, new_input); 
          require(no_error(input_new_input));
      }
  for(
================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
var buf = []byte( "eighter me.  " );
buf[0] = uint64( ( in << 1 ) ) | 0x01;
print( buf.toString() );
buf = []byte( "eighter me.  " );
buf[0] = uint64( ( in << 1 ) | 1 ) & 0xff;
print( buf.toString() );
module_main();

================================================================
