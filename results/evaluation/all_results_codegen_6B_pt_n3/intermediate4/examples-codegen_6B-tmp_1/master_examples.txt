example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always (input clk and out)
begin
    if (next_state = 0) begin
        present_state = next_state;
    end
    else begin
        present_state = next_state;
        next_state = 0;
        out = (next_state = present_state);
    end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always(clk) 
begin
  if (reset) begin
    current_state <= 0;
    next_state <= 0;
  end else begin
    current_state <= in; 
    current_state != next_state; 
    next_state <= in;
    next_state != current_state;
    if (next_state) begin
      out <= 1;
    end else begin
      out <= 0;
    end
  end
end
`

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    if (en && reset) next_state = 0;
    if (!reset || !en) next_state = pin2int(in ? 1:0);
    if (next_state != present_state) begin
        present_state = next_state;
        next_state = !next_state;
    end
out <= present_state; // when true, clock output to out
end

// convert inputs to ints
int input2int(input i_)
{
    return (int)i_;
}

// convert int to inputs
input int2input(int i_)
{
    return i_;
}

// convert ints
int pin2int(input pin)
{
    return int2input(pin);
}

// convert ints
input int2pin(int i
================================================================
