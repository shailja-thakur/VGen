example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) 
	#2 q <= ~((q - 1));

// This if is false on reset, high between q-2 and q-1, and low between q-1 and q
// XXX this will be true only between q-2 and q-2 + 11 (because at q-1, a toggle will be
// happened (from r>0->r==1))
      #3 (q == 12);
     #4 q <= 2;
      #5 (q - 1) == HIGH;
    #6 q <= ~q;
      #7 q <= ~r;



reg [17:0] test0 = 16'b100010001;
reg [13:0] test1 = 12'b10001;
       

                 #8 if TEST0 && TEST1
reg [9:0] padded_test
================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset == 0) begin
        q <= 1;
    end else if (q == 12) begin
        q <= 1;
    else begin
        q <= q + 1;
    end
end


begin
    
    rxI: reg rxI()
end



"""

print("Running...")
from hwt.synthesizer.vhdl import toVHDL
t = toVHDL(vlVComp,
           static_path="""vcomp.verilog""",
           arch="ARCH_%s" % arch,
           )

print(t)

macros = []

test_verilog  = os.path.join(os.path.dirname(__file__), os.pardir)
rel_test_ver
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
   always @(posedge clk or posedge reset)
   begin
      if (reset) q <= 1;
      else if (q === 12) q <= 1;
      else q <= q + 1;
   end

// This is another counter which loads its first 12 clock cycles from the input
// vector q[3:0]
module counter2( 
    input[3:0] q,
    input clk,
    output reg [3:0] q_
);
// essentially, this is to be viewed as a multiplexer-controlled counter
   always @(posedge clk or posedge reset) 
   begin
      if (reset) q_ <= 1;
      else if (q_[3] === 1) q_ <= 1;
      else q_ <= q_ + 1; 
   end

================================================================
