example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(posedge clk or negedge load or negedge ena) begin
    if (ena) {
      if (amount == 0) {
        shiftreg = 0;        // shift left 1 bit
        q <= ((shiftreg << 1) | (1'b1 << (data_bits+1)*(shiftreg+1)));    // q <= concat(shiftreg >> 1, ena)
      } else if (amount == 1) { // when amount == 1, shiftleft needs additional latch
        if (!load) {
          shiftreg <<= 1;
          q <= shiftreg;
        }
        shiftreg++;
        q <= ((shiftreg << 1) | (1'b1 << (data_bits+1)*(shiftreg)));
      } else if (amount == 2) {
        shiftreg = data[63:0] <<
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module advshift2(input clk, input ena, input [1:0] amount, input [31:0] data, output reg [31:0] q); 
// when ena >= 1'b1, assign data[31:0] to q.
// shift amount denotes how much q will be shifted. Count begins immediately after rising edge.
// amount: \delta_t ?
//
//CHANGE THIS
#define D 0
bool output = 0;

void main(input std_logic clk, input std_logic ena)
{
            std_logic data_in = std_logic_strip((std_logic) mystring);
//(mystring).(length(mystring)\*8)

            (mystring)_Uint64 & shift_val, 
            & sum_val,
            & word_3
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
  if (ena) begin
    if (load) q <= data;
    if (amount == app.BitSet64(0, 63)) 
      q <= data[62:0];
    if (amount == app.BitSet64(1, 63)) 
      q <= data[61:0];
    if (amount == app.BitSet64(2, 63)) 
      q <= data[60:0];
    if (amount == app.BitSet64(3, 63)) 
      q <= data[59:0];
  end
end

// Design and implement a FPGA arbiter.
// Arbitration is based on highest priority register's address (SI).
// For any transaction to complete that is accessing a register, 
the #player will repeatedly check if the register is 
free or in use by ADD
================================================================
