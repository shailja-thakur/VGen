example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
if (reset) begin
    out <= 0;
end else begin
    if (load) begin
        out <= data;
    end else begin
        out <= (out << amount) | (out >> (32 - amount));
    end
end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
	if(load) begin
		out<=(data<<(amount+1))|(data>>(32-(amount+1)));
		// the right shift operation is a bit tricky
		// if the left shift amount is less than 32 bits, we have to first shift the data register
		// by the amount left shift amount and then load the shifted data into the output register
		// this is because we can only generate a left shift of 32 bits.
		// if the left shift amount is greater than 32 bits, we have to first load the data register
		// into the shifted register, then right shift it, and finally load the shifted data into the output register
		// this is because we can only generate a right shift of 32 bits.
		// note that the right shift operation is a bit tricky as well
		// if the left shift amount is less than 32 bits,
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
if (reset) begin
out <= 0;
end
else begin
if (load) begin
out <= data;
end
else begin
out <= (out << amount) | (out >> (32 - amount));
end
end

================================================================
