example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

// State 0
always @(posedge clk)
begin
	if (reset)
		present_state <= 0;
	else if (present_state == 0)
		if (in)
			next_state <= 0;
		else
			next_state <= 1;
	else
		if (in)
			next_state <= 1;
		else
			next_state <= 0;
	if (present_state == 0)
		out <= 1;
	else
		out <= 0;
	present_state <= next_state;
end

// State 1
always @(posedge clk)
begin
	if (reset)
		present_state <= 0;
	else if (present_state == 0)
		if (in)
			next_state <= 0;
		else
			next_state <= 1;
	else

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    case(present_state)
        1'b1 <=> present_state <= 1'b0;
        case(present_state)
            1'b0 <=> if (reset) begin
                present_state <= 1'b0;
                next_state <= 1'b0;
            end else if (in) begin
                present_state <= 1'b0;
                next_state <= 1'b1;
            end else begin
                present_state <= 1'b0;
                next_state <= 1'b0;
            end
        case(next_state)
            1'b1 <=> next_state <= 1'b0;
            1'b0 <=> if (in) begin
                next_state <= 1'b1;
            end else begin
                next_state <= 1'
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  present_state <= next_state;
  next_state <= present_state;
  if (reset) begin
    next_state <= 0;
  end else if (present_state == 0) begin
    if (in) out <= 1;
    next_state <= 1;
  end else if (present_state == 1) begin
    if (in) out <= 1;
    next_state <= 0;
  end
end

================================================================
