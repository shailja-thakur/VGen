example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set next state to 0 in state 1.
always@(posedge clk)
begin
  if(reset)
    present_state <= 0;
  else
    present_state <= next_state;
end
// A Moore state transition.
always@(*)
begin
  case(present_state)
    0 : begin
      if(in)
        next_state = 1;
      else
        next_state = 0;
    end
    1 : begin
      if(in)
        next_state = 2;
      else
        next_state = 0;
    end
    2 : begin
  
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set next state to 0 in state 1.
always @(posedge clk)
begin
  if (reset)
    state <= 0;
  else
    state <= next_state;
end
// Set next state to 0 in state 0 or 1 to state 1.
always @(state or in)
begin
  next_state = 0;
  case (present_state)
    0:
      begin
        if (in)
          begin
            if (present_state == 1)
              begin
                next_state = 1;
              end
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset == 1'b1)
  begin
    state <= 1'b0;
    next_state <= 1'b0;
  end else
  begin
    state <= next_state;
    if (in == 1'b1)
      begin
        next_state <= 1'b1;
      end
    else
      begin
        next_state <= 1'b0;
      end
  end
end
// In state 1, if in=1, go to state 0.
assign out = present_state == 1'b1 ? 1'b1 : 1'b0;
// In state 1, if in=1
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
begin
  if (reset == 1'b1)
  begin
    next_state <= 0;
  end
  else
  begin
    case (present_state)
      0:
      begin
        if (in == 0)
        begin
          next_state <= 1;
        end
        else if (in == 1)
        begin
          next_state <= 2;
        end
        else if (in == 0)
        begin
         
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 2 in state 0 and turn on the state to state 1.
always@(state or in)
begin
next_state=1'b0;
case(present_state)
1'b0:
begin
if(in==0)
begin
next_state=1'b1;
end
1'b1:
begin
next_state=1'b0;
end
endcase
end
end

================================================================
