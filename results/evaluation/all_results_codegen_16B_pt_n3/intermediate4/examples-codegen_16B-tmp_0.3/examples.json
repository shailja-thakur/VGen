// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if (reset) begin\n        present_state = 0;\n        next_state = 0;\n    end else begin\n        present_state = next_state;\n        next_state = present_state;\n        if (present_state == 0) begin\n            if (in) begin\n                next_state = 0;\n            end else begin\n                next_state = 1;\n            end\n        end else begin\n            if (in) begin\n                next_state = 1;\n            end else begin\n                next_state = 0;\n            end\n        end\n        out = present_state;\n    end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end else begin\n    present_state <= next_state;\n    next_state <= present_state;\n    if (in) begin\n      next_state <= present_state;\n    end else begin\n      next_state <= present_state;\n    end\n    out <= present_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n    if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n    end else begin\n        present_state <= next_state;\n        next_state <= present_state;\n        if (present_state == 0) begin\n            if (in) begin\n                next_state <= 0;\n            end else begin\n                next_state <= 1;\n            end\n        end else begin\n            if (in) begin\n                out <= 1;\n            end else begin\n                out <= 0;\n            end\n        end\n    end\nend\n"
    }
  ],
  "created": 1663533904,
  "id": "cmpl-cWwtyH4j4lYSj1lR7mfswLJZWduDw",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 404,
    "prompt_tokens": 148,
    "total_tokens": 552
  }
}