example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign av to out
always
begin
   case(
      ( ~ in[1:0] & in[2:0] ),
      ( ? pos.b, 0 )
   )
// When sel=2, assign av to out
   case(
      ( ~in[0] & in[1:0] ),
      ( ? pos.a, 0 )
   );
// When sel=3, assign b to out
// end case
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
reg [3:0] b, sel, out;
always @* begin end

{ a[0] } => sel,
//above condition ...
{ a[0] == 1} && { a[1] == 0 } { sel = 0; out = 0 }
//above to 2-input XOR 

 // a[1]=0
{ a[1] == 0 && sel = 1}
{ sel = sel | b }
{ a[1] = a[1] }
{ b = b << 1; 
  sel = sel | b[1] } { a[1] = b
//above condition
// sel = sel | b[1] } 
// above condition AND NOT REQUIRED
//{ b[1] = 1} 
//above 3-input xor

{ b[2:0]
================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign ~b&(~a1&~a2&...&0) to out
always @(posedge
	(#pinsin ^ #pos)?
(input[0] & ~input[1]) :
(input[1] & ~input[2])) 
#0 begin
	pos <= 2'b01;
	abc <= input[0];
end 

// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder(
input [2:0] in,
output reg [1:0] pos );
// When sel=1, assign b to out
// When sel=0, assign ~b&(~a1&~a2&...&0) to out
always @( posedge ~ #address) #1 begin
  p
================================================================
