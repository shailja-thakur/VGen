example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset)
begin
  if (reset) begin
    r_reg <= 0;
  end
  else begin
    r_reg <= r_reg + r_reg[2] + r_reg[4];
    feedback_value <= r_reg[2] ^ r_reg[4];
    r_next <= r_reg ^ (feedback_value << 4);
    q <= r_next;
  end
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if( reset )
    r_reg <= 1;
    else
    r_next <= r_reg;
    feedback_value <= ~r_reg >> 2 & 1; // xor bit 2 with bit 4
    r_reg <= r_next;
    q <= r_reg[4:0];
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk, posedge reset) begin
    if (reset == 1) begin
        r_reg <= 0;
    end else begin
        case(r_reg)
            1: begin
                r_next <= r_reg;
            end
            2: begin
                r_next <= r_reg ^ 1;
            end
            3: begin
                r_next <= r_reg ^ 2;
            end
            4: begin
                r_next <= r_reg ^ 3;
            end
            5: begin
                r_next <= r_reg ^ 4;
            end
            6: begin
                r_next <= r_reg ^ 5;
            end
            7: begin
                r_next <= r_reg ^ 6;
            end
            8: begin
                r_next <= r_reg ^ 7;
            
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) 
        r_reg <= 1;
    else {
        r_reg <= r_reg + (r_reg << 3) + (r_reg << 2);
        r_next <= (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next;
    }
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    r_reg = r_reg << 1;
    r_reg[2] = r_reg[2] ^ r_reg[3];
    r_reg[3] = r_reg[3] ^ r_reg[4];
    r_reg[4] = r_reg[4] ^ (r_reg[4] << 1) ^ (r_reg[3] & 0x8);
    r_next = r_reg[0:4];
    feedback_value = ~r_reg[2] & 0x1;
    r_reg[0:4] = r_next;
    q = r_reg[4:0];
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset)
    begin
        if (reset) r_reg <= 0;
        else r_reg <= r_next;
        r_next <= r_reg xor [2:0];
        feedback_value <= r_reg[2] xor r_reg[3];
        r_next <= r_reg xor [2:4];
        q <= feedback_value AND [3:0];
    end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (clk == 1) begin
        if (reset == 0) begin
            r_reg <= 1;
        end else begin
            r_reg <= 1;
        end
    end else begin
        r_reg <= r_reg & ~(r_reg >> 1) & ~(r_reg >> 2);
        r_reg <= r_reg & ~(r_reg >> 1) & ~(r_reg >> 2) & ~(r_reg >> 3);
        r_reg <= r_reg & ~(r_reg >> 1) & ~(r_reg >> 2) & ~(r_reg >> 3) & ~(r_reg >> 4);
        r_reg <= r_reg & ~(r_reg >> 1) & ~(r_reg >> 2) & ~(r
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @* begin
    if (reset) begin
        r_reg <= 1;
    end
    else begin
        // initialize r_reg from input clk
        if (clk) begin
            r_reg <= r_reg + 1;
        end
        // update r_next
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        // update feedback_value
        feedback_value <= (r_reg >> 1) ^ (r_reg >> 2) ^ (r_reg >> 3);
        // assign output to q
        q <= r_next;
    end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 0;
    else
        r_next <= r_reg;
    if (r_next == 0)
        feedback_value <= 0;
    else
        feedback_value <= r_next ^ 2;
    q <= r_next[3] ^ 4;
    r_reg <= r_next;
end

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or negedge reset) begin
    if (reset == 1)
        r_reg <= 16'h1;
    else
        r_reg <= r_reg + 1'b0;
    r_next <= r_reg - 1'b1;
    feedback_value <= 
        (r_reg >> 2) ^ 
        ((r_reg >> 2) & 1) ^ 
        ((r_reg >> 4) ^ 
        ((r_reg >> 4) & 1));
    q <= feedback_value & 4'h3;
end

================================================================
