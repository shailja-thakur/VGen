example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = {
    (~r_reg[3] & r_reg[2]),
    r_reg[3]{bits[clk], bits[reset]}, 
    r_reg[3]{bits[clk], bits[reset]} >> 4 
};
reg [4:0] table [4:0];
reg table_counter;
always @(posedge clk) table_counter = (table_counter + (reset > 1)) % len_stream;
assign q = table[table_counter];
reg [15:0] id_on, id_hi, id_lo[7:0];
assign id_low[1:0] = id_lo[4:0];
assign id_low[2:0] = id_lo[2:0];
assign id_hi[0] = id_
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
index
first;
background inv;
(
    assert(reset==1'b0);
    r_reg = 1'b0;
    r_next = 0;
    feedback_value = 0;
);
(
    assert(clk==1'b1);
    r_reg = r_next;
    r_next =
        r_reg[3:2] ^ r_reg[2:1] ^ r_reg[1:0] ^ feedback_value;
    feedback_value = r_reg[4:3] ^ r_reg[3:2]; 
    r_next[4:0] = q;            
    q = r_next;
);

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always begin
    r_next(3) 
    r_next(2) <= r_reg(3) & not(feedback_value);
    feedback_value <= r_reg(6) ^ r_reg(6);
    r_next(0) <= r_next(1) & ~not(not(feedback_value) & (r_next(4))) & (r_reg(4) == 1);
    r_next(1) <= r_next(0);
    r_reg <= r_next;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always #5 clk = clk + 1;

lfsr:
    let feedback_value = r_reg[1];
    r_next = r_reg[3];
    r_reg[0] = r_reg[0] & 1'b0; 
    r_reg[1] = bitand({3}, r_reg[2]);
    r_reg[2] = bitand({2,3}, r_reg[3]);
    r_reg[3] = ~2'b0 & feedback_value;
    q = r_reg;

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) 
    begin
        if (reset)
            r_reg <= 1;
        else
            r_reg <= r_reg || (r_reg[2] && !(r_reg[3] && (r_reg[4])));
        r_next <= feedback_value || r_reg[4:0];
        q <= r_next;
    end
// feedback computing function
reg [2:0] temp; //loop to compute the feedback value
reg highbit;  //to keep track where the cycle is
void loop()
{
    if (clk) 
    {
        middleloop_lfsr:
            temp <- temp >> 1;
            if ((temp[1] & 0x20) == 0x20) 
            {
                temp[1] <<= 1;
                
================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
(* l-11 *) begin
    (* min -8 *) begin # the inside of the while loop, see above
        if (r_ulog <= 0) # is reset?
            r_reg = 1;
        else {
            r_ulog = r_ulog - 1;
            // identify the two bits, i.e. 2, 4, 6, ... in r_reg
            assign r_bit[5] = r_reg[0:4];
            assign r_bit[3] = r_reg[4];
            //  feedback logic to determine if
            //  a new bit is necessary..
            assign feedback_value = r_bit[3] ^ r_bit[5];
            assign r_bit[2] = 1 & r_reg[3] ^ r_reg[4];
================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q {
    //frame 0
    //a sel b sel c sel d 010*
    01100100,
    //a sel b sel c sel d 010*
    00110000,
    //a sel b sel c sel d 010*
    00100000,
    //a sel b sel c sel d 010*
    00111000,
    //a sel b sel c sel d 010*
    01101000,
    //a sel b sel c sel d 010*
    11110100,
    //a sel b sel c sel d 010*
    11110101,
    //a sel b sel c sel d 010*
    11110102,
    //a sel b sel c sel d 010*
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @* begin
    case(rtl)
      reg [6:5] r_reg_CAL[5:2] = {{4'b0}};
      case(r_reg_CAL)
        case(0b00)
          r_next = 4'b10;
        case(0b001)
          r_next = 4'b01; 
        case(0b011)
          r_next = 4'b11;
        case(0b010)
          r_next = 4'b10; 
        default
          r_next = 4'b00;
      endcase
      r_next(-4) = r_reg_CAL((r_reg_CAL)-2);  // feedback_value(-4)
      r_reg = 1'b1 & r_next;
    endcase)
end
================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
reg r_sel_mul = 0;
ml(
    if (reset = '0') r_reg = 1;
    else {
        //Write ACC into feedback_value
        feedback_value = accboot;
        //Write feedback_value into r_next
        r_next = r_reg;
        //Write r_next into r_sel_mul
        r_sel_mul = 3;
    }
    == {1:0, 0:1} + {1:0, 0:0} + {1:0, 0:1} + {1:0, 0:0} 
    == {0:0, 0:1, 1:0, 1:0, 1:0} 
);
lfsr(
    clk == clk'0 || r_sel_mul != po2(r_sel
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk | posedge reset) begin
    if (reset) begin
        r_reg := $b00;
    end else begin
        r_reg := r_reg@3;
    end
    r_next[2:0] := feedback_value; // bit position 2
    r_next[3:1] := r_next[2:0]; // bit position 3
    r_next[5:4] := r_next[2:0]; // bit position 5
    r_next[5:4] := r_next[2:0] ^ $b10; // bit position 2
    r_next[5:3] := r_next[5:4]; // bit position 3
    r_next[5:2] := r_next[5:3]; // bit position 2
    r_next[5:2] :=
================================================================
