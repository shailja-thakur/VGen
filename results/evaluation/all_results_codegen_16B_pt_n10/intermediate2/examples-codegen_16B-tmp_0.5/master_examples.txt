example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
assign q = (reset == 0) ? 1 : (q + 1) % 13;
// always assign the clock to the previous value of q
always @(posedge clk) q <= q;

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or negedge reset) begin
    if (reset == 1) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// always @(posedge clk or negedge reset) begin
//     if (reset == 1) q <= 1;
//     else if (q == 12) q <= 1;
//     else q <= q + 1;
// end
// always @(posedge clk or negedge reset) begin
//     if (reset == 1) q <= 1;
//     else if (q == 12) q <= 1;
//     else q <= q + 1;
// end
// always @(posedge clk or negedge reset) begin
//     if (reset == 1) q <= 1;
//     else if (q == 12
================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    q <= (reset ? 1 : q + 1);
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end
// output q
assign q = q[3:0];

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset == 0) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end
// This is a counter that counts from 15 to 0
module counter2( 
    input clk,
    input reset,
    output reg q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 15
// else, decrement q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 15;
    else q <= q - 1;
end
// This is a counter that counts from 15 to 0
module counter3( 
    input clk,
    input reset,
    output reg q
); 
// update q on the positive edge
================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// q <= 12
always @(posedge clk) begin
    if (q < 12) q <= q + 1;
end
// q == 12
always @(posedge clk) begin
    q <= 1;
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
    if (reset) q <= 0;
    else if (q == 12) q <= 0;
    else q <= q + 1;
end

// This is the output driver. It writes to the LEDs
// on the board
// the output driver is based on a series of cascaded
// register-based muxes, which are used to select the
// appropriate signal to drive
// the LED driver.
module led(
    input clk,
    input reset,
    output reg [3:0] q
);
// The driver is based on a series of cascaded register-based
// muxes, which are used to select the appropriate signal
// to drive the LED driver.
// The driver drives the LEDs by driving the appropriate
// pin of the LED driver.
// The first mux selects between the output of the counter
//
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
    if (reset) q <= 1;
    else if (q == 12) q <= 1;
    else q <= q + 1;
end
// output q
assign q = q + 1;

================================================================
