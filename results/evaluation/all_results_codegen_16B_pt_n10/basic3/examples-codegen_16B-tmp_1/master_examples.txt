example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always void priority_encoder_instance( input [2:0] in, output [1:0] pos ); 
priority_encoder_instance:priority_encoder UGT low;

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always #( (((~in[2]) && (~in[1]) && (~in[0]) && (sel==1)) == false) && (out==0) )
  
  	ufunc arrzero[2]:0
		sel = 1
                 ufunc code: v
		assign out = arrzero[b];


================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign 0 to out
// Output = (~(in & sel) !=0) << prio
always @(posedge clk) 
if (pos == 0) begin
	output[0] <= 0; 
	output[1] <= 0; 
end else begin
	if (((~(in[0]&1) == 0) && (sel[0] == 1)) || ((~(in[1]&1) == 0) && (sel[0] == 0))) output[0] <= 1;
	if (((~(in[0]&1) == 0) && (sel[1] == 1)) || ((~(in[1]&1) == 0) && (sel[1] == 0))) output[1] <= 1;
end 

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// when sel=0, assign a to out
always with ( pos ) begin 
	if (in[0])
		pos = 0;
	else if (in[1])
		pos = 1;
	else
		pos = 2; // select the input

	if (in[2])
		pos = 4;
	else if (in[3])
		pos = 5;
	else
		pos = 6; // select the input

	output=pos;
end
        */
        for(int i=0;i<32;i++){
            for(int j=0;j<4;j++)
                Configuration::TransitionConfiguration[i][j]=0;
        }

//             Configuration::TransitionConfiguration[chgpin] = { 1, 2, 3, 4 } ;
//             Configuration::transitionFiniteStateMachine( Configuration
================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign a to out
always @(posedge gu) begin
        if (in[2] == 1 && sel == 1) {
        pos <= 2;
        }
        else if (in[1] == 1 && sel == 0) {
        pos <= 1;
        }
        else if (in[0] == 0) {
        pos <= 0;
        } 
    end
)

// *
// * Easy PWM Test
// *
// import dac_lm3700.all;
// reg state = 0;

void simulation()
{
        // Synchronous/sequential test write
        ch_data_wr_[0] = 1;
        ch_data_wr_[1] = 501;
        ch_data_wr_[2] = 502;
        ch_data
================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, assign 0 to out
always @* begin
  pos <= ~(in | pos);
end link_one;
// When sel=1, assign a to out
// When sel=0, assign 0 to out
always @* begin
  if (sel==1) pos <= ~(proc.a | pos);
end link_two;
// When sel=1, assign c to proc.o and a to proc.o
// When sel=0, assign 0 to proc.o and a to proc.o
always @* begin
  if (sel==1) proc.o <= ~proc.a & ~proc.c & pos;
  else if (sel==0) proc.o <= ~pos & ~proc.a & (~pos);
end link_three;

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=2, assign a to out
// When sel=4, assign c to out
`).slice( 0, 1 + generate_length ).split( '\n' ).forEach( expected( { Math.random(), Math.random()  }, [ [ 0, 0, 5, 0  ], [ 4, 0, 5, 4 ],
                    [ 4, 4, 5, 3 ], [ 3, 0, 5, 2 ], [ 3, 1, 5, 4 ], [ 2, 1, 5, 3 ], [ 2, 2, 5, 2 ], [ 1, 2, 5, 4 ],
                    [ 1, 4, 5, 3 ], [ 0, 4, 5, 2 ], [ 0, 3, 5, 4 ] ] ));
});

// $fin desIGNATE POINTER-CMPROCESS nuumpuere
test('Designate pointer-cmpproc', function
================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
 
always @(posedge clk[0]) 
begin 
	pos <= (~(in | in[1]) & ~in[0]) ? 4'b1111 : 0;
end


// The following is a 3-bit priority encoder. 
// If the first input is high, *and* if the second input is high *and* if the
// output of the priority encoder indicates that the last input is low,
// take the output from the high side output multiplexer.
module priority_encoder2(
input 	sel, 	// Select high or low side (b value)
	  out, 	// Address 0: output, address 1:input1, address 2:input2
	  input1, 	// Address 3: input1, address 4:input2
	 input2, 	// Address 5: input1, address 6:input
================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(posedge clk):
	if ( sel == 1 ) 
    	pos <= ( 1<<in[1] & 1 );
return pos;
================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
// When sel=0, rotate b left until pos is input. [...]
assign out = select sel (
		assign sel = in [2],
// When sel=1, assign b to out
// When sel=0, rotate b left until pos is input. [...]
		assign b = 
			when (sel==0) => pos >=0
				(
				(input==0) && (sel==0) => select sel (drop (pos+1) ),
				(input==1) && (sel==1) => select sel (drop (pos+2) ),
				)
			else (pos+3);
ENDMODULE

// Assumes in is positive if sel=0 and negative if sel=1
module input_neg_sel(
input [3:0] in,
output [3:0] out,
output
================================================================
