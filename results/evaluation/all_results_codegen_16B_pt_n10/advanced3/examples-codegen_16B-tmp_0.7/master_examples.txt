example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk) begin
 if (reset === 1) begin
   present_state <= IDLE;
   next_state <= IDLE;
 end
 else begin
  // if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
  if (present_state == IDLE) begin
    if (x == 1) begin
      present_state <= S1;
      next_state <= S1;
    end else begin
      present_state <= IDLE;
      next_state <= IDLE;
    end
    // if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at S1
    if ((present_state == S1) and (x == 0)) begin
      present_state <= S10;
      next_state <=
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    case(present_state)
        case(IDLE) begin
            if(reset) begin
                present_state <= IDLE;
            end else begin
                present_state <= next_state;
            end
            next_state <= IDLE;
        end
        case(S1) begin
            if(reset) begin
                present_state <= IDLE;
            else begin
                present_state <= S1;
            end
            next_state <= S10;
        end
        case(S10) begin
            if(reset) begin
                present_state <= IDLE;
            else begin
                present_state <= S10;
            end
            next_state <= S101;
        end
        case(S101) begin
            if(reset) begin
                present_state <= IDLE;
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


int main  () {
	present_state = IDLE;
	next_state = IDLE;

	always @(posedge clk) begin:
	if (reset == 1) begin
		present_state = IDLE;
		next_state = IDLE;
	end
	else begin
		if (present_state == IDLE) begin
			if (x == 1) begin
				present_state = S1;
				next_state = S1;
			end else begin
				present_state = IDLE;
				next_state = IDLE;
			end
		end else if (present_state == S1) begin
			if (x == 0) begin
				present_state = S10;
				next_state = S10;
			end else begin
				present_state = IDLE;
				next_state = IDLE;

================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
        if (present_state == IDLE) begin
                next_state <= IDLE;
        end else if (present_state == S1) begin
                next_state <= S1;
                z <= 0;
        end else if (present_state == S10) begin
                next_state <= S10;
                z <= 0;
        end else if (present_state == S101) begin
                next_state <= S101;
                z <= 1;
        end
end

always @(posedge clk) begin
        present_state <= next_state;
end


================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (reset) begin
        present_state <= IDLE;
    end
    else begin
        if (present_state == IDLE)
            if (x == 1) begin
                present_state <= S1;
            end else begin
                present_state <= IDLE;
            end
        end
        if (present_state == S1)
            if (x == 0) begin
                present_state <= S10;
            end else begin
                present_state <= IDLE;
            end
        end
        if (present_state == S10)
            if (x == 1) begin
                present_state <= S101;
            end else begin
                present_state <= IDLE;
            end
        end
        if (present_state == S101)
            next_state <= IDLE;
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
if (reset == 1) begin
present_state = IDLE;
next_state = IDLE;
end else begin
present_state = IDLE;
next_state = S1;
end
end

always begin
#0x01: begin
if ((present_state == IDLE) && (x == 1)) begin
present_state = S1;
next_state = S10;
end
#0x02: begin
if ((present_state == S1) && (x == 1)) begin
present_state = S101;
next_state = IDLE;
end
#0x04: begin
if ((present_state == S10) && (x == 0)) begin
present_state = IDLE;
next_state = IDLE;
end
#0x08: begin
if ((present_state == S101) && (
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
  if (reset) begin
    present_state <= IDLE;
  end
  else begin
    if (present_state == IDLE) begin
      if (x) begin
        present_state <= S1;
      end
      else begin
        present_state <= IDLE;
      end
    end
    else begin
      if (present_state == S1) begin
        if (x) begin
          next_state <= S10;
        end
        else begin
          next_state <= IDLE;
        end
      end
      else begin
        if (present_state == S10) begin
          if (x) begin
            next_state <= S101;
          end
          else begin
            next_state <= IDLE;
          end
        end
        else begin
          if (present
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
	if (reset) begin
		next_state <= IDLE;
		present_state <= IDLE;
	end
	else begin
		next_state <= IDLE;
		present_state <= IDLE;
		if (present_state == IDLE)
		begin
			if (x) begin
				next_state <= S1;
				present_state <= S1;
			end else begin 
				next_state <= IDLE;
				present_state <= IDLE;
			end
		end
	end
end

always @(posedge clk or posedge reset)
begin
	if (reset) begin
		next_state <= IDLE;
		present_state <= IDLE;
	end
	else begin
		present_state <= next_state;
	end
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
    if (present_state == IDLE)
        next_state = S1;
    else if (present_state == S1)
        next_state = S10;
    else if (present_state == S10)
        next_state = S101;
    else 
        next_state = IDLE;
    if (reset = '1') 
        present_state = IDLE;
    else if (x = '1')
        present_state = next_state;
    else if (x = '0')
    present_state = IDLE;
    else
    next_state = IDLE;
    z = present_state;
end

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always begin
end


// Asserts present_state to S101 when x is 1
// Asserts present_state to S1 when x is 0
// alse assert present_state to IDLE

always
	present_state <= S101;
	if (x)
		next_state <= S101;
	else
		next_state <= S1;
end

// Asserts present_state to S1 when x is 1
// Asserts present_state to S10 when x is 0
// else assert present_state to IDLE

always
	present_state <= S1 or present_state <= S10;
	if (x)
		next_state <= S1;
	else
		next_state <= S10;
end

// Asserts present_state to S10 when x is 1
// Asserts present_
================================================================
