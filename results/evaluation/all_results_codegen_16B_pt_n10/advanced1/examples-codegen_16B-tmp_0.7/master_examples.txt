example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a=0x09, b=0x05, s=0x0b, overflow=0);

// $signed_adder(0x09, 0x05, 0x0b, 0);

// $signed_adder(0x0a, 0x05, 0x0b, 1);

// $signed_adder(0x09, 0x05, 0x0a, 2);









================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Test Cases

// a = 0, b = 0, s = 0, overflow = 0

// a = 15, b = 15, s = 15, overflow = 0

// a = 0, b = 15, s = 15, overflow = 1

// a = 15, b = 0, s = 15, overflow = 1

// a = 15, b = 15, s = 0, overflow = 0

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow)
{
    s = s + a;

    if(a == 0x80 && b == 0x80)
        overflow = 0;
    else if(s < a)
        overflow = 1;
    else if(s > 0x7f)
        overflow = 1;
    else
        overflow = 0;
}

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow);

// The output s is the sum of a and b. 
// The output overflow is the signed overflow of a and b.

// The signed adder accepts multiple inputs and multiple outputs. 
// The inputs are provided as array a, b, and s. 
// The number of inputs is given in the num_inputs parameter. 
// The outputs are provided as arrays a, b, s, and overflow. 
// The number of outputs is given in the num_outputs parameter. 
// The sizes of a, b, s, and overflow are all num_inputs. 

// The signed adder accepts the following parameters: 
// num_inputs is the number of inputs, in this case 2 
// num_outputs is the number of outputs, in this case 4 
// a is an array
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Implementation

// The adder is implemented as a two-level adder.
// A two-level adder is made of two adders.
// The first adder adds the high order half of the input a and b to the high order half of the result s.
// The second adder adds the low order half of the input a and b to the low order half of the result s.
// The two adders are both implemented as two two-level adders with additional components.
// The first adder is implemented in a bit-sensitive fashion.
// The second adder is implemented in a bit-blind fashion.
// The additional components of the first adder, a[7:0]_high and a[15:8]_high, and the additional components of the second adder, b[7:0]_high and b[15:8]_high, are not used by the
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


// The following is the body of signed_adder:

signed_adder(a, b, s, overflow) begin
    // The most significant bit of a and b are compared to determine a signed overflow.
    // If the most significant bits of a and b are low then no signed overflow occurs.
    // If the most significant bits of a and b are high and the most significant bit of s is low then signed overflow occurs.
    // If the most significant bits of a and b are high and the most significant bit of s is high then no signed overflow occurs.

    if ((a[7] == 0) && (b[7] == 0)) begin
        // No signed overflow occurs.
        s[7] = a[7] + b[7];
        s[6] = a[6] + b[6];
        
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assign the result of the addition to the output register s. 
// It is guaranteed that a and b are not signed overflow and that s is not signed overflow.
// overflow is assigned in two cases: 
// if a and b have a different sign, or 
// if the most significant bits of a and b are the same and s is not all-ones 

signed_adder(a, b, s, overflow);

// Assign the result of the addition to the output register s. 
// It is guaranteed that a and b are not signed overflow and that s is not signed overflow. 
// overflow is assigned in two cases: 
// if a and b have a different sign, or 
// if the most significant bits of a and b are the same and s is not all-ones 

signed_adder(
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a[7:0], b[7:0], s[7:0], overflow);


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    // if a signed overflow occurs, set s to 0 and set the overflow signal to true
    if( (a[7] == 0) && (b[7] == 0) && (s[7] == 1) )
        s = 0;
    // if a signed overflow does not occur, set s to a + b and set the overflow signal to false
    else
        s = a + b;


================================================================
