example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
reg a, b;
wire cout, sum;

begin
   sum <= b + a + carry;
   a <= a + b + carry;
   carry <= a <> b;
end

(* synthesize *)

assign half_adder_out = half_adder( a, b, cout, sum );

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

half_adder( a=0, b=0, cout=0, sum=0 ) {
	if ( a==0 && b==0 ) {
		cout=0;
	} else if ( a==0 && b==1 ) {
		cout=a;
		sum=a;
	} else if ( a==1 && b==0 ) {
		cout=b;
		sum=a+b;
	} else if ( a==1 && b==1 ) {
		sum=a+b;
		cout=sum>1 ? 1 : 0;
		sum=sum>0 ? sum-1 : sum;
	} else {
		cout=b;
		sum=a+b;
	}
}
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
        sum <= (a&b) | (sum&(a|b));
        cout <= sum[31:16];
end


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign cout = ( sum + a + b ) % 2;
assign sum = ( a + b ) % 2;


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 

wire carry, sum, cout, a_hi, b_hi;

// internal logic
wire sum_hi;

assign sum = (sum_hi & carry) | (carry & ~sum_hi);

// set the carry-out bit
assign carry = (~a_hi & b_hi) | (a_hi & ~b_hi);

// set the half-adder output
assign cout = sum_hi | (sum & ~carry);

// Set the high bit of the half-adder sum
assign sum_hi = ~a_hi & b_hi;

// Set the high bit of the half-adder carry-out
assject sum_hi = ~a_hi & b_hi;


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

integer i0, i1, i2, i3, i4;

begin:
    i0 = a + b;
    cout = i0;

    i1 = i0 + i0;
    sum = i1;
    if ( i1 > i0 )
        goto carry;
    
    i2 = i1 + i0;
    sum = i2;
    if ( i2 > i1 )
        goto carry;
    
    i3 = i2 + i0;
    sum = i3;
    if ( i3 > i2 )
        goto carry;
    
    i4 = i3 + i0;
    sum = i4;
    if ( i4 > i3 )
        goto carry;
    
    cout = i4;
    goto finish;

carry
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

int result;

void main()
{
	cout = sum = result;
}

int half_adder(int a, int b, int& sum)
{
	int result = (a + b) & 0x7fff;
	sum = result;
	return result;
}
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input [7:0] a, b;
output [7:0] sum, cout;

assign {sum, cout} = {a, b};

half_adder_0: //for i = 0 to 7
    if (cout == 0) {
        sum = sum + {a, b};
        cout = 1;
    }
    else {
        sum = sum + {a, b};
        cout = 2;
    }
    next half_adder_0;

half_adder_1: //for i = 8 to 15
    if (cout == 0) {
        sum = sum + {a, b};
        cout = 1;
    }
    else {
        sum = sum + {a, b};
        cout = 2;
    }
    next half_adder_1;


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

int main()
{
	// Declare the inputs and outputs of the adder
	half_adder adder( a, b, cout );

	// Write the simulation
	for ( int i = 0; i < 100; i++ )
	{
		// Use the inputs to update the outputs
		adder.sum = adder.a + adder.b;

		// Write the output
		cout << adder.sum << " " << adder.cout << " " << adder.cout;

		// Shift the inputs
		adder.a = adder.b;
		adder.b = adder.a;
	}
}

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout;
output sum;

wire carry_out_sum;
wire carry_out_a, carry_out_b;

local s_sum = 0, s_a = 0, s_b = 0;

always @(posedge clk)

if(a == 1 && b == 1) {
    s_a = 1;
    s_b = 1;
    carry_out_sum = carry_out_a = carry_out_b = 0;
} else if (a == 1 && b == 0) {
    s_a = 1;
    s_b = 0;
    carry_out_sum = carry_out_a = 0;
} else if (a == 0 && b == 1) {
    s_a = 0;
    s_b = 1;
    carry_
================================================================
