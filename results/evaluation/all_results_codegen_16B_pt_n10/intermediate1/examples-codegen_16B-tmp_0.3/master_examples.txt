example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk) begin
	if (rst) begin
		cout <= 0;
		sum <= 0;
	end else begin
		if (a) begin
			cout <= 1;
			sum <= b;
		end else begin
			cout <= 0;
			sum <= 0;
		end
	end
end


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out, sum_in;
wire a_in, b_in;

// The adder adds two bits and produces a sum and carry-out.
// The carry-in is the carry-out of the previous cycle.
// The sum_in is the sum of the two bits.
// The carry-out is the carry-in of the next cycle.
// The sum is the sum of the two bits.
// The carry-in is the carry-out of the previous cycle.
// The carry-out is the carry-in of the next cycle.
reg [3:0] sum;
reg [3:0] carry_in;
reg [3:0] carry_out;
reg [3:0] sum_in;

always @(posedge clk) begin
    sum_in = a_in + b_in;
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_out;
wire sum;

assign cout = sum + carry_out;
assign carry_out = a[0] + b[0] + (sum[0] == 0);
assign sum = a[1] + b[1] + carry_out;


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, cin, cout_out, sum_out;

// The carry-in is the bit that was added last.
wire carry_in;

// The carry-out is the bit that was added last.
wire carry_out;

// The sum is the sum of the two bits.
wire sum;

// The half adder is a full adder.
// It adds two bits and produces a sum and carry-out.
always @(posedge clk)
begin
  if (a_in == 1)
    sum_out <= sum;
  else if (b_in == 1)
    sum_out <= sum;
  else
    sum_out <= 0;

  if (a_in == 1)
    carry_out <= carry_in;
  else if (b_in == 1)

================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire cin, sum_out;

always @(posedge clk)
begin
    sum_out <= sum;
    cout <= a + b;
    sum <= a + b;
end


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg [2:0] sum;
reg [1:0] carry;
reg [1:0] a_bit;
reg [1:0] b_bit;
reg [1:0] sum_bit;
reg [1:0] carry_out;

always @(posedge clk) begin
    if (a_bit == 0) begin
        a_bit <= 1;
        sum <= sum + carry;
        carry <= carry + b_bit;
    end else begin
        a_bit <= 0;
        sum_bit <= sum + carry;
        carry_out <= carry + b_bit;
    end
end

always @(posedge clk) begin
    if (b_bit == 0) begin
        b_bit <= 1;
        sum <= sum_bit;
        carry_out <= carry_out + a
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

half_adder(a, b, cout, sum) {
    sum = a + b;
    cout = sum >> 1;
    cout = cout << 1;
    cout = cout + (sum & 1);
}

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

full_adder(a, b, cout, sum) {
    sum = a + b;
    cout = sum >> 2;
    cout = cout << 2;
    cout = cout + (sum & 3);
}

// This is a full adder. A full adder adds four bits and produces
================================================================
