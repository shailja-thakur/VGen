example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void main(){
	half_adder( a, b, cout, sum );
}

// This is the implementation of the half adder.
void half_adder( 
input a, b,
output cout, sum )
{
	// declare a temporary variable to store the sum
	int sum = 0;

	// declare a temporary variable to store the carry-out
	int carry_out = 0;

	// declare a temporary variable to store the output
	int out = 0;

	// add the two input values.
	out = a + b;

	// add the carry-out
	carry_out = out / 2;

	// add the sum
	sum = out - carry_out * 2;

	// write the output
	cout = out;
	sum = sum;
}
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void main(){
	half_adder a( 0, 1, cout, sum );
	half_adder b( 0, 1, cout, sum );

	a.eval();
	b.eval();
	
	a.eval();
	b.eval();

	while( true ){
		a.eval();
		b.eval();
	}
}

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg [1:0] sum;
reg [3:0] carry;

always @(posedge clk)
    if (a)
        sum = a + b;
    else
        sum = b;

assign cout = {sum, carry};


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This function sums two numbers, a and b.
void add( 
input a, b,
output sum );

// This is a full adder. A full adder adds two bits and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

// This function sums two numbers, a and b.
void add( 
input a, b,
output sum );

// This function adds two numbers, a and b.
void add( 
input a, b,
output sum );

// This function adds two numbers, a and b.
void add( 
input a, b,
output sum );

// This function adds two numbers, a and b.
void add( 
input a, b,
output sum );

// This function adds two numbers, a and b.
void add( 

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg [2:0] sum;
wire carry;
wire [1:0] a_bit, b_bit;

always @( posedge a or posedge b ) begin
    a_bit <= a;
    b_bit <= b;
    sum <= a_bit + b_bit + carry;
    carry <= ( a_bit + b_bit )[1];
end


================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

half_adder( a, b, cout, sum );


================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always_ff @clk;

// This is a full adder. A full adder adds eight bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

always_ff @clk;

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always_ff @clk;

// This is a full adder. A full adder adds eight bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

always_ff @clk;

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder with carry-in. A full adder adds four bits and produces a sum and carry-out.
module full_adder_with_carry_in( 
input a, b,
output cout, sum );

// This is a full adder with carry-in and carry-out. A full adder adds four bits and produces a sum and carry-out.
module full_adder_with_carry_in_and_carry_out( 
input a, b,
output cout, sum );

// This is a full adder with carry-in and carry-out. A full adder adds four bits and produces a sum and carry-out.

================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire cc, sum_out;

assign sum = sum_out;

assign cc = (a != 0) ? (b != 0) : 0;

reg [2:0] sum_in;

always @(posedge clk)
begin
  if (rst)
    sum_in <= 0;
  else
  {
    if (a)
      sum_in[1] <= b;
    if (a)
      sum_in[0] <= b;
  }
end

assign cout = sum_in[1];
assign sum_out = sum_in[0];


================================================================
