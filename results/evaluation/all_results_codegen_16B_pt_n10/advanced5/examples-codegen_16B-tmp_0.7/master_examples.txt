example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg[1:0] a_input,b_input,z_output;
always @(posedge clk) begin
// z is assigned one when cur_state is SAB
if(cur_state == SAB && a_input == 1 && b_input == 1)
  z_output = 1;
// a and b have been asserted in the same order only when cur_state is IDLE
else if(cur_state == IDLE && a_input == 1 && b_input == 1)
  next_state = SAB;
else if(cur_state == IDLE && a_input == 1)
  next_state = SA;
else if(cur_state == IDLE && b_input == 1)
  next_state = SB;
else if(cur_state == SA && b_input == 1)
  next_state = SAB;
else
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always begin
if (a && b) begin z = 1;
end else
if (b && !a) begin z = 1;
end else
if (!a && !b) begin z = 1;
end else
if (cur_state == IDLE && a && b) begin next_state = SAB;
else if (cur_state == IDLE && a) begin next_state = SA;
else if (cur_state == IDLE && b) begin next_state = SB;
else if (cur_state == SA && b) begin next_state = SAB;
else if (cur_state == SB && a) begin next_state = SAB;
else begin next_state = IDLE;
if (cur_state != next_state) begin
cur_state = next_state;
end else begin
z = 0;
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg cur_state;
reg a,b;
always @(posedge clk or posedge reset) begin
    if(reset) begin
        cur_state <= IDLE;
    end
    else begin
        switch(cur_state)
        case IDLE:
            if(a and b) begin
                cur_state <= SAB;
                //z <= 1;
            end
            else if(a) begin
                cur_state <= SA;
            end
            else if(b) begin
                cur_state <= SB;
            end
        end
    end
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] output_z;
always @ (posedge clk) begin
    if  (reset) begin
         output_z <= 0;
        cur_state <= IDLE;
    end else begin
        if ((a && b)) begin
            cur_state <= SAB;
            output_z <= 1;
        end else if (a) begin
            cur_state <= SA;
            output_z <= 1;
        end else if (b) begin
            cur_state <= SB;
            output_z <= 1;
        end else if (cur_state == IDLE) begin
            cur_state <= IDLE;
        end else begin
            if ((cur_state == SA && b && !a) || (cur_state == SB && a && !b)) begin
                cur_state <= SAB;
            end else if (cur_
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// All other cases, z is assigned zero.
always @(posedge clk)
begin
    if(reset) begin
        next_state <= IDLE;
    end
    else begin
        cur_state <= next_state;
        if(a) begin
            next_state <= SA;
        end
        else begin
            next_state <= SB;
        end
        if(b) begin
            next_state <= SAB;
        end
        else begin
            next_state <= IDLE;
        end
        z <= cur_state[0];
    end
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  if (cur_state == IDLE && a && b) next_state = SAB;
  if (cur_state == IDLE && a) next_state = SA;
  if (cur_state == IDLE && b) next_state = SB;
  if (cur_state == SA && b) next_state = SAB;
  if (cur_state == SB && a) next_state = SAB;
  if (cur_state == SAB && a && b) next_state = IDLE;
  if (next_state != cur_state) {
    if (cur_state == IDLE) {
      z <= 1;
    }
    if (next_state == IDLE) {
      z <= 1;
    }
    if (next_state == SA) {
      z <= 1
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [0:1] z = 1;
always @(posedge clk) begin
    if (reset) begin
        z <= 1;
        cur_state <= IDLE;
        next_state <= IDLE;
    end else begin
        cur_state <= next_state;
        next_state <= IDLE;
        case (cur_state)
            SB =>
                if ((a) && (b)) begin z <= 1; cur_state <= SAB; end
            SA =>
                if ((a)) begin z <= 1; cur_state <= SAB; end
            SAB =>
                if ((b)) begin z <= 1; cur_state <= SAB; end
            SAB =>
                if ((a) && (b)) begin z <= 1; cur_state <= SAB; end
            IDLE =>
                if ((a) && !(b
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset) begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else begin
    case (a)
      // When a is high, and b is high, state changes to SAB and z is high.
      if (b) begin
        cur_state <= SAB;
        z = 1;
      end
      else begin
        // When a is high, and b is low, state changes to SA and z is low.
        if (cur_state == IDLE) begin
          cur_state <= SA;
        end
        else begin
          // When a is low, and b is high, state changes to SB and z is low.
          if (b) begin
            cur_state <= SB;
          end
          else begin
            // When a is low, and b is low,
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset) begin
  if(~reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    next_state <= cur_state;
  end
end
assign z = ~(a | b);
reg [1:0] state_table[4][4] = {{{IDLE,SA,SB,SAB},{IDLE,SA,SB,SAB},{IDLE,SA,SB,SAB},{IDLE,SA,SB,SAB}},
                               {{IDLE,SA,SB,SAB},{SA,IDLE,SAB,SB},{SB,IDLE,SAB,SA},{SAB,IDLE,SAB,SB}},
                               {{IDLE,SA,SB,SAB},{IDLE,SA
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire a_b;
reg [2:0] z;
reg [1:0] cur_idle,cur_sa,cur_sb;
reg [1:0] next_idle,next_sa,next_sb;
reg [1:0] next_a_b;
always @(posedge clk) begin
    if(reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
        cur_idle <= 0;
        next_idle <= 0;
        cur_sa <= 0;
        next_sa <= 0;
        cur_sb <= 0;
        next_sb <= 0;
        a_b <= 0;
        z <= 0;
    end
    else begin
        case(cur_state)
            IDLE: begin
                if(a && b) begin
                    cur_
================================================================
