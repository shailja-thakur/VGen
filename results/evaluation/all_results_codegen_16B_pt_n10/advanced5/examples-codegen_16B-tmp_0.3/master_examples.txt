example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
    if (reset) begin
        cur_state = IDLE;
        next_state = IDLE;
        z <= 0;
    end
    else begin
        if (a && b) begin
            cur_state = SAB;
            next_state = SAB;
            z <= 1;
        end
        else if (a) begin
            cur_state = SA;
            next_state = SA;
            z <= 0;
        end
        else if (b) begin
            cur_state = SB;
            next_state = SB;
            z <= 0;
        end
        else begin
            cur_state = IDLE;
            next_state = IDLE;
            z <= 0;
        end
        next_state <= cur_state;

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if(reset) begin
    cur_state <= IDLE;
    z <= 0;
  end
  else begin
    if(a && b) begin
      cur_state <= SAB;
      z <= 1;
    end
    else if(a) begin
      cur_state <= SA;
    end
    else if(b) begin
      cur_state <= SB;
    end
  end
end

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if(reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end
  else begin
    if(a) begin
      if(b) begin
        cur_state <= SAB;
        next_state <= SAB;
        z <= 1;
      end
      else begin
        cur_state <= SA;
        next_state <= SA;
        z <= 1;
      end
    end
    else begin
      if(b) begin
        cur_state <= SB;
        next_state <= SB;
        z <= 1;
      end
      else begin
        cur_state <= IDLE;
        next_state <= IDLE;
        z <= 0;
      end
    end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk) begin
  if (reset) cur_state <= IDLE;
  else if (a) cur_state <= SA;
  else if (b) cur_state <= SB;
  else cur_state <= SAB;
  next_state <= cur_state;
  if (cur_state == SAB) z <= 1;
  else z <= 0;
  if (next_state == IDLE) begin
    cur_state <= IDLE;
  end else begin
    cur_state <= next_state;
  end
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    z <= 0;
  end
  else begin
    if (a && b) begin
      cur_state <= SAB;
      z <= 1;
    end
    else if (a) begin
      cur_state <= SA;
    end
    else if (b) begin
      cur_state <= SB;
    end
    else begin
      cur_state <= IDLE;
      z <= 0;
    end
  end
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
        z <= 0;
    end else begin
        if ((cur_state == IDLE) && (a == 1) && (b == 1)) begin
            cur_state <= SAB;
            next_state <= SAB;
            z <= 1;
        end else if ((cur_state == IDLE) && (a == 1)) begin
            cur_state <= SA;
            next_state <= SA;
            z <= 1;
        end else if ((cur_state == IDLE) && (b == 1)) begin
            cur_state <= SB;
            next_state <= SB;
            z <= 1;
        end else if ((cur_state == SA) && (
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    z <= 0;
  end
  else begin
    if (a && b) begin
      cur_state <= SAB;
      z <= 1;
    end
    else if (a) begin
      cur_state <= SA;
    end
    else if (b) begin
      cur_state <= SB;
    end
    next_state <= cur_state;
    if (next_state == cur_state) begin
      z <= 0;
    end
    else begin
      z <= 0;
      cur_state <= next_state;
    end
  end
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end
  else begin
    if (a && b) begin
      cur_state <= SAB;
      next_state <= SAB;
      z <= 1;
    end
    else if (a) begin
      cur_state <= SA;
      next_state <= SA;
      z <= 0;
    end
    else if (b) begin
      cur_state <= SB;
      next_state <= SB;
      z <= 0;
    end
    else begin
      cur_state <= IDLE;
      next_state <= IDLE;
      z <= 0;
    end
    next_state <= cur_state;

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk or posedge reset) begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end
    else begin
        case (cur_state)
            IDLE: begin
                if (a and b) begin
                    cur_state <= SAB;
                    next_state <= SAB;
                end
                else begin
                    next_state <= IDLE;
                end
            end
            SA: begin
                if (b) begin
                    cur_state <= SAB;
                    next_state <= SAB;
                end
                else begin
                    next_state <= IDLE;
                end
            end
            SB: begin
                if (a) begin
                    cur_state <= SAB;
                    next_state <=
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk, posedge reset) begin
  if (reset) begin
    cur_state <= IDLE;
  end else begin
    next_state <= cur_state;
    if (a && b) begin
      next_state <= SAB;
    end else if (a) begin
      next_state <= SA;
    end else if (b) begin
      next_state <= SB;
    end else begin
      next_state <= IDLE;
    end
    cur_state <= next_state;
    z <= cur_state[0];
  end
end

================================================================
