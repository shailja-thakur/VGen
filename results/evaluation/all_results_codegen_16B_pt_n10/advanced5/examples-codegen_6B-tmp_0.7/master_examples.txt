example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE)
    begin
        if (a == 1 && b == 1) then
            next_state = SAB;
        else if (a == 1) then
            next_state = SA;
        else if (b == 1) then
            next_state = SB;
        else next_state = IDLE;
        cur_state <- next_state;
    end
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
next_state <=
    (( ((cur_state == IDLE) && (a == 1) && (b == 1)) != (z == 1) )
    ^ ((cur_state == IDLE) && (a == 1) ))
  ? (SAB)
  : ((((cur_state == IDLE) && (b == 1)) != (z == 1) )
    ^ ((cur_state == IDLE) && (a == 1)))
  ? (SB)
  : ((((cur_state == SA) && (b == 1)) != (z == 1) )
    ^ ((cur_state == SB) && (a == 1)) )
  ? (SAB)
  : (IDLE);

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
{
  if (reset) {
    next_state = IDLE;
    cur_state = IDLE;
  } else {
    next_state = cur_state;
    if (next_state == IDLE) {
      if (a) {
        next_state = SA;
      } else {
        if (b) {
          next_state = SB;
        }
      }
    } else {
      if (next_state == SA) {
        if (b) {
          next_state = SAB;
        }
      } else {
        if (next_state == SB) {
          if (a) {
            next_state = SAB;
          }
        }
      }
    }
    // output z is high when next_state is SAB
    if (
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
if (next_state == IDLE) begin
cur_state == SA;
next_state == SAB;
end
else if (next_state == SA) begin
cur_state == SB;
next_state == SAB;
end
else if (next_state == SB) begin
cur_state == SA;
next_state == SAB;
end
else if (next_state == SAB) begin
cur_state == IDLE;
next_state == IDLE;
end
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  begin
    if (next_state == 0) {
	next_state = 1;
	cur_state = IDLE;
    }
    else {
	if (cur_state == SA and a) {
	    next_state = SAB;
 	    cur_state = SA;
 	    z = 1;
 	}
	if (cur_state == SB and b) {
	    next_state = SAB;
 	    cur_state = SB;
 	    z = 1;
 	}
	if (cur_state == SAB) {
	    next_state = IDLE;
 	    cur_state = IDLE;
 	    z = 1;
 	}
    }
  end
end

// The following is
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    next_state = cur_state;
    if (a == 1 || b == 1) {
        next_state = SA;
    }
    else if (b == 1) {
        next_state = SB;
    }
    else if (a == 1) {
        next_state = SAB;
    }
    else if (cur_state == IDLE) {
        next_state = IDLE;
    }
    cur_state <= next_state;
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
// When cur_state is IDLE, next_state is IDLE
// When SA, SB, or SAB, next_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
if(next_state != cur_state )
{
  next_state = cur_state;
  z = 1;
}
else
  z = 0;
end

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
z <= (
a && b && (cur_state==SAB)
or (cur_state==IDLE) && a
or (cur_state==IDLE) && b
or (cur_state==SA) && b
or (cur_state==SB) && a
or (cur_state==SAB)
);



================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is SA or SB
// cur_state is IDLE when z is 0
always @(posedge clk)
{
  if (a == 1 and b == 1) next_state = SAB;
  else if (cur_state == IDLE and a == 1) next_state = SA;
  else if (cur_state == IDLE and b == 1) next_state = SB;
  else next_state = cur_state;
  cur_state = next_state;
  z = ((cur_state == SAB) and (next_state == SAB)) ? 1 : 0;
}

================================================================
