example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset) begin
    case(cur_state)
        case(IDLE)
            if (a && b) begin
                cur_state <= SAB;
            end
            else begin
                cur_state <= IDLE;
            end
        case(SA)
            if (b) begin
                cur_state <= SAB;
            end
            else begin
                cur_state <= IDLE;
            end
        case(SB)
            if (a) begin
                cur_state <= SAB;
            end
            else begin
                cur_state <= IDLE;
            end
        case(SAB)
            end
        endcase
    end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk, posedge reset) begin
if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
end else begin
    if (a and b) begin
        next_state <= SAB;
    end else begin
        if (a) begin
            next_state <= SA;
        end else begin
            next_state <= SB;
        end
    end
    if ( !a and !b ) begin
        next_state <= IDLE;
    end
    if ( !a and b ) begin
        next_state <= SB;
    end else begin
        if ( !b and a ) begin
            next_state <= SA;
        end else begin
            next_state <= IDLE;
        end
    end
    if (a and !b)
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk or posedge reset) begin
if (reset) begin
cur_state <= IDLE;
next_state <= IDLE;
end
else begin
if (a and b) begin
cur_state <= SAB;
next_state <= SAB;
z <= 1;
end
else if (a) begin
if (b) begin
cur_state <= SB;
next_state <= SB;
end
else begin
cur_state <= SA;
next_state <= SA;
end
else begin
if (b) begin
cur_state <= SAB;
next_state <= SAB;
end
else begin
cur_state <= IDLE;
next_state <= IDLE;
end
end
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk or posedge reset) begin
if (reset == 1) begin
cur_state <= IDLE;
z <= 0;
end
else begin
// clk is high, reset is low
if (a == 1 && b == 1) begin
cur_state <= SAB;
end
// clk is low, reset is low
if (a == 1) begin
next_state <= SA;
end
if (b == 1) begin
next_state <= SB;
end
end
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset == 1) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else begin
    if (a == 1 && b == 1) begin
      cur_state <= SAB;
      next_state <= SAB;
    end
    else if (a == 1) begin
      cur_state <= SA;
      next_state <= SA;
    end
    else if (b == 1) begin
      cur_state <= SB;
      next_state <= SB;
    end
    else begin
      cur_state <= IDLE;
      next_state <= IDLE;
    end
    z <= cur_state;
  end
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
if (reset) begin
cur_state <= IDLE;
next_state <= IDLE;
z <= 0;
end
else begin
if (a && b) begin
cur_state <= SAB;
next_state <= SAB;
z <= 1;
end
else if (a) begin
cur_state <= SA;
next_state <= SA;
end
else if (b) begin
cur_state <= SB;
next_state <= SB;
end
else begin
cur_state <= IDLE;
next_state <= IDLE;
end
end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk) begin
if (reset) begin
cur_state <= IDLE;
next_state <= IDLE;
z <= 0;
end
else begin
switch (cur_state)
case IDLE:
if (a) begin
next_state <= SA;
end
else if (b) begin
next_state <= SB;
end
else if (a && b) begin
next_state <= SAB;
end
end
end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset) begin
  if (clk or reset) begin
    cur_state <= IDLE;
  end else begin
    next_state <= IDLE;
    switch (cur_state)
      case IDLE:
        next_state <= SA;
        if (a and b) begin
          next_state <= SAB;
        end
        next_state <= SB;
        if (a) begin
          next_state <= SA;
        end
        next_state <= SB;
        if (b) begin
          next_state <= SB;
        end
        next_state <= SAB;
        if (a and b) begin
          next_state <= IDLE;
        end
        next_state <= IDLE;
        if (a) begin
          next_state <= IDLE;
        end

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if(reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end
    else begin
        case(cur_state)
            IDLE: begin
                if(a) begin
                    next_state <= SA;
                end
                else begin
                    next_state <= SB;
                end
            end
            SA: begin
                if(b) begin
                    next_state <= SAB;
                end
                else begin
                    next_state <= IDLE;
                end
            end
            SB: begin
                if(a) begin
                    next_state <= SAB;
                end
                else begin
                    next_state <= IDLE;
                end
            end
            SAB: begin
                next_state <= IDLE;
            end
        end

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z,y;
always @(posedge clk) begin
  if (reset == 1) begin
    cur_state <= IDLE;
    y <= 0;
    z <= 0;
  end
  else begin
    if (a == 1 && b == 1) begin
      next_state <= SAB;
      y <= 1;
      z <= 1;
    end
    else if (a == 1) begin
      next_state <= SA;
      y <= 1;
      z <= 0;
    end
    else if (b == 1) begin
      next_state <= SB;
      y <= 0;
      z <= 1;
    end
    else begin
      next_state <= IDLE;
      y <= 0;
      z <= 0;
    end
    if (next_state != cur_state)
================================================================
