example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
  if (reset)
    next_state = IDLE;
  else if (present_state == IDLE)
    next_state = IDLE;
  else if (present_state == S1)
    next_state = S10;
  else if (present_state == S10)
    next_state = S101;
  else if (present_state == S101)
    next_state = IDLE;
  else
    next_state = IDLE;

always @(posedge clk)
  if (reset)
    present_state = IDLE;
  else if (x == 1)
    present_state = S1;
  else if (x == 0)
    present_state = S10;
  else
    present_state = S101;

always @(posedge
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        z <= 1;
        present_state <= IDLE;
        next_state <= IDLE;
    }
    else
    {
        if (x == 1)
        {
            if (present_state == IDLE)
            {
                next_state <= S1;
            }
            else if (present_state == S1)
            {
                next_state <= S10;
            }
            else if (present_state == S10)
            {
                next_state <= S101;
            }
            else if (present_state == S101)
            {
                next_state <= IDLE;
            }
        }
        else
        {
            if (present_state == IDLE)
            {
                next_
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (!reset) present_state <= IDLE; 
    else present_state <= IDLE; 
    
    if (x == 1) {
        if (present_state == IDLE) {
            if (clk == 1) {
                next_state <= S1;
            }
            else next_state <= IDLE;
        }
        else if (present_state == S1) {
            if (clk == 1) {
                next_state <= S10;
            }
            else next_state <= IDLE;
        }
        else if (present_state == S10) {
            if (clk == 1) {
                next_state <= S101;
            }
            else next_state <= IDLE;
        }
        else next_state <= IDLE;
    
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x) {
      if (present_state == IDLE) next_state = S1;
      else if (present_state == S1) next_state = S10;
      else if (present_state == S10) next_state = S101;
      else next_state = IDLE;
    }
    else {
      if (present_state == IDLE) next_state = IDLE;
      else if (present_state == S1) next_state = IDLE;
      else if (present_state == S10) next_state = IDLE;
      else if (present_state == S101) next_state = IDLE;
    }
    present_state = next_state;

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (present_state == IDLE)
    {
        if (x == 1)
        {
            if (reset == 0)
            {
                next_state = S1;
            }
            else
            {
                next_state = IDLE;
            }
        }
        else
        {
            if (reset == 0)
            {
                next_state = S10;
            }
            else
            {
                next_state = IDLE;
            }
        }
    }
    else
    {
        if (x == 1)
        {
            if (reset == 0)
            {
                next_state = S101;
            }
            else
            {
                next_state = IDLE;
            }
        }
        else
        {
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    z = 1;
    next_state = IDLE;
    present_state = IDLE;
end

always @(*)
begin
    if (clk == 1)
        next_state = present_state;
    else
        next_state = next_state;
end

always @(*)
begin
    if (reset == 1)
        present_state = IDLE;
    else
        present_state = next_state;
end

always @(*)
begin
    if (x == 1)
        present_state = S1;
    else
        present_state = IDLE;
end

always @(*)
begin
    if (x == 0)
        present_state = S10;
    else
        present_state = IDLE;
end

always @(*)
begin
    if
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset == 1'b1)
        next_state <= IDLE;
    else if (x == 1'b1)
        next_state <= S1;
    else if (x == 1'b0)
        next_state <= IDLE;
    else
        next_state <= IDLE;
    
    if (next_state == S1)
        present_state <= S1;
    else if (next_state == S10)
        present_state <= S10;
    else if (next_state == S101)
        present_state <= S101;
    else
        present_state <= IDLE;


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// This is a finite state machine that recognizes the sequence 100 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S100=3;
// output signal z is asserted to 1 when present_state is S100 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
  next_state = IDLE;
  if (x == 1) present_state = S1;
  if (x == 0) present_state = S10;
  if (x == 1 && reset == 1) present_state = IDLE;
  if (x == 0 && reset == 1) present_state = IDLE;
  if (x == 1 && reset == 0) present_state = S101;
  if (x == 0 && reset == 0) present_state = IDLE;
end

always @(posedge clk)
  if(reset == 1)
  {
    next_state = IDLE;
    present_state = IDLE;
  }
  else
  {
    if (x == 1) present_state = S1;
    if (x == 0) present_state = S10;
    
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (x == 1) 
        present_state <= S1;
    else 
        present_state <= IDLE;
    next_state <= present_state;
end

always @(posedge clk) begin
    if (x == 0) 
        next_state <= IDLE;
    else 
        next_state <= present_state;
end

always @(posedge clk) begin
    if (reset == 1) 
        next_state <= IDLE;
    else 
        next_state <= present_state;
end

always @(posedge clk) begin
    if (reset == 1)
        z <= 1;
    else
        z <= 0;
end

initial begin
    next_state <= IDLE;
    present_state <= IDLE
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (reset == 0)
        present_state <= IDLE;
    else
        present_state <= IDLE;
end

always @(posedge clk) begin
    if (x == 1)
        next_state <= S1;
    else if (x == 0)
        next_state <= S10;
    else
        next_state <= IDLE;
end

always @(posedge clk) begin
    if (x == 0)
        next_state <= S1;
    else if (x == 1)
        next_state <= S10;
    else
        next_state <= IDLE;
end

always @(posedge clk) begin
    if (reset == 1)
        next_state <= IDLE;
    else
        next_state <= S101
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
        z <= 0;
    else if (x == 1)
        z <= 1;
    else
        z <= 0;

    if (x == 1)
        present_state <= S1;
    else if (x == 0)
        present_state <= IDLE;
    else
        present_state <= IDLE;

    if (present_state == IDLE)
        next_state <= S1;
    else if (x == 0)
        next_state <= S10;
    else if (x == 1)
        next_state <= S101;
    else
        next_state <= IDLE;
end
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
//
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin 
  #5:rst = 1; 
  #6:rst = 0; 
  #7:rst = 0; 
  #8:rst = 0; 
  #9:rst = 0; 
  #10:rst = 0; 
  #11:rst = 0; 
  #12:rst = 0; 
  #13:rst = 0; 
  #14:rst = 0; 
  #15:rst = 0; 
  #16:rst = 0; 
  #17:rst = 0; 
  #18:rst = 0; 
  #19:rst = 0; 
  #20:rst = 0; 
  #21:rst = 0; 
  #22:rst = 0
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
{
    if (reset == 1)
    {
        present_state = IDLE;
        next_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
        {
            next_state = IDLE;
        }
        else
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset == 1)
{
    next_state = IDLE;
    present_state = IDLE;
}
else if (x == 1)
{
    if (present_state == IDLE)
    {
        next_state = S1;
    }
    else if (present_state == S1)
    {
        next_state = S10;
    }
    else if (present_state == S10)
    {
        next_state = S101;
    }
    else
    {
    }
}
else
{
    if (present_state == IDLE)
    {
        next_state = IDLE;
    }
    else if (present_state == S1)
    {
        next_state = IDLE;
    }
    
================================================================
