example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
initial begin
    $display(q);
    clr_watched_memory(q);
end

// If the slowena input is high, make a slow toggle.
// From here on, slowena is high and once the slow toggles are reset then slowena is 0.
// If the clk trigger is available then slowwnard is driven high for the duration of the slow brown pill.
initial begin
    $display(...);
    $display(slowena);      // print "slow enabled"
    if ((slowena = slowena and slow_brown) = slow_brown) then begin
        slow_brown = 1;      // slow brown pill is enabled
        if (clk < 20 ns)    // when clk is fast
            slowwnard = 1;      // fast brown pill is enabled too
        else
        begin
            slow_brown = 0;    // slow brown
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge q) begin
    if (reset or posedge q)
        q = NOT q;  // start a decade is easy when starting in 00
    else if (ena and q < 9)
        q++;
end

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    q[els-1] = (slowena==1?0:q[els-1]+1);
    if (reset==1)
        q = {0,0,0};
end
// Input from low to high:
// Update the output q if the low inputs are all equal.
always @(slowena==1 and
       slowqpp==slowqpl and
       slowqp1==slowqpl and
       slowqp11==slowqpl) begin
      q[els-1] = q[els-1-3];
end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(rxclk)
begin
    // The function flip_slow() below is called inside the @(...) block in the if below.
    // The @(...) block is a separate assembly block if very slow.
    // Code for testing this block must precede code for profiling or predicting the
    // slow path. This is achieved by "OR slowena, clk" in flip_slow().
    if (slowena) {
        // Only increment p if the ena input is high and the clock is not the terminal value.
        // This is only necessary because the chips are size_t based, not boolean.
        reg p = (clk ? -1 : (slowena & (q<9)) ? ++q : 0);
        signal clk_active;
        // This instruction is about 3 instructions/cycle.
        // Assumption is that clock is very slow; then it
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    void cycler_handler(
        output reg [3:0] q,     // The output, Q-bus.  Incremented on the clock (qclusive OR is applied).
        input rslt,         // High when the quarter-composite last digit (5d) of the previous cycle has changed.
        input slowena,      // Whether to slowen the zero drop-out of the counter.  True to slowen on the high.
        input rst);         // Whether to reset the counter.  True to reset on the low (a breaker towards zero).

// During the phantom push of digit zero, we add 1 to the output q, and
// feed back the counter over the slowena on the reset rising edge.
always @(~clkne    // clock ne
       posedge [5:0] q
       / rstne     
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

wire isn_high;

always @(posedge clk)
    if (reset)
        q = 0;
    else if (slowena)
        q<=9;
    else 
        q<=qi;
    
// Operating on the positive edge of the slowena input:
// Test if the slowena input is high and q is not 9.
// The slowenabit should be 1 at q, 4, or 5. In the event of a transistrant value, 
// adjust the slowenabit to match the value on the fastest edge.
// http://www.openocd.org/docs/4.4/catalogs/fig1616-2.html
// Some include a HOLDP in the divider and in the dataport does that.
// A QAN is implemented in this catalognum, as a base class.


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
signal enc;

always @always clk <= clk + 1;
always @always enc <= (slowena) ? q + 1 : q;

always @always reset = ~slowena & (slowena | ~clk);
enable @{clk} <= slowena & slowena;


// On the sampling clock:
// Clear the encoder result registers next cycle.
always @{q} <= q & q[e5: e4];
always @{q} <= q & q[e2: e1];
always @{q} <= q & q[e0: e1];

// At the sampling clock, increment the number counter by enc and cc.
if (slowena)
  queue #(2'000'000, 5, 2) q_output;

  if (@{clk} && @{enca} && @{res1} &&
================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(*)
void ram_counter_gen_slow(
    clk             clk_i,
    slowena         slowain, 
    reset           rst_i, 
    output reg [3:0] q_o)
{
  if (rst_i(0)) { reset_reg = 1; }
  else {
    if (slowena(0)) {
    	reset_reg = 0; 
    	q_o(4) = 9;
    	if (clk_i(clk)) { sum_clock_slow((q_o(2) + 1) & 3ul, q_o(3)); }
    }
  }
}

// On the positive edge of the clock:
// increment the output q when the ena input becomes high, and set the output q to 0 if the clock goes high again
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if ($reset neq 0) q[9] <= 0;  // That is, when reset is active and ena is low, output q should be reset.

    if (slowena != 1) {
        if ($rafneq == 1 && $en >= 1) q[9]++; // $en and slow clk disable sync
        if ($upmwdneq == 1 && $upmwd_count < 30) q[9]++; // Clip never decreases
        if ($upmwd_limit_clrneq == 1) q[9]++; // Ignore CLR if low sensitivity of on-time decision
        if ($upm0 == 1 && $t < 1968) q[9]++; // Ignore a real signal mid24h start time
    }

// On the negative edge of the clock:
    if ($rafneq ==
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Note: the logic is inverted for `slowena` relative 0.
initial begin
    wreg q;
    enable_global_reset ? rd_en : rd_sil;
        if(!reset) I_EN && rd_enaw && rd_en != rd_enaw && en_write ? ena : release (no_en_n ? en_fl : en_write) en_write;
        Q ? q = q + '1';
        clk ? rq_write : release(ror(no_clk || rq_write) ? clk ? clk : Q : Q);
end

// On the negative edge of the clock:
// decrement the output q, if the ena input is high and q is not 9.
// if reset is low, reset the output q to 9 and full reset the clock signal, otherwise, reset
================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
sc_time on_q = count_slow //neg clock
  (   clk,
     slowena,
     1'b0,
     q[3:0] ? q[0] : _r    
  );

// on the overflow is the 1'b0 signal is changed not to determine whether
// or not q takes the overflow value instead. if slowena is high, the 
// q is changed in cd62 to 9 if q and slowena do not lead to overflow.
sc_time on_ovf = count_slow
  (   clk,
     slowena,
     0'b1,
     q == 0'b1 or q == 0'b9
  );

// on the slow >= the divider
sc_time on_slow = count_slow
  (   clk,
     slowena,
     1'b0,
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Note: This system runs much faster if CSEIZE is enabled.
always @(posedge clk,
       slowena & reset)
  count.write(slowena ? ((--q) < 9) : q.read());

// On the negative edge of the clock:
// if the ena input is high, increment the output q9.
always @(clk,reset)
  count.write(slowena);				   //Call when slowena is high!


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(slowena) begin
    if (reset && !q[POS])
        q[POS] = 0;
    else if (ena && q[NEG] != 9)
        q[POS] = q[NEG] + 1;
end

// On the negated edge of the clock:
// increment the output q if the ena input is high.
always_comb @(clk, slowena, reset)
    if (ena)
        q[POS] = q[NEG] + 1;
end
);

clock clk, slowena, reset, q [3:0];

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(clk, slowena, reset) begin
    if(slowena =='0')
        q = '0';
    else if((clk and slowena) or reset)
        if((slowena and binary) and q < 9)
            q = q + 1;
end

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(*input=slowena, clk=slowEN)
begin : main
    if (slowena&&reset) then
        q<3:0> = 0;
    else if (slowena && q<1:0> == 9) then;
        q<3:0> = 9;
    end else
end


#snippet(07_agilent_oddeven_counter)
snippet(08)
@always @(clk=slowEN, selA==selB,selC,selD)
$hex({0x10    |selA==0| clockA||slowena, \
      0xc0    |selB==1| clockB||slowena, \
	  0xe0    |selC==2| clockC||slowena, \
	  0x110    |selD==3|
================================================================
