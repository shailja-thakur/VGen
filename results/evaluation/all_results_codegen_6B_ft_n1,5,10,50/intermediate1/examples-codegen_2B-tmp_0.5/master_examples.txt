example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @( posedge clk )
{
  sum = 0;
  if ( a == 0 && b == 0 )
  {
    cout = 0;
  }
  else if ( a == 0 )
  {
    sum = b;
    cout = 1;
  }
  else if ( b == 0 )
  {
    sum = a;
    cout = 1;
  }
  else
  {
    sum = a + b;
    cout = 0;
  }
}

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b, cout, sum;

always @(posedge clk)
    if (a == 0)
    {
        if (b == 0)
        {
            cout = 0;
            sum = 0;
        }
        else
        {
            cout = 0;
            sum = 1;
        }
    }
    else
    {
        if (b == 0)
        {
            cout = 1;
            sum = 1;
        }
        else
        {
            sum = a + b;
            cout = sum >> 1;
        }
    }


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-out.
module half_sub( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts three bits and produces a difference and carry-out.
module full_sub( 
input a, b, c,
output cout, diff );

// This is a half multiplier. A half multiplier multiplies two bits and produces a product and carry-out.
module half_mult( 
input a, b,
output cout, prod );

// This is a full multiplier. A full multipl
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two words and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-in.
module half_subtractor( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts two words and produces a difference and carry-in.
module full_subtractor( 
input a, b,
output cout, diff );

// This is a one-bit addition. A one-bit addition adds one bit and produces a sum and carry-out.
module one_bit_adder( 
input a, b,
output cout, sum );

// This is a one-bit subtract
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void half_adder_process(
input a, b,
output cout, sum );

void half_adder_process(
input a, b,
output cout, sum )
{
    sum = a + b;
    cout = (a + b) >> 1;
}

module sum_carry_adder(
input a, b,
output cout, sum );

void sum_carry_adder_process(
input a, b,
output cout, sum )
{
    sum = a + b;
    cout = (a + b) >> 1;
}

module sum_carry_adder_2(
input a, b,
output cout, sum );

void sum_carry_adder_2_process(
input a, b,
output cout, sum )
{
    sum = a + b;
    cout = (
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-in.
module half_sub( 
input a, b,
output cout, sum );

// This is a half multiplier. A half multiplier multiplies two bits and produces a sum and carry-out.
module half_mul( 
input a, b,
output cout, sum );

// This is a half divisor. A half divisor divides two bits and produces a sum and carry-out.
module half_div( 
input a, b,
output cout, sum );

// This is a half modulus. A half modulus divides two bits and produces a sum and carry-out.
module half_mod( 
input a, b,
output cout, sum );

// This is a half shift left. A half shift left shifts the lower
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a carry-out.
module carry_out( 
input a,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-in.
module half_sub( 
input a, b,
output cout, sum );

// This is a half bit-wise AND. A half bit-wise AND is a bit-wise logical AND.
module half_and( 
input a, b,
output cout, sum );

// This is a half bit-wise OR. A half bit-wise OR is a bit-wise logical OR.
module half_or( 
input a, b,
output cout, sum );

// This is a half bit-wise XOR. A half bit-wise XOR is a bit-wise logical XOR.
module half_xor( 
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-in.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtracter. A half subtracter subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtracter. A full subtracter subtracts two bits and produces a sum and carry-in.
module full_subtractor( 
input a, b,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor_xor( 
input a, b,
output cout, sum, carry );


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b,
output cout, sum;

input carry_in;

input carry_out;

assign cout = a;
assign sum = a;

assign carry_out = carry_in;

always @(posedge clk) begin
    if (clk == 0)
    {
        if (a == 0)
        {
            if (b == 0)
            {
                cout = 0;
                sum = 0;
                carry_out = 1;
            }
            else
            {
                cout = 1;
                sum = b;
                carry_out = 0;
            }
        }
        else
        {
            if (b == 0)
            {
                cout = a;
                sum = 0;
                carry_out = 1;
            }
            else
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-in.
module full_adder( 
input a, b,
output cout, sum );


// The adder to be optimized is the half adder.
// The output is a half adder output.
module half_adder_opt( 
input a, b,
output cout, sum );

// The adder to be optimized is the full adder.
// The output is a full adder output.
module full_adder_opt( 
input a, b,
output cout, sum );

// The carry out is a half adder output.
module half_adder_carry( 
input a, b,
output cout, sum );

// The carry in is a full adder output.
module full_adder_carry( 
input a, b
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-in.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two bits and produces a sum and carry-in.
module full_subtractor( 
input a, b,
output cout, sum );

// This is a half multiplier. A half multiplier multiplies two bits and produces a sum and carry-out.
module half_multiplier( 
input a, b,
output cout, sum );

// This is a full multiplier. A full multiplier multiplies
================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_in, b_in, cin;
output cout_out, sum_out;

// This is the sum and carry-out of the half-adder.
module sum_carry_out(
input a_in, b_in, cin,
output sum_out, cout_out);

// This is the input of the sum_carry_out module.
input sum_in;

// The output of the sum_carry_out module.
output sum_out;

// The input of the sum_carry_out module.
input sum_in;

// The output of the sum_carry_out module.
output sum_carry_out_out;

// The input of the sum_carry_out module.
input sum_carry_out_in;

// The output of the sum_carry_out module.
output sum_
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds a bit and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts a bit from a sum and produces a carry-out.
module half_subtractor( 
input a, b,
output cout, carry );

// This is a full subtractor. A full subtractor subtracts a bit from a sum and produces a carry-out.
module full_subtractor( 
input a, b,
output cout, carry );

// This is a half multiplier. A half multiplier multiplies a bit and produces a sum and carry-out.
module half_multiplier( 
input a, b,
output cout, sum );

// This is a full multiplier. A
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_in, b_in, cout_in;

input a_in_b_in_cout : a_in & b_in & cout_in;

output a_out, b_out, cout_out;

input a_in_b_out_cout : a_in_b_in_cout & a_out & b_out & cout_out;

output a_out_b_out_cout : a_out_b_out_cout & a_in_b_out_cout;

output a_out_b_out_cout_sum : a_out_b_out_cout_sum & a_in_b_out_cout & sum;

input a_out_b_out_cout_sum_carry_out : a_out_b_out_c
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two words and produces a sum.
module full_adder( 
input a, b,
input carry,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-in.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two words and produces a sum.
module full_subtractor( 
input a, b,
input carry,
output cout, sum );

// This is a half multiply. A half multiply multiplies two bits and produces a sum and carry-out.
module half_multiply( 
input a, b,
output cout, sum );

// This is a full multiply. A full multiply multipl
================================================================
