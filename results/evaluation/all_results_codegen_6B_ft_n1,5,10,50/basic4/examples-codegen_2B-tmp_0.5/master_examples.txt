example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
// Where the inputs are inputs from the multiplexer's inputs.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
// Where the inputs are inputs from the multiplexer's inputs.

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out. 
// When sel=3, assign b to out. 
assign out[4:0] = 
  (a[3] ? b[3] : a[2]) + 
  (a[1] ? b[1] : a[0]) + 
  (a[0] ? b[0] : a[1]) + 
  (a[2] ? b[2] : a[3]) + 
  (a[3] ? b[3] : a[3]);

================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out.

// UML: Fig. 1.8.1
// State machine for the multiplexer.
module mux_sm(
input [4:0] a, b,
input sel,
output [4:0] out );

// State machine for the 2-to-1 multiplexer.
module mux_sm_2to1(
input [4:0] a, b,
input sel,
output [4:0] out );

// State machine for the 1-to-2 multiplexer.
module mux_sm_1to2(
input [4:0] a, b,
input sel,
output [4:0] out );

// State machine for the 1-to-1 multiplexer.
module mux_sm_1to
================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] in;

assign out = in[sel];


================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

wire [4:0] w;

// Each of the inputs is a multiplexed with a number
// from 0 to 3.

always @(*)
begin
    if (sel == 0) w = a;
    if (sel == 1) w = b;
    w = w + 1;
end


================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Multiplexer for a 4-bit input.
module multiplexer( 
input [4:0] a, 
output [4:0] out );
// Assign a to out.

// Multiplexer for a 4-bit input.
module multiplexer2( 
input [4:0] a, 
output [4:0] out );
// Assign a to out.

// Multiplexer for a 4-bit input.
module multiplexer3( 
input [4:0] a, 
output [4:0] out );
// Assign a to out.

// Multiplexer for a 4-bit input.
module multiplexer4( 
input [4:0] a, 
output [4:0] out );
// Assign a to out.

// Multiplexer for a 4
================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a and b to out. 

// Design a
================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign 0 to out. 
// When sel=3, assign 1 to out. 
// When sel=4, assign 2 to out. 
// When sel=5, assign 3 to out. 
// When sel=6, assign 4 to out. 
// When sel=7, assign 5 to out. 
// When sel=8, assign 6 to out. 
// When sel=9, assign 7 to out. 
// When sel=10, assign 8 to out. 
// When sel=11, assign 9 to out. 
// When sel=12, assign 10 to out. 
// When sel=13, assign 11 to out. 
// When sel=14, assign 12 to out. 
// When sel=15, assign 13 to out. 
// When
================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Design a 4-to-1 multiplexer.
module mux4(
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When sel=3, assign d to out.

// Design a 4-to-2 multiplexer.
module mux4_2(
input [4:0] a, b, c, d,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign c to out. 
// When
================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design an 8-to-1 multiplexer.
module mux8( 
input [8:0] a, b,
input sel,
output [8:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design an 8-to-2 multiplexer.
module mux8( 
input [8:0] a, b,
input sel,
output [8:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

// Design an 8-to-4 multiplexer.
module mux8( 
input [8:0] a, b,
input sel,
output [8:0] out );
// When sel
================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

always @(posedge clk)
  if (sel == 0)
    out = a;
  else
    out = b;


================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out.
// When sel=3, assign b to out.

always @(*)
begin
    if (sel == 0)
        out[0] = a[0];
    else if (sel == 1)
        out[1] = a[1];
    else if (sel == 2)
        out[2] = a[2];
    else if (sel == 3)
        out[3] = a[3];
end

// Design a 2-to-2 multiplexer.
module mux2( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign a to out
================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Create a multiplexer that assigns inputs to outputs.
mux a_mux, b_mux, sel_mux;

initial begin
    a_mux = 0;
    b_mux = 0;
    sel_mux = 0;
end

// Create a multiplexer that assigns inputs to outputs.
mux a_mux, b_mux, sel_mux;

initial begin
    a_mux = 0;
    b_mux = 1;
    sel_mux = 0;
end

// Create a multiplexer that assigns inputs to outputs.
mux a_mux, b_mux, sel_mux;

initial begin
    a_mux = 1;
    b_mux = 0;
    sel_mux = 1;
end


================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign 0 to out.
// When sel=3, assign 1 to out.

reg [3:0] v;

always @( posedge clk )
  if (sel == 0)
    v = a;
  else if (sel == 1)
    v = b;
  else if (sel == 2)
    v = 0;
  else if (sel == 3)
    v = 1;
  else
    v = 0;
  else
    v = 0;


================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out.

// Design a 2-to-1 multiplexer using only XOR and AND gates.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out.

// Design a 2-to-1 multiplexer using only XOR and AND gates.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to out.
================================================================
