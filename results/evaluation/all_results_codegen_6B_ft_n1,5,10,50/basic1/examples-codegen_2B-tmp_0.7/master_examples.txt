example-0: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// Design main function

main function main: loop
  loop
    output[0] <= input;
    output[1] <= input;
    output[2] <= input;
    output[3] <= input;
    output[4] <= input;
    output[5] <= input;
    output[6] <= input;
    output[7] <= input;
    output[8] <= input;
    output[9] <= input;
    output[10] <= input;
    output[11] <= input;
    output[12] <= input;
    output[13] <= input;
    output[14] <= input;
    output[15] <= input;
    output[16] <= input;
    output[17] <= input;
    output[18] <= input;
    output[19] <= input;
    output[20
================================================================
example-1: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign out, in
// assign in to out
// wire_assign
================================================================
example-2: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

#include <iostream>
#include <algorithm>
#include <iterator>
#include <stdlib.h>
#include <vector>

std::vector<int> v;

int main(int argc, char * argv[])
{
    v.resize(3);
    v[0] = 0;
    v[1] = 1;
    v[2] = 2;

    std::cout << "size: " << v.size() << std::endl;
    std::cout << "capacity: " << v.capacity() << std::endl;
    std::cout << "capacity: " << v.max_size() << std::endl;
    
    return 0;
}

================================================================
example-3: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// if the input value is greater than the output value,
// assign the input value as the output value and
// assign the input value to the output value

// Design a module that outputs the sum of the input values
module sum_adder( input[5:0] in, output sum );
// assign sum to the sum of the input values
// if the inputs are all 0, then output 0
// if the inputs are all 1, then output 1

// Design a module that outputs the output value of the
// sum of the input values if the sum is greater than the
// input value, otherwise output 0

// Design a module that outputs the output value of the
// sum of the input values if the sum is greater than the
// input value, otherwise output 0

// Design a module that outputs the sum of the input values
// if the sum is greater than the input value,
// otherwise output 0
================================================================
example-4: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

var in, out;

// create the module and wire it up
var module = new wire_assign( in, out );

// call the module in a loop
module.run();

// the output should be equal to the input
//console.log( out );
//console.log( in );

================================================================
example-5: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// Note: this can be done with only one if statement, but this works better for me
function wire_assign( input in, output out ) {
    out = in;
}

# The following is a simple assignment
var x = 3;
var y = 2;

// Assign x to y
var an output that is equal to y
wire_assign( x, y );

// Assign y to x
var an output that is equal to x
wire_assign( y, x );

# Assign x to itself
var an output that is equal to x
wire_assign( x, x );

// Assign y to itself
var an output that is equal to y
wire_assign( y, y );

// Assign a to a
var an output that is equal to a
wire_assign( a, a );

//
================================================================
example-6: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
//
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INPUTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INPUTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUTS

Autonomous::Autonomous() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	requires(Robot::driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

================================================================
example-7: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
wire_assign

// Design a module that outputs the carry
module carry_output( input in, output out );
// output out to the carry
wire_assign

// Design a module that passes the carry on a wire
module pass_carry_on_wire( input in, output out );
// output out to the carry on a wire
wire_assign

// Design a module that has a carry in a input
module proc_carry( input in, output out );
// output out to the carry in a input
wire_assign

// Design a module that has a carry out in a output
module proc_carry_out( input in, output out );
// output out to the carry out in a output
wire_assign

// Design a module that has a carry in an output
module proc_carry_in( input in, output out );
// output out to the carry
================================================================
example-8: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// Design a module that takes inputs from wire_assign and performs
// some operation on the input
module wire_enable( input in, output out );
// enable out to in

// Design a module that takes inputs from wire_enable and performs
// some operation on the input
module wire_disassign( input in, output out );
// disassign out to in

// Design a module that takes inputs from wire_disassign and performs
// some operation on the input
module wire_disable( input in, output out );
// disable out to in

// Design a module that takes inputs from wire_disable and performs
// some operation on the input
module wire_reset( input in, output out );
// reset out to in

// Design a module that takes inputs from wire_reset and performs
// some operation on the input
module wire_advance( input in, output out
================================================================
example-9: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

wire wire_assign( input in, output out, int i )
{
   out.write( i );
};

wire wire_assign( input in, output out, int i1, int i2 )
{
   out.write( i1 );
   out.write( i2 );
};


================================================================
example-10: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// Write your code here

int main() {
    //Please input the values of in, out
    //and make sure it's correct.
    //In the above example, out must be equal to in.
    //You can use any data type for in and out.
    int in, out;
    cin >> in >> out;
    cout << "out = " << in << endl;
    return 0;
}
================================================================
example-11: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// assign in to out
// assign out to out

// Design a module which prints the input
module wire_print( input in );
// print data

// Design a module which defines a function
module wire_function( input in, output out );
// define function

// Design a module which performs an arithmetic operation
module wire_arithmetic( input in1, input in2, output out );
// arithmetic

// Design a module which uses the output of the
// arithmetic module to calculate a product
module wire_product( input in1, input in2, output out );
// product

// Design a module which uses the output of the
// arithmetic module to calculate an average
module wire_average( input in, output out );
// average

// Design a module that processes the output of two
// modules that implement wire_print
module wire_process( input in1, input in2
================================================================
example-12: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
module assign( input in, output out );

// design a module that delays a signal by a certain amount of time
module delay_delay( input clk, input [2:0] in, output out );

// design a module that delays a signal by a certain amount of time
module delay( input clk, input [2:0] in, output out );

// design a module that delays a signal by a certain amount of time
module delay_delay_a( input clk, input [2:0] in, output out );

// design a module that delays a signal by a certain amount of time
module delay_delay_b( input clk, input [2:0] in, output out );

// design a module that delays a signal by a certain amount of time
module delay_delay_c( input clk, input [2:0] in, output out );


================================================================
example-13: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in

// create a module that returns the sum of in and out
module sum( input in, output out );
// sum out with add

// a module to multiply in and out
module multiply( input in, output out );
// multiply out with multiply

// a module to multiply in and out
module multiply( input in, output out );
// multiply out with multiply

// create a module that returns the sum of in and out
module sum( input in, output out );
// sum out with add

// create a module that returns the difference of in and out
module difference( input in, output out );
// difference out with subtract

// create a module that returns the product of in and out
module product( input in, output out );
// product out with multiply

// create a module that returns the quotient of in and out
module quotient( input in, output out );
// quot
================================================================
example-14: 
// Design a module that assigns the output to the input
module wire_assign( input in, output out );
// assign out to in
// wire out is a wire
// input is a terminal
// output is a wire

// Design a module that assigns the output to the input
module wire_assign_2( input in, output out );
// assign out to in
// wire out is a wire
// input is a terminal
// output is a port

// Design a module that assigns the output to the input
module wire_assign_3( input in, output out );
// assign out to in
// wire out is a wire
// input is a terminal
// output is a port

// Design a module that assigns the output to the input
module wire_assign_4( input in, output out );
// assign out to in
// wire out is a wire
// input is a terminal
// output is a port

// Design a module that assigns the output to the input
module wire_assign_5( input
================================================================
