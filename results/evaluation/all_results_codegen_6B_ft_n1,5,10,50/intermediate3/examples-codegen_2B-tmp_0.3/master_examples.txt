example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_next = 0;
    r_reg = 1;
    feedback_value = 0;
    q = 0;
    r_reg[4:0] = r_reg[4:0] | (r_reg[3:0] ^ r_reg[4:0]) & 0x3;
    r_reg[4:0] = r_reg[4:0] | (r_reg[3:0] ^ r_reg[4:0]) & 0x3;
    r_reg[4:0] = r_reg[4:0] | (r_reg[3:0] ^ r_reg[4:0]) & 0x3;
    r_reg[4:0] = r_reg[4:0] | (r_reg[3:0] ^ r_reg[4:0])
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
  if (reset)
    r_reg = 1;
  else
    r_reg = r_next;
  r_next = r_reg << 4;
  feedback_value = r_reg ^ r_next;
  r_next = r_reg << 5;
  q = r_reg ^ r_next;

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
initial begin
    r_reg = 0b00000101;
    r_next = r_reg;
    feedback_value = (reset == 1) ? 0b11111111 : 0b00000101;
    q = r_reg;
    r_reg = r_reg xor (r_reg << 4) xor (r_reg >> 2);
    r_next = r_reg;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 1;
    else
        r_reg = r_next;
    r_next = r_reg xor (r_reg >> 2) xor (r_reg >> 4);
    q = r_reg;

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

always @(posedge clk)
    r_reg = r_next;
    r_next = r_reg xor (r_reg >> 2) xor (r_reg >> 4);
    feedback_value = r_reg xor (r_reg >> 3);
    q = r_reg;

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 1'b1;
    else
        r_reg = r_next;
    feedback_value = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    r_next = r_reg >> 1;
    q = r_reg;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 0b11111111;
    else
        r_reg = r_reg << 1;
    r_next = r_reg >> 4;
    r_reg = r_reg << 1;
    r_next = r_next ^ (r_reg >> 3);
    r_reg = r_reg << 1;
    r_next = r_next ^ (r_reg >> 3);
    r_reg = r_reg << 1;
    r_next = r_next ^ (r_reg >> 3);
    r_reg = r_reg << 1;
    r_next = r_next ^ (r_reg >> 3);
    r_reg = r_reg << 1;
    r_next = r_next ^ (r_reg >> 3);
    r
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk) begin
    r_reg <= (r_reg << 1) | (r_reg >> 3) | (r_reg >> 2);
    r_next <= r_reg;
    feedback_value <= (r_reg & 1);
    q <= r_next;
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
    if (reset) r_reg = 1;
    else
    {
        r_reg = r_next;
        r_next = r_reg ^ (r_reg >> 2);
        feedback_value = (r_reg >> 2) ^ (r_reg >> 4);
        r_reg = r_reg >> 4;
    }
    q = r_reg;
end
);

// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_reg << 1) | (r_reg >> 3) ^ (r_reg >> 2) ^ (r_reg >> 1);
    r_next <= r_reg;
    feedback_value <= r_reg;
    q <= r_next;

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 0b11111111;
    else
        r_reg = r_next;
    r_next = r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    q = r_reg;

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_reg << 1) | (r_next & 1);
    r_next <= r_reg;
    feedback_value <= r_reg;
    q <= r_reg;

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    r_reg <= (r_next = r_reg << 1) ^ (r_next & (r_reg >> 4));
    feedback_value <= r_reg;
    q <= feedback_value ^ r_reg;

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 0b0000;
    else
    {
        r_reg = r_reg << 1;
        r_reg = r_reg | (r_reg >> 3);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg = r_reg | (r_reg >> 1);
        r_reg
================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
    if (reset)
        r_reg = 0;
    else
        r_reg = r_next;
    r_next = r_reg ^ (r_reg >> 2) ^ (r_reg >> 3) ^ (r_reg >> 4);
    feedback_value = r_reg >> 2;
    q = r_reg;

================================================================
