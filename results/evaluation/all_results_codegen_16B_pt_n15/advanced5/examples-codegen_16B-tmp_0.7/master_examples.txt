example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk)
begin
	cur_state <= cur_state;
	if(cur_state==IDLE)
	{
		if(a && b)
		{
			cur_state <= SAB;
			z <= 1;
		}
		else if(a)
		{
			next_state <= SA;
		}
		else if(b)
		{
			next_state <= SB;
		}
	}
	else if(cur_state==SA)
	{
		if(b)
		{
			cur_state <= SAB;
			z <= 1;
		}
		else if(a)
		{
			next_state <= SA;
		}
	}
	else if(cur_state==SB)
	{
		if(a)
		{
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if(reset)
    begin
        cur_state <= IDLE;
    end
    else begin
        cur_state <= IDLE;
        next_state <= IDLE;
        if(a && b) begin
            next_state <= SAB;
        end
        if(a) begin
            next_state <= SA;
        end
        if(b) begin
            next_state <= SB;
        end
        if(cur_state == SA) begin
            if(b) begin
                next_state <= SAB;
            end
            if(a) begin
                next_state <= IDLE;
            end
        end
        if(cur_state == SB) begin
            if(a) begin
                next_state <= SAB;
            end
            if(b) begin

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk) begin
  if (reset) cur_state <= IDLE;
  else if (a && b) cur_state <= SAB;
  else if (a) cur_state <= SA;
  else if (b) cur_state <= SB;
  else if (cur_state == IDLE) begin
    next_state <= SA;
    z <= 0;
    // $display(z, cur_state);
    // $display(cur_state, next_state);
  end
  else if (cur_state == SA) begin
    next_state <= SB;
    z <= 0;
    // $display(z, cur_state);
    // $display(cur_state, next_state);
  end
  else if (cur_state == SB) begin
    next_state <= SAB;
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk)
begin
    if(reset)
    begin
        z <= 0;
        cur_state <= IDLE;
        next_state <= IDLE;
    end
    else
    begin
        if(cur_state == IDLE and a and b) begin
            z <= 1;
            cur_state <= SAB;
            next_state <= SAB;
        end
        else if(cur_state == IDLE and a) begin
            z <= 1;
            cur_state <= SA;
            next_state <= SA;
        end
        else if(cur_state == IDLE and b) begin
            z <= 1;
            cur_state <= SB;
            next_state <= SB;
        end
        else if(cur_state == SA and b) begin
            
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
void main()
{
	z = 0;
	next_state = cur_state;
	cur_state = IDLE;
	if (a)
		cur_state = SA;
	if (b)
		cur_state = SB;
	if (cur_state == SAB)
	{
		z = 1;
		next_state = IDLE;
	}
	// This is an FSM
	if (cur_state == IDLE && a && b)
		next_state = SAB;
	if (cur_state == IDLE && a)
		next_state = SA;
	if (cur_state == IDLE && b)
		next_state = SB;
	if (cur_state == SA)
		next_state = SAB;
	if (cur_state == SB)
		next
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [3:0] out_state;
reg [3:0] new_state;
always @(posedge clk or posedge reset) begin
assign cur_state = IDLE;
case(cur_state)
	IDLE: begin
		out_state <= IDLE;
		if (a == 1 && b == 1) begin
			new_state <= SAB;
		end
	end
	SA: begin
		out_state <= SA;
		if (a == 1) begin
			new_state <= SA;
		end
		else begin
			new_state <= IDLE;
		end
	end
	SB: begin
		out_state <= SB;
		if (b == 1) begin
			new_state <= SB;
		end
		else begin
			new_state <= IDLE;
		end
	end

================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [2:0] state;
always @* begin
	if(a==1 && b==1) begin
		cur_state = SAB;
	end
	else if(a==1 && b==0) begin
		cur_state = SA;
	end
	else if(a==0 && b==1) begin
		cur_state = SB;
	end
	else begin
		cur_state = IDLE;
	end
	next_state = cur_state;
	if(reset) begin
		next_state = IDLE;
	end
	else if(clk==1 && state==0) begin
		next_state = SB;
	end
	else if(clk==1 && state==1) begin
		next_state = SA;
	end
	else if(clk==1 && state==2) begin
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
assign z = cur_state[0];
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
  end
  else begin
    if (a) begin
      if (b) begin
        cur_state <= SAB;
        next_state <= SAB;
      end else begin
        cur_state <= SA;
        next_state <= SA;
      end
    end else begin
      if (b) begin
        cur_state <= SB;
        next_state <= SB;
      end else begin
        cur_state <= IDLE;
        next_state <= IDLE;
      end
    end
    next_state <= next_state;
    cur_state <= cur_state;
  end
end
"""

# The FSM source code
fsm_source = """
module
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] state;
always @(posedge clk or posedge reset) begin
  if(reset)
    cur_state <= IDLE;
  else begin
    if((a and b))
      cur_state <= SAB;
    else if(a)
      cur_state <= SA;
    else if(b)
      cur_state <= SB;
    else
      cur_state <= IDLE;
    end
  end
  next_state <= cur_state;
  switch(cur_state)
  case IDLE: case SA: case SB:
    z <= 0;
    break;
  case SAB:
    z <= 1;
    break;
  end
  cur_state <= next_state;
end

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @* begin
    if (a and b and clk) begin
        // Reset z to zero.
        z <= 0;
        // If cur_state is IDLE, and both a and b are high, change state to SAB.
        if (cur_state == IDLE and a and b) begin
            cur_state <= SAB;
            next_state <= SAB;
            z <= 1;
        end
        // If cur_state is IDLE, and a is high, change state to SA.
        else if (cur_state == IDLE and a) begin
            cur_state <= SA;
            next_state <= SA;
        end
        // If cur_state is IDLE, and b is high, change state to SB.
        else if (cur_state == IDLE and b) begin
            
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk, posedge reset) begin
  if (reset) begin
    cur_state := IDLE;
    next_state := IDLE;
  end
  else begin
    if cur_state == IDLE and a and b) begin
      cur_state := SAB;
      next_state := SAB;
    end
    else if cur_state == IDLE and a) begin
      cur_state := SA;
      next_state := SA;
    end
    else if cur_state == IDLE and b) begin
      cur_state := SB;
      next_state := SB;
    end
    else if cur_state == SA and b) begin
      cur_state := SAB;
      next_state := SAB;
    end
    else if cur_state == SB and a) begin
      cur_state :=
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned one when a and b are both high in any order
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state = IDLE;
    z = 0;
  end else begin
    next_state = cur_state;
    if (a && b) begin
      next_state = SAB;
      z = 1;
    end else if (a) begin
      next_state = SA;
    end else if (b) begin
      next_state = SB;
    end
    if (cur_state != next_state) begin
      cur_state = next_state;
    end
  end
end

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always {
  if(a && b) z = 1;
  next_state = cur_state;
  if(a) next_state = next_state == IDLE ? SA : next_state;
  if(b) next_state = next_state == IDLE ? SB : next_state;
  if(a && b) next_state = SAB;
  if(cur_state == IDLE) begin
    cur_state = next_state;
  end
  else begin
    if(next_state == IDLE) begin
      cur_state = next_state;
    end
  end
}

always @(posedge clk)
begin
  if(reset) begin
    cur_state = IDLE;
    z = 0;
  end
  else begin
    z = z ||
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always begin
    if (reset && !cur_state[0]) begin
        cur_state <= IDLE;
        next_state <= IDLE;
        z <= 1;
    end else begin
        if (a && b) begin
            cur_state <= SAB;
            next_state <= SAB;
            z <= 1;
        end else if (a && !b) begin
            cur_state <= SA;
            next_state <= SA;
            z <= 1;
        end else if (b && !a) begin
            cur_state <= SB;
            next_state <= SB;
            z <= 1;
        end else if (a && b && cur_state[0] == IDLE) begin
            cur_state <= SAB;
            next_state <= SAB;
            z <= 1;
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg z;
always @(posedge clk) begin
   if (reset) begin
      cur_state = IDLE;
      z = 1;
   end
end
always @(posedge clk or posedge reset) begin
   if ((reset) and (cur_state == IDLE)) begin
      next_state = IDLE;
   end else if ((cur_state == IDLE) && (a == 1 && b == 1)) begin
      next_state = SA;
   end else if ((cur_state == IDLE) && (a == 1)) begin
      next_state = SA;
   end else if ((cur_state == IDLE) && (b == 1)) begin
      next_state = SB;
   end else if ((cur_state == SA) && (b == 1)) begin
      next_state = SAB;
   end else if
================================================================
