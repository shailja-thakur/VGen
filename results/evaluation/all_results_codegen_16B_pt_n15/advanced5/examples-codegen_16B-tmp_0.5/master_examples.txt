example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset) begin
    if(reset)
        cur_state <= IDLE;
    else if(a)
        cur_state <= SA;
    else if(b)
        cur_state <= SB;
    else
        cur_state <= SAB;
    next_state <= cur_state;
    z <= ~(a || b) && cur_state == SAB;
end

================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always begin
	if (reset == 0 && clk == 1) begin
		cur_state <= IDLE;
		next_state <= IDLE;
		z <= 0;
	end
	else begin
		cur_state <= IDLE;
		z <= 0;
	end
end
always begin
	if (reset == 0 && clk == 1) begin
		next_state <= IDLE;
	end
	else begin
		next_state <= IDLE;
	end
end
always begin
	if (reset == 0 && clk == 1) begin
		if (cur_state == IDLE) begin
			if (a && b) begin
				next_state <= SAB;
			end
			else if (a) begin
				next_state <= SA;
			end
			else if (b) begin
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  if(reset)
    cur_state <= IDLE;
  else
    if(a)
      cur_state <= SA;
    else
      if(b)
        cur_state <= SB;
      else
        cur_state <= IDLE;
end
// This is the logic that gets executed when the cur_state changes
reg [1:0] next_state;
always @(posedge clk) begin
  if(cur_state == IDLE && a && b)
    next_state <= SAB;
  else
    if(cur_state == IDLE)
      if(a)
        next_state <= SA;
      else
        next_state <= SB;
    else
      if(cur_state == SA)
        if(b)
          next_state <= SAB;

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [3:0] z;
always @(posedge clk) begin
  if(reset)
    next_state <= IDLE;
  else begin
    case(cur_state)
      IDLE: begin
        if (a && b) begin
          next_state <= SAB;
        end
        else begin
          next_state <= IDLE;
        end
      end
      SA: begin
        if (a && !b) begin
          next_state <= SAB;
        end
        else begin
          next_state <= IDLE;
        end
      end
      SB: begin
        if (!a && b) begin
          next_state <= SAB;
        end
        else begin
          next_state <= IDLE;
        end
      end
      SAB: begin
        next_state <= IDLE;
      end
================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
if (reset) begin
cur_state <= IDLE;
next_state <= IDLE;
z <= 0;
end
else begin
if ((cur_state == IDLE) && (a && b)) begin
next_state <= SAB;
end
if ((cur_state == IDLE) && (a)) begin
next_state <= SA;
end
if ((cur_state == IDLE) && (b)) begin
next_state <= SB;
end
if ((cur_state == SA) && (b)) begin
next_state <= SAB;
end
if ((cur_state == SB) && (a)) begin
next_state <= SAB;
end
if ((cur_state == SAB) && (a && b)) begin
next_state <= IDLE;
end
================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [2:0] z;
always @(posedge clk) begin
cur_state <= next_state;
// This section is for the transition of states
if ((cur_state == SA) && (a == 1))
    next_state <= SAB;
if ((cur_state == SA) && (b == 1))
    next_state <= SB;
if ((cur_state == SB) && (a == 1))
    next_state <= SAB;
if ((cur_state == SB) && (b == 1))
    next_state <= SA;
if ((cur_state == SAB) && (a == 1))
    next_state <= SB;
if ((cur_state == SAB) && (b == 1))
    next_state <= SA;
// This section is for the final state assignment
if ((cur_state == IDLE) &&
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [2:0] z;
reg [1:0] a,b;
always @(posedge clk) begin
  if(reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    a <= 0;
    b <= 0;
    z <= 0;
  end
  else begin
    case(cur_state)
      IDLE: begin
        if(a and b) begin
          next_state <= SAB;
          z <= 1;
        end
        else begin
          next_state <= IDLE;
          z <= 0;
        end
      end
      SA: begin
        if(b) begin
          next_state <= SAB;
          z <= 1;
        end
        else begin
          next_state <= SA;
          z <= 0;
        end
      end

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end
  else begin
    if (cur_state == IDLE) begin
      if (a && b) begin
        cur_state <= SAB;
        next_state <= SAB;
      end
      else if (a) begin
        cur_state <= SA;
        next_state <= SA;
      end
      else if (b) begin
        cur_state <= SB;
        next_state <= SB;
      end
    else begin
      if (a && b) begin
        cur_state <= SAB;
        next_state <= SAB;
      end
      else if (a) begin
        cur_state <=
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
    if(reset) begin
        next_state <= IDLE;
        z <= 0;
    end
    else begin
        next_state <= cur_state;
        z <= 0;
    end
end
// The state machine
always @(posedge clk) begin
    case(cur_state)
    IDLE: begin
        if(a) begin
            cur_state <= SA;
        end else begin
            cur_state <= SB;
        end
    end
    SA: begin
        if(a) begin
            cur_state <= SAB;
        end else begin
            cur_state <= IDLE;
        end
    end
    SB: begin
        if(b) begin
            cur_state <= SAB;
        end else begin
            
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
  // The FSM is in IDLE state until the reset signal is asserted
  if (reset == 1) begin
    cur_state <= IDLE;
  end
  // The FSM is in IDLE state until both a and b are asserted
  if ((a == 1) && (b == 1)) begin
    cur_state <= IDLE;
  end
  // The FSM is in IDLE state until a is asserted and b is high
  if ((a == 1) && (b == 0)) begin
    cur_state <= IDLE;
  end
  // The FSM is in IDLE state until b is asserted and a is high
  if ((a == 0) && (b == 1)) begin
    cur_state <= IDLE;
  end
  // The FSM is in IDLE state until a and b are
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk) begin
  if(a && b) begin
    cur_state <= SAB;
  end
  else if(a) begin
    cur_state <= SA;
  end
  else if(b) begin
    cur_state <= SB;
  end
  else begin
    cur_state <= IDLE;
  end
  if(cur_state != next_state) begin
    next_state <= cur_state;
  end
end

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] sa,sb,ab;
always @(posedge clk or posedge reset) begin
	case(cur_state)
	case(IDLE)
		if(a && b) begin
			cur_state <= SAB;
			sa <= 1;
			sb <= 1;
			ab <= 1;
		end
		else if(a) begin
			cur_state <= SA;
			sa <= 1;
			sb <= 0;
			ab <= 0;
		end
		else if(b) begin
			cur_state <= SB;
			sa <= 0;
			sb <= 1;
			ab <= 1;
		end
		else begin
			cur_state <= IDLE;
			sa <= 0;
			sb <= 0;
			ab <= 0;
		end
	case(SA)
		if(b)
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
    if (reset) begin
        cur_state <= IDLE;
        next_state <= IDLE;
    end
    else begin
        next_state <= cur_state;
        if (cur_state == IDLE) begin
            if (a) begin
                next_state <= SA;
            end
            else begin
                if (b) begin
                    next_state <= SB;
                end
                else begin
                    next_state <= IDLE;
                end
            end
        end
        else if (cur_state == SA) begin
            if (b) begin
                next_state <= SAB;
            end
            else begin
                next_state <= IDLE;
            end
        end
        else if (cur_state == SB) begin
            if (
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or posedge reset)
begin
    if (reset)
        cur_state <= IDLE;
    else if (a)
        cur_state <= SA;
    else if (b)
        cur_state <= SB;
    else if (cur_state == IDLE)
        cur_state <= SAB;
    else if (cur_state == SA)
        cur_state <= SAB;
    else if (cur_state == SB)
        cur_state <= SAB;
    else if (cur_state == SAB)
        cur_state <= IDLE;
    next_state <= cur_state;
    z <= next_state;
end

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] z;
always @(posedge clk) begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
    z <= 0;
  end
  else begin
    if (a && b) begin
      cur_state <= SAB;
      next_state <= SAB;
      z <= 1;
    end
    else begin
      if (a) begin
        cur_state <= SA;
        next_state <= SAB;
        z <= 1;
      end
      else begin
        if (b) begin
          cur_state <= SB;
          next_state <= SAB;
          z <= 1;
        end
        else begin
          cur_state <= IDLE;
          next_state <= IDLE;
          z <= 0;
        end
      end
================================================================
