example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is designed to add two numbers with the same sign and to detect the overflow of the result. 
// The output s is signed and the output overflow is a binary signal that is 1 if the most significant bit of s is 1 and 0 otherwise. 
// The signed adder is designed to add two numbers with the same sign and to detect the overflow of the result. 
// The output s is signed and the output overflow is a binary signal that is 1 if the most significant bit of s is 1 and 0 otherwise. 
// The signed adder is designed to add two numbers with the same sign and to detect the overflow of the result. 
// The output s is signed and the output overflow is a binary signal that is 1 if the most significant bit of s is 1 and 0 otherwise. 
// The signed adder is designed to add two numbers with the same sign and to detect the overflow of the result. 
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a 4-stage pipeline, with the inputs a and b fed into the first stage. 
// The output of the first stage is fed into the second stage. 
// The output of the second stage is fed into the third stage. 
// The output of the third stage is fed into the fourth stage. 
// The output of the fourth stage is the sum of the inputs a and b, and the output of the fourth stage is the signed overflow of a and b. 
// The output of the fourth stage is also the output of the signed adder. 


// The first stage adds the most significant bit of the inputs a and b to the most significant bit of s. 
// The second stage adds the second most significant bit of the inputs a and b to the second most significant bit of s. 
// The third stage adds the third most significant bit of the inputs a and b
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
{
    // a = a + b
    s = a + b;

    // overflow = a > 0xFF
    // overflow = b > 0xFF
    // overflow = s > 0xFF
    // overflow = a > 0xFF and b > 0xFF and s > 0xFF
    overflow = ((a > 0xFF) && (b > 0xFF) && (s > 0xFF));
}

================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
{
    s = a + b;
    overflow = a >> 7 & b >> 7 & s >> 7;
}

signed_adder(a, b, s, overflow)
{
    s = a + b;
    overflow = a >> 7 & b >> 7 & s >> 7;
}

signed_adder(a, b, s, overflow)
{
    s = a + b;
    overflow = a >> 7 & b >> 7 & s >> 7;
}

signed_adder(a, b, s, overflow)
{
    s = a + b;
    overflow = a >> 7 & b >> 7 & s >> 7;
}

signed_adder(a, b, s, overflow)
{
    s = a + b;
    overflow =
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The adder is instantiated with the inputs a and b, and the outputs s and overflow. 
signed_adder signed_adder_inst(.a(a), .b(b), .s(s), .overflow(overflow));

// The adder is instantiated with the inputs a and b, and the outputs s and overflow. 
signed_adder signed_adder_inst(.a(a), .b(b), .s(s), .overflow(overflow));

// The adder is instantiated with the inputs a and b, and the outputs s and overflow. 
signed_adder signed_adder_inst(.a(a), .b(b), .s(s), .overflow(overflow));

// The adder is instantiated with the inputs a and b, and the outputs s and overflow. 
signed_adder signed_adder_inst
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The adder is implemented as a 4-bit adder with the carry bit being stored in the most significant bit of s. 
// The carry bit is set to 1 if the most significant bit of a and b are low and the most significant bit of s is high.
// The carry bit is set to 0 if the most significant bit of a and b are high and the most significant bit of s is low. 
// The carry bit is set to 1 if the most significant bit of a and b are low and the most significant bit of s is low. 
// The carry bit is set to 0 if the most significant bit of a and b are high and the most significant bit of s is high. 
// The carry bit is set to 1 if the most significant bit of a and b are high and the most significant bit of s is low. 
// The carry bit is set to 0 if the most significant bit of a and
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder signed_adder_inst; 

signed_adder_inst:
    signed_adder_inst.s = a + b; 
    signed_adder_inst.overflow = ((a[7] == 0) && (b[7] == 0) && (signed_adder_inst.s[7] == 1)) ||
                                 ((a[7] == 1) && (b[7] == 1) && (signed_adder_inst.s[7] == 0));

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

//-----------------------------------------------------------------------------------------------------------------------

// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder:
    assign s[7:0] = a[7:0] + b[7:0];
    assign overflow = ((a[7] == 0) && (b[7] == 0) && (s[7] == 0)) || ((a[7] == 1) && (b[7] == 1) && (s[7] == 1)) || ((a[7] == 0) && (b[7] == 1) && (s[7] == 1));

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The adder is implemented as a 4-stage pipeline. 
// The inputs a and b are first converted to unsigned integers. 
// The unsigned integers are added and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer. 
// The signed integer is added to the output s and the result is converted to a signed integer
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Example:
// a = 0b10101010
// b = 0b10101010
// s = 0b11010101
// overflow = 1

signed_adder(a, b, s, overflow);

// a = 0b10101010
// b = 0b10101010
// s = 0b11010101
// overflow = 1

// Example:
// a = 0b10101010
// b = 0b10101010
// s = 0b11010101
// overflow = 0

signed_adder(a, b, s, overflow);

// a = 0b10101010
// b = 0b10101010
// s = 0b11010101
// overflow = 0

// Example:
// a = 0b10101010
// b = 0b10101010
// s = 0b
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following test checks that the adder works correctly.

// Input a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// Output a = 0x00, b = 0x00, s = 0x00, overflow = 0x00

assert(s == 0x00);
assert(overflow == 0x00);

// Input a = 0x00, b = 0x01, s = 0x00, overflow = 0x00
// Output a = 0x00, b = 0x01, s = 0x01, overflow = 0x01

assert(s == 0x01);
assert(overflow == 0x01);

// Input a = 0x00, b = 0xFF, s = 0x00, overflow = 0x00
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow);

// The following test vectors are used to test the adder:

// a = 0x00, b = 0x00, s = 0x00, overflow = 0x00
// a = 0x01, b = 0x00, s = 0x01, overflow = 0x00
// a = 0x00, b = 0x01, s = 0x01, overflow = 0x01
// a = 0x01, b = 0x01, s = 0x00, overflow = 0x01
// a = 0x80, b = 0x00, s = 0x80, overflow = 0x00
// a = 0x80, b = 0x01, s = 0x81, overflow = 0x01
// a = 0x7F, b = 0xFF, s = 0x7
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// Assume a = 0x12345678 and b = 0x98765432
// Output: 0x12346789
// Overflow: 1

// Assume a = 0x12345678 and b = 0x98765432
// Output: 0x12346789
// Overflow: 1

// Assume a = 0x12345678 and b = 0x98765432
// Output: 0x12346789
// Overflow: 1

// Assume a = 0x12345678 and b = 0x98765432
// Output: 0x12346789
// Overflow: 1

// Assume a = 0x12345678 and b = 0x98765432
// Output: 0x12346789
// Overflow: 1

// Assume a =
================================================================
