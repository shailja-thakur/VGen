example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The adder is now ready to be driven by a clock. 
// The clock is driven by a clock generator that is fed by a rising edge of the clock input. 
// The clock generator is a simple counter that counts from 0 to 3. 
// The clock generator is fed by the rising edge of the clock input and is reset to 0 on a falling edge of the clock input. 


// Design a decoder that decodes a stream of bits b[0:7] into a stream of bits s[0:7]. 
// The decoder is a simple binary decoder. 
// It decodes the input bit b[7] into the output bit s[7]. 
// It decodes the input bit b[6] into the output bit s[6]. 
// It decodes the input bit b[5] into
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow);

//   // Example: a = 15, b = 5, s = 10, overflow = 1
//
//   // Example: a = 15, b = -5, s = 10, overflow = 1
//
//   // Example: a = 0b11111111, b = 0b11111111, s = 0b11111110, overflow = 0
//
//   // Example: a = 0b11010101, b = 0b11010101, s = 0b11010110, overflow = 1
//
//   // Example: a = 0b11010101, b = 0b11010101, s = 0b11010111, overflow = 1
//
//   // Example: a = 0b11010101, b = 0b11010101, s = 0b11
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
{
  s = a + b;
  if(s[7] == 0 && a[7] == 0 && b[7] == 0)
  {
    overflow = 0;
  }
  else
  {
    if(s[7] == 0 && a[7] == 0 && b[7] == 1)
    {
      overflow = 1;
    }
    else
    {
      if(s[7] == 1 && a[7] == 1 && b[7] == 0)
      {
        overflow = 1;
      }
      else
      {
        if(s[7] == 1 && a[7] == 1 && b[7] == 1)
        {
          overflow = 1;
        }
        else
        {

================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// a = a + b;
// assign s = a;
// assign overflow = a[7:0] == 0 && b[7:0] == 0 && a[7] == b[7];
// assign overflow = a[7:0] == 0 && b[7:0] == 0 && a[7] == b[7] && s[7] == 1;
// assign overflow = a[7:0] == 0 && b[7:0] == 1 && a[7] == b[7];
// assign overflow = a[7:0] == 0 && b[7:0] == 1 && a[7] == b[7] && s[7] == 0;
// assign overflow = a[7:0] == 1 && b[7:0] == 0 && a[7] == b[7];
// assign overflow = a[7:
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a,b,s,overflow)
{
  // assume that a and b are the same length
  int i;
  int carry = 0;

  for(i=0; i<8; i++)
  {
    // do the addition
    int sum = a[i] + b[i] + carry;
    // check for a signed overflow
    if(sum >= 128)
    {
      carry = 1;
      sum = sum - 256;
    }
    else
    {
      carry = 0;
    }
    s[i] = sum;
  }
  // return the overflow
  return carry;
}




================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
{
  s = a + b;
  overflow = (a & b) | (a | b) >> (8 - 1);
}

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);

// The following code is the implementation of the signed_adder module. 
// It is provided as a template for you to use as a starting point when implementing your own modules. 

signed_adder(a, b, s, overflow) {
    s[0] = a[0] + b[0];
    s[1] = a[1] + b[1];
    s[2] = a[2] + b[2];
    s[3] = a[3] + b[3];
    s[4] = a[4] + b[4];
    s[5] = a[5] + b[5];
    s[6] = a[6] + b[6];
    overflow = ((a[7] & b[7]) == 0) && ((
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder:
    assign s[7:0] = a[7:0] + b[7:0];
    assign overflow = ((a[7] == 0) && (b[7] == 0)) && ((s[7] == 0) || (s[7] == 1));
    assign overflow = ((a[7] == 0) || (b[7] == 0)) && ((s[7] == 1) && (s[6] == 1));
    assign overflow = ((a[7] == 1) || (b[7] == 1)) && ((s[7] == 1) && (s[6] == 0));
    assign overflow = ((a[7] == 1) && (b[7] == 0)) || ((s[7] == 1) && (s[6] == 1));
    assign overflow = ((
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder signed_adder_inst;

signed_adder_inst(input a,
    input b,
    output s,
    output overflow
);


// Assign the result of the addition to the output register s

assign s = a + b; 


// Assign the overflow of the addition to the output register overflow

assign overflow = (a_sig ^ b_sig) | (s_sig ^ a_sig ^ b_sig); 


//
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



signed_adder(a,b,s,overflow);


================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
{
    s[7:0] = a[7:0] + b[7:0];
    overflow = ((a[7:0] & b[7:0]) > 0) && ((s[7:0] & 0x80) > 0);
}

// Assume the inputs are valid
signed_adder(a, b, s, overflow)
{
    s[7:0] = a[7:0] + b[7:0];
    overflow = ((a[7:0] & b[7:0]) > 0);
}

signed_adder(a, b, s, overflow)
{
    s[7:0] = a[7:0] + b[7:0];
    overflow = ((a[7:0] & b[
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow);


// The signed adder is implemented as follows:

// s = a + b
// if a > b, then s = a - b
// if a < b, then s = a + b
// if a == b, then s = a
// if a and b have the same sign, then overflow = 0
// if a and b have opposite sign, then overflow = 1


// Implement a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(a, b, s, overflow)
    // for all i = 1 to 7
    // s[i] = a[i] + b[i]
    // overflow[i] = a[i] + b[i] > 255
    //            = ( a[i] + b[i] ) > 255
    //            = ( a[i] + b[i] ) > a[i]
    //            = ( b[i] > a[i] )
    //            = ( a[i] > b[i] )
    //            = ( b[i] > a[i] )
    //            = ( a[i] > b[i] )
    //            = ( a[i] > b[i] )
    //            = ( a[i] > b[i] )
    //            = (
================================================================
