example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
  if (reset) q <= 0;
  else if (slowena) q <= q + 1;
end

// On the positive edge of the ena input:
// if the value of q is 9, reset q to 0. 
// Otherwise, only increment q if the clk input is high.

always @(posedge ena) begin
  if (q == 9) q <= 0;
  else if (clk) q <= q + 1;
end

// Set the output to the value of q, reset q to 0.

always @(posedge clk) begin
  if (reset) q <= 0;
  else q <= q;
  reset <= 0;
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q != 9) q <= q + 1;

// On the positive edge of the slowena signal:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if q is less than 9.

always @(negedge slowena or posedge reset)
    if (reset) q <= 0;
    else if (q < 9) q <= q + 1;

// When the slowena input changes from low to high: reset the output q to 0.

always @(posedge slowena) begin
    if (slowena) q <= 0;
end

// When the clk input changes from low to high: drive the output q down by 1.

always @(neged
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if reset is high and ena is high, reset the output q to 0. 
// Otherwise, only decrement the output q if q is 0.

always @(posedge clk or posedge reset)
    if (reset) q <= 0;
    else if (slowena and q < 9) q <= q + 1;
    else if (not slowena and q == 9) q <= 9;
    else if (not reset and ena) q <= q - 1;
    else if (reset and ena) q <= 0;


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset)
        q <= 0;
    else if (slowena)
        q <= q + 1;
end

always @(posedge clk or negedge slowena) begin
    if (reset)
        q <= 0;
    else if (clk)
        q <= q + 1;
end

// On the positive edge of the ena input:

always @(posedge ena or negedge ena) begin
    if (ena)
        q <= q + 1;
end

// On the negative edge of the ena input:

always @(posedge ena or negedge ena) begin
    if (ena)
        q <= q + 1;
    else
        q <= q;
end

always @(posedge
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
  always @(posedge clk or ~reset)
    if (reset) q <= {0, 0, 0};
    else if (slowena) {
      if (q < 9) q <= q+1;
    }
    else q <= q+1;

// On the positive edge of the slow clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
  always @(posedge slowclk or ~reset)
    if (reset) q <= {0, 0, 0};
    else if (slowena) {
      if (q < 9) q <= q+1;
    }
    else q <= q+1;


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (ena) q <= q + 1;
    else if (q < 9) q <= q + 1;

// For the positive edge of the slowena signal:
// if reset is high, reset the output q to 0.
// Otherwise, only reset q if ena is high and q is 0.

always @(posedge slowena or negedge reset)
    if (reset) q <= 0;
    else if (ena) q <= 0;


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset or ~(slowena && ~q[2]))
    if (reset) q <= 0; 
    else if (slowena && ~q[2]) q <= q + 1; 
    else q <= q;

// On the rising edge of the ena input:
// if reset is high, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge ena or negedge reset or ~(slowena && ~q[2]))
    if (reset) q <= 0; 
    else if (slowena && ~q[2]) q <= q + 1; 
    else q <= q;

================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock, reset q and increment q.
always @(posedge clk or posedge reset)
    if reset
        q <= 0;
    else
        if (ena) q <= q + 1;
    end
// On the negative edge of the slow enable, set the output q to 0.
// On the positive edge of the slow enable, set the output q to 0.
// The slow enable input is always low at reset.
always @(negedge slowena or posedge slowena)
    if (slowena) q <= 0;
    end

// On the positive edge of the clock, increment q and assert the output.
always @(posedge clk)
    q <= q + 1;
    if (q == 9) q <= 0;
    q;
end

always @(posedge clk or posedge reset)
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if q is not 0.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 9'd0;
    else if (ena && q < 9'd10) q <= q + 1'd1;
    else if (!ena && q > 0) q <= q - 1'd1;
end

always @(posedge clk or negedge slowena) begin
    if (slowena) q <= q + 1'd1;
    else q <= q - 1'd1;
end

always @(posedge clk or negedge reset) begin
    if (reset) q <= 9'd0;
    else if (ena && q < 9'd10) q <= q + 1
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset)
        q <= {0,1,2};
    else if (slowena)
        q <= q + {0,1,2} if q != 9;

always @(posedge clk or negedge reset)
    if (reset)
        q <= {0,1,2};
    else if (slowena)
        q <= q + {0,1,2} if q != 9;

// The following is the timing diagram for the decade counter.
//
//  +---+---+---+---+---+
//  |   |   |   |   |   |
//  |   |   |   |   |   |
//  |   |   |   |   |   |
//  |   |   |   |   |   
================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge clk) begin
    if (reset) q <= 0;
    else if (ena && q < 9) q <= q + 1;
    else if (ena && q > 0) q <= q - 1;
    else q <= 9;
end

always @(posedge clk or negedge clk) begin
    if (reset) q <= 9;
    else if (ena && q > 0) q <= q - 1;
    else if (ena && q < 9) q <= q + 1;
    else q <= 0;
end

always @(posedge clk or negedge
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena)
        if (q < 9) q <= q + 1;
end

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if ena is low, increment q.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q != 9) q <= q + 1;
end

// always @(posedge clk or posedge reset) begin
//    if (reset) q <= 0;
//    else if (slowena && q != 9) q <= q + 1;
// end

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q != 9) q <= q + 1;
end

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q != 9) q <= q +
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, q is incremented by 1 on each clock.
always @(posedge clk or 
    (reset && !slowena))
    begin
        if (reset)
            q <= 0;
        else if (slowena && q < 9)
            q <= q + 1;
    end

// On the negative edge of the clock:
// q is decremented by 1 on each clock.
always @(posedge clk or 
    (reset && !slowena))
    begin
        q <= q - 1;
    end

// On the positive edge of the slow clock:
// If reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Finally, q is incremented by 1 on each clock.
always @(posedge slowclk or 
================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or ~reset) begin
    if (reset) q <= 0;
    else if (ena) q <= q + 1;
end

// On the negative edge of the clock:
// if slowena is high and q is 0, output 1.
// Otherwise, output 0.
always @(posedge clk or ~(slowena && ~q)) begin
    if (slowena && q == 0) q <= 1;
    else q <= 0;
end

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.
always @(posedge clk or ~reset) begin
    if (reset) q <= 0;
    else if (ena) q <= q - 1;
end

================================================================
