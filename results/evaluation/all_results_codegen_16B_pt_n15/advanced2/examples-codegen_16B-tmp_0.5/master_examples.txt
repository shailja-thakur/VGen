example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena)
        if (q < 9) q <= q + 1;

// The above code can be simplified using a single statement.
// This is the equivalent code:
// always @(posedge clk or negedge reset)
//     if (reset) q <= 0;
//     else if (slowena)
//         if (q < 9) q <= q + 1;

// The above code can be simplified further to one statement:
// always @(posedge clk or negedge reset)
//     if (reset) q <= 0;
//     else if (slowena)
//         q <= q + 1;

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset)
        q <= 0;
    else
        if (slowena)
            if (q < 9)
                q <= q + 1;
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset) begin
    if (reset)
        q <= 9;
    else
        if (slowena)
            if (q > 0)
                q <= q - 1;
end

// On the positive edge of the ena input:
// increment the output q if the clk input is high.
// Reset the output q to 0 if the clk input is
================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the slowena input:
// reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the ena input:
// reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge ena or negedge reset) begin
    if (reset
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the reset input is high and q is not 9.

always @(posedge ena)
    if (reset) q <= 0;
    else if (reset && q < 9) q <= q + 1;

// On the positive edge of the slowena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena)
    if (reset) q <= 0;
    else if (slowena
================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0.
// Otherwise, only increment the output q if the clk input is high and q is not 9.

always @(posedge ena) begin
    if (reset) q <= 0;
    else if (clk && q < 9) q <= q + 1;
end

reg [3:0] q;

// Design a decade counter that counts from 0 through 9, inclusive.

module count_fast(
    input clk,
    input fastena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the
================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 9'd0;
    else if (slowena && q != 9'd9) q <= q + 1'd1;
    else if (slowena && q != 0'd0) q <= q - 1'd1;
end

always @(posedge clk or negedge reset) begin
    if (reset) q <= 9'd9;
    else if (slowena && q != 9'd0) q <= q + 1'd1;
    else if (slowena && q != 0'd0) q <= q - 1'd1;
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the slowena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge slowena or negedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge ena
================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the slowena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge slowena or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge ena or negedge reset)
    if
================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset) q <= 0;
    else if (slowena && q > 0) q <= q - 1;

// End of module count_slow

// Module count_fast

// Clock input.

// Ena input.

// Reset input.

// Output register.

// Module count_fast

// Clock input.

// Ena input.

// Reset input
================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or negedge reset)
    if (reset) q <= {0, 0, 0};
    else if (slowena && q != 9) q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(posedge clk or negedge reset)
    if (reset) q <= {9, 9, 9};
    else if (slowena && q != 0) q <= q - 1;

// The output is q.
assign q = q[3:0];


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always #(2) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the clock:
// if reset is low, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always #(2) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
    else q <= q + 2;
end

// On the positive edge of the clock:
// if reset is low, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always #(2) begin
    if (reset) q <= 0;
    
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or (reset == 1'b1 && !slowena))
    if (reset)
        q <= 0;
    else if (slowena)
        if (q < 9)
            q <= q + 1;

// On the negative edge of the clock:
// if reset is high, reset the output q to 9. 
// Otherwise, only decrement the output q if the ena input is high and q is not 0.

always @(negedge clk or (reset == 1'b1 && !slowena))
    if (reset)
        q <= 9;
    else if (slowena)
        if (q > 0)
            q <= q - 1;

// If ena is high and q is not 9 or 0, output q.

always @(posedge clk or (slowena && !reset
================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk or posedge reset) begin
    if (reset) q <= 0;
    else if (slowena && q < 9) q <= q + 1;
end

// On the positive edge of the ena input:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the clk input is high and q is not 9.

always @(posedge ena or posedge reset) begin
    if (reset) q <= 0;
    else if (clk && q < 9) q <= q + 1;
end


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        q <= 0;
    end else begin
        if (slowena == 1) begin
            if (q != 9) q <= q + 1;
        end else begin
            if (q != 9) q <= q + 1;
        end
    end
end

// On the positive edge of the slow clock:
// if slowena is high and reset is low, reset q to 0.
// Otherwise, only increment q if the ena input is high.
always @(posedge slowclk or posedge reset) begin
    if (reset == 0) begin
        q <= 0;
    end else begin
        if (slowena == 1) begin
            if (q != 9) q <= q + 1;
        end else begin
            if (q != 9)
================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
// This implementation uses a simple shift register.

always @(posedge clk) begin
    if (reset) q <= 0;
    else if (slowena) {
        if (q < 9) q <= q + 1;
    }
end

// On the negative edge of the clock:
// only reset the q register if the reset input is high.
//
// This implementation uses a simple flip-flop.

always @(posedge clk or negedge rst) begin
    if (rst) q <= 0;
    else if (!slowena) q <= 9;
end

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
//
// This implementation uses a simple shift register
================================================================
