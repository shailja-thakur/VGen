// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tnext_state <= 0;\n\t\tout <= 0;\n\tend\n\telse begin\n\t\tpresent_state <= next_state;\n\t\tnext_state <= present_state;\n\t\tif (present_state == 0) out <= 1;\n\t\telse if (present_state == 1) out <= 0;\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "reg states[2][2]={{1,0},{0,1}};\nalways @(posedge clk)\nbegin\n  if(reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end\n  else begin\n    if(in) begin\n      next_state <= 1;\n    end\n    else begin\n      present_state <= next_state;\n    end\n  end\n  out <= present_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset == 1) begin\n    present_state <= 0;\n  end\n  else begin\n    switch (present_state) {\n      case 0: case 1:\n        if (in == 1) begin\n          next_state <= present_state;\n          present_state <= 1;\n        end else begin\n          next_state <= present_state;\n          present_state <= 0;\n        end\n      end\n    end\n    out <= present_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "// out=1 in state 1 and out=0 in state 0\n// Present states: 0, 1\nalways @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n  end else begin\n    present_state <= next_state;\n    next_state <= present_state;\n  end\nend\nassign out = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always_ff(clk) begin\n\tcase (present_state)\n\t\t0: if (in) begin\n\t\t\tnext_state <= 0;\n\t\t\tout <= 1;\n\t\t\tend else begin\n\t\t\tnext_state <= 1;\n\t\t\tout <= 0;\n\t\t\tend\n\t\t1: if (in) begin\n\t\t\tnext_state <= 1;\n\t\t\tout <= 1;\n\t\t\tend else begin\n\t\t\tnext_state <= 0;\n\t\t\tout <= 0;\n\t\t\tend\n\t\tend\n\tendcase\n\tpresent_state <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if(reset)\n    next_state <= 0;\n  else\n    next_state <= present_state;\n  if(in)\n    present_state <= next_state;\n  else\n    next_state <= present_state;\n  if(present_state == 0)\n    out <= 1;\n  else\n    out <= 0;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n\tif (reset == 1) begin\n\t\tpresent_state <= 0;\n\t\tout <= 0;\n\tend\n\telse if (present_state == 0) begin\n\t\tif (in == 1) begin\n\t\t\tnext_state <= 0;\n\t\t\tout <= 1;\n\t\tend\n\t\telse begin\n\t\t\tnext_state <= 1;\n\t\t\tout <= 0;\n\t\tend\n\tend\n\telse begin\n\t\tif (present_state == 1) begin\n\t\t\tif (in == 1) begin\n\t\t\t\tnext_state <= 1;\n\t\t\t\tout <= 1;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state <= 0;\n\t\t\t\tout <= 0;\n\t\t\tend\n\t\tend\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\nnext_state <= 0;\nelse\nif (present_state == 0 and in == 1)\nnext_state <= 0;\nelse\nif (present_state == 1 and in == 1)\nnext_state <= 1;\nelse\nnext_state <= 0;\n// assign output\nout <= next_state;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n  end else begin\n    next_state <= (present_state == 0) ? 1 : 0;\n    // out=1 in state 0 and out=0 in state 1\n    out <= present_state;\n    present_state <= next_state;\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n  begin\n    present_state <= 0;\n    next_state <= 0;\n  end\n  else if (present_state == 0)\n  begin\n    if (in)\n    begin\n      next_state <= 0;\n    end\n    else\n    begin\n      next_state <= 1;\n    end\n  end\n  else if (present_state == 1)\n  begin\n    if (in)\n    begin\n      next_state <= 1;\n    end\n    else\n    begin\n      next_state <= 0;\n    end\n  end\n  present_state <= next_state;\n  out <= present_state;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 10,
      "logprobs": null,
      "text": "\nsimple_fsm S (\n    .clk(clk),\n    .reset(reset),\n    .in(in),\n    .out(out),\n    .present_state(present_state),\n    .next_state(next_state)\n);\n\ninitial begin\n    present_state = 0;\n    next_state = 0;\n    out = 0;\nend\n\n// The above is equivalent to:\n// initial begin\n//    present_state = 0;\n//    next_state = 0;\n//    out = 0;\n// end\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        present_state <= 0;\n        next_state <= 0;\n        out <= 0;\n    end else if (present_state == 0) begin\n        if (in) begin\n            next_state <="
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  if (reset) begin\n    present_state <= 0;\n    next_state <= 0;\n    out <= 0;\n  end\n  else begin\n    case(present_state)\n      0: begin\n        if (in) begin\n          present_state <= 1;\n          next_state <= 0;\n          out <= 1;\n        end\n        else begin\n          present_state <= 0;\n          next_state <= 0;\n          out <= 0;\n        end\n      end\n    endcase\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk) begin\n  present_state: case(present_state)\n    0: begin\n    \tnext_state <= 0;\n    \tout <= 1;\n    end\n    1: begin\n    \tnext_state <= 1;\n    \tout <= 0;\n    end\n  end\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n  if (reset)\n    present_state <= 0;\n  else if (in)\n    next_state <= present_state;\n  else\n    next_state <= present_state + 1;\n  out <= next_state == present_state;\n  present_state <= next_state;\nend\n// Every clock cycle, go to next state, keeping the output\n// high if present_state is 1 and low if present_state is 0\nalways @(posedge clk)\nbegin\n  next_state <= present_state + 1;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "state 0 {\n\tcase (in) [0, 1]\n\t\tnext_state = 0;\n\t\tout = 1;\n\t\tbreak;\n\tdefault\n\t\tnext_state = 1;\n\t\tout = 0;\n}\nstate 1 {\n\tcase (in) [0, 1]\n\t\tnext_state = 1;\n\t\tout = 1;\n\t\tbreak;\n\tdefault\n\t\tnext_state = 0;\n\t\tout = 0;\n}\n"
    }
  ],
  "created": 1663535145,
  "id": "cmpl-guLGjKvsY58xbPno8dtL6YqCSzsln",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1829,
    "prompt_tokens": 148,
    "total_tokens": 1977
  }
}