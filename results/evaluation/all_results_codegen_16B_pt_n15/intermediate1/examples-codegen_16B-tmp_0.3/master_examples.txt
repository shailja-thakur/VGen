example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

initial begin
	sum = 0;
	cout = 0;
end

always @(posedge clk)
	if (a)
		sum = sum + 1;
	if (b)
		sum = sum + 1;
	cout = sum;
end


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

// This is the carry-in register.
reg carry_in;

// This is the sum register.
reg sum;

// This is the output register.
reg cout;

// This is the logic that performs the addition.
always @(posedge clk)
begin
  if (a_in == 1)
    sum_out <= sum + carry_in;
  else
    sum_out <= sum;

  carry_out <= carry_in;

  cout <= sum_out;
end

// This is the logic that performs the addition.
always @(posedge clk)
begin
  if (b_in == 1)
    sum_out <= sum + carry_in;
  else
    sum_out <= sum;

  carry_out
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out, sum_out;

assign cout = carry_out;

assign carry_out = carry_in;

assign sum_out = sum;

assign carry_in = a & b;

assign sum = carry_in | (a ^ b);


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire carry_in, carry_out, sum_out;

half_adder( a, b, cout, sum_out ) {
	carry_in = 0;
	sum_out = (a + b + carry_in) / 2;
	carry_out = (a + b + carry_in) % 2;
}


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The carry-in is the two's complement of the sum.
reg sum;

// The carry-out is the carry-in of the previous cycle.
reg carry_out;

// The sum is the carry-out of the previous cycle.
reg sum_out;

// The input to the half adder is the carry-out of the previous cycle.
reg input;

// The output of the half adder is the sum of the two inputs.
reg output;

// The half adder is a full adder with a carry-in and carry-out.
always @(posedge clk) begin
    // The carry-in is the two's complement of the sum.
    sum <= ~carry_out;

    // The carry-out is the carry-in of the previous cycle.
    carry_out <= carry_in;

    // The sum is
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, cin, cout_in, sum_in;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

wire a_in, b_in, c_in, cout_in, sum_in;

// This is a full adder with carry-in. A full adder adds four bits and produces a sum and carry-out.
module full_adder_with_carry_in( 
input a, b, c, cin,
output cout, sum );

wire a_in, b_in, c_in, cout_in, sum_in;

// This is a full adder with carry-in and carry-out. A full adder adds four bits
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, a_out, b_out, sum_out;

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire a_in, b_in, sum_out, carry_out;

assign a_in = a;
assign b_in = b;

assign sum_out = a_in + b_in;
assign carry_out = sum_out[0:1] + sum_out[2:3];

assign cout = sum_out + carry_out;


================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire cin;

assign cin = a + b;

assign sum = a + b;

assign cout = cin;


================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk)
begin
  if (rst)
  begin
    sum <= 0;
    cout <= 0;
  end
  else
  begin
    if (a and b)
    begin
      sum <= 1;
      cout <= 1;
    end
    else
    begin
      sum <= 0;
      cout <= 0;
    end
  end
end


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

reg a, b;
reg sum, cout;

always @(posedge clk)
begin
  sum <= (a + b);
  cout <= sum[0];
end


================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

wire cin, sum_out;

half_adder( a, b, cout, sum_out );

assign sum = sum_out;

always @( posedge a or posedge b )
begin
  if ( a and b )
  begin
    sum_out <= ~( a and b ) and cin;
  end
  else
  begin
    sum_out <= 0;
  end
end


================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The carry-in is the carry-out of the previous cycle.
reg [1:0] carry_in;

// The sum is the output of the half adder.
reg [1:0] sum;

// The carry-out is the carry-in of the next cycle.
reg [1:0] carry_out;

// The output is the sum of the inputs.
reg [1:0] output;

// The inputs are the two bits to be added.
reg [1:0] input;

// The outputs are the sum and carry-out.
reg [1:0] cout;

// The half adder.
always @(posedge clk) begin
  // If the inputs are zero, the carry-out is zero.
  if (input == 0) begin
    carry_out <= 0;
  end else begin
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b;
output cout, sum;

always @(posedge clk) begin
    if (rst) begin
        cout <= 0;
        sum <= 0;
    end
    else begin
        if (a) begin
            cout <= 1;
            sum <= b;
        end
        else begin
            cout <= 0;
            sum <= 0;
        end
    end
end


================================================================
