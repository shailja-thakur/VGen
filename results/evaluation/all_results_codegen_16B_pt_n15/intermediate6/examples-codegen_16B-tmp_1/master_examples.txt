example-0: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q = ram[addr];

always_comb assign clk = addr[ADDR_WIDTH-1] && we;

test regsw logic [DATA_WIDTH-1:0] ram_get, address, value;
always_comb begin fail if RAM_TEST_MODE != 0
    assign ram_get = ram[ram_get_address];
    //             data[7:0] = ram_get[7:0]
    assign value = ram_get;
    //             value[7:0] = ram_get[7:0]
end


// for testing both cases of RAM
always_comb begin
    case RAM_TEST_MODE
    case 1// for read, address_set is ignored by ram_read for both ranges
    case 2// for check
        ram_dummy=ram_dummy_
================================================================
example-1: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @* begin
  // (we && addr) is true if we has triggered, addr is valid
  if (!we) begin
    *q <= 0;
  end
  else if (addr == 0) begin
    *q <= data;
  end
  else begin
    // The state where the read bit is set is implementation-specific. Instead of examining that
    // bit in every transaction, we make dedicated read cycles that also write the value read
    // into *q.
    if (addr == (2**ADDR_WIDTH-1)) begin
      // Read cycle
      *q <= ram[addr];
      ram[addr] <= std_logic_vector(to_unsigned(data,DATA_WIDTH));
    end else begin
      // Normal write cycle
      ram[addr] <= std_logic_vector(to_unsigned(data,
================================================================
example-2: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
assign q = ram[addr];
// make sure the write happen after the address is set
always @(posedge clk or posedge we)
    if (we) ram[addr] <= data;

================================================================
example-3: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q as well
always @(posedge clk)
    if(we)
        ram[addr] <= data;
    q <= ram[addr];

================================================================
example-4: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk)
if (we) begin
    if (addr == 4'b1111) ram[2**ADDR_WIDTH-1 : 0] = 1'b1;
    ram[addr] = data;
    q = ram[addr];
end else begin
    q = ram[addr];
end

================================================================
example-5: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q using intram
always @(posedge clk) begin
    intram[addr] <= ram[addr];
    q <= intram[addr];
end

================================================================
example-6: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @* json
event we_event;
begin
    case(we)
        1'b0:
        ram[addr] <= data;
        q <= ram[addr];
        _event,
        we_event
    endcase
end


================================================================
example-7: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk):
    if (we) {
      ram[addr] <= ((data)&0xFF);
      q <= ram[addr];
    } else {
      q <= 0;
    }

================================================================
example-8: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q[0]
function ram_write(input [DATA_WIDTH-1:0] d, input [ADDR_WIDTH-1:0] a);
    ram[a] = d;
}
initial begin
    ram[0] = 0x55;
    ram[1] = 0xaa;
    ram[16*0 + 13] = 0xA0; /* this is correct */
    ram[4*8 + 23] = 0xB0;

    ram.write_addr_2({  
        23, 4, 16, 13, 8,
        16, 4,  0, 24, 1,
        25, 15, 12 };
)
    ram.write_data_8({ 
        23, 16, 45, 0, 0x98,
        0, 0xa0, 0xb0, 0, 0,
        
================================================================
example-9: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we)
        ram[addr] <= data;
    q <= ram[addr];
end

================================================================
example-10: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
// this functionality is provided by the two if statements below,
// followed by a case statement to dispatch based on the value at address addr
int last_addr;
if (we) {
    // This is a combined clk and a ready latch
    case (addr == 0):
    q <= ram[last_addr];
    if(!last_addr)
        last_addr = ADDR_WIDTH - 1;
    else
        last_addr--;
                
} else {
    // This is a clk only
    case (addr == last_addr):
           if(last_addr)
           last_addr--;
           
}

================================================================
example-11: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if (we) {
        ram[addr] <= data;
    }
    q <= ram[addr];
end

================================================================
example-12: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk) begin
    if(we) begin
        ram[addr] <= data;
        q <= ram[addr];
    end
end

reg [DATA_WIDTH-1:0] bus[32];


`default_gateway
module top(
    input we, clk,
    output [7:0] q
) #(
    parameter DATA_WIDTH=8,
    parameter ADDR_WIDTH=6,
    parameter DIST_WIDTH=4
) ();


// This is a ROM module: car
reg [DATA_WIDTH-1:0] car[{2**ADDR_WIDTH-1:0}];

module car #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH = 8 //
================================================================
example-13: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always @(posedge clk or negedge we)
    if(we) begin
        index_modulo = (addr)%(2**ADDR_WIDTH);
        ram[index_modulo] <= data;
    end else if (column) begin
        q <= ram[index_modulo]; // change it to effectively disambiguate the assign
    end

================================================================
example-14: 
// This is a RAM module
module ram #(
    parameter ADDR_WIDTH=6,
    parameter DATA_WIDTH=8
) (
    input [DATA_WIDTH-1:0] data,
    input [ADDR_WIDTH-1:0] addr,
    input we, clk,
    output [7:0] q
);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram at address addr
// assign the ram value at address addr to q
always@(posedge clk) begin
    if (we)
        ram[addr] <= data;
    q <= ram[addr];
end

================================================================
