example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk and reset == '0') begin
  if (reset) r_reg <= 1'b0;
  else r_next <= r_reg;
  
  feedback_value <= ({r_reg[2], r_reg[4], r_reg[5], r_reg[1], r_reg[3]});
  r_next[{4,3}] <= (feedback_value + 3'b11);
  q <= r_next[4];
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if( reset == 1 )
        r_reg <= 0x01;
    else
        r_reg <= r_next;

    r_next<74Periodic> = r_reg xor 2:4 + feedback_value + 3'h3;
    feedback_value < 74Periodic> = r_reg[3] xor 1;
    r_next<74Periodic> = (r_reg >> 4) + r_next;
    q <= r_reg;
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// set r_reg in its initial state on posedge reset
assign q = r_reg;

// test vectors for design
// [104, 105, 98] --> [100, 99, 99]
// [105, 104, 98] --> [102, 101, 101]
// [104, 98, 104] --> [101, 99, 102]
// [98, 104, 105] --> [101, 100, 102]
// [104, 105, 105] --> [102, 102, 102]

`

func (c clock) test() {
	buf := bytes.Buffer{}
	for j := 0; j < 4; j++ {
		buf.WriteString(fmt.Sprintf("%d ", j))
	}
	fmt.Println("    Input Values:", buf.String())

	for i := 0; i < 16; i
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
lreset q[1:0] val;
lreset r_next[1:0];
lreset r_reg[1:0];
// inputs
lreset phi[1:0] phase_reset;
lreset init[1:0] initil;
lreset clk_reset;
input allready[3:0];
// outputs
lreset q[1:0] reset{1'b0, 1'b0};
lreset q[1:0] cc{1'b0, 1'b0, 3'b011, 3'b000};
lreset q[1:0] cond{1'b0, 1'b0, 3'b011, 3'b000};
lreset q[1:0] wait{1'b1, 1'b1, 3'b011, 3'b000};
lreset q[
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    begin
    if (reset)
        r_reg <= 1;
    else
    {
        r_next <= (r_reg << 1) ^ (r_reg << 2) ^ (r_reg << 3) ^ (r_reg << 4);
        feedback_value <= (r_reg & 15);
        r_next[3] <= feedback_value & 3;
        r_next[2] <= feedback_value >> 2;
        r_next[1] <= feedback_value >> 4;
        r_reg(q) <= r_next;
    }
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
always @(posedge clk)
begin
  if (reset != true) begin
    r_reg <= 1;
  end
  else begin
    r_reg <= !r_reg && 
           !~r_reg && 
           !!r_reg && 
           !~r_reg && 
           !r_reg && .01;
  end
end

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
lfsr == unimplemented begin dump; //unimplemeted???/how to implement?
// Missing statements
// end dump
assign q = r_next[4:0];
0.001 RTIME 1 bjil@nyx:/home/bjil/stdlib/$CRISC/blog/sim0/tables/cache.vh
0.001 RTIME 1 bjil@nyx:/home/bjil/stdlib/$CRISC/blog/sim0/tables/test_lfsr.ris
  // If we insert a statement here, it does not compile
//  assign q = r_next[4:0]; //assign statement missing an action PERL"

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
function [7:0] next [15:0] (
    r_reg,
    clk,
    reset
) begin
    if reset == 1'b0
    begin
        r_reg := 16'b0;
        r_next <= 4'b0;
    end
    else if clk == 1'b0
    begin
        r_reg_0 <= r_reg[7:4];
        r_reg_1 <= r_reg[5:3];
        r_next <= r_reg[4:0] xor (r_reg[2:0] xor (r_reg_0[15:12] xor r_reg_0[11:8]));
    end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// register logic
assign q = r_reg;
lut4 l1 ([0:3]), l1_a [4:7], l1_b [8:11], l1_d [12:15];
lut6 l2_a1 [16:19], l2_a2 [21:23], l2_a_d [25:28], l2_b_d [30:33], l2_d [35:38], l2_unkn [41:44];
lut6 l2_b1 [48:51], l2_b2 [54:55], l2_b_d2 [59:62];
always @(posedge clk) begin
  case (l1_z)
    (2,0,0,0,5) => l1_a[4] 
    (0,0,0
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = {feedback_value, fa, fb, fc, fd, co, q.length, q[q.length - 1], r_reg[3], r_reg[2], r_reg[1], r_reg[0]};

  // the Galois LFSR state is comprised of the feedback_value
  // the register r_reg (the various taps of the LFSR) and my q
  // To implement a Galois LFSR one need to know a finite field and an
  // irreducible polynomial to generate the look-up-table for
  // calculating the next possible output value.
  // Specifically:
  //     The Galois LFSR used the form of a shift register (a register
  //     that can clock in two different sequenced values). This was
  //     designed dynamically with a finite field (the
================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
    begin
        if (reset) r_reg <= 1;
        else r_next <= r_reg;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_reg <= r_next;
        q <= feedback_value;
    end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = (r_reg); // this should be 0
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
lfsr( .clk(clk), .reset(reset), .q(q) );

'''
        self.g.get_net_list()
        self.assertEqual(self.g.make_net_to_ascii(), expected_netlist )
        self.assertEqual(self.g.get_clock_net(), "
================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_next;
(* lfsr_type ) reg [5:0];
(* lfsr_typeClk ) reg [5:0] lfsr_clk;
always @(posedge clk) while (l != reset) begin
    let lfsr_next = ({5'b000, !(!r_reg[4] & q0 & lfsr_clk[4])});
    if (r_reg[0] != 1) begin
        r_reg[4:0] <= not r_reg[2:0];
        feedback_value <= {7'h00, r_reg[4:0], q0, !((r_reg[4:2]==r_reg[4:2])|(r_reg[4:2]!=r_reg[4:2]))};
        
================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
if (reset == 0) begin
    r_reg <= {4{1}};
    r_next <= {4{0}, 2 + 2{r_reg[1:]}};
    feedback_value <= {feedback_value, 4{r_next[0:2]}};
    q <= feedback_value[0];
end else begin
    r_next <= r_reg;
    q <= r_next[0];
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @* begin begin
    if (reset) {r_reg = 1'b0;} else {r_reg = r_next;}
    q <= ~r_reg[2]+~r_reg[4]^q[3];
    feedback_value <= ~r_reg[2]^r_reg[4]; 
    r_next <= !feedback_value[2:3]^feedback_value; 
end end
// '!' makes "don't care".
// Used by Concept3
l0: lfsr( 
    .clk(clk),
    .reset(reset),
    .q(q_reg)
); 
shared mem p_ramN[2];
gate util(
    .clk(clk),
    .reset(reset),
    .q(result)
);
l1: lfs
================================================================
