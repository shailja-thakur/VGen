example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset == 1) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_reg <= r_next;
    end
end
// Return the value of the feedback register
// This is the value that should be fed into the feedback register
// to generate the next value in the sequence
// The value is the xor of bit positions 2 and 4 of r_reg
// This is the value that should be fed into the feedback register
// to generate the next value in the sequence
// The value is the xor of bit positions 2 and 4 of r_reg
function feedback() begin
    return feedback_value;
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg + feedback_value;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_next <= r_reg[3] ^ r_reg[4];
        q <= r_next;
    end
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= r_reg[2] ^ r_reg[4];
    r_reg <= r_reg[4] ^ r_reg[2] ^ r_reg[1] ^ r_reg[3];
    q <= r_next;
end

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg << 1 | feedback_value;
        q <= r_next;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_next <= r_reg[2] ^ r_reg[4] ^ (r_reg[2] << 4) ^ (r_reg[4] << 4);
    end
end

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 1);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next[4:0];
    end
end

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_next <= r_reg;
        feedback_value <= r_reg[2] ^ r_reg[4];
        r_reg <= r_reg[4] ^ r_reg[2] ^ (feedback_value << 4);
    end
end
assign q <= r_next;

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg;
    feedback_value <= r_reg[2] ^ r_reg[4];
    r_reg <= r_reg[4] ^ (r_reg[4] >> 1) ^ (feedback_value << 2);
    q <= r_next;
end

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
    end else begin
        r_reg <= r_reg << 1 | feedback_value;
        r_next <= r_reg[2] ^ r_reg[4] ^ r_reg[2] ^ r_reg[4];
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next;
    end
end

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 1;
        r_next <= 0;
    end else begin
        r_next <= r_reg;
        feedback_value <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        r_reg <= r_next;
    end
end
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
// and a feedback value of 0
module lfsr_0( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= (r_reg >> 2) ^ (r_reg >> 4) ^ (r_reg >> 5);
        q <= r_next;
    end
end

================================================================
example-10: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    q <= r_next;
    feedback_value <= (r_reg >> 2) ^ (r_reg >> 4);
end

================================================================
example-11: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset)
        r_reg <= 1;
    else
        r_reg <= r_reg << 1;
    r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_next[4:0];
end

================================================================
example-12: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next;
    end
end

================================================================
example-13: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 0;
    end else begin
        r_reg <= r_reg + 1;
        r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
        feedback_value <= r_reg[2] ^ r_reg[4];
        q <= r_next;
    end
end

================================================================
example-14: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
begin
    if (reset) r_reg <= 0;
    else r_reg <= r_reg << 1;
    r_next <= r_reg ^ (r_reg >> 2) ^ (r_reg >> 4);
    feedback_value <= r_reg[2] ^ r_reg[4];
    q <= r_next;
end

================================================================
