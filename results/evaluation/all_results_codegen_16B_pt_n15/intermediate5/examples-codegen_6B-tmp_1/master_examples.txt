example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk, posedge reset)
begin
	if (reset)
	out<=0;
	else if (load)
	out<=data;
	else
	begin
	out<={1'b0,out[6:0],1'b0};//shift left up one;
	end
end

================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk)
	begin
	if(reset)
	out=0;
	//$display($time,"clk=%b,out=%b",clk,out);
	else if(load)
	out=data;
	else
	begin
	//$display($time,"amount=%b",amount);
	case(amount) 
	3'b000: out=out;
	3'b001: out={out[6:0],out[7]};
	3'b010: out={out[5:0],out[6]};
	3'b011: out={out[4:0],out[5]};
	3'b100: out={out[3:0],out[4]};
	3'b101: out={out[2:0],out[3]};

================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if(load)
	out = data;
	else if(amount <= 1'b1)
	out = {out[6:0],out[7]};
	else
	begin
	out = {out[5:0],out[6],out[7]};
	end
	end
// maybe implement a counter that counts the incoming clock ticks

================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	if(reset)
	out<=0;
	else if(load)
	out<=data;
	else begin
	out<={out[6:0],out[7]}; // shift right by one and maintain the parity
	out[amount]<={out[5:0],out[7:6]}; // shift left by one
	end
	end

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always @(posedge clk or posedge reset)
	begin
	// if the load signal is 1, CE the output
	// shift is defined by (1,amount)
	if (load)
	begin	
	out = {out[6:0],data[7]};
	// shift left by 7-amount
	out = out << amount;
	end
	else
	out = out;
	end

================================================================
