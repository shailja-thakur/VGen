example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
  if (load) begin
    out <= data;
  end
  else begin
    out <= (out << amount) | (out >> (data-amount));
  end
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
  if(load)
  begin
    out <= data;
  end
  else
  begin
    out <= (out << amount) | (out >> (8 - amount));
  end
end
// left shift and rotate operation
module left_shift(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise right shift and rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
  if(load)
  begin
    out <= data;
  end
  else
  begin
    out <= (data << amount)
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
if(reset) begin
out <= 0;
end else if(load) begin
out <= data;
end else begin
out = (out << amount) | (out >> (8-amount));
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
  if(reset) begin
    out <= 0;
  end
  else if(load) begin
    out <= data;
  end
  else begin
    out <= out << amount;
    out[0] = out[0] << amount;
  end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* begin
  if (load) begin
    out = data;
  end else begin
    out = (data << amount) | (out >> (8-amount));
  end
end

// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @* begin
  if (load) begin
    out = data;
  end else begin
    out = (out >> amount) | (data << (8-amount));
  end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
	if (reset) begin
		out <= 0;
	end else begin
		if (load) begin
			out <= data;
		end else begin
			out = (out << amount) | (out >> (32-amount));
		end
	end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
  if (load) begin
    out <= data;
  end else begin
    // out <- out << amount
    out <= out << amount;
    // out <- out >> (32 - amount)
    out <= out >> (32 - amount);
  end
end

================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
	if (load) begin
		out <= data;
	end
	else begin
		// rotate the out register then left shift out by amount
		out <= (data << amount) | (out >> (8-amount));
	end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
    if (load) begin
        out <= data;
    end else begin
        out <= (data << amount) | (out >> (8-amount));
    end
end

// right shift and rotate operation
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @(posedge clk) begin
    if (load) begin
        out <= data;
    end else begin
        out <= (out >> amount) | (data << (8-amount));
    end
end

// left
================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset) begin
  if(load) begin
    out <= data;
  end
  else begin
    out<= (data << amount) | (out >> (32 - amount));
  end
end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk) begin
  if (load) begin
    out <= data;
  end else begin
    out = (out << amount) | (out >> (8 - amount));
  end
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @* if load = '1'
begin
	if (reset = '0')
	begin
		out = data;
	end
	else
	begin
		if (amount > 0)
		begin
			out = data << amount;
		end
		else
		begin
			out = out << -amount;
		end
	end
end
// right shift operation
module right_shift(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by right shift the out register by amount bits
always @* if load = '1'
begin
	if (reset = '0')
	begin
		
================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)  begin
	if (reset == 0) begin
		case(amount)
			3'b000 : begin
				if (load) begin
					out = data;
				end
			end
			4'b001 : begin
				if (load) begin
					out = data;
				end
			end
			4'b010 : begin
				if (load) begin
					out = data;
				end
			end
			4'b100 : begin
				if (load) begin
					out = data;
				end
			end
		end
	end
end
// right shift and rotate operation with zero fill
module right_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data
================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
if(reset == 0) begin
if(load == 1) begin
out <= data;
end
else begin
out <<= amount;
out <<= data;
end
end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset) begin
	if (load)
		out <= data;
	else
		out <= (data << amount) | (out >> (8 - amount));
end

================================================================
