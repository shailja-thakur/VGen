// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\n\tout <= 0;\nelse if (load)\n\tout <= data;\nelse begin\n\tcase(amount)\n\t3'b000:\n\tbegin\n\tout[7:0] <= out[0:7];\n\tout[0] <= out[7];\n\tend\n\t3'b001:\n\tbegin\n\tout[7:0] <= {out[0],out[7:1]};\n\tout[0] <= out[7];\n\tend\n\t3'b010:\n\tbegin\n\tout[7:0] <= {out[0],out[7:1],out[7]};\n\tout[0] <= out[7];\n\tend\n\t3'b011:\n\tbegin\n\tout[7:0] <= {out[0],out"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\tbegin\n\tout <= 8'b0;\n\tend\n\telse if(load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= out << amount;\n\tend\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @ (posedge clk)\nbegin\n\tif(reset)\n\tbegin\n\tout <= data;\n\tend\n\telse if(load)\n\tbegin\n\tout <= data;\n\tend\n\telse\n\tbegin\n\tout <= {out[6:0],out[7]};\n\tout[7:1] <= out[6:0];\n\tend\nend\n"
    }
  ],
  "created": 1663333564,
  "id": "cmpl-HZkG4rhb5LcnO1YPi2qFNJ6suxZtc",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 368,
    "prompt_tokens": 89,
    "total_tokens": 457
  }
}