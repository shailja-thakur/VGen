example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 reg [63:0] q0;
 
 always @ (posedge clk) begin
 	 if (load)
 	 	q0 <= data;
 	 if (ena) 
 	 	begin
 	 	if(amount == 2'b00) begin q <= q0 << 1; q0 <= q0 << 1; end
 	 	else if (amount == 2'b01) begin q <= q0 << 8; q0 <= q0 << 8; end
 	 	else if (amount == 2'b10) begin q <= q0 >> 1; q0 <= q0 >> 1; end 
 	 	else if (amount == 2'b11) begin q <= q0 >> 8; q0 <= q0 >> 8; end
 	 	end
 	 end
 	 
 endmodule
 

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin
	if(load)	begin
	q <= data;
	end
	else begin
	if(ena) begin
	q[63:amount] <= q[63:amount-1];
	q[63-amount:0] <= 0;
	end 
	else
	q <= q;
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk)
	begin
	
	if (ena && load) 
	q <= data;
	else if (amount == 2'b00)
	begin
	if (ena) 
	begin 
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	end 
	else if (amount == 2'b01 && ena)
	begin
	if(q[63] == 1'b1)
	q[63:0] <= q[63:0]<<1'b1;
	if(q[63] == 1'b0)
	q[63:0] <= q[63:0];
	end
	else if (amount == 2'b10 && ena) // shift right (logical)
	begin
	
================================================================
