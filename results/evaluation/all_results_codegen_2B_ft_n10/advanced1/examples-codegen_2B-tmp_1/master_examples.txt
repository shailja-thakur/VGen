example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = a[7] & b[7] & ~s[7];

always@(*)
begin


	if(a[7] & !b[7] & !overflow)
	assign s[7:0] = a[7:0] + b[7:0]; 
	else if(!a[7] & b[7] & !overflow)
	assign s[7:0] = a[7:0] + b[7:0];
	else if(a[7] & b[7] & overflow) //if there is a double overflow 
	assign s[7:0] = ~(8'b00000000) + 1; //the 8'b00000000 is -1.



end




================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// a and b are added together. the 8 low bits of the result are stored in s. The overflow bit s[7] is set to 1 if the operation caused overflow,
// inclusive of overflow caused by signed or unsigned large. This bit is set to 0 otherwise.

always@(*)

begin
 if (a<b)
 begin
 r<=8'b0;
 if (overflowIncr)? overflow <=1'b1: overflow <=1'b0;
 end
 
 else if (a>b)
 begin
 r<=8'bx;
 overflow <=1'b1;
 end

 else if (a>b)
 overflow <=1'b0;
 else
 overflow <=1'b0;
end


end
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


reg cable, out_sign;

always @ (a, b, wiring[7:0], cable)
begin 
	casewire2 every (wiring[7:0], cable) begin
	(|| || (a[7]) && (b[7])) -> cable = 0; 
	(1'bx || a[6] || a[5] || b[5] || b[4]) // all 1's
	(0 && (~b[6])) // s is negative
	begin
	cycley[0]
	if (b[7] == 

end

assign cycley = (!thisin || ! thatin) ? wiring[7] : cycleyneg; //compare the continuous assignment , watching the continuous assignment
always @ {a, b}
	ifgt1 = a[6]&&!b[6];
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low




================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed [7:0] overflow1;
wire [7:0] addin1a;
wire [7:0] addin1b;

//if you see non-negative flag following the minus-sign, it's a signed overflow.

//li position #10_-_03/------------insert to this file------------------------; 
always @ (a or b) 
	begin
	if ( a[7] == b[7] && a[7] != s[7] )	
	overflow1 = 1'b1;
	else if ( a[7] /* complement of b */ == s[7] )
	overflow1 = 1'b1;
	else if ( b[7] /* complement of a */ == s[7] )
	overflow1 = 1'b0;
	end

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// Create an 8-bit full adder function. 

// Give each equation a name based on its position in the sequence: 

// A full adder for a, b, carryin, s, and overflow. 
// Create an 8-bit ripple carry adder for each of the equations. 

// Assign a rolled-up version of the equations to the ripple_carry_adder_four.dll output for each ripple carry adder (n) component. 
// Execute the equations one by one, and then concatenate the product terms (e.g., in the cofactor's range) by unattended implicit arithmetic operations.
// Put the items in the newly created module where they need to be. 

// It sounds good, yes. 
// The original equation: a + b + carryin = s, which has an handling for a carryin of zero. 



================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire signed_sum;
wire signed_sum_overflow;

// module for the addition operator
xor(signed_sum, a,b);

assign signed_sum_overflow = (&signed_sum)&&(&adj(-b));

// sum wire definition
wire signed_adder_output;

// adders for the four bit string adders

add sum0(
	.a(a[0]), 
	.b(b[0]), 
	.sum(signed_adder_output),
	.overflow(signed_sum_overflow)	
); 

add sum1(
	.a(a[1]), 
	.b(b[1]), 
	.sum(signed_adder_output),
	.overflow(signed_sum_overflow)
);

add sum2(
	.a(
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


	anmadd 	 #(.Width(8)) signed_adder1_8( .D(a[7:0]), .CLK(750), .RST(0), .AN(1'b0), .ADD(s[7:0]), .BK(1'b0), .SEL({1'b0, b[7]}), .CONTROL(), .DO(s[8:1]) );
	 or(overflow,s[8],s[7]); //check for over or underflow


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 assign overflow = ((~a[7] & ~b[7]) & (~(a[7]&b[7]) & (s[7] & (~a[7] | b[7])))); 
 assign s = {signed_sum, overflow};
wire sign_sum;
wire sign_overflow;

sign_weight sign_weigth1 (.a(a[7:0]), .b(b[7:0]), .w(8'b00001010), sign_sum);
sign_weight sign_weigth2 (.a(a[7:0]), .b(b[7:0]), .w(8'b00001011), sign_overflow);
 
or unsigned_or_condition (.a( sign_sum ), .b( sign_overflow) , output_sumdiff ());


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

 assign overflow = a[7] & b[7] & ~ s[7]; 

// Add the a and b making a 7 bit adder a[7:0]a;
 

// if there is a processing overflow the set the overflow output to true otherwise inout indicate no overflow so out =in.

 // assign s = a + b;
 endmodule
 

// Design a 1 bit adder, a[0]
 // out = sum of a and b; Bidirectional counter is synthesizable
 // This is used to add 1 bit in the case of rest, parity, zero check adder.
 // Carry out, carry only is processed
module Lab5Part2(



================================================================
