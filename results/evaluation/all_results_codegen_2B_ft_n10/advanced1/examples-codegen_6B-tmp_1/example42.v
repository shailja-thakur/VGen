// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = signed_add(a,b);
assign overflow = a[7] ^ b[7]; // the overwolf is the xor of a and b

// The signed addition function

function signed [7:0] signed_add;
input [7:0]a;
input [7:0] b;
begin
	signed_add = a+b;
	if ((a[7]==b[7])&&(signed_add[7]!=a[7]))
	// if a and b have opposite signedness then we have to consider the carry generated by the addition operation
	begin
	// If a and b have opposite signedness the carry is generated by the first bit of the sum
	// i.e. signed_add[0]. If this bit is high then we have a signed overflow.
	// We define a signed overflow to beend
end
endmodule
