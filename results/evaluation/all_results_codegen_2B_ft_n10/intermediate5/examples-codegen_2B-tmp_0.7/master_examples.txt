example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else
out <= {out[6:0],out[7]};
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk, posedge reset)
begin
	if (reset)
	begin
	out <= 8'b0;
	end
	else
	begin
	if (load)
	begin
	out <= data;
	end
	else
	begin
	case (amount)
	3'b000: out <= {1'b0,data[7:0]};
	3'b001: out <= {data[6:0],1'b0};
	3'b010: out <= {data[7:0],data[7:1]};
	3'b011: out <= data;
	3'b100: out <= {data[7:0],1'b0};
	3'b101: out <= {1'b0,data[7:1]};
	3'b110: out <=
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
begin
if (reset)
out <= 8'd0;
else if (load)
out <= data;
else
begin
out <= {out[6:0],out[7]};
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	out <= 0;
	end
	else
	begin
	if (load)
	out <= data;
	else
	out <= {out[6:0],out[7]};
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
	if(reset)
	begin
	out = 8'b00000000;
	end
	else if (load) 
	begin
	out = data;
	end
	else
	begin
	out = out << amount;
	end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else begin
out <= {out[6:0],out[7]};
end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin
if(reset == 1'b0)
out <= 8'b00000000;
else 
case(amount)
3'b000:
out <= data;
3'b001:
out <= {1'b0,data[7:1]};
3'b010:
out <= {1'b0,data[6:1]};
3'b011:
out <= {1'b0,data[5:1]};
3'b100:
out <= {1'b0,data[4:1]};
3'b101:
out <= {1'b0,data[3:1]};
3'b110:
out <= {1'b0,data[2:1]};
3'b111:
out <= {1'b0,data
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if (reset)
out <= 8'd0;
else if (load)
out <= data;
else begin
out <= {data[0],data[7:1]};
// shift left first then rotate
out[7:1] <= {out[6],out[7]};
out[0] <= out[1];
end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else
out <= out << amount;
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
	if(reset) begin
	out<=8'b0;
	end
	else if(load)
	out<=data;
	else begin
	case(amount)
	3'b000:out<=data;
	3'b001:out<=data<<1;
	3'b010:out<=data<<2;
	3'b011:out<=data<<3;
	3'b100:out<=data<<4;
	3'b101:out<=data<<5;
	3'b110:out<=data<<6;
	3'b111:out<=data<<7;
	endcase
	end
end

================================================================
