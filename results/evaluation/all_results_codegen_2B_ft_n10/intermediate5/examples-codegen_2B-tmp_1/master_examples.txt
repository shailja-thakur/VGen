example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] rotated,shifted;
always @(posedge clk) begin
if (amount == 0)
out <= 8'b0;
else if(amount == 1)
out <= out << 1'b1;
else if(amount == 2)
out <= out << 1'b1 << 1'b1;
else if(amount == 3)
out <= data << 1'b1;
'else if({amount} > 4)
out <= rotated;
end
always @(posedge reset) begin
if(reset == 1'b1)
begin
shifted <= 8'b0;
rotated <= 8'b0;
end
else if (load == 1'b0)
shifted <= data;
else if({amount} == 4'b1010)
rotated <= shifted;
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
reg [7:0] data_new;
reg [7:0] data_aux;
reg [6:0] i;
reg busy,load_reg;
always @(posedge clk or posedge reset)
if(reset)
begin
data_new <= 8'b0;
i <= 7'b0;
end
else
begin
if (load)
data_new <= data;
else
begin
for(i=7;i>=0;i=i-1)
begin
out<=data_aux;
data_aux<= data_new;
data_new<= {data_new[0],data_new[7:1]};
busy<=1'b1;
end
end
end
always @(*)
begin
reset_reg=reset;
load_reg=load;
// needn't
================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk or posedge reset)
begin
if (reset == 1'b1)
out <= 0;
end
always @(posedge out)
begin
out <= 8'b00000000;
end
always@(posedge clk or posedge load)
begin
if (load == 1'b1)
out <= data;
end
always@(posedge out,posedge reset)
begin
if (reset == 1'b1)
out <= 8'b00000000;
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
	if(load)
	out = data;
	else 
	begin
	out = data << amount;
	out = out << 7'h01;
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
begin: applicationscope
if(reset == 1'b0)
out <= 8'b01111111; // when reset is low initial the output data to "10111111"
else if(load) // when load is high
out <= data;
else begin
out[0] <= out[7];
for(int i = 1; i < 8; i = i+1)
out[i] <= data[7-i];
end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
if(reset) begin
 out <= 0;
end always @(posedge load)
 else begin
if (amount==0)
 out <= data;
end
always @(posedge clk)
 if (reset) begin
out <= 0;
for (i=0;i<8;i=i+1) begin
end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or negedge reset)
case (amount)
0: out <= data;
1: out <= {data[0],data[7:1]};
2: out <= {data[1],data[7:2]};
3: out <= {data[2],data[7:3]};
4: out <= {data[3],data[7:4]};
5: out <= {data[4],data[7:5]};
6: out <= {data[5],data[7:6]};
7: out <= {data[6],data[7]};
endcase
always @ (posedge load or negedge reset)
if (!reset) out = 8'b0;
else 
begin 
case(amount)
0: 
out = {out[6:0],out[7]};
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk, posedge reset)
begin
	if (reset)
	begin
	out <= 8'b0000_0000;
	end
	else if (load)
	out <= data;
	else begin
	case (amount)
	0: out <= {8'd0, data[7:0]};
	1: out <= {1'd0, data[7]};
	2: out <= {2'd0, data[7:1]};
	3: out <= {3'd0, data[6:2]};
	4: out <= {4'd0, data[5:3]};
	5: out <= {5'd0, data[4:4]};
	6: out <= {6'd0, data[3:5]};
	7: out <= {7'd0, data[2:6
================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// shift left until out register is filled with the data
always @(posedge clk,posedge reset)
	begin
	if (reset)
	begin
	out <= 8'b0;
	$display("out = %b",out);
	end
	else
	begin
	if(load == 1)
	begin
	out <= data;
	$display("out = %b",out);
	end
	else
	begin
	out = out >> amount;
	$display("out = %b",out);
	end
	end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk,posedge reset)
 if (reset)
 out <= 8'b0000000000000000;
 else 
 if (load)
 out <= data;
 else
 if (load)
 out <= {1'b0, data[7:1]};
 // load signals first cared as 1 instead of falling into those select blocks above

================================================================
