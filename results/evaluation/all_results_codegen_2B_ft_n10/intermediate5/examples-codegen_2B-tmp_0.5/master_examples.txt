example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always@(posedge clk)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else
out <= {out[6:0],out[7]};
end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk)
begin
if(reset)
out <= 8'b0;
else if(load)
out <= data;
else
out <= out >> amount;
end

================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else begin
out <= {data[6:0],data[7]};
out[7] <= out[0];
end
end

================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if(reset)
out <= 8'b0;
else if (load)
out <= data;
else if(amount != 0)
out <= out << amount;
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @ (posedge clk or posedge reset)
begin
if (reset == 1)
	out <= 8'b00000000;
else if(load)
	out <= data;
else
	begin
	out <= {data[0],data[7:1]};
	out <= out << amount;
	end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if (reset) begin
out <= 0;
end
else if (load) begin
out <= data;
end
else begin
out <= {out[6:0],out[7]};
end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset)
out <= 0;
else if (load)
out <= data;
else if (amount == 0)
out <= out;
else if (amount == 1)
out <= {1'b0,out[7:1]};
else if (amount == 2)
out <= {1'b0,1'b0,out[7:2]};
else if (amount == 3)
out <= {out[6:0],1'b0};
else if (amount == 4)
out <= {out[7],1'b0,out[7:1]};
else if (amount == 5)
out <= {1'b0,out[7:1]};
else if (amount == 6)
out <= {out[7],out[7:1]};
else if (amount
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk or posedge reset)
begin
if(reset)
out <= 8'h0;
else if(load)
out <= data;
else
out <= {out[6:0],out[7]};
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
always @(posedge clk)
begin
if (reset)
out <= 8'b0;
else if (load)
out <= data;
else
out <= out << amount;
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// otherwise rotate the out register followed by left shift the out register by amount bits
// and then load the new data to the out register
always @(posedge clk)
begin
if (load)
out <= data;
else
begin
out <= {out[6:0],out[7]};
if (amount == 3'b000)
out <= {out[0],out[7:1]};
else if (amount == 3'b001)
out <= {out[1],out[7:2]};
else if (amount == 3'b010)
out <= {out[2],out[7:3]};
else if (amount == 3'b011)
out <= {out[3],out[7:4]};
else if (amount == 3'b100)
out <= {out[4],out[7:5]};
else if (amount == 3'b101)
out <= {out[5],out
================================================================
