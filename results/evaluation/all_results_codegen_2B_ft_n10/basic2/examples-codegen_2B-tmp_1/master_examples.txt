example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out ( out = a & b ) ;
 output out;

 wire a,b;
 wire ab; //and_ output of AND gates

 or_gate or1(.a(a), .b(b), .out(ab));
 not n1(ab, out); //not_gate to give output of AND gate


================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out



// code body1_main
// creates a in1_2s compuse and a in2_2s component
and_2s and_2s( 
who, 
 wib );// c.f. section 2.2 page 70
// creates internally empty and/or sections 
// that simulate a two-state mux

// code body: 2.1.1
and_2s and_2s_1_1( 
out, 
 i1, 
 i2 );

// code body: 2.1.2
 // c.f. Fig 2.3 page 78
// assignments

// code body: 2.2.1
 bugin_2b ins1_2a_ass( 
 i1, 
 i2, 
 i3, 
 wrong );// i1: enable; i2: n; i3
================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
input a;
input b;


 output out;

================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
 assign out = a & b;


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
and #(4, 1) and1(out, a, b);

================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
always@(a,b)
begin
out <= a & b;
end


================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

 output out;

 wire a, b, c;

 // will have output


 /*
 law
 pitch and = !(a or b or c)

 Q29482 ADA
 Q1171 MB
 Q1212 MB
 Q1422 MA
 Q1477 MA
 Q1492 MA
 Q1299 SW
 Q1299 PGB
 Q1267
 PGL
 */
 not // in not
 an_and_gate // used b field of and gate

 poss one or more inputs to output
 ///import statements to new

not (b, out); // !!!!

and #(3) // 3 parameters
poss

and

not #(!elling sowing conditions
/**
 anarchy
 anarchy private land significatient conditions
 *////////////////////////////////////////////////////////////////////////////////////
/*

��minimum length //由降许mmtnote为需要的大�
================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
always@ (a or b) // dynamic starts and stops in combinational always blocks
begin
	out = a & b;
end


================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
//given only one input and output
//used the or() gate 

 and a0(
 .a(a),
 .b(b),
 .out(out)
 |
 .a(1'b0),
 .b(1'b0)
 |
 .out(1'b0)
 );

================================================================
