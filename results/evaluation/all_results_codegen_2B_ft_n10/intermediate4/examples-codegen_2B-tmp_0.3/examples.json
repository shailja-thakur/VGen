// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\n\tif(reset)\n\tpresent_state <= 0;\n\telse\n\tpresent_state <= next_state;\nalways @(present_state, in)\n\tcase(present_state)\n\t0: next_state <= in ? 0 : 1;\n\t1: next_state <= in ? 1 : 0;\n\tendcase\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\n// Moore FSM\nalways @(present_state or in)\nbegin\ncase (present_state)\n0 : next_state <= in ? 0 : 1;\n1 : next_state <= in ? 0 : 0;\ndefault : next_state <= 0;\nendcase\nend\n// Output\nassign out = (present_state == 1) ? 1 : 0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= present_state;\nendcase\nend\nassign out = (present_state == 1) && (next_state == 0);\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: begin\nnext_state <= in ? 0 : 1;\nout <= 0;\nend\n1: begin\nnext_state <= in ? 0 : 1;\nout <= 0;\nend\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: begin\n$display(\"%t\\tPresent State = 0\", $time);\nend\n1: begin\n$display(\"%t\\tPresent State = 1\", $time);\nend\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: if(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\n1: if(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\ndefault: next_state <= 0;\nendcase\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\ndefault: out <= 1;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\ndefault: next_state <= 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase (present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase (present_state)\n0: out = 0;\n1: out = 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0:\nbegin\nif(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nend\n1:\nbegin\nif(in)\nnext_state <= 0;\nelse\nnext_state <= 1;\nend\nendcase\nend\nassign out = (present_state == 1) && (present_state == in);\n"
    },
    {
      "finish_reason": "stop",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 1 : 0;\nendcase\nend\nassign out = (present_state == 1);\n"
    }
  ],
  "created": 1663606869,
  "id": "cmpl-JV2u8luYD3czMmNhDaZJBJjd6Azxt",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 1302,
    "prompt_tokens": 148,
    "total_tokens": 1450
  }
}