example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE. 
// if input a and b are both high, state changes to SA.
// if input a and b are both low, state changes to IDLE.
always @(posedge clk, posedge reset)
begin
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
begin
case (cur_state)
SAB: next_state = (a&b) ? SAB : IDLE;
SA: next_state = (a&b) ? SA : IDLE;
IDLE: next_state = (a&b) ? SAB : IDLE;
default: next_state = IDLE;
endcase
end
// Output logic:
assign z = (cur_state == SAB);
end
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a or b are both low, state changes to IDLE.
always @(posedge clk, posedge reset)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
// combinational logic for the next state:
always @(*)
begin
case(cur_state)
IDLE:
if (a && b) next_state <= SA;
else if (a || b) next_state <= IDLE;
endcase
end
// combinational output logic:
assign z = (cur_state == SAB);

================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input b is high and input a is low, state changes to SA.
// if input b is low, and input a is high, state changes to IDLE.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(*)
case(cur_state)
IDLE: next_state <= (a) ? SA : IDLE;
SA : next_state <= (b) ? SB : SA;
SB : next_state <= (b) ? IDLE : SAB;
SAB: next_state <= (a) ? IDLE : SB;
default: next_state <= IDLE;
endcase
// Output z when current state is SAB.
assign z = (cur_state == SAB);

================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
// if neither a nor b are high, state changes to IDLE.
always @(posedge clk or negedge reset)
begin
if (!reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state or a or b)
begin
case (cur_state)
IDLE:
begin
if (a == 1'b1 && b == 1'b1)
next_state <= SA;
else if (b == 1'b1)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if (a == 1'b1)
next_state <= IDLE;
else
next_state <= SA;
end
SB
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only a is high, state changes to SA.
// if only b is high, state changes to SB.
always @(posedge clk, posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state, a, b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if(a)

================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a and b are both low, state changes to IDLE.
// If input a is high and b is low, state changes to SA. 
// If input a is low and b is high, state changes to SB.
always @(posedge clk or posedge reset) begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
// Combinational logic of the Moore FSM:
always @(cur_state or a or b) begin
case(cur_state)
IDLE: begin
next_state <= a ? SA : IDLE;
z <= 0;
end
SA: begin
next_state <= b ? IDLE : SA;
z <= 0;
end
SB: begin
next_state <= b ? SA : SB;
z <= 0;
end
SAB: begin
next_
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// else if only a is high, state changes to SA.
// else if only b is high, state changes to SB.
always @(posedge clk) begin
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always @(cur_state or a or b) begin
case (cur_state)
IDLE: begin
if (a==1'b1 && b==1'b1) next_state <= SA;
else if (a==1'b1) next_state <= SB;
else if (b==1'b1) next_state <= SAB;
end
SA: begin
if (a==1'b1 && b==1'b1) next_state <= SAB;
else if (a==1'b1) next_state <= SA;
else if (b==1'b
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB.
always@(posedge clk or negedge reset)
begin
if(~reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(cur_state or a or b)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(a)
next_state <= SA;
else
next_state <= SAB;
end
SB:
begin
if(b)
next_state <= SB;
else
next_state <= SAB;

================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
always @(posedge clk)
begin
if(reset) 
cur_state <= IDLE;
else
cur_state <= next_state;
end
// nest state transition logic:
// Output z is asserted 1 when the current state is SAB.
always @(cur_state)
begin
case(cur_state)
IDLE: begin
if(a && b)
next_state <= SA;
else
next_state <= IDLE;
z <= 0;
end
SA: begin
if(a && b)
next_state <= SB;
else
next_state <= SA;
z <= 0;
end
SB: begin
if(a && b)
next_state <= SAB;
else
next_state <= IDLE;
z <= 0;
end
SAB: begin
if(a && b)
next_state <= S
================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If input a is high, state changes to SA, if input b is high, to SB.
// If both inputs are low, output z is asserted.
always @(posedge clk) begin
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
always @(*) begin
	case(cur_state)
	IDLE: next_state <= (a) ? SA : IDLE;
	SA: next_state <= (b) ? SB : SA;
	SB: next_state <= SAB;
	SAB: next_state <= IDLE;
	default: next_state <= IDLE;
	endcase
end
// Output logic:
assign z = (cur_state == SAB) ? 1 : 0;

================================================================
