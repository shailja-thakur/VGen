example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, state changes to IDLE. 
// if input a is high and input b is low, state changes to SA. 
// if input a is low and input b is high, state changes to SB. 
always@(posedge clk)
	if(reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
	// next state
always@(*)
	case(cur_state)
	IDLE:
	begin
	next_state <= SA;
	casez({a,b})
	2'b00: next_state <= IDLE;
	2'b01: next_state <= SA;
	2'b10: next_state <= SAB;
	2'b11: next_state <= IDLE;
	endcase
	end
	SA
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, then state changes to SA. 
// if input b is high, then state changes to SB. 
// if all inputs are low, then state changes to IDLE. 
always @(posedge clk)
if (reset) 
cur_state <= IDLE;
else
cur_state <= next_state;
always @*
case(cur_state)
IDLE: next_state <= a & b ? SAB : IDLE;
SA: next_state <= a ? SA : IDLE;
SB: next_state <= b ? SB : IDLE;
SAB: next_state <= a & b ? SAB : IDLE;
default: next_state <= IDLE;
endcase

assign z = (cur_state == SAB);


================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high, state changes to SA.
// if input b is high, state changes to SB.
always@(posedge clk)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always@(*)
begin
case(cur_state)
IDLE:
begin
if(a)
next_state <= SA;
else if(b)
next_state <= SB;
else
next_state <= IDLE;
end
SA:
begin
if(b)
next_state <= SAB;
else
next_state <= SA;
end
SB:
begin
if(a)
next_state <= SB;
else
next_state <= SAB;
end
SAB:
begin
if(b)
next_state <= IDLE;
else
next
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if only input a is high, state changes to SA. 
// if only input b is high, state changes to SB. 
always @(posedge clk or posedge reset)
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
always @ (*)
begin
case(cur_state)
IDLE: begin
if (a) next_state <= SA;
else next_state <= IDLE;
end
SA: begin
if (b) next_state <= SB;
else next_state <= SA;
end
SB: begin
if (a) next_state <= SA;
else next_state <= SAB;
end
SAB: begin
next_state <= IDLE;
end
default: begin
next_state <= IDLE;
end
endcase
end
assign z = (cur_state ==
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a is high and b is not, state changes to SA. 
// if b is high and a is not, state changes to IDLE. 
always @(posedge clk, posedge reset) begin
if (reset) cur_state <= IDLE;
else cur_state <= next_state;
end
// Next state logic
always @(*) begin
case (cur_state)
IDLE : begin
if (a == 1'b1 && b == 1'b1) next_state = SA;
else if (b == 1'b1) next_state = IDLE;
else next_state = SB;
end
SA : begin
if (a == 1'b1) next_state = IDLE;
else next_state = SB;
end
SB : begin
if (b == 1'b1) next_state = IDLE;
else
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and b is low, state changes to SA.
// if input a is low and b is high, state changes to SB.
always @ (posedge clk) begin
if (reset) 
cur_state <= IDLE;
else begin
cur_state <= next_state;
// Case transition logic:
case (cur_state)
IDLE: begin
if (a == 1'b1 && b == 1'b0)
next_state <= SA;
else if (b == 1'b1 && a == 1'b0)
next_state <= SB;
else
next_state <= IDLE;
end
SA: begin
if (a == 1'b1 && b == 1'b0)
next_state <= SAB;
else
next_state <= IDLE;
end
SB: begin
if (a == 1'
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, then state changes to IDLE. 
// if input a is high and b is low, state changes to SA. 
// if input a is low and b is high, state changes to SB.
always@(posedge clk) begin
if(reset) cur_state <= IDLE;
else cur_state <= next_state;
end
always@(*) begin
case(cur_state)
IDLE: begin
if(a && b) next_state <= SA;
else if(a && ~b) next_state <= IDLE;
else if(~a && b) next_state <= SB;
else next_state <= IDLE;
end
SA: begin
if(a && b) next_state <= SAB;
else if(~a && b) next_state <= IDLE;
else if(~a
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input b is high only, state changes to SA.
// if input a or b is low, state changes to SB.
// if none of above three conditions is met, state remains at the same state.
always @(posedge clk or posedge reset)
begin
if(reset)
cur_state <= IDLE;
else
cur_state <= next_state;
end
always @(cur_state)
begin
case(cur_state)
IDLE: begin
if(a&b)
next_state <= SA;
else if(b)
next_state <= SB;
end
else
next_state <= cur_state;
endcase
end
// Output logic
always @(cur_state)
begin
case(cur_state)
SA: begin
z = 1;
end
SB: begin
z = 0;
end
endcase
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, next_state = IDLE.
always @(posedge clk) begin
if (reset) 
cur_state <= IDLE;
else
cur_state <= next_state;
end
// Insert nest state logic for output z:
always @(cur_state)
case(cur_state)
IDLE : next_state <= a ? SA : IDLE;
SA : next_state <= a ? SA : b ? SB : IDLE;
SB : next_state <= b ? IDLE : SA;
default : next_state <= IDLE;
endcase
assign z = (cur_state == SAB);

================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b are both low, next_state = IDLE, state = SA
// if input a is low and b is high, next_state = IDLE.
always @(posedge clk)
if (reset)
cur_state <= IDLE;
else
cur_state <= next_state;
// Moore FSM: 
// cur_state is the state of current clock edge.
// next_state is the next state after current clock edge.
// z is asserted when current state is SAB.
always @(*)
case (cur_state)
IDLE: next_state = IDLE;
SA: next_state = SA;
SB: next_state = SA;
SAB: next_state = SAB;
default: next_state = IDLE;
endcase
always @(*)
case (cur_state)
IDLE: 
================================================================
