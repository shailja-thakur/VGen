example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in) 
begin
	case(in)
	3'b000: pos = 2'b00;
	3'b001: pos = 2'b01;
	3'b010: pos = 2'b10;
	3'b011: pos = 2'b11;
	default: pos = 2'b00;
	endcase
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in)
case(in)
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
3'b100: pos = 2'b00;
3'b101: pos = 2'b01;
3'b110: pos = 2'b10;
3'b111: pos = 2'b11;
default: pos = 2'b00;
endcase

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
casex (in)
3'b0_xxx: pos = 2'b00;
3'b1_000: pos = 2'b00;
3'b1_001: pos = 2'b01;
3'b1_010: pos = 2'b10;
3'b1_011: pos = 2'b11;
default: pos = 2'b00;
endcase
end

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( * )
begin
case( in )
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
endcase
end

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always@(*)
case(in)
3'b000: pos=2'b00; 
3'b001: pos=2'b01;
3'b010: pos=2'b10;
3'b011: pos=2'b11;
default: pos=2'b00;
endcase

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in ) begin
if (in == 3'b000) begin
pos = 2'b00;
end
else if (in == 3'b001) begin
pos = 2'b01;
end
else if (in == 3'b010) begin
pos = 2'b10;
end
else if (in == 3'b011) begin
pos = 2'b11;
end
else if (in == 3'b100) begin
pos = 2'b00;
end
else if (in == 3'b101) begin
pos = 2'b10;
end
else if (in == 3'b110) begin
pos = 2'b11;
end
else if (in == 3'b111) begin
pos = 2'b11;
end
end

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @( in )
case ( in )
3'b000 : pos = 2'b00;
3'b001 : pos = 2'b01;
3'b010 : pos = 2'b10;
3'b011 : pos = 2'b11;
default : pos = 2'b00;
endcase

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in)
case(in)
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
endcase

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
case (in)
3'b000 : pos = 2'b00;
3'b001 : pos = 2'b01;
3'b010 : pos = 2'b10;
3'b011 : pos = 2'b11;
endcase
end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
if (in[2]==1'b1)
assign b=in[2];
else if (in[1]==1'b1)
assign b=in[1];
else if (in[0]==1'b1)
assign b=in[0];
else
assign b=0;
always @(*)
if (in[2]==1'b1)
assign sel=1'b1;
else if (in[1]==1'b1)
assign sel=1'b1;
else if (in[0]==1'b1)
assign sel=1'b1;
else
assign sel=1'b0;
always @(*)
if (in[2]==1'b1)
assign out=2'b11
================================================================
