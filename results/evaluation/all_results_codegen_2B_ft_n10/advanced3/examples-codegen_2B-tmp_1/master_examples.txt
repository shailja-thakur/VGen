example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk, negedge reset)
begin
	if (reset==1)
	begin
	present_state <= IDLE;
	end
	else
	present_state <= next_state;
end
// next_state is assigned according to present_state and the input data x
always@(present_state, x)
begin 
	case(present_state)
	 IDLE: if(x) next_state = S1;
	 else next_state = IDLE;
	 S1: next_state = IDLE;
	 S10: if(x) next_state = IDLE;
	 else next_state = S101;
	 S101: next_state = S1;

	endcase
always@(present_state, x)
begin 
	case(present_state)
	 IDLE: if(
================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset) begin
// always @(posedge clk) begin
 if (reset) 
 current_state <= IDLE;
 else
 current_state <= next_state;
 end
 always @(present_state,x) begin
// always @(present_state,x) begin
 case(present_state)
 IDLE:
 begin
 if (x) next_state <= S1;
 else next_state <= IDLE;
 end
 S1:
 begin
 if (x) next_state <= S10;
 else next_state <= S1;
 end
 S10:
 begin
 if (x) next_state <= S101;
 else next_state <= S10;
 end
 S101:
 begin
 if (x) next_state <= IDLE;
 else next_state <= S101;
 end
 endcase
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



	always @(present_state, x)
	case (present_state)
	IDLE:
	if (x == 1) next_state = IDLE;
	else next_state = S1;
	 S1:
	if (x == 0) next_state = S10;
	else next_state = S1;
	 S10:
	if (x == 1) next_state = IDLE;
	else next_state = S101;
	S101:
	if (x == 1) next_state = IDLE;
	else next_state = S1;
	default: 
	next_state = IDLE;
	endcase 
	always @ (posedge clk )
	if (reset) present_state = IDLE;
	else present_state = next_state


================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset) 
	begin
	if (reset) 
	present_state <= IDLE;
	else 
	present_state <= next_state;
	end
always @(present_state,x)
case (present_state)
IDLE : begin
	next_state = (x) ? S1 : IDLE;
	z = 0;
	end
S1 : begin
	next_state = (x) ? IDLE : S1;
	z = 0;
	end
S10 : begin
	next_state = (x) ? S1 : ( !x ) ? IDLE : S10;
	z = 0;
	end
S101: begin
	next_state = (x) ? IDLE : S101;
	z = 1;
	end
default: begin

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
 if(reset) 
 present_state <= IDLE;
 else 
 present_state <= next_state;
 always @(present_state or x)
 case(present_state)
 IDLE:
if(reset && x) 
 next_state <= IDLE;
else 
 next_state <= S1;
 S1:
 if(reset && x)
 next_state <= IDLE;
 else
 next_state <= S10;
 S10:
 if(reset && x)
 next_state <= IDLE;
 else
 next_state <= S101;
 S101:
 if(reset && x)
 next_state <= IDLE;
 else
 next_state <= IDLE;
 endcase
 endmodule
module synCounter (clk, reset, Q);
input clk, reset;
output
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
	if(reset)present_state <= IDLE; else present_state <= next_state;
always @(present_state or x)
	case(present_state)
	IDLE : 
	begin
	next_state = x ? S1 : IDLE;
	z=1'b0;
	end
	S1 : 
	begin
	next_state=x ? IDLE : S1 ;
	z=1'b0;
	end
	S10 : 
	begin
	next_state = x ? IDLE : S10;
	z=1'b0;
	end
	S101 : 
	begin
	next_state = x ? IDLE : S101;
	z=1'b0;
	end
	endcase

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(present_state, reset, x)
 begin
 case(present_state)
 IDLE:
 case (reset)
 1'b0: next_state = IDLE;
 1'b1: next_state = S1;
 // x is deasserted only when succeeding circuit is ready
 // if othercircuit is ready, next_state stays at IDLE.
 // if other circuit is busy, next_state driven to occurs if waiting for other circuit to stop.
 if (!busy) next_state = x ? S1 : IDLE;
 // nolock till we add something to say not free to access the pool.
 end 
 S1:
 case (x)
 1'b0: next_state = S10;
 1'b1: next_state = IDLE;
 // x is asserted when trying cells left in current row when othercircuit waits to be
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ ( present_state , x , next_state) 
begin
case(present_state)
IDLE: if( x ) next_state = S1; else next_state = IDLE;
S1: if( x ) next_state = IDLE; else next_state = S10;
S10: if( x ) next_state = IDLE; else next_state = S101;



endcase
end

always @( present_state , x ) 
begin
case(present_state)
IDLE: if( x ) z=1; else z=0;
S1: if( x ) z=0; else z=0;
S10: if( x ) z=0; else z=0;
S101: if( x ) z=0; else z=1;

endcase

end

always @
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x or reset)
begin

if(x & reset) 
present_state <= IDLE; 

else if(x) 
present_state <= S10;

else if (~x) 
present_state <= S1; 

end 
always @(present_state)
case (present_state)
IDLE :
next_state <= IDLE; 

S1 : 
next_state <= S10;

S10 : 
next_state <= S101;

S101 : 
next_state <= IDLE;

endcase 

always @(posedge clk)
present_state <= next_state;

always @(present_state)
case (present_state)
IDLE :
z <= 1'b0;

S1 : 
z <=
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk or posedge reset)
	if(reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
always@(present_state,x)
	case( present_state )
	IDLE: next_state <= x ? S1 : IDLE;
	S1: next_state <= x ? S10 : IDLE;
	S10: next_state <= x ? S101 : IDLE;
	S101: next_state <= x ? IDLE : S1;
	endcase 	

//primitive assignments
	
reg [1:0]cnt;
always@(posedge clk or posedge reset)
	if(reset) cnt <= 0; else cnt <= cnt+1;


================================================================
