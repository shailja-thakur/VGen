example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= IDLE;
else
next_state <= S10;
end
S10:
begin
if(x)
next_state <= IDLE;
else
next_state <= S101;
end
S101:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
endcase
end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
	if(reset)
	begin
	present_state <= IDLE;
	end
	else
	present_state <= next_state;
end
always @(present_state or x)
begin
case(present_state)
IDLE:
	begin
	if(x==0)
	next_state <= IDLE;
	else
	next_state <= S1;
	end
S1:
	begin
	if(x==0)
	next_state <= S10;
	else
	next_state <= S1;
	end
S10:
	begin
	if(x==0)
	next_state <= S101;
	else
	next_state <= S10;
	end
S101:
	begin
	if(x==
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if (x==1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if (x==0)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if (x==1)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if (x==0)
next_state <= IDLE;
else
next_state <= S1;
end
default:
next_state <= IDLE;
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
if(~reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
	case(present_state)
	IDLE:
	begin
	next_state <= x ? S1 : IDLE;
	z <= 0;
	end
	S1:
	begin
	next_state <= x ? S10 : IDLE;
	z <= 0;
	end
	S10:
	begin
	next_state <= x ? S101 : IDLE;
	z <= 0;
	end
	S101:
	begin
	next_state <= x ? IDLE : S1;
	z <= 1;
	end
	default:
	begin
	next_state
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if(x)
present_state <= S1;
else if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
endcase
end

================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end
always @(present_state, x)
begin
case(present_state)
IDLE:
begin
if(x == 1)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x == 0)
next_state <= S10;
else
next_state <= IDLE;
end
S10:
begin
if(x == 1)
next_state <= S101;
else
next_state <= IDLE;
end
S101:
begin
next_state <= IDLE;
end
endcase
end
assign z = (present_state == S101);

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state, x)
begin
case (present_state)
IDLE : 
begin
if (x)
next_state <= S1;
else
next_state <= IDLE;
end

S1 : 
begin
if (x)
next_state <= S10;
else
next_state <= IDLE;
end

S10 : 
begin
if (x)
next_state <= S101;
else
next_state <= IDLE;
end

S101 : 
begin
next_state <= IDLE;
end

default : 
next_state <= IDLE;
endcase
end


================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if (reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE:
begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1:
begin
if(x)
next_state <= S10;
else
next_state <= S1;
end
S10:
begin
if(x)
next_state <= S101;
else
next_state <= S10;
end
S101:
begin
if(x)
next_state <= IDLE;
else
next_state <= S1;
end
endcase
end


================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or posedge reset)
begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case(present_state)
IDLE : begin
	if(x==1)
	next_state = S1;
	else
	next_state = IDLE;
	end
S1 : begin
	if(x==0)
	next_state = S10;
	else
	next_state = IDLE;
	end
S10 : begin
	if(x==1)
	next_state = S101;
	else
	next_state = IDLE;
	end
S101 : begin
	if(x==1)
	next_state = IDLE;
	else
	next
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= IDLE;
	else
	present_state <= next_state;
	end
	always @(present_state or x)
	begin
	if (present_state == IDLE)
	case (x)
	1'b0: next_state <= IDLE;
	1'b1: next_state <= S1;
	default: next_state <= IDLE;
	endcase
	end
	always @(present_state)
	begin
	case (present_state)
	IDLE:z=1'b0;
	S1:z=1'b0;
	S10:z=1'b0;
	S101:z=1'b0;
	default:z=1'
================================================================
