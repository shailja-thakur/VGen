example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	r_reg <= 5'b1000000;
	end
	else
	begin
	// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
	// assign feedback concatenated with 4 most significant bits of r_reg to r_next
	// assign r_reg to the output q
	// assign feedback to r_reg
	r_next = {feedback_value, r_reg[3:0]};
	end
end

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)begin
	if(reset)
	begin
	r_reg <= 5'b00000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
// connect the module's output q to the xor function
assign q = r_reg ^ {2'b0, r_reg[3:1]};
// next value of the module for the feedback cycle
always @(*)begin
	r_next = {r_reg[3:0], r_reg[4]};
	r_next[0] = r_reg[4] ^ r_reg[1];
	r_next[1] = r_reg[0] ^ feedback_value;
	r_next[2] = r_reg[1] ^ feedback_value;
	r_next[3] =
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// invert feedback_value to create feedback
always @(posedge clk or posedge reset)
	if (reset == 1'b1) r_reg <= 5'b11111;
	else r_reg <= r_next;
assign r_next = r_reg ^ {feedback_value, r_reg[4:1]};
assign q = r_reg;
xor(feedback_value, r_reg[4], r_reg[2]);

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset)
begin
	if (reset)
	begin
	r_reg <= 5'b00000;
	end
	else
	begin
	r_reg <= r_next;
	end
end
// feedback_value and r_reg have a 2 bit carry
assign feedback_value = r_reg[0] ^ r_reg[1] ^ r_reg[2] ^ r_reg[3] ^ r_reg[4] ^ r_reg[5];
// next state
assign r_next = r_reg; // default
always @ (feedback_value)
begin
	case (feedback_value)
	1'b1 :
	begin
	r_next <= r_reg; // all 1's
	end
	1'b0 :
	begin
	r_next <=
================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk)
begin
if(reset)
r_reg<=1;
else
r_reg<=r_next;
end

// next state
assign r_next = {r_reg[3:0], feedback_value};

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg;
always @(posedge clk)
begin
if(reset)
r_reg <= 5'b1;
else
r_reg <= r_next;
end
// next state values
assign r_next = r_reg;
assign feedback_value = r_reg[0] ^ r_reg[1] ^ r_reg[1] ^ r_reg[1] ^ r_reg[2] ^ r_reg[4];
// determine the next value
xor_4bit xor_bit3and4_0(r_next[0], r_next[1], r_next[2], r_next[3], feedback_value);

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign q to the output r_reg
assign q = r_reg;
assign feedback_value = r_reg[4] ^ r_reg[3];
always @(posedge clk)
begin
if(reset) 
	r_reg <= 5'b00001; // on reset set the value of r_reg to 1
else
	r_reg <= r_next; // otherwise assign r_next to r_reg
end
// assign r_next to r_reg
// instantiate two 1 bit adders
// assign r_reg with the result of the addition
// assign the feedback bit concatenated with the r_reg
// assign r_next with the result of the addition
lfsr_2bit U1(.q(r_next[0]), .d(r_reg[4]), .s(r_next[1]), .k(feed
================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign q to the output r_next
// assign q to the output r_reg
// assign r_reg to the output q
assign q = r_reg;
assign r_next = r_reg ^ feedback_value;
always @(posedge clk)
begin
if(reset)
r_reg <= 5'b010101;
else
r_reg <= {r_reg[3:0], r_next[4]};
end
assign feedback_value = r_reg[4] ^ r_reg[2];

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk)
begin
 if (reset)
	begin
	r_reg <= 1;
	end
 else 
	begin
	r_reg <= r_next;
	end
end
assign feedback_value = r_reg[1] ^ r_reg[4];
assign r_next = r_reg ^ {feedback_value,r_reg[3:0]};

================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// assign q to the output q
assign q = r_reg;
always @(posedge clk or posedge reset)
begin
if (reset) 
r_reg <= 1;
else
r_reg <= r_next;
end
assign feedback_value = {q[4],q[3],q[2],q[1] ^ q[0]};
assign r_next = r_reg ^ feedback_value;

================================================================
