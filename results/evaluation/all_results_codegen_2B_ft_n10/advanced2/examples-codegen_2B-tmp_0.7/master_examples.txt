example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 0;
	end
	else
	begin
	if (slowena == 1)
	begin
	if (q == 9)
	q <= 0;
	else
	q <= q + 1;
	end
	end
end

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If reset is low, the output q is not changed.

always @(posedge clk)
begin
 if (reset)
	q <= 4'b0;
 else
 if (slowena)
 if(q != 4'b1001)
	q <= q + 1'b1;
 else
	q <= 4'b0;
end


================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk, posedge reset)
begin
 if(reset)
 q <= 0;
 else
 if(slowena)
 if(q != 9)
 q <= q + 1;
 else
 q <= 0;
end

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, do nothing.
always @ (posedge clk or posedge reset) begin
 if (reset) q <= 0;
 else if (slowena) q <= q + 1;
 else q <= q;
 end


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Note that the ena is only considered when the q is not 9.

always @(posedge clk)
 if (reset)
 q = 4'b0000;
 else if (slowena)
 if (q != 4'b1001)
 q = q + 1;
 endmodule


// Design a 10-bit digital adder with carry in and carry out

module adder_4bit_carryin(
	input [3:0] a,
	input [3:0] b,
	input cin,
	output [4:0] sum,
	output cout);

// The carry in is only propagated when the input is high.
// Otherwise the inputs are simply added. 

assign {cout, sum} = a + b + cin;


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always@(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q <= 4'h0;
	end
	else
	begin
	if (slowena && q < 4'h9 && ~q[3])
	q <= q + 1;
	
	// This is the only way to reset the counter.
	// If reset is high, a positive edge of the clock
	// will clear the counter. 
	end
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
	begin
	if (reset)
	q <= 0;
	else if (slowena)
	if (q < 9)
	q <= q + 1;
	else
	q <= 0;
	end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Otherwise, q is not incremented.
always @(posedge clk)
begin
 if (reset) q <= 0;
 else if (slowena == 1 && q != 9) q <= q + 1;
end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// Assertions:

always @(posedge clk)
if(reset)
 q <= 0;
 else if(slowena)
 if(q < 9)
 q <= q + 1;
 else
 q <= 0;


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If either of the above is flipped, depending on the value of the ena input,
// the q output will increment or decrement.

always @ (posedge clk, posedge reset)
begin
 if (reset)
 q <= 4'b0000;
 else if (slowena) begin
 if (q == 4'b1001)
 q <= 4'b0;
 else if (q != 4'b0)
 q <= q + 1'b1;
 end
 else
 q <= 4'b0;
 end
 endmodule



module count_slow_tb;

// Inputs and outputs
reg clk, slowena, reset;
wire [3:0] q;

// Instantiate the design block
count_slow my_module(
clk,
slowena,
reset,
q);

initial begin
// Initialize Inputs
================================================================
