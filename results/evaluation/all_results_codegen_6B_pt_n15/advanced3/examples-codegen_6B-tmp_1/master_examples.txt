example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @ (posedge clk)
  begin
    next_state <= ((x==1) ? S101 : IDLE );
    
    present_state <= ((x==1) ? S101 : IDLE ) ;
  end
end

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE




================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE




begin
	// declare vars and clock
	unsigned int i, j;
	always @(posedge clk or negedge reset)
	 begin
	  	idle_logic 0 <= i <=97 && i <= 122;
    		idle_logic j <= 32 && j <= 126;	
		// z <= 1 when the even bit 7 is set
		if(i<=110&&i>=98&&j<=32) {z <= '1';}
		else { z <= '0';}	
	 end

	// assign inputs
	assign present_state = IDLE;
	assign next_state = IDLE;
	assign x = '0';
	// none-unlikely conditions	
	if (i == 97) {next_state = S10; x = '1';}
	for(i=97
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// Comment in the final .vhd file
clock clk;

end BehavioralFsm;

architecture BehavioralFsm of BehavioralFsm is
begin
  component clk_ck with behavior 'hold_value 63 FF';
 - inherent clk <= clk_ck, reset <= clk_ck;
 end BehavioralFsm;

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
assign next_state = S1; // to propagate the sign bit
SC_CTOR( fsm )
{
  SC_THREAD( c );
}




always @() begin
  if (reset) {
    next_state = IDLE;
    present_state = IDLE;
  }
  endswitch;





 


always @() begin
  if (next_state == IDLE) {
    if (x) next_state = S1;
  }
  else if (next_state == S1) {
    if (x) next_state = S10;
  }
  else if (next_state == S10) {
    if (x) next_state = S101;
  }
  else if (next_state == S101) {
    next_state = IDLE;
    z
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


module xlator
(
  input clk,
input reset,
input a,
output x, 
output z, 
output thor,
output thor_ack,
output adc,
input x_bits,
input q,
input p
);

xlator x;   
// submodule xlat
interface(
 integer_input clk,
 integer_input reset,
 integer_output x )
{  

  x <= a;
};

module(
  ALIGNED (x, 64)
  real_output x_tmp,  
  real_output thor_tmp,
  real_output adc_tmp, 
  input xA,   
  input xB,
  input xA_bit,
  input xB_bit,
  input V_adc
 ) 
 
// submodule xlat
{  
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  tck <= clk;

  case (IDLE+S1): tck? 
    next_state = S10; 
    if( x == 0 ) next_state = S101; 
    present_state = IDLE; 
    z <= next_state;	
    return;

  case (S101+S10): tck? 
    present_state = S1; 
    next_state = IDLE;
    if( x == 1 ) next_state = S101; 
    z <= next_state;
    return;

  default: deadlock
}

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



begin 

	present_state = IDLE;
	next_state = IDLE;
end

begin 
	assert z == 0;
	if (x == 1) {
		if (next_state != IDLE) throw "Error: previous state was not Idle"; 
		next_state = S1;
	}
	if (next_state == S1) {
		if (x == 0) {
			present_state = next_state;
			next_state = IDLE;
			z = 1;
		}
	}
	if (next_state == S10) {
		if (x == 1) {
			present_state = next_state;
			next_state = IDLE;
			z = 0;
		}
	}
	if (next_state == S101) {
		if (x ==
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// Clk and Reset pins of the ADS (Aio Module)

assign clk=1'b1, reset=1'b0, z=1'b0;

initial begin
  if (x=0) begin //clear resets
    next_state=IDLE;
    present_state=IDLE;
  end
  if (x=1) begin //clear resets
    next_state=S1;
    present_state=IDLE;
  end
  if (present_state==IDLE) begin // handle data
    z<=(next_state=S101) ? z=1'b1: z=1'b0;
    next_state=idle;
    present_state=next_state;
    if (present_state==IDLE) next_state=S1;
  end
  if (present
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk)
        //assert(next_state == IDLE);
                if(x == 0) // reset needs to be asserted by the outside world
                {
                    if (reset == 1)
                    {
                        next_state = IDLE;
                        present_state = IDLE;
                    }
                }
                else // otherwise it must be controlled from the outside world
                {
                    if (x == 1) 
                    {
                        if (present_state == S10)
                        {
                            next_state = S1;
                            present_state = S1;
                        }
                        else if (present_state == IDLE)
                        {
                            next_state = S1;
                            present_state = S1;
                        }
                        else if (present_state == S101)
                        {
                            next_state = IDLE;
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk)
  begin
    if (reset)
    begin
      next_state <= IDLE;
      present_state <= IDLE;
    end
    // here is block 1
    if (next_state == S1)
    begin
      next_state <= S10;
      if (x == 0)
      next_state <= IDLE;
    end
    // here is block 2
    if (next_state == S10)
    begin
      next_state <= S101;
      if (x == 0)
      next_state <= IDLE;
    end
    // here is block 3
    if (next_state == S101)
    begin
      next_state <= IDLE;
    end
  end
end

/*
 
          S1 (0)                s1 (1)
        
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
    if (reset) next_state = IDLE;
    else next_state <= present_state;
    if (x == 1 and next_state == IDLE) next_state <= S1;
    if (x == 0 and next_state == SIDLE) next_state <= S101;
    if (x == 0 and next_state == S1 and y == 0) next_state <= S10;
    if (x == 1 and next_state == S10 and y == 1) next_state <= S101;
    if (next_state == S1) z <= 1;
end

================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 \n
 //\ tsInstance tsInstance ( );
 //\ tsBehavior(
//\ .ownership(BUILTIN)
//\ .initial_state(IDLE)
//\ .state_transitions
//\ .\tS1\t\>S10\n
//\ .\tS10\t\>IDLE\n
//\ .\tS101\t\>S101\n
//\ )\n
advanced_fsm_hdl(
 clk, 
 reset, 
 x, 
 z );  
endcase
endbehavior


================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or negedge reset)
    if(reset) next_state=IDLE;
	else if(x==0) next_state=IDLE;
	else next_state=(present_state & S1) | ((~present_state) & S10);
	if(next_state!=IDLE) present_state=next_state;


================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  always @(posedge clk)
	if (next_state == IDLE)
	{
		next_state = (present_state >= IDLE) ? S1			: IDLE;
		if (present_state < IDLE)
		{
			next_state = (next_state == S1) ? S10: next_state;
			if (next_state != IDLE)
				next_state = x ? S101 : IDLE;
		}
		if (next_state == S101)
		{
			next_state = IDLE;
		}
	}
	else
	{
		next_state = x ? S101 : IDLE;
		if (next_state == IDLE)
		{
			next_state = present_state;
		}
	}
	
	assign z = {} next_state
================================================================
