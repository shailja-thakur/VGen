example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	if (cur_state == IDLE)
	begin
		next_state = SAB;
		cur_state = SAB;
		z = 1;
		if (a == 1)
		{
			next_state = SA;
			cur_state = SA;
			z = 1;
		}
		if (b == 1)
		{
			next_state = SB;
			cur_state = SB;
			z = 1;
		}
	end
	else if (cur_state == SA)
	begin
		next_state = SAB;
		cur_state = SAB;
		z = 1;
	end
	else if (cur_state == SB)
	begin
		next_state = SAB;
		cur_state = SAB;
		z =
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  begin
    if (cur_state == IDLE and a and b) next_state = SAB;
    if (cur_state == IDLE and a) next_state = SA;
    if (cur_state == IDLE and b) next_state = SB;
    if (next_state == SA and b) next_state = SAB;
    if (next_state == SB and a) next_state = SAB;
    if (next_state == SAB) z = 1;
    cur_state = next_state;
  end


================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk or negedge a or b)
begin
   if(next_state <> IDLE) begin
      z <= 1;
      cur_state <= next_state;
      next_state <= SAB;
   end
end

// The input signals are assigned to the signals a, b, and clk.
// The individual signals are high when the respective signal is high.
// The input signals are connected to the output signals a and b via an FSM.
// The FSM is controlled by the state of the input signals.
// The FSM executes the following transitions:
// If both the input signals a and b are high, the FSM outputs 1.
// If both the input signals a and b are low, the FSM outputs 0.
// If only one of the input signals a and b is high, then the FSM outputs 0.
// If
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
        z <= (a == 1 & b == 1 ? 1 : 0);

always @(posedge clk)
        cur_state <= (a == 1 & b == 1 ? SAB : next_state);

always @(posedge clk)
        next_state <= (a == 1 & b == 1 ? SA :
                      cur_state == SA ? SAB : SB);


================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  next_state <= (a==1 & b==1) ? SAB : cur_state;
  if (cur_state == IDLE)
    z <= 0;
  else if (cur_state == SA)
    if (a == 0)
      z <= 0;
    else
      z <= 1;
  else if (cur_state == SB)
    if (b == 0)
      z <= 0;
    else
      z <= 1;
  else if (cur_state == SAB)
    z <= 1;
end

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(*) begin
	if(clk == '1' && !reset) cur_state = IDLE;
	else if(reset == '1') cur_state = IDLE;
	else if(cur_state == IDLE)
		if(a == '1' && b == '1') next_state = SAB;
		else if(a == '1') next_state = SA;
		else next_state = SB;
	else if(cur_state == SA)
		if(a == '1' && b == '1') next_state = SAB;
		else if(b == '1') next_state = SB;
		else next_state = IDLE;
	else if(cur_state == SB)
		if(a == '1' && b == '1') next_state = SAB;
		else if(a
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  begin
    if (next_state == IDLE) begin
      if ((a == 1) and (b == 1)) next_state = SAB;
      else if (a == 1) next_state = SA;
      else if (b == 1) next_state = SB;
      else next_state = IDLE;
    end
    assert(next_state == IDLE);
    cur_state <= next_state;
  end
end

module bro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for the signals a and
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
    next_state <= cur_state && a;
    next_state <= cur_state && b;
    next_state <= cur_state && !a && !b;
    next_state <= cur_state && a && !b;
    next_state <= cur_state && !a && b;
    next_state <= cur_state && a && b;
    next_state <= cur_state && !a && b;
    next_state <= cur_state && !a && !b;
    next_state <= cur_state;
end

================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
{
  cur_state = IDLE;
  next_state = IDLE;
  if (a == 1 and b == 1) next_state = SAB;
  else if (a == 1 and b == 0) next_state = SA;
  else if (a == 0 and b == 1) next_state = SB;
  else cur_state = IDLE;
  next_state = next_state;
}

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  cur_state <= next_state;
  if (cur_state == IDLE)
    if (a == 1 and b == 1)
      next_state <= SAB;
    else
      next_state <= IDLE;
  if (cur_state == IDLE)
    if (a == 1)
      next_state <= SA;
    else
      next_state <= IDLE;
  if (cur_state == IDLE)
    if (b == 1)
      next_state <= SB;
    else
      next_state <= IDLE;
  if (cur_state == SA)
    if (b == 1)
      next_state <= SAB;
    else
      next_state <= SA;
  if (cur_state == SB)
    if (a
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
end

================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= next_state;
  if( next_state == IDLE and a and b )
    next_state <= SAB;
  if( next_state == IDLE and a )
    next_state <= SA;
  if( next_state == IDLE and b )
    next_state <= SB;
  if( next_state == SA and b )
    next_state <= SAB;
  if( next_state == SA and a )
    next_state <= SA;
  if( next_state == SA and b )
    next_state <= SAB;
  if( next_state == SB and a )
    next_state <= SAB;
  if( next_state == SB and b )
    next_state <= SAB;
  if( next_state == SAB
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
always @(posedge clk or negedge reset)
  begin
    if (cur_state == IDLE)
      begin
        next_state = IDLE;
        if (a) next_state = SA;
        else if (b) next_state = SB;
        else next_state = SAB;
      end
    else if (cur_state == SA)
      if (b) next_state = SAB;
      else next_state = IDLE;
    else if (cur_state == SB)
      if (a) next_state = SAB;
      else next_state = IDLE;
    else if (cur_state == SAB)
      next_state = IDLE;
    else next_state = cur_state;
    cur_state = next_state;
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  z <= (cur_state == SAB) ? 1 : 0;

// The input a and b are assigned to the state machine
always @(posedge clk)
  cur_state <= (a && b) ? SAB : ((cur_state == IDLE) ? IDLE : ((a) ? SA : SB));

// The input a is assigned to the state machine
always @(posedge clk)
  cur_state <= (a) ? SA : ((cur_state == IDLE) ? IDLE : SB);

// The input b is assigned to the state machine
always @(posedge clk)
  cur_state <= (b) ? SB : ((cur_state == IDLE) ? IDLE : SA);


================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @ (posedge clk) {
    if ((cur_state == IDLE) and (a == 1) and (b == 1) and (next_state == SA)) {
        next_state = SA;
    }
    if ((cur_state == IDLE) and (a == 1) and (b == 1) and (next_state == SAB)) {
        next_state = SAB;
    }
    if ((cur_state == IDLE) and (a == 1) and (b == 1) and (next_state == SB)) {
        next_state = SB;
    }
    if ((cur_state == SA) and (b == 1) and (next_state == SAB)) {
        next_state = SAB;
    }
    if ((cur_state == SB) and (a == 1) and (next_state ==
================================================================
