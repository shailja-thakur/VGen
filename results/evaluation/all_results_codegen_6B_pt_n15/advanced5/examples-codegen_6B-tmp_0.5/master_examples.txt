example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
  if(reset)
  {
    cur_state = IDLE;
    next_state = IDLE;
  }
  else
  {
    cur_state = IDLE;
    next_state = IDLE;
  }
  if(a)
  {
    cur_state = SA;
  }
  else if(b)
  {
    cur_state = SB;
  }
  else if(cur_state == SA)
  {
    next_state = SAB;
  }
  else if(cur_state == SB)
  {
    next_state = SAB;
  }
  else if(cur_state == SAB)
  {
    next_state = IDLE;
  }
  else
  {
    next_state = IDLE;
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
{
  if(next_state == IDLE)
  {
    if(a == 1 && b == 1) next_state = SAB;
    else next_state = IDLE;
  }
  else if(next_state == SA && a == 1) next_state = SB;
  else if(next_state == SB && b == 1) next_state = SA;
  else if(next_state == SAB) next_state = IDLE;
  else next_state = IDLE;
  cur_state = next_state;
}

================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (cur_state == IDLE)
    if (a == 1)
      next_state = SA;
    else if (b == 1)
      next_state = SB;
    else
      next_state = IDLE;
  else if (cur_state == SA)
    if (b == 1)
      next_state = SAB;
    else
      next_state = IDLE;
  else if (cur_state == SB)
    if (a == 1)
      next_state = SAB;
    else
      next_state = IDLE;
  else if (cur_state == SAB)
    next_state = IDLE;
  else
    next_state = IDLE;
  cur_state = next_state;
end

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state <= next_state;
    next_state <= cur_state;
    next_state <= (a == 1 && b == 1) ? SAB : ((a == 1) ? SA : SB);
    if (cur_state == IDLE)
    begin
        z <= (a == 1 && b == 1);
    end
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
z <= (
    ( (cur_state == IDLE) and (a == 1) and (b == 1) )
    or ( (cur_state == IDLE) and (a == 1) )
    or ( (cur_state == IDLE) and (b == 1) )
    or ( (cur_state == SA) and (b == 1) )
    or ( (cur_state == SB) and (a == 1) )
    or ( (cur_state == SAB) )
);

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always@(posedge clk or negedge reset) begin
	if (cur_state == IDLE) begin
		if (a && b) begin
			next_state = SAB;
			z = 1;
		end
		else begin
			next_state = IDLE;
		end
	end
	else if (cur_state == IDLE) begin
		if (a) begin
			next_state = SA;
			z = 1;
		end
		else if (b) begin
			next_state = SB;
			z = 1;
		end
		else begin
			next_state = IDLE;
		end
	end
	else if (cur_state == SA) begin
		if (b) begin
			next_state = SAB;
			z = 1;
		end
		else begin
			next_state =
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (next_state == SA)
    begin
        z <= a;
        cur_state <= SA;
    end
    else if (next_state == SB)
    begin
        z <= b;
        cur_state <= SB;
    end
    else if (next_state == SAB)
    begin
        z <= a & b;
        cur_state <= SAB;
    end
    else
    begin
        cur_state <= IDLE;
        z <= 1;
    end
end


================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
	cur_state <= IDLE;
	next_state <= IDLE;
	if (a == 1) {
		if (b == 1) {
			cur_state <= SAB;
			next_state <= SAB;
		}
		else {
			cur_state <= SA;
			next_state <= SA;
		}
	}
	else {
		if (b == 1) {
			cur_state <= SB;
			next_state <= SB;
		}
		else {
			cur_state <= IDLE;
			next_state <= IDLE;
		}
	}
	if (cur_state == IDLE) {
		next_state <= IDLE;
	}
	else {
		next_state <= cur_state;
	}
	z <= next_
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  if (reset)
  begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else
  begin
    if (a)
    begin
      cur_state <= SA;
      next_state <= SAB;
    end
    else if (b)
    begin
      cur_state <= SB;
      next_state <= SAB;
    end
    else
    begin
      cur_state <= IDLE;
      next_state <= IDLE;
    end
  end
  z <= cur_state;
end


================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
  begin
    if (cur_state == IDLE and a == 1 and b == 1) next_state = SAB;
    else if (cur_state == IDLE and a == 1) next_state = SA;
    else if (cur_state == IDLE and b == 1) next_state = SB;
    else if (cur_state == SA and b == 1) next_state = SAB;
    else if (cur_state == SA) next_state = IDLE;
    else if (cur_state == SB and a == 1) next_state = SAB;
    else if (cur_state == SB) next_state = IDLE;
    else if (cur_state == SAB) next_state = IDLE;
    else next_state = IDLE;
    cur_state
================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        if (a == 1)
        {
            next_state = SA;
        }
        else if (b == 1)
        {
            next_state = SB;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else if (cur_state == SA)
    {
        if (b == 1)
        {
            next_state = SAB;
        }
    }
    else if (cur_state == SB)
    {
        if (a == 1)
        {
            next_state = SAB;
        }
    }
    else if (cur_state == SAB)
    {
        next_state = IDLE;
    }
    cur_state
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
	if (reset) begin
		cur_state = IDLE;
		next_state = IDLE;
	end
	else if (cur_state == IDLE && a && b) begin
		next_state = SAB;
	end
	else if (cur_state == IDLE && a) begin
		next_state = SA;
	end
	else if (cur_state == IDLE && b) begin
		next_state = SB;
	end
	else if (cur_state == SA && b) begin
		next_state = SAB;
	end
	else if (cur_state == SB && a) begin
		next_state = SAB;
	end
	else if (cur_state == SAB) begin
		next_state = IDLE;
	end
end

//
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk or negedge reset)
begin
  if (reset) begin
    cur_state <= IDLE;
    next_state <= IDLE;
  end
  else if (a && b) begin
    cur_state <= SAB;
  end
  else if (a) begin
    cur_state <= SA;
  end
  else if (b) begin
    cur_state <= SB;
  end
  else begin
    cur_state <= IDLE;
  end
end


================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
  cur_state <= SA;
  next_state <= SA;
  if (a == 1) {
    if (b == 1) {
      next_state <= SAB;
    } else {
      next_state <= SA;
    }
  } else {
    if (b == 1) {
      next_state <= SB;
    } else {
      next_state <= IDLE;
    }
  }
  z <= next_state;
end

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) begin
        if (a == 1) begin
            next_state = SA;
        end
        if (b == 1) begin
            next_state = SB;
        end
    end
    if (cur_state == SA) begin
        if (b == 1) begin
            next_state = SAB;
        end
    end
    if (cur_state == SB) begin
        if (a == 1) begin
            next_state = SAB;
        end
    end
    if (cur_state == SAB) begin
        next_state = IDLE;
    end
    z = next_state;
end

// The following is an RTL model
module abro_tb(
input clk,
input reset,
input a,
================================================================
