example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  if (present_state == "0") next_state <= "1"; else next_state <= "0";
always @(conversion to comb)
  if (in) next_state = "1";
  else next_state = "0";
</pre>
The above code works on all platforms. To test, instantiate and
simulate it on its own:
.
\vert
The Moore state machine controlled using the standard FSM design.
.
If the conversion to comb is to be used for non-intuitive inputs, a
conversion from comb is needed. Here is another state machine, which is
expanded using the comb assembly function. The FSM design is simplified
to contain just the two outgoing transitions: in->1 or in->0 and
out->1 or out->0, both at the same rate.
.
.
\begin
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
  begin
    present_state <= in;
    next_state <= in;
    if (present_state) begin
      if (next_state) next_state <= 0; // state 0 -> state 1/clk
      else next_state <= 1; // state 1 -> state 0/clk
    end
  end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always begin
  out <= NEXT_BIT(in, in == reset);
end


================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    next_state <= present_state;
    next_state <= (in < 1)? 0 : 1;
    present_state <= next_state;
    out <= present_state ? (1'b1) : (1'b0);
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset)
    begin
        next_state <= 0;
    end
else
begin
    if (next_state==1) next_state <= 0;
    else next_state <= 1;

    present_state <= next_state;
end
end

// The Simple FSM must act as a 1-to-1 encoder
// of the next_state bits in the data stream.
// Given the present state, we want to convert it into a next
// state, which must be sent to output.
reg bits;
rect(199);
always @(posedge clk)
begin
    bits <= (present_state+1) & 0x0000077; //converts state (uint8) to bits hex value (uint2)
    clk <= 1;
end
begin
    // signal next_
================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk or in or out)
    if (present_state == 0 and in)
        next_state = 0;
    else if (present_state == 1)
        next_state = 1;
    else
    // fall through to default, default returns present_state
        next_state = default;
active hold;


	//Utils;
#ifndef DEBUCK_PARAMETERS
#define DEBUCK_PARAMETERS {"rail-volume=10", "regulator-converter-1=10 mV/V"},
#endif
	always @ (posedge clk or in or out)
		regueressdurabt.converter(handle, (in ? 1 : 0), debuck1);
	ordered_buffer rega1_ldbuf(regueressdurabt);
#if
================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always_comb begin
    case (next_state)
        case (0)
            out <= in;
        next_state <= present_state;
    end
end
end

module testnetb_fsm(clk, reset, in, out, enable);
input clk;
input reset;
input [5:0] in;
output out;
reg state;
always_comb begin
    case state <= 3:
        state <= (out ? 4 : 3);
    end
end

// register testnetb_dff out_from_clk_0 = testnetb_fsm(clk, reset, in, out, enable);


================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or in)
{
    next_state = 0;
    next_state <= 1;
    present_state <= next_state;
}

//component fsm_out_toggle
class fsm_out_toggle
{
is 0;
is fsm_out_toggle(state);
state state;
{
    if (state)
    {
        fsm_out_ttoggle > 1;
    }
    if (!state)
    {
        fsm_out_ttoggle > 0;
    }
};
property fsm_out_ttoggle;
//fsm_out_toggle .state(state);
update fsm_out_ttoggle[(state|)];
end;
};

//Entity
//state algorithm
//speed to state transfer done at majority of outputs
//speed to transition to next
================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or posedge reset)
  begin
    if (reset)
      next_state = 0; // The state is just wired in initially: one bit and tied to the clock
    else if (present_state == 1 and in == 1)
      next_state = 1;
    else 
      next_state = 0; 
    out <= next_state;
  end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always(clk.posedge)
if (reset)
next_state = 0;
else if (in)
next_state = 0;
else
next_state = 1;
always @(posedge clk)
if (next_state)
out.write('no');
else
out.write('yes');
end

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @() begin
  // The following event synthesizes the statement: out <= in && (next_state==0)
  if ( reset
    or active edge(clk)
    or (next_state==0)
    or (next_state==1 and active edge(in)) ) begin
    next_state <= in;
  end else begin
    next_state <= (in and (next_state==0)) or not(in);
  end
end
`

// all examples for C
var fsmExamplesForC = `
# system_mal
key 0=state 1
system_mal(clk, reset, in, out);
in_queue(in).
out_queue(out);
ram(data, 0x8).write(data_out, 0, 0, 32, 1, "bigendian");
reg data_in, data_out
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    // start with state 0
    if (reset == 1)
        present_state = 0;
    else
        present_state = next_state;
    next_state = present_state;
    // pulse output when in state 0
    if (present_state == 0)
        out = in;
    else
        out = 1;
end
end
*/
#include <iostream>
#include "mcbd_bindings.h"
#include "mcbd_test.h"

using namespace std;

int main()
{
    bool g = false;
    multicore_bind(g, g);
    simulation::Simulation sim;
    MicroController mcu;
    int state = 0, mead;
    
    mcu.reg(&state:0, state);
================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  present_state = select(int(next_state) == 0, in, present_state);
  int(next_state) <= combinatorial(present_state, in, out);
end
`

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
    next_state <= ((in && present_state==0) ? 1 : 0) & reset;
    present_state <= next_state;
end
end

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset)
start
      next_state <= present_state INTL(7) + (present_state & 1);
end


module simple_fsm_with_blocking(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
reg pres_state, mod_state;

always@(posedge clk or negedge reset)
start
      set_next(pres_state, mod_state);
      out <= (mod_state & 1) ? 1 : 0;
end

process ()
begin
      if (mod_state == 0) then
         if (in == 1 then
            if (pres_state == 0) then
               next_state <= next_state ^ 1 OUTTL(7);
               next_state <= mod_state;
            
================================================================
