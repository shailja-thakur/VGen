example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set next state to 0.
reg [1:0] next_state;
// State machine for in 0 to 1.
always@(state)
	case(state)
		0:
		begin
			if(in) begin
				next_state = 1;
				present_state = 0;
			end else if(present_state == 0) begin
				next_state = 2;
				present_state = 0;
			end else begin
				next_state = 0;
				present_state = 0;
			end
		end
		1:
		begin
			if(in) begin
				next_state = 2;
				present_state = 0;
			end
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set at transition 2 in state 1 and turn on transition 2 in state 0

always @(STATE)
    begin
    {next_state, in} = {in, ~present_state};
    {copy_state, out} = {next_state, in};
    {next_state} = {in, ~present_state};
    {case_state, in} = {in, ~present_state};
    {~present_state, in} = {in, ~present_state};
    {next_state, in} = next_state;
    {overflow, next_state} = {in, in} ^ (~present_state);
    {out, out} = next_state;
    end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set next state to 0 in state 1.
always@(posedge clk)
begin
  if(reset)
    present_state <= 0;
  else
    present_state <= next_state;
end

assign out = present_state == 0 ||
                         (present_state == 1 && !present_state);

// The next state should only be 0.
always@(*)
begin
  case(present_state)
    1 :
      begin
        if(in)
          next_state = 1;
        else if(present_state == 1 && !present_state[0] && !present_state[
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set up input in that cycle.
always@(posedge clk)
begin
  next_state = 0;
  case(present_state)
    1'b0: if(in) begin
         next_state = 1'b1;
      end else begin
         next_state = 1'b0;
      end
    1'b1: if(in) begin
         next_state = 1'b0;
      end
  endcase
end
// If state changes, then report ack state to 0.
always@(posedge clk)
begin
  if(reset)
    state <= 1'b0;
  else
    state <= next_state
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Set to 1 if input in=1, then state 0 in=0

initial begin
  state1 = state1;
  state0 = 0;
  next_state = 0;
  next_state = 0;
  next_state = 0;
  in = 0;
  out = 0;
  found_state = 0;
end

always @(posedge clk) begin
  if(reset) begin
    state1 = 0;
    state0 = 0;
    next_state = 0;
    in = 0;
    found_state = 0;
  end
  else begin
    case(state1)
      state0: begin
        // If in = 1, then next state is 1.
        if
================================================================
