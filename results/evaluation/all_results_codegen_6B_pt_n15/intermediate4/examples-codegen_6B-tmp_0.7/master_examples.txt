example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always(clk)
begin
  if (reset) begin
    next_state <= 0;
  end else begin
    next_state <= in;
  end
end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always(clk) begin
  if (reset) begin
    next_state <= 0;
    present_state <= 0;
  end
  else begin
    if (next_state) begin
      present_state <= 1;
      next_state <= 0;
      out <= in;
    end
    else begin
      present_state <= 0;
      next_state <= 1;
      out <= in;
    end
  end
end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset)
  state <= next_state;

// simple_fsm modularized as input and output signals
mod wire state;

always @(posedge clk or negedge reset)
  state <= in;

// This module contains a state machine with two states 0 and 1, one input
// in, and one output out. The state machine gets a reset signal
// specified by reset. The reset signal is used to initialize the state
// machine to the initial state 0. The input signal in is used to determine
// the next state of the state machine.
module simple_fsm_controller(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
	if (reset)
		next_state <= 0;
	else if (next_state == 0)
		out <= in && present_state == 0;
	else if (next_state == 1)
		out <= in && present_state == 1;
	else if (next_state == 0)
		out <= 1;
	else if (next_state == 1)
		out <= 0;
	else;
	present_state <= next_state;
end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset)
    begin
        next_state <= 0;
    end
    else if(next_state)
    begin
        next_state <= 1;
    end
    else
    begin
        next_state <= clk;
    end
end

// Testbench
simple_fsm #(.clk(clk), .reset(reset), .in(in), .out(out));


================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
  end
  else begin
    if (in) begin
      present_state <= next_state;
      next_state <= present_state;
    end
    else begin
      present_state <= next_state;
      next_state <= present_state;
    end
  end
end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset) begin
  if (reset) begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
  end else begin
    if (present_state == 0 and in) begin
      next_state <= 1;
    end else if (present_state == 1 and in) begin
      next_state <= 0;
    end else begin
      next_state <= present_state;
    end
  end
  out <= next_state;
end

// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk or negedge reset)
  state begin
    if (reset) begin
      present_state <= 0;
      next_state <= 0;
    end
    // transition from state 0 to state 1 if in=1
    else if (present_state == 0 and in) begin next_state <= 1; end
    // transition from state 1 to state 0 if in=1
    else if (present_state == 1 and in) begin next_state <= 0; end
    else begin
      present_state <= next_state;
      next_state <= present_state;
    end
  end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) next_state <= 0;
  else if (in) next_state <= 0;
  else next_state <= 1;
end

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset)
  begin
    present_state <= 0;
    next_state <= 0;
    out <= 0;
  end
  else if (present_state == 0)
  begin
    if (in)
    begin
      present_state <= 1;
      next_state <= 1;
      out <= 1;
    end
  end
  else
  begin
    if (in)
    begin
      present_state <= 0;
      next_state <= 0;
      out <= 0;
    end
  end
end

// Example simple_fsm with two states and multiple inputs.
//
// This example also shows the use of a separate module to represent the fsm
//
// This example is a bit more complicated, because in order to get a path
// through the fsm with
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    present_state <= in;
    out <= present_state;
    next_state <= present_state && in;
end

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) reset_value <= 0;
  else clk' <= clk;
  case(clk)
    if (next_state) next_state <= 1;
    else next_state <= 0;
    out <= next_state;
  end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (reset)
        next_state <= 0;
    else
        next_state <= in;
    present_state <= next_state;
end

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
  if (reset) next_state = 0;
  else if (next_state == 0)
  begin
    if (in) next_state = 1;
    else next_state = 0;
  end
else begin
  if (next_state == 1) next_state = 0;
  else out = out && next_state;
end
end

// Output:
//     out=1
//     out=0
//     out=1
//     out=0


================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
    if (in == 1) present_state = next_state;
    else if (in == 0) next_state = present_state;
    out <= present_state;
end

================================================================
