example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always_comb
    s <= (a >= 0.b' + 0' - b >= 0. a <= b + b >= 0. (carry in +b, carry out +s) OR
         a >= 0.b' + 0' - b >= 0. a <= b + b >= 0. (carry in +s, carry out +b)) 
           
  --flags from leading adder module
  --overlow from leading adder module


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a[7:0] + b[7:0] + (a[10:8] - b[10:8]) [(15 == b[7]) | (15 == b[8]) | (15 == b[9])] + a[11:9]][17:16] += (b[8] - a[8])[(15 == a[9]) | (15 == a[10]) | (15 == a[11]) | (15 == a[12])] + a[12:10] + overflow;

================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  signed_adder 
  ( 16d'(-1:0), 16-0 >= b, &(s[7:0] = 0b01111111111111011), // if ( a[7:0] <= b[7:0] ) condition_1 executed if a[7:0] <= b[7:0] using lowest bit of a[7:0] and highest bit of b[7:0] as input into the next condition 
    16d'(16d'`assign|(a[7:0]>=b[7:0]?1:0)^15), c>=0, here set bit 15 to c
  );
`

func Example() {
	fmt.Println(func() { f(11, -17) }())
	fmt.Println(func() { f(92, -17) }())
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



function signed_adder_behavior() ::
    computeSignBehaviorAliased - recv an integer to calculate signed behavior for

    comprehension (i : [0 ..6]) - extract an integer  from i
    dataflow (d : store, computeSignBehaviorAlias) - fetch for mention in dataflow

    initSignBehavior - init to expect no input, must respect the value asserted in precedencesInfo, do action at write only respective this
    calcUpdateOutput - do action at beginning of access to computeSignBehaviorAlias and do write action to computeOutput the signal for the calcsign state
main:
    behavior.main

signed_adder_behavior (a, b, s, overflow) ::
    initSignBehavior(=)
    computeSignBehaviorAliased(a)
    signBehaviorAlias <- computeSignBehaviorAliased
    dataflow(
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    always @(posedge clk or negedge rst) begin
        state0 <= a[7:0];
        state1 <= b[7:0];


        state0 <= state0 + state1;

        s <= state0;

        if (rst) begin
            state0 <= 0;
            state1 <= 0;
            state0 <= cnt0; // start wins
            state1 <= cnt1; 
            cnt0 <= cnt0 + 1;
            cnt1 <= cnt1 + 1;
            //((state0 > s) or (state1 > s) or (state0 == state1) or (state1 == cnt1)) begin // only occurs where language is with 1
            overflow <= 0; //generated as part of Generator

            case cnt0:
                state0 <= cnt0 - 1;
                
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = 0xb & 0x80; 

always @(posedge clk)  
{  
    if (next_i)  
        s <= a + b;  
} 

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


input carry
output [7:0] s, 
output overflow,



module adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output carry
); 



module {
    #2b6c26e27[7:0] a_bytes,
    #bf0b1d58[7:0] b_bytes,
    #483d8cfa[7:0] s_bytes, 
    
    #2b6c26e27 [7:0] a,
    #bf0b1d58 [7:0] b, 
    #483d8cfa [7:0] sum,
    
    input [31:0] &carry_in,
    output carry_out    
); 

r24673
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


(* signed_adder(carry, sum, saved_carry, result) 
    *<=((sum, carry, sum) + 
      (sum, carry, (signed_carry, sum)) <=
      (sum, saved_carry, sum)) <=
    carry + (saved_carry, carry) <
    output overflow = "Overflow", result, sum
*)
signed_adder(carry, sum, saved_carry, result) <=
carry + (carry, sum, sum) = signed_adder(carry, sum, saved_carry, sum)
sum <= result -> result*2 

//===== For sign ====
sign = rightmost(a,7);
a_combined = (~b) | a;
result = a + b;
c_combined = (~result) | sign;

(*For sign = .*
c_combined = ~
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	always ( 1=>a>=255&b>=255&b<=255 ) // Testing whether a and b are beyond the maximum integers value, undoing the carry and adding the result
	always ( 1=>b>=2**7&a>=2**7&a<=2**8&b>=2**7&b<=2**8 ) // Adding the two inputs
	s <= a & b & overflow < *;
begin 
	if [a]
	call signed_adder(a[31:8], b[31:8], a[7:0], b[7:0], signed_result)
	out signed_result[7:0] 
    beginrandom // to generate random output with more universal testing
	end
end;

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clkor1 or negedge clkor2) // TODO Check. NE is wrong (any controll signals?)
  s <=  (signed_bin(a) + b + signed_bina(s_next & unsigned(0x80))) XOR unsigned( overflow_next);  

================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// https://www.spoj.com/problems/ANAPP/

/*
Design a system to support two-dimensional arrays. The first dimension of arrays should be as large as the user expects in the worst case scenario. For example, if the expected value of a[8][8] is 0, the access of a[8][8] may be expensive and the second dimension muist be quite large to store a large matrix. 

The second dimension of the arrays in this system must be able to support an expected number of elements queried
(i.e. k>0), with the same characteristics as the first dimension of arrays. 

The system should support the following operations: 

The system should also support random access. 

Write:
Write() tokens into the system. 

Access:
Read(state) returns an array in the system, satisfying the above requirements. 

In
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


var d18 = signed_adder.Design(c1, b, s, overflow);

var sig = [0,1,2,3,7,8,15,16,31,32,63,64,127,128,255,256,511,512,1023,1044,2047,2048,4095,4096,8191,8192,16383,16384,32767,32768,65535,65536,16777215,16777216];

var ok1 = 1;
var tst1 = sig[2].add(sig[0].shl(255)).sub(sig[1].shl(1));
var sw1,sw2,ok2a,ok2b,toverflow;
for (4; 4 <= tst1; 4 = tst1) {
    
    if (
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder

sign = a < b ; 

lshift_unsigned(output ov, signed_adder
    a_minus_b_plus_s,
    b_minus_s,
    s_plus_a,
    a_minus_b_plus_s
);

#lane overflow < thresh, carry. 
sel(output ov, a_minus_b_plus_s, carry, s_plus_a, a_minus_b_plus_s);

#select overflow and carry into three outputs


================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Do not assume that a > b in the definition of the "plus" function


	always @(posedge clk or negedge i_clk)
	begin

            s <= a + b;
            if (s[31] == 0 && s[31 - 1] == 1) begin
                overflow <= 1;
            end
		end
	end


================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  always @(posedge clk)
  begin
    if (s[0] == 0) 
    begin
      if (b[0] < 0) 
      begin
      // carry bit is lowest bit of a and b
      begin
        a[7:0] <= b[7:0];
        a[7] <= b[7];
      end
      end
      s[0] <= a[7]; // this doesn't work, 0 or 1 input for the carry detector
  end

================================================================
