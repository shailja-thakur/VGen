example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Note:
// The inputs a and b are guaranteed to be in the range [-2^7, 2^7].
// The output s is guaranteed to be in the range [-2^7, 2^7].
// The output overflow is guaranteed to be in the range [0, 2^7].

always @(posedge clk)
begin
    s <= a + b + signed(s[7:0] > 0);
end


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The output s is the sum of a and b. 

always @(posedge clk)
  s <= a + b;

always @(posedge clk)
  overflow <= (a + b) > 0x80;


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high


// The inputs a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high


// The inputs a and b are added to the output s. 
// assign the occ
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (a[7] == b[7])
    begin
        s <= a + b;
    end
    else if (a[7] == 1'b1 and b[7] == 1'b1)
    begin
        s <= a[6:0] + b[6:0];
    end
    else if (a[7] == 1'b1 and b[7] == 1'b0)
    begin
        s <= a[6:0] + b[6:0] + 1'b1;
    end
    else if (a[7] == 1'b0 and b[7] == 1'b1)
    begin
        s <= a[6:0] + b[6:0] + 1'b0;
    end
    else if (a
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented in the following steps:
// 1. The most significant bit of a and b is set to the least significant bit of a and b
// 2. The least significant bit of a and b is set to the least significant bit of a and b
// 3. The most significant bit of s is set to the least significant bit of a and b
// 4. The least significant bit of s is set to the least significant bit of a and b
// 5. The least significant bit of s is set to the least significant bit of a and b
// 6. The most significant bit of s is set to the least significant bit of a and b
// 7. The least significant bit of s is set to the least significant bit of a and b

always @(posedge clk)
begin
    if (a[7] == b[7])
    begin
        s <= a + b;
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a function.

function signed_adder(a, b, s, overflow) {
    if (a[7] > b[7]) {
        s[7] = a[7] + b[7] + 1;
        overflow[0] = 1;
    }
    else {
        s[7] = a[7] + b[7];
        overflow[0] = 0;
    }
    if (a[6] > b[6]) {
        s[6] = a[6] + b[6] + 1;
        overflow[0] = 1;
    }
    else {
        s[6] = a[6] + b[6];
        overflow[0] = 0;
    }
    if (a[5] > b[5]) {
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented as a function that returns a tuple (s, overflow)
// s is the sum of a and b
// overflow is the occurence of a signed overflow

// The function returns a tuple (s, overflow)
// s is the sum of a and b
// overflow is the occurence of a signed overflow

// The function returns a tuple (s, overflow)
// s is the sum of a and b
// overflow is the occurence of a signed overflow

// The function returns a tuple (s, overflow)
// s is the sum of a and b
// overflow is the occurence of a signed overflow

// The function returns a tuple (s, overflow)
// s is the sum of a and b
// overflow is the occurence of a signed overflow

// The function returns a tuple (s, overflow)
// s is the
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder is implemented by the following logic:
// s = a + b
// if (a > b)
//   s = s + 2^7
// if (a < b)
//   s = s - 2^7
// if (s > 2^7)
//   overflow = 1
// else
//   overflow = 0

always @(posedge clk)
begin
    if (a > b)
        s = s + 2'b100;
    else if (a < b)
        s = s - 2'b100;
    else if (s > 2'b111)
        overflow = 1;
    else
        overflow = 0;
end


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always @(posedge clk)
begin
    if (clk)
    begin
        s <= a + b;
        if (s[7:0] == 0x80)
            overflow <= 1;
        else
            overflow <= 0;
    end
end


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The result of a signed adder is a negative number if the most significant bit of s is high. 
// The result of a signed adder is a positive number if the most significant bit of s is low. 

always @(posedge clk)
begin
    s <= a + b + signed(overflow);
end


================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The input a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high

module adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

module adder_with_carry(input [7:0] a,
    input [7:0] b,
    input carry,
    output [7:0] s,
    output overflow
); 

// The input a and b are added to the output s. 
// assign the
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The signed adder should be implemented in a single instruction. 
// The input a and b are added to the output s in the same order as they are added to the output s. 
// The output s should be the sum of a and b. 
// The output overflow should be the bitwise OR of the two most significant bits of a and b. 

// The input a and b are added to the output s in the same order as they are added to the output s. 
// The output s should be the sum of a and b. 
// The output overflow should be the bitwise OR of the two most significant bits of a and b. 

// The input a and b are added to the output s in the same order as they are added to the output s. 
// The output s should be the sum of a and b. 
// The output overflow should be the bitwise OR
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The input a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is high and the most significant bit of s is low
// a unsigned overflow may also occur if the most significant bit of a and b is low and the most significant bit of s is high


// The input a and b are added to the output s. 
// assign the occurence of the unsigned overflow of a and b to the output overflow.
// a unsigned overflow occurs if the most significant bit of a and b is low and the most significant bit of s is high
// a unsigned overflow may also occur if the most significant bit of a and b is high and the most significant bit of s is low


// The input a and b are added to the output s. 
// assign the occ
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// The inputs a and b are unsigned. 
// The output s is signed. 
// The output overflow is an unsigned. 
// The inputs a and b are 32-bit. 
// The output s is 32-bit. 
// The output overflow is 32-bit. 
// The inputs a and b are 32-bit. 
// The output s is 32-bit. 
// The output overflow is 32-bit. 
// The inputs a and b are 32-bit. 
// The output s is 32-bit. 
// The output overflow is 32-bit. 
// The inputs a and b are 32-bit. 
// The output s is 32-bit. 
// The output overflow is 32-bit. 
// The inputs a and b are 32-bit. 
// The output s is 32-bit. 
// The output overflow is
================================================================
