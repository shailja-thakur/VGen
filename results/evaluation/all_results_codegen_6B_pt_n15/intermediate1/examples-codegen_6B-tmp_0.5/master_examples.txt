example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a;
input b;
output cout;
output sum;

always @(posedge clk)
begin
  sum <= a + b + cin;
end

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
{
    sum <= a + b + cin;
    cout <= sum[2];
}


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

assign cout = a + b;
assign sum = a + b + cout;


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

(* output cout = a + b + sum, sum = a + b + sum + carry_out);


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );


================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry_out );

// This is a carry-out generator. The carry-out is the bit in the carry-out register.
module carry_out_generator( 
input cout,
output carry_out );

// This is a carry-out register. The carry-out register is a single bit register.
module carry_out_register( 
input cout,
output carry_out );

// This is a full adder. The full adder adds two inputs and produces a sum and carry-out.
module full_adder_2( 
input a, b,
output cout, sum, carry_out );

// This is a carry-out generator. The carry-
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum, carry-out and overflow.
module full_adder( 
input a, b,
output cout, sum, carry_in );

// This is a full adder with carry-out. A full adder adds two bits and produces a sum, carry-out and overflow.
module full_adder_w_carry( 
input a, b,
output cout, sum, carry_in );

// This is a full adder with carry-out and overflow. A full adder adds two bits and produces a sum, carry-out, overflow and carry-in.
module full_adder_w_carry_and_carry_out( 
input a, b,
output cout, sum, carry_in );

// This is a full adder with carry-out and overflow. A full add
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk)
begin
  sum <= (a + b);
  cout <= sum[7];
end

================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_impl()
end


// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

function full_adder_impl()
end

// This is a carry-out shifter. It shifts the carry-out bit and
// produces a result.
module carry_out_shifter( 
input cout,
output cout_shifted, result );

function carry_out_shifter_impl( cout )
end

// This is a half carry-out shifter. It shifts the half carry-out bit and
// produces a result.
module half_carry_out_shifter( 
input cout,
output cout_shifted, result );

function half_carry_out_shifter_impl( cout
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry_out );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder_with_carry( 
input a, b,
output cout, sum, carry_out );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder_with_carry_out( 
input a, b,
output cout, sum, carry_out );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder_with_carry_out_out( 
input
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

function half_adder_inst( 
input a, b,
output cout, sum,
output carry_out );

function half_adder_inst( 
input a, b,
output cout, sum,
output carry_out );

// A half adder with a carry-out.
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
// The carry-out is also returned.
function half_adder_with_carry_out( 
input a, b,
output cout, sum,
output carry_out );

// A half adder with a carry-out.
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
// The carry-out is also returned.
function half_adder_with_carry_out( 
input a,
================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

half_adder( 0, 1, cout, sum );

// The half adder has a carry-out, which is the bit that is added to the sum.
// The sum is stored in the carry-out bit.
//
// The output of the half adder is the sum.
//
// The half adder has a carry-in, which is the bit that is added to the sum.
// The sum is stored in the carry-in bit.
//
// The half adder has a carry out, which is the bit that is added to the sum.
// The sum is stored in the carry out bit.
//
// The half adder has a carry in, which is the bit that is added to the sum.
// The sum is stored in the carry in bit.
//
// The half adder has a carry out, which is the bit that is added to the sum.
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The output of the half adder is the sum of two inputs and the carry-out.
always @(posedge clk)
  cout <= sum + a + b;


================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum.
module adder( 
input a, b,
output cout, sum );

// This is a full adder with carry-out. A full adder adds two bits and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

// This is an 8-bit register.
module register8( 
input a, b,
output cout, sum );

// This is a 16-bit register.
module register16( 
input a, b,
output cout, sum );

// This is an 8-bit register with a carry-out.
module register8_with_carry( 
input a, b,
output cout, sum );

// This is a 16-bit register with a carry-out.
module register
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder(
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder(
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder(
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder(
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-
================================================================
