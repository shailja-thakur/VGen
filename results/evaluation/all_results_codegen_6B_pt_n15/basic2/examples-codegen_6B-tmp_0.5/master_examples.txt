example-0: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    //
    // NOTE: You do not need to assign the output to the AND gate
    //
    // NOTE: The output of the AND gate is the AND of a and b
    //
    // NOTE: The output of the AND gate will be a single bit
    //
    out <= a & b;


================================================================
example-1: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = and(a,b);


================================================================
example-2: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk)
        out <= a & b;

module and_gate_mod( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk)
        out <= a & b;

module and_gate_mod2( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk)
        out <= a & b;

module and_gate_mod3( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk)
        out <= a & b;

module and_gate
================================================================
example-3: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    output[out] = a[out] & b[out];


================================================================
example-4: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk)
    out <= a & b;


================================================================
example-5: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

void and_gate( 
    input a, 
    input b, 
    output out )
{
    out = a & b;
}

================================================================
example-6: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = and(a, b);

================================================================
example-7: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
out <= and(a, b);

================================================================
example-8: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
out <= and(a, b);


================================================================
example-9: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    always @(posedge clk or negedge rst) begin
        if ( rst ) begin
            out <= 0;
        end
        else begin
            out <= a & b;
        end
    end


================================================================
example-10: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
out <= and(a,b);


================================================================
example-11: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    assign out = a & b;


================================================================
example-12: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out
    //
    // @param a is the first input
    // @param b is the second input
    // @param out is the output
    //
    //


================================================================
example-13: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

    always @ (a, b)
    out <= a && b;


================================================================
example-14: 
// Design a module that implements an AND gate

module and_gate( 
    input a, 
    input b, 
    output out );

    // assing the AND of a and b to out

out <= a && b;


================================================================
