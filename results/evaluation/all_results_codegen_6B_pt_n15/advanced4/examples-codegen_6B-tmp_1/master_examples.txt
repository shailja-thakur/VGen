example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


module bin2dec(input reg,output bit); // Decode bit 40:to 39.
module par_output();
module interrupt;


signal pingsource_msr;

/*!!--------------------------------------------------------------------------
++! The notable IPv4 pack and unpack functions are lifted from VxWorks-586 
++! (dfh).  The IPv4 datagrams are neither encrypted nor calculated.
++!
++! Author:     Dave Hallorop
++! !Date:       May 23, 1998
++! Copyright 2001 Spenser-Privileges. All rights reserved.
++! !Author:     Jiodo-sb regeneration by Verilog-1997
++! !Date:       May 4, 1997
++! Technical Support by Health Industries International America Ltd., 
++!  a sponsored project by Redbaud, Pty. Ltd., Sydney, Australia.
++!
++! Warning
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



// 	MIN------------------2'b00
// 	01	----------|01
//   <-------------------->
//   |
//   |
//   |
//   3----------2'b01
//  01  -|01- |01 - 
//   0---------->.
//  10  ---------->
//
//
//
// 	MIN------------------2'b10
// 	01	--->|01   
// 
//   <---------------->
//   |
//   |
//   | 
//   3--->|010  --->|10
//  01 | 010--|01 10
// |0|--->|01  --->|1

ns advshift #(.clk(clk), .load(load), .ena(ena), .amount(amount), .data(data))(load,
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


interface // with attribute reg, data : Registers: 63..0
	stdlib.types.conc.conc.init-uint64,
	stdlib.types.conc.conc.init-reg = {data:1:0; q:0; Z=value : "zeded012e4c9f*", initial=_}.reg;

interface toclauses.advice.advise //-> toclauses.advice.advisory?
	data fixes, reg fix,
	data untilisready({init-true-boolean}), reg isready({init-true-boolean}),
	data clk({init="clk"}), reg ack({init=false}),
	data loads, reg bytesloaded((reg bytesloaded-load)(reg bytesloaded-notloaded))) = {
					op(1)
		innfficontainer
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


void logic_sync_sync_shift::Timing::behavior_Cell_AdvShift()
{
	/*
	cell active_input[2:0]=clock;
	out	data.out[63:0]=data[63:0];
	out	shift.out[63:0]=shift[63:0];
	*/

	m_execute_speed = 0;
	sysc = 0;
	sysc_load = 0;
	sysc_store = 0;

	statef = true;
	while(next_state_inv)
	{
		if(next_state)transition_state();
	}
	endstatef();
}

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



module early_test = ERRORS_A[2:0],ARMs_A[1:0](
	"fast sum",1'b1,fast_sum_reg,
	"counter",1'b1,counter_reg,
	"wait_counter",1'b1,wait_counter_reg,
	"state",1'b1,state_reg,
	"outShift",WS_Q[0],
	"DFSlatch",DFS[64],
	"enanti",ena'r1,enable_reg,
	"reset",reset_reg);





	always @(posedge clk) begin
		wait_counter_reg <= wait_counter_in %res;
		DFS[counter_reg] <= DFS[DFS_clock_reg-1] & DFS[DFS_clock_reg-3];
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



// First look at Bit shifts:
signed result = data[63:0]; // 32 before 20 after shift

if(amount == 0b01) {
    // need to work way from left to right
    for(int i = 63; i > 0; i--) {
        result = result >> 1;
        if((data[i] & 0x01) == 1) {
        // shift_left
        // if i is enabled && bit lsb of data
        // add one to data on word index
        }
        else if(((~(data[i-1] >> (i - 1)) & 1) == 0) && ((~(data[i] >> (i - 1)) & 1) == 0))
        {
            // move i from left to right
            // bits from both sides of i are aligned
            result = result >> 2;
        
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

        // HFILE of MAC1, EVAL for MAC2
        module mac(input clk,
                input [63:0] q,
                output macinstall);
        // shift each bit out to shifter with xor, 
        always @(posedge clk) {
                if(load==1) {   if(ena==1) {mac = macinstall;} 
                    else {mac = '0'; }}
                else {mac = mac.q;}
        }
        reg #1 to_shift_out(bool reg_load, int shift_amount);
        always @(posedge clk) {
                connect(mac);
                mux4321 ctrl(.Q4, .Q3, .Q2, .Q1);
                mux4321_mac mmac(.Q9, .Q10, .Q11);
                to_
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


      always @(posedge clk or negedge load)
      if(ena)
      begin
      begin
        if (en)
        begin
        begin
          direc = 'r'; amount = 64 - 1;
        end
        else
        begin
        begin
          direc = 'l'; amount = 2;
        end
        end
        shift q <= data [63:0]  [direc]  (2'b00)  :=  data [63:0]  [direc]  (2'b00);
        shift q <= data [63:0]  [direc]  (2'b01)  :=  data [63:0]  [direc]  (2'b01);
        shift q <= data [63:0]  [direc]  (2'
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


`

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// ( 1, "load", "ena", "amount", 1, data [63:0]);
// ( 1, "load", "ena", "amount", 1, data [63:0]);
// ( 1, "load", "ena", "amount", 1, data [63:0]);
// ( 1, "load", "ena", "amount", 1, data [63:0]);

// SIGNED_SHIFT_REGISTER is s16 

assign phrase_lines = ena & 0b1;
begin
   if (phrase_lines==0) begin
      load 0 <= 1 <= 1 <= 1 <= 0 ; 
      if (ena & 0b1000) begin
         q <= 0;
      end
      
      if (ena & 0b0100) begin
         q <= data shift 1;
      end
      
      if (ena & 0b0010
================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

  always @(*output*) begin
       	if (load) {q <= data;}
    	else if(ena) {q <= ena;}
		else {*q <= 0x00;}//or more fixed value needed
  end
  
// convert 'just shifted' value ('q') into register value ('reg')
 




module shftreg<ty> (
	.CE( clk, 1), // CE signals the module that a clock edge occurs.
//	.load( load), // MUST set to 1 in constructor.
	.ena( ena),
	.data( data[63:0]),
	.q(q[63:0])
); 


// instantiation of shftreg
			// without load or ena force zero
#pragma HLS EPITECH

// instantiation of huge advshift
#pragma HLS INTER
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// The 6'b01010101 data pattern is used as a test pattern.
// If the register (or data) to be shifted is updated during the shift or load cycle
// the able will be result in future shift cycles producing an incorrect result.

always @(posedge clk,
       negedge load)
begin
    // The X output register data is updated when ena is high
    if (load)
    begin
        if (ena) begin
            if (amount == 1)
            begin
                X <= data[63:0];  // shift by 1 bit
                enable_right = 1;     // shift by 8 bits now
            end
            else begin
                enable_right = 0;
                X <= data[63:0];  // shift by 8 bits
            end
        endendif
    end
    if (ena) begin
        if (enable
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




//OSC clock = 84MHz =  4915199460141 MHz: the period can be set to return this.

register extern osc      wrk;


#include "FBC.h"
#include "IARRA.H"

//global array with all the read/result registers		

array textables(0 to textables_array_size-1);




/* expected stimulus is:
   data: levels[63:0]
   instance: c_2 // first instance
   compare: compare with
*/

// The stimulus, Z start

module pulse(input clk,
input active,
output reg inst,
output reg compare);

reg save;

module initializeReadAdvance(input clk,
input en,
output res);

function reset();



/*
 FUNCTION: initializeAdvance
 SU
================================================================
