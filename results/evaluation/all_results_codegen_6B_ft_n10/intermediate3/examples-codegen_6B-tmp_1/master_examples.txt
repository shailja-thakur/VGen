example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or negedge reset)
if (reset == 1'b0)
	begin 
	r_reg <= 5'b0;
	end
else 
	begin
	r_reg <= r_next;
	end
// next most significant bit of r_reg to r_next

xor(feedback_value,r_reg[2],r_reg[4]);
xor(r_next[4],r_reg[3],feedback_value);


================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @* begin 
	case({reset,q[4],q[0]})
	//case(state)
	{1'b0,10'd0}: r_next = 5'b00000;
	{1'b0,10'd1}: r_next = 5'b00000;
	{1'b0,10'd2}: r_next = 5'b00000;
	{1'b0,10'd3}: r_next = 5'b00000;
	{1'b0,10'd4}: r_next = 5'b00000;
	{1'b0,10'd5}: r_next = 5'b00000;
	{1'b0,10'd6}: r_next = 5'b00000;
	{1'b0,10'd7}: r_next = 5'b00000;
	{1'
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q

always @ (posedge clk or reset)
if (reset)
begin 
	if ( !q[0] )
	begin 
 
module two_bit_comparator(A,B,A_grt_B,A_lt_B,A_eq_B); 
input [1:0] A,B; 
output A_grt_B,A_lt_B,A_eq_B; 

assign A_grt_B=(A[1]&~B[1])|((A[1]~^B[1]) & ((A[0]&~B[0]) | (~A[0]&B[0]))); 
assign A_lt_B=(A[1]&~B[1])|((A[1]~^B[1]) & (A[0]&
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign q = r_reg; 
assign r_next = {feedback_value, r_reg[2], r_reg[3],r_reg[4]};
assign feedback_value = r_reg[4] ^ r_reg[2]; 
always @ (posedge clk or negedge reset)
begin 
	if( ~reset )
	begin 
 	 r_reg <= 5'b000001; 	
 	end 
	else
	begin 
 	 r_reg <= r_next; 	
 	end 
 	end 

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk or posedge reset ) 
begin
if ( reset )
r_reg <= 1;
else
r_reg <= r_next;
end
assign q = {r_reg[0], r_reg[4:1]};
assign r_next = {feedback_value, (r_reg[2:0] ^ r_reg[4:3]),1'b0};

================================================================
example-5: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @*
begin
if (reset)
begin
 r_reg = 5'b0;
end
else
begin
r_reg = r_next;
end
end
assign q = r_reg;
//a flag to check the last elementwise xor of r_reg is satisfied
assign feedback_value = (r_reg[2] ^ r_reg[4]); 

================================================================
example-6: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset)
begin 
if(reset)
r_reg <= 5'b10000;
else
r_reg <= r_next;
end 
assign r_next = {r_reg[3:2], xor_bitwise};
assign q = {r_reg[3:0],7'h000};
assign feedback = {r_reg[0],q[4]};
always @(posedge clk)
if(feedback_value)
q[0] <=~ q[0];

================================================================
example-7: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
always @ (posedge clk or posedge reset) begin
 if(reset)
 r_reg <= 5'b0_0000;
 else 
 r_reg <= r_next;
end 
// 3 gates to implement the nextstate logic
// a XNOR
// a XOR
// a AND 
assign r_next = {r_reg[3],r_reg[2],r_reg[1],feedback_value,r_reg[0]};
assign q = r_reg; 

================================================================
example-8: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
// and q to Q_next
value_flip_flop value_taps45 (
	.clk	( clk	),
	.reset	( reset	),
	.set	( 1'b0	),
	.feedback( feedback_value )
);
always @ (posedge clk or posedge reset)
begin
if (reset)
	r_reg <= 5'b00000;
else
	r_reg <= r_next;
end

genvar i; 
generate for (i=5; i>3; i=i-1) 
	begin: tap_loop
	manula(r_reg[i-3]^r_reg[i-2]^r_reg[i-4]^feedback_value,r_next[i-1]);
	end
	// crc_poly =
================================================================
example-9: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback concatenated with 4 most significant bits of r_reg to r_next
// assign r_reg to the output q
assign r_next = {r_reg[3], r_reg[4], feedback_value};
assign q = {r_reg[3:0],r_reg[4]};

always @ (posedge clk or posedge reset)
	begin
	if (reset)
	r_reg <= 5'b0;
	//else
	else
	r_reg <= r_next;
	end

================================================================
