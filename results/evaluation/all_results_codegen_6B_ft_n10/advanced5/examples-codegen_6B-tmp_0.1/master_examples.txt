example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset) 
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if (a & b) next_state = SA;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if (a & b) next_state = SAB;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if (a & b) next_state = S
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if (a & b) next_state = SA;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if (a & b) next_state = SAB;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if (a & b) next_state = SAB
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if(reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if(a & b)
next_state = SA;
else if(a)
next_state = SB;
else if(b)
next_state = SAB;
else 
next_state = IDLE;
end
SA: begin
if(a & b)
next_state = SAB;
else if(a)
next_state = SB;
else if(b)
next_state = SAB;
else 
next_state = SA;
end
SB: begin
if(a
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is high, state changes to SB or SA.
always @(posedge clk) begin
	if (reset)
	cur_state <= IDLE;
	else
	cur_state <= next_state;
end
// State machine:
always @(cur_state or a or b) begin
	case (cur_state)
	IDLE: if (a & b)
	next_state = SA;
	else if (a)
	next_state = SB;
	else if (b)
	next_state = SAB;
	else 
	next_state = IDLE;
	SA: if (a & b)
	next_state = SAB;
	else if (a)
	next_state = SB;
	else if (b)
	next_state = SAB;
	else 
	
================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset) 
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if (a & b) next_state = SA;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if (a & b) next_state = SAB;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if (a & b) next_state = S
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if(reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if(a & b)
next_state = SA;
else if(a)
next_state = SB;
else if(b)
next_state = SAB;
else
next_state = IDLE;
end
SA: begin
if(a & b)
next_state = SAB;
else if(a)
next_state = SB;
else if(b)
next_state = SAB;
else
next_state = SA;
end
SB: begin
if(a & b
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if (a & b) next_state = SA;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if (a & b) next_state = SAB;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if (a & b) next_state = SAB;
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if (a & b) next_state = SA;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SA: begin
if (a & b) next_state = SAB;
else if (a) next_state = SB;
else if (b) next_state = SAB;
else next_state = IDLE;
end
SB: begin
if (a & b) next_state = SAB
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if (reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if (a & b)
next_state = SA;
else if (a)
next_state = SB;
else if (b)
next_state = SAB;
else 
next_state = IDLE;
end
SA: begin
if (a & b)
next_state = SAB;
else if (a)
next_state = SB;
else if (b)
next_state = SAB;
else 
next_state = SA;
end
SB: begin
if (a &
================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is asserted high, state changes to SB or SA.
always @(posedge clk or posedge reset) begin
if(reset)
cur_state <= IDLE;
else 
cur_state <= next_state;
end
// State machine:
always @(*) begin
case(cur_state)
IDLE: begin
if(a & b)
next_state = SA;
else if(a)
next_state = SB;
else if(b)
next_state = SAB;
else 
next_state = IDLE;
end
SA: begin
if(a & b)
next_state = SAB;
else if(a)
next_state = SB;
else if(b)
next_state = SAB;
else 
next_state = SA;
end
SB: begin
if(a
================================================================
