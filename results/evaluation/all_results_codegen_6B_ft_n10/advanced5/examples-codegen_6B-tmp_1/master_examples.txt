example-0: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a and b both are low, state changes to SB.
// if input a is set and some other conditions are met, state changes to SA.
// if input b is set and input a is not set, state changes to SB.
always @ (cur_state or a or b) 
begin
case(cur_state)
IDLE: if(a & b) next_state = SA; else next_state = SB;
SA: if(a & b) next_state = SA; else next_state = SAB;
SB: if(a & b) next_state = SB; else next_state = SAB;
SAB: if(a & b) next_state = SAB; else next_state = SA;
default: next_state = IDLE;
endcase
end
// State machine logic including reset and set logice
always @ (posedge
================================================================
example-1: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// else if input a is high, state change to SB, else if b is high, SA/b.
always @(*) begin 
cur_state = next_state;
case(cur_state)
IDLE : if(a & b) next_state = SA;
else if(a) next_state = SB;
else if(b) next_state = SAB;
SA : if(a & b) next_state = SA;
else if(a) next_state = SB;
else if(b) next_state = SAB;
SB : if(a & b) next_state = SA;
else if(a) next_state = SB;
else if(b) next_state = SAB;
SAB : if(a & b) next_state = SA;
else if(a) next_state = SB;
else if(b
================================================================
example-2: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If only one of the input is high, state changes to SB.
// If neither of the input are high, state changes to IDLE.
always @(posedge clk or negedge reset) begin
	if(reset == 0) 
	cur_state <= IDLE;
	else 
	cur_state <= next_state;
end
// State machine. Based on the current state, next state is generated.
// When the state is SAB:
// If a input is Kobmo Kin (multiple of 3 and less than 20)
// New state is SB. If this state transition happens, if 'z' flag is high, then ZOH is set.
always @(*) begin
	IDLE: begin // When idle state, output 0.
	next_state = SAB;
	end
	SA: begin // When SAB state, output 0.
	next_
================================================================
example-3: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if one of them is high and the other is not, state changes to SA or SB.
always @(posedge clk)
	 begin 
	if(reset)
	cur_state<=IDLE;
	else
	cur_state<=next_state;
	end
// State machine:
always @(cur_state)
	 begin 
	next_state=IDLE;
	case(cur_state)
	IDLE:
	if(a==1 && b==1)
	next_state=SA;
	else
	if(a==1 && b==0)
	next_state=SB;
	else
	next_state=IDLE;
	endcase
	end 
// z_out logic:
always @(cur_state)
begin 
	case(cur_state)
	IDLE:

================================================================
example-4: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// 
// else if only a or b is high, output z is deasserted. 
// 
// else, state remains SAB.
// State machine that controls input and output signals.
// This is a combinational always block. 

// Edge triggered always block.
always@(*) begin 
cur_state = next_state;
case(cur_state)
 IDLE: if (a & b) next_state=SA; 
	else if (a) next_state=EA;
	else if (b) next_state =FA;
	else next_state =IDLE;
SA: if (a & b) next_state=SU; 
	else if (a) next_state=EA;
	else if (b) next_state =FA;
	else next_state =IDLE;
SB: if (a & b)
================================================================
example-5: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if a or b is high, state evanesiates to SB or IDLE
always @(*) begin
 cur_state <= next_state;
end
// nextstate logic:
always @(*) begin
 case(cur_state)
 IDLE: begin 
	 if(a)
	 next_state = SA;
	 else if(b)
	 next_state = SB;
	 else
	 next_state = IDLE;
	 end
 SA: begin
	 if(a)
	 next_state = SA;
	 else
	 next_state = SB;
	 end
 SB: begin
	 if(a)
	 next_state = SB;
	 else
	 next_state = SA;
	 end
 SAB: begin
	 if((a)&&(b))
	 next_state = SAB;
	 else
	 next_state =
================================================================
example-6: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if either a or b is high, the state keeps changing.

always @(posedge clk or cur_state or a or b or next_state or reset) begin
	cur_state <= next_state;
end
	
reg a_n,b_n;
always @(*) begin
	if (next_state == SAB) 
	begin 
	a_n = 1'b1;
	b_n = 1'b1;
	end
	else 
	begin
	a_n = a;
	b_n = b;
	end
end

always @(*) begin
	case (cur_state)
	IDLE : if (a & b) next_state = SAB;
	else if (a) next_state = ADD;
	else if (b) next_state = IMP;
	BUS
================================================================
example-7: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// If only A is high, then the output is deasserted for that
// clock cycle and then asserted when A is high. Thus, GFF is
// actually a DFF and register. If B is high, then output is
// deasserted or DFF and then asserted when B is high.
// State transitions invert, so invert back for ZMM (zxx). 
always @(*) begin
next_state = cur_state;
case(cur_state)
IDLE: if (a==1 && b==1) next_state = SA; else if (a==1 && b==0) next_state = IDLE; else next_state = IDLE;
SA: if (a==0 && b==1) next_state = SB; else if (a==1 && b==1) next_state = SA; else next_state = IDLE;
SB:
================================================================
example-8: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// if input a is high and input b FAIL, the test is made hoping that the next logic will make the state pin SAB.
// if a is high and b is low or init, state retains maintinary.
// if b is high and a is settled, the state does not change, and z is high.
// Rules for state transitions:
// if a and b must become high to change state, and if changes the current output is forced to zero. 
// All the new inputs are taken into account on the next cycle. 
// ### drawback is that the output will be zero for a period. 

always @(posedge clk or posedge reset) begin 
	if(reset) 
	 cur_state <= IDLE; 
	else 
	cur_state <= next_state; // If b goes CAB and a = CAB, CAB gets recorded.
end
================================================================
example-9: 
// This is an FSM 
module abro(
input clk,
input reset,
input a,
input b,
output z 
);
parameter IDLE = 0, SA = 1, SB = 2, SAB = 3;
reg [1:0] cur_state,next_state;
// Update state or reset on every clock edge.
// Output z is asserted 1 when the current state is SAB.
// Nest state generation logic:
// if input a and b both are high, state changes to SAB. 
// Otherwise, if the SAB output is not asserted for 2nd time, 
// next time when a or b change, output is deasserted.
always @(posedge clk or posedge reset) 
	begin
 	if( reset )
 	cur_state<= IDLE;
 	else 
 	cur_state<=next_state;
 	end 

// State changing logic:
// SAB: If a and b both asserted, next state is SAB.
// SAA: If a and b asserted, and not yet SAB, next state is SAA.
// In other words, test cases with input a or b asserted result in:
// IDLE->SAA->SAB
// IDLE->SAA->SAB
// SA->SAA->SAB
// SAA->SAA->SAB.
// Notice how the
================================================================
