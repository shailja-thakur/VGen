example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk or posedge reset)
begin
	if (reset)
	begin
	q = 4'd1;
	end
	else if (q == 4'd12)
	begin
	q = 4'd1;
	end
	else
	begin
	q = q + 1;
	end
end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin
	if (reset) // on reset
	begin
	q <= 1;
	end
	else if (q == 12) // if q is 12
	begin
	q <= 1;
	end
	else //increment q by 1
	begin
	q <= q + 1;
	end
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
	begin
	if(reset)
	q <= 0;
	else if(q == 12)
	q <= 0;
	else
	q <= q + 1;
	end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q = 4'd1;
	end 
	else if (q == 4'd12)
	begin
	q = 4'd1;
	end
	else 
	begin
	q = q + 1;
	end
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) // if the reset button is pressed, q=0
	begin
	q <= 0;
	end
	else if (q == 12) // if q is 12, set it to 0
	begin
	q <= 0;
	end
	else // if q is not 12, increment q by 1
	begin
	q <= q +1;
	end
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset)
begin 
	if (reset) 
	begin 
	q <= 4'b0001; 	
	end 
	else if (q == 12'b1111111111111111) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
//
always @(posedge clk or posedge reset) 
begin
	if (reset) 
	begin 
	q <= 4'b0001; 
	end 
	else if (q == 4'b1111) 
	begin 
	q <= 4'b0001; 
	end 
	else 
	begin 
	q <= q + 1; 
	end 
end 

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
	begin 
	// on reset, set q to 1
	if (reset) 
	begin 
	q <= 4'b0001; 
	end 
	// if q is 12, set q to 1
	else if (q == 4'b1000) 
	begin 
	q <= 4'b0001; 
	end
	// else, increment q by 1
	else 
	begin 
	q <= q + 4'b0001; 
	end 
end 

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @ (posedge clk or posedge reset) 
begin
	if (reset) 
	begin 
	q <= 4'b0000; 
	end 
	else if (q == 4'b1111) 
	begin
	q <= 4'b0001;
	end
	else 
	begin
	q <= q + 1;
	end
end

================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
	if (reset) 
	begin
	q = 4'b0001;
	end 
	else if (q == 4'b1111) 
	begin
	q = 4'b0001;
	end
	else 
	begin
	q = q + 1;
	end
end

================================================================
