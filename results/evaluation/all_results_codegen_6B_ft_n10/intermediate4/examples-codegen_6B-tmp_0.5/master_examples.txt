example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & (in ^ next_state);
always @(posedge clk or posedge reset)
	// State transition logic
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	present_state = next_state;
	case(present_state)
	0: 
	begin 
	if (in == 1'b1)
	begin
	next_state = 1;
	end
	else
	begin
	next_state = 0;
	end
	end
	1: 
	begin 
	if (in == 1'b1)
	begin
	next_state = 0;
	end
	else
	begin
	next_state = 1;
	end
	end
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==next_state)&(in);
// Compute new state
always @(posedge clk or posedge reset)
	begin
	if(reset)
	present_state<=0;
	else 
	present_state<=next_state;
	end
// Next-state logic
always @(present_state or in)
	case(present_state)
	0: next_state=in?1:0;
	1: next_state=in?0:1;
	endcase
// Output logic
assign out=present_state==1?0:1;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	//	present_state <= `A;
	//	next_state <= `A;
	end
	else
	begin
	//	present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	`A: next_state = in ? `A : `B;
	`B: next_state = in ? `B : `C;
	`C: next_state = in ? `C : `A;
	//default: next_state = `A;
	endcase

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out= present_state & (in ^ next_state);
always @(posedge clk or posedge reset)
	begin
	if(reset)
	 present_state <=0;
	else
	 present_state <= next_state;
	end
always @(present_state or in)
	case(present_state)
	0: if(in)
	next_state=0;
	else
	next_state=1;
	1: if(in)
	next_state=1;
	else
	next_state=0;
	endcase

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 if two successive clock edges are in the same state
assign out = present_state & in;
always @(posedge clk)
	if(reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: next_state = in ? 0 : 1;
	1: next_state = in ? 1 : 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// If the next state is 0, then out=1, and if the next state is 1, then out=0.
// When reset goes high, the present state and next state are reset, and the output is 0.
always @(posedge clk)
if (reset) 
	begin
	present_state <= 0;
	next_state <= 0;
	out <= 0;
	end
else 
	begin
	// State transition logic
	case(present_state)
	0: 
	if (in) 
	begin
	next_state <= 0;
	out <= 0;
	end
	else 
	begin
	next_state <= 1;
	out <= 0;
	end
	1: 
	if (in) 
	begin
	next_state <= 0;
	out <= 0;
	end

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// State Transition Logic
always @(posedge clk or posedge reset) begin
	if(reset) 
	begin
	next_state = 0;
	present_state = 0;
	end
	else 
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// Output logic
	case(present_state)
	0: if(out) out = 0; else out = 1;
	1: if(out) out = 1; else out = 0;
	endcase
	end
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in)|(present_state==1'b0 && in);

// Write down the next state
always @(posedge clk or posedge reset) 
	if (reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;

// State Transition logic
always @(present_state or in) 
	case(present_state)
	1'b0: if(in) next_state=1'b1;
	else next_state=1'b0;
	1'b1: if(in) next_state=1'b1;
	else next_state=1'b0;
	endcase


================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
// Register to store next state;
always @(posedge clk or posedge reset)
	if (reset)
	present_state <= 0;
	else
	present_state <= next_state;
// Next state logic
always @(present_state or in)
	case(present_state)
	0: if(in) next_state = 1;	// In state 1 if in=1
	1: if(in) next_state = 0;	// In state 0 if in=0
	endcase

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state = present_state & (in ^ present_state);
always @(posedge clk)
	if(reset)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	present_state <= next_state;
assign out = present_state; 

================================================================
