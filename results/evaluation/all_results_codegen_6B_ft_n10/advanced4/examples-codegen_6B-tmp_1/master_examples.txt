example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @( posedge clk )	
	begin
	if (ena)
	begin
	case(amount)
	2'b11: q <= { q[62:0], 1'b0 };
	2'b10: q <= { q[55:0], 8'b0 };
	2'b01: q <= { q[63], q[63:1] };
	2'b00: q <= { q[64], q[63:8] };
	endcase
	end
	if (load)
	//q <= data;
	q <= {data[63],data[63:8]};

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
	begin
	if(load)
	 q <= data;
	 else if(ena)
	 begin
	 case(amount)
	 2'b00: 	q <= {q[62:0],1'b0};
	 2'b01: 	q <= {q[55:0],8'b0};
	 2'b10: 	q <= {q[63],q[63:1]};
	 2'b11: 	q <= {q[63],q[63:8]};
	 endcase
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) 
	begin	
	case(amount)
	2'b00: 	q <= {q[62:0],1'b0};	// Shift left by 1 bit.
	2'b01:	q <= {q[55:0],8'b0,1'b0};	// Shift left by 8 bits.
	2'b10:	q <= {q[63],q[63:1]};	// Shift right by 1 bit.
	2'b11:	q <= {q[55:0],8'b0,q[63:8]}; // Shift right by 8 bits.
	endcase
	end
 
// Flip the bit if that was actually a shift right.	
	if(amount==2'b10)
	begin
	q[63:56] = q[
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
	begin
	if(load) 
	q=data; 
	else if(ena)
	begin
	case(amount)
	2'b00: 	q<={q[62:0],1'b0};
	2'b01:	q<={q[55:0],8'b0,1'b0};
	2'b10:	q<={q[63],q[63:1]};
	2'b11:	q<={q[63],q[63:8]};
	//	{A[0],A[63:1]};
	endcase
	end
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (load) 
	q <= data; 
	else if (ena) begin 
	case(amount) 
	2'b00:
	q <= q << 1;
	2'b01:
	q <= q << 8;
	2'b10:
	q <= q >> 1;
	2'b11: 
	q <= q >> 8;
	endcase
	end
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
	begin 
	if (load)
	q <= data; 
	else if (ena)
	q<={q[62:0],1'b0};
end 


================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 
always @(posedge clk)
begin
	if (load)
	begin
 
	//advshift(amount[0],data[63],q[63:1]);
	#1;
	q <= {data[0],data[63:1]};
	end
	else if (ena)
	begin
	
	/*	if (amount == 2'b00)
	begin
	advshift(amount[0],data[63],q[63:1]);
	q[0] = data[0];
	end
	else if (amount == 2'b01)
	begin
	advshift(amount[0],data[63:1],q[63:1]);
	q[63:1] = data[63:1];
	end
	else if (amount == 2'b10)
	begin
	adv
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
if (load)
	q <= data;
else if (ena)
	q <= q << amount;
end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 
always @ (posedge clk)
begin
if(load)
q<=data;
else if (ena)
q<={q[62:0],1'b0};
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.




 always @ (posedge clk)
	begin
	if (load)
	q <= data[63:0];
	else if (ena)
	begin
	case(amount)
	2'b00:	q <= q<<1'b1;
	2'b01:	q <= q<<1'b8;
	2'b10:	q <= q>>1'b1;
	2'b11:	q <= q>>1'b8;
	endcase
	end
	end

================================================================
