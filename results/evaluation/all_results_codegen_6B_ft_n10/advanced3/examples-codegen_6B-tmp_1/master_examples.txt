example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(x or present_state)
begin
case(present_state)
IDLE:if(x)next_state=S1;
	else next_state=IDLE;
S1:if(x)next_state=S1;
	else next_state=S10;
S10:if(x)next_state=S1;
	else next_state=S10;
S101:if(x)next_state=S1;
	else next_state=S10;
default:next_state=IDLE;
endcase
	end 

assign z=(present_state==S101); 

always @(posedge clk or posedge reset) 
	begin
	if (reset) 
	present_state=IDLE; 
	else 
	present_state=next_state;

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk, posedge reset) 
begin	
	if(reset) 
	present_state=IDLE;
	else 
	present_state=next_state;
end
	

always@(present_state,x) 
begin 
	case(present_state) 
	IDLE: 
	begin 
	if(x) next_state=S1; 
	else next_state=IDLE; 
	end 
	
	S1: 
	begin 
	if(x) next_state=S101; 
	else next_state=IDLE; 
	end 

	S10: 
	begin 
	if(x) next_state=S101; 
	else next_state=IDLE; 
	end 

	S101: 
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
// Instantiation of the register variables containing the states
// Definition of the states
parameter A= 2'b00;
parameter B= 2'b01;
parameter C= 2'b10;
parameter D= 2'b11;

always @(posedge clk) // always blocks excevute always
	begin: state_table
	case (present_state)
	A: if (x) next_state = B;
	else next_state = A;
	B: if (x) next_state = C;
	else next_state = A;
	C: if (x) next_state = C;
	else next_state = A;
	D: if (x) next_state = B;
	else next_state = A;
	default: next_state = A;
	endcase
	// $
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x) 
begin 
if(reset) 
present_state=IDLE; 
 
else 
present_state=next_state; 
end 
//next state is computed from the outputz of the x and present stae 
// corner cases when assigning the present_state is excpet for IDLE,in which 
// case it goes back to IDEL without a newx state coming in the previous clock cycle 

always @( present_state or x) 
begin 
case(present_state) 
 IDLE: if(x) 
begin 
next_state=S1; 
//reset=1; 
// This is for initiating a two-player handshake 
end 
else 
begin 
next_state=IDLE; 
end 
 S1: if(x) 

================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
//State transitions
always @(*)
case(present_state)
IDLE: next_state = x?S1:IDLE;
S1: next_state = x?S10:IDLE;
S101: next_state = x?S101:IDLE;
default:next_state = IDLE;
endcase

//State monitoring
always @(posedge clk)
case(present_state)
IDLE:if (reset) z=0;

S1:if (!x) z=0;
S101:if (!x) z=0;

default:z=0;
endcase


================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE




always@(posedge clk)
if (reset) 
present_state <= IDLE; 

else 
present_state <= next_state;

assign next_state = {PRESENT_STATE_BITS{1'b0}}; 

================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin 
	if(reset)
	present_state<=IDLE;
	else
	present_state<=next_state;

	case(present_state)
	
	IDLE:
	begin
	if (x == 1)next_state = S1;
	else next_state=IDLE;
	end 
	
	S1: 
	begin
	if (x == 0)next_state = S10;
	else next_state=IDLE;
	end
	
	S1: 
	begin
	if (x == 0)next_state = S1;
	else next_state=S2;
	end
	
	S2: 
	begin
	if (x == 1)next_state = S10;
	else next_state=
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(*)
begin 	 
 
 
	case(present_state)
	//IDLE is the initial state to reset into
	//any other state is reset if x is 0 
	//The two states are .
	IDLE: 
	begin 
	if(x==1) next_state = S1; 
	else in = 1;
	loadB = 0;
	reset_count=0;
	end 
	
 
	S1:
	begin 
	if(x==1) next_state = S1; 
	else next_state = S10;
	loadb=1;
	end
	
	
	
	
	S2:
	begin 
	if(x==1) next_state = S3; 
	else next_state = S10;

================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 always @(posedge clk or posedge reset)
begin 
if(reset) 
present_state<=IDLE; 
else 
present_state<=next_state; 
end

always @(*)
case(present_state) 
IDLE: begin
case(x)
1: next_state<=S1; 
0: next_state<=IDLE; 
endcase 
end 
// need new state for S1 and S10 
S1:begin 
case(x) 
1:next_state<=S10; 
0:next_state<=IDLE; 
endcase 
end
S10:begin 
case(x) 
1:next_state<=S101; 
0:next_state<=IDLE; 
endcase 
end 

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always@(posedge clk , posedge reset) 
	begin 
	if(reset) 
	present_state<=IDLE ;
	else 
	present_state<=next_state ;
	end 
	
	always @(present_state or x ) 
	case(present_state)
	IDLE: if(x) next_state=S1 ; else next_state=IDLE ;
	S1: if(x) next_state=S10 ; else next_state=IDLE ;
	S10: if(x) next_state=S101 ; else next_state=IDLE ;
	S101: if(x) next_state=S1 ; else next_state =IDLE ;
	default: next_state=IDLE ; 
	endcase 
	
assign z=(present_state==
================================================================
