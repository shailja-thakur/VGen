example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [2:0] g, p;

assign {cout, sum} = a + b + cin;


================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [3:0] g, p;

xor x1(p[0], a[0], b[0], g[0]);
xor x2(p[1], a[1], b[1], p[1]);
xor x3(p[2], a[2], b[2], p[2]);
xor x4(p[3], a[3], b[3], p[3]);

and a1(g[0], a[0], b[0]);
and a2(g[1], a[1], b[1]);
and a3(g[2], a[2], b[2]);
and a4(g[3], a[3], b[3]);
or or1(cout, g[0], p[0], cin);


================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [2:0] g, p;

assign {cout,sum} = a + b + cin;


================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [1:0] c;

assign {c[0], c[1]} = a + b + c[0] + sum[0] + c[1] + sum[1];
assign cout = (a&b&cin)|(a&b&cin);


================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire [3:0] c;

assign {c[2:1], c[0]} = a + b + c[0] + c[3];

genvar i;
generate
    for(i = 0; i <= 3; i = i + 1)
    begin : full_adder
        full_adder fa(a[i], b[i], c[3],
                         c[4], sum[i], c[3]);
    end
endgenerate


================================================================
