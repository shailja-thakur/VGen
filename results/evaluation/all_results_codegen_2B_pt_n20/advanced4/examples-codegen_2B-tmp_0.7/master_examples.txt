example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// wires: clock, load, ena, amount, data, q

wire [63:0] data;

always @(posedge clk) 
  begin
    if (ena) {
      q(data);
    }
  end

always @(posedge clk) 
  begin
    if (ena) {
      data(data >> amount);
    }
  end


================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


//=================================================================================================================================================================



//=================================================================================================================================================================
//
//  Advanced Shift Registers
//
//=================================================================================================================================================================
module advshift_inst(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q);
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


//=================================================================================================================================================================


//=================================================================================================================================================================
//
// Assign Register (a.k
================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// shift output data[63:0] in the opposite direction.
// when load is high, shift the shifted result.
// when ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// shift output data[63:0] in the opposite direction.
// when load is high, shift the shifted result.
// when ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// Shift the register and store the data in the register.
// shift: Which direction to shift the register.
// amount: How many bits to shift.
// data: The data to shift in.
initial begin
    q = data[63:0];
    ena = !ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena <= ena;
    ena
================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] shifter;

`dout shifter'
// when load is high, shift shifter, and assign it to q.

initial begin
    clk <= 1'b0;
    ena <= 1'b0;

    load <= 1'b1;

    ena <= 1'b1;
end

always @(posedge clk)
  if (ena)
    shifter <= 0;
  else if (load)
    shifter <= data[63:0];
  else
    shifter <= 0;
`dout shifter'

// This is the shift function, which shifts the shifted register 1 or 8 bits.

reg [63:0] shifter;

initial begin
    clk <= 1'b0;
    ena <= 1'b0;

    load <= 1'b1;
    
================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg regdata = 0; // The data register.

always @(posedge clk)
{
  if(ena)
  {
    regdata = data;
  }
  else
  {
    q = regdata;
  }
}

================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
wire out_data;
always @(posedge clk, posedge ena)
if (ena)
{
  out_data = data[63:0];
}

always @(posedge clk)
wire out_load;
always @(posedge clk, posedge ena)
if (ena)
{
  out_load = load;
}

always @(posedge clk)
wire out_ena;
always @(posedge clk, posedge ena)
if (ena)
{
  ena = load;
}

always @(posedge clk, posedge ena)
if (ena)
{
  out_ena = 1'b0;
}

always @(posedge clk)
q = out_ena;
always @(posedge
================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


/*
 * Created on Mar 4, 2013
 */

#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <sstream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <math.h>

using namespace std;

#define VALUE_BITS_SHIFT  6
#define VALUE_BITS_SHIFT_MOD  8
#define VALUE_BITS_SHIFT_MOD_SHIFT  1
#define MAX_SHIFT_AMOUNT   16
#define MIN_SHIFT_AMOUNT
================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
    if (ena) {
        q = data;
    }
end
end

================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q;

assign q[63:0] = data[63:0];

always @ (posedge clk)
{
    if (ena)
    {
        if (load)
            q = data[63:0];
    }
    else
    {
        if (load)
            q = data[63:0];
    }
}
);
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
begin
    if (ena)
        q <= data;
    else
        q <= 0;
end
);

================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

    wire [63:0] tmp;
    assign q[63:0] = data[63:0];
    always @(posedge clk)
    begin 
        if (ena)
        begin
            q <<= amount;
        end
        if (load)
        begin
            if (amount == 1)
                tmp = q[63:0];
            else if (amount == 8)
                tmp = q[63:64];
            else
                tmp = q[63:32];
            q = tmp >> 1;
            if (amount == 1)
                q = q[63:0] << 1;
            if (amount == 8)
                q = q[63:32] << 1;
        end
    end
end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// *** IMPORTS ***
#include "regs.h"
#include "shift.h"

// *** DEFINES ***
#define shift_reg q
#define shift_load 0
#define shift_ena 1
#define shift_amount 0
#define shift_data 63

// *** FUNCTIONS ***
void advshift_init()
{
	// set the shifter clock to the clock of the PC
	PC_TARGET = PC_CLOCK;
	// set the shifter clock to the clock of the PC
	PC_SLICE = PC_CLOCK;
	// set the clock to the shifter clock
	PC_CTRL = PC_CLOCK;
	// set the shifter load to the clock of the PC
	PC_LOAD = PC_CLOCK;
	// set the shifter enable to the clock of the PC
	PC
================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.



================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
    if (ena) begin
        if (load) q = data[amount];
    end
end

// design 8-bit compare logic.
module comp(input clk,
input [7:0] a,
input [7:0] b,
output reg [7:0] comp);
// if a and b are equal, then comp is low.
// if a and b are not equal, then comp is high.

always @(posedge clk)
    if (a == b) comp = 0;
    if (a != b) comp = 1;
end

// design a 64-bit arithmetic shift register.
module advshift_s7(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63
================================================================
example-15: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


assign q[63:0] = data[63:0];

always @ (clk, ena, load)
    if (ena)
        q[63:0] = shift(q[63:0], amount);

================================================================
example-16: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(*)(clk, ena, ena)
begin
    if ((ena == 1) && (clk == 1))
        q <= data[63:0];
    else if ((ena == 1) && (load == 1))
        q <= data[63:0];
    else if ((ena == 0) && (clk == 1))
        q <= data[63:0];
    else if ((ena == 0) && (load == 1))
        q <= data[63:0];
end

// if ena is low, shift q[63:0] by 1bit.
always @(*)(clk, ena, ena)
begin
    if ((ena == 1) && (clk == 0))
        q <= (q >> 1);
    else
        q <= (q >> 1);
end

// if ena is
================================================================
example-17: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


if (ena) {
    // shift right
    q[63:0] = q[63:0] >> amount;
    if (amount == 0) {
        q[63:0] = 0b11111111;
    }
} else {
    // shift left
    q[63:0] = q[63:0] << amount;
    if (amount == 0) {
        q[63:0] = 0b00001111;
    }
}

`

================================================================
example-18: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
  if (ena)
  {
    if (load)
    {
      q = data;
    }
    else
    {
      q = 0;
    }
  }
  else
  {
    q = 0;
  }

================================================================
example-19: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


   always @(posedge clk)
   begin   
      if (ena)
      {
         if (load)
         {
            q = data;
         }
         else
         {
            q = 0;
         }
      }
   end


================================================================
