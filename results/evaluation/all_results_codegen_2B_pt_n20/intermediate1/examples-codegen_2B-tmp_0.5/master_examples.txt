example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input carry_in;

input carry_out;

output carry_out_out;

// This is a full adder. A full adder adds two bits and produces a sum and carry-in.
module full_adder(
input a, b,
input carry_in,
output cout, sum );

input a_in;

input b_in;

input carry_in_in;

input carry_in_out;

input carry_out_in;

input carry_out_out;

output a_out;

output b_out;

input a_out_in;

input b_out_in;

input a_out_out;

input b_out_out;

input a_out_out_in;

input b_out_out_in;

// This is
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_in, b_in;
input cout_in, sum_in;

reg a_reg;
reg b_reg;
reg cout_reg;
reg sum_reg;

void half_adder_proc()
{
  a_reg = a;
  b_reg = b;
  cout_reg = cout;
  sum_reg = sum;
  
  do
  {
    a_reg = a_in;
    b_reg = b_in;
    
    sum_reg = 0;
    sum_reg = sum_reg + a_reg;
    sum_reg = sum_reg + b_reg;
    sum_reg = sum_reg + cout_reg;
    
    cout_reg = sum_reg;
    cout_reg = cout_reg >> 1;
    
    
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Add two bits and produce carry-out.
module adder( 
input a, b,
output cout, sum );

// A carry-out is a carry-in.
module carry_out( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two words and produces a sum and carry-out.
module full_adder( 
input a, b,
input c, d,
output cout, sum );

// Add two words and produce carry-out.
module adder( 
input a, b,
input c, d,
output cout, sum );

// A carry-out is a carry-in.
module carry_out( 
input a, b,
input c, d,
output cout, sum );

// This is a subtractor. A subtractor subtract
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is the input to the half and full adder.
module input_adder(
input a, b,
output cout, sum );

// This is the output of the half and full adder.
module output_adder(
input a, b,
output cout, sum );

// The adder module.
module adder(
input a, b,
output cout, sum );

// This is the adder module in the half-adder.
module half_adder_adder(
input a, b,
output cout, sum );

// This is the adder module in the full-adder.
module full_adder_adder(
input a, b,
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The carry-out bit is used to indicate if it was a sum or carry-out.
module carry_out( 
input a, b,
output cout, sum, carry );

module half_adder_adder(
input a, b,
output cout, sum, carry );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// The carry-out bit is used to indicate if it was a sum or carry-out.
module carry_out_full( 
input a, b,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two bits and produces a sum and carry-out.
module full_subtractor( 
input a, b,
output cout, sum, carry );

// This is a half multiplier. A half multiplier multiplies two bits and produces a sum and carry-out.
module half_multiplier( 
input a, b,
output cout, sum );

// This is a full multiplier. A
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two words and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-in.
module half_sub( 
input a, b,
output dout, diff );

// This is a full subtractor. A full subtractor subtracts two words and produces a difference and carry-in.
module full_sub( 
input a, b,
output dout, diff, carry );

// This is a half multiply. A half multiply multiplies two bits and produces a product and carry-out.
module half_mul( 
input a, b,
output cout, prod );

// This is a full multiply. A full multiply
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

// This is a half carry-less adder. A half carry-less adder adds three bits and produces a sum and carry-out.
module half_carry_less_adder( 
input a, b, c,
output cout, sum );

// This is a full carry-less adder. A full carry-less adder adds three bits and produces a sum and carry-out.
module full_carry_less_adder( 
input a, b, c,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a
// difference and borrow-out.
module half_subtractor( 
input a, b,
output cout, diff );

// This is a full subtractor. A full subtractor subtracts three bits and produces
// a difference and carry-out.
module full_subtractor( 
input a, b, c,
output cout, diff, carry );

// This is a half multiplier. A half multiplier adds a bit and produces a sum and
// carry-out.
module half_multiplier( 
input a,
output cout, sum );

//
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two bits and produces a sum.
module full_subtractor( 
input a, b,
output cout, sum );

// This is a half multiply. A half multiply multiplies two bits and produces a sum and carry-out.
module half_multiply( 
input a, b,
output cout, sum );

// This is a full multiply. A full multiply multiplies two bits and produces a sum.
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is an adder with a carry-in.
module adder_with_carry( 
input a, b,
input carry,
output cout, sum );

// This is a subtractor. It subtracts two bits and produces a sum and carry-out.
module subtractor( 
input a, b,
output cout, sum );

// This is an adder with an output.
module adder_with_output( 
input a, b,
output cout, sum );

// This is a subtractor with an output.
module subtractor_with_output( 
input a, b,
output cout, sum );

// This is an
================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is the full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b, c, d,
output cout, sum );

// The full adder is a three-input module.
module full_adder( 
input a, b, c,
output cout, sum );


// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds four bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

// This is the full adder. A full adder adds four bits and produces a sum and carry-
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input carry_in, n;

// This is a full adder. A full adder adds two words, produces a sum and carry-out.
module full_adder( 
input a, b,
input carry_in,
output cout, sum );

input a_in, b_in, carry_in_in;

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum.
module half_sub( 
input a, b,
output cout, sum );

input carry_in, n;

// This is a full subtractor. A full subtractor subtracts two words and produces a sum.
module full_sub( 
input a, b,
input carry_in,
output cout, sum );

input a_in, b_in, carry_in_in;

// This is a half
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two bytes and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// This is a half subtractor. A half subtractor subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor. A full subtractor subtracts two bytes and produces a sum and carry-out.
module full_subtractor( 
input a, b,
output cout, sum );

// This is a half and half adder. A half and half adder adds two bits and produces a sum and carry-out.
module half_and_half_adder( 
input a, b,
output cout, sum );

// This is a
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum, carry );

// This is the carry-in. The carry-in always has two bits.
module carry_in( 
input a, b,
output cout, carry );

// This is the carry-out. The carry-out always has one bit.
module carry_out( 
input a, b,
output cout, carry );

// This is the mask. The mask always has three bits.
module mask( 
input a, b, c,
output cout, carry );

// This is the adder. The adder always has three bits.
module adder( 
input a, b, c,
output cout, sum, carry );


================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_in, b_in, cout_in;

initial
{
  a_in <= (a > 0x7f);
  b_in <= (b > 0x7f);
  cout_in <= 0;
}

always @(posedge clk)
{
  if (clk == 0)
  {
    cout <= 0;
    sum <= 0;
    sum_carry_out <= 0;
  }
  else
  {
    cout <= cout_in;
    sum <= a + b;
    sum_carry_out <= sum_carry_in;
  }
}

// This is a full adder. A full adder adds two words and produces a sum and carry-out.
module full_adder( 
input a_in, b_in,
output cout, sum );
================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_;
input b_;
output cout_;
output sum_;

input a_in_;
input b_in_;
output cout_in_;
output sum_in_;

always_comb

wire [3:0] a;
wire [3:0] b;
wire [3:0] a_;
wire [3:0] b_;
wire [3:0] a_in_;
wire [3:0] b_in_;
wire [3:0] cout_;
wire [3:0] sum_;
wire [3:0] sum_in_;

always @(posedge clk)
    a_in_ <= a;
    b_in_ <= b;
    sum_in_ <= sum = a + b;
    cout_ <= cout;

================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder_carry_out( 
input a, b,
output cout, sum, carry_out );

// This is a full adder. A full adder adds two bits and produces a sum with carry-in.
module full_adder( 
input a, b,
output cout, sum, carry_in );

// This is a full adder. A full adder adds two bits and produces a sum with carry-in.
module full_adder_carry_in( 
input a, b,
output cout, sum, carry_in );

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder_carry_in_out( 
input a, b,
================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// The following is a half adder. It adds two bits and produces a sum and carry-out.
module half_adder_2( 
input a, b,
output cout, sum );

// The following is a full adder. It adds three bits and produces a sum and carry-out.
module full_adder_2( 
input a, b,
output cout, sum, carry );

// The following is a half adder. It adds two bits and produces a sum and carry-out.
module half_adder_3( 
input a, b,
output cout, sum );

// The following is a full adder. It adds three bits and
================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a half subtractor.
module half_subtractor( 
input a, b,
output cout, sum );

// This is a full subtractor.
module full_subtractor( 
input a, b,
output cout, sum, carry );

// This is the full adder with carry-out.
module full_adder_with_carry( 
input a, b,
output cout, sum, carry );

// This is the full subtractor with carry-out.
module full_subtractor_with_carry( 
input a, b,
output cout, sum, carry );

// This is the full adder with carry-in.
module full_adder_with_carry_in
================================================================
