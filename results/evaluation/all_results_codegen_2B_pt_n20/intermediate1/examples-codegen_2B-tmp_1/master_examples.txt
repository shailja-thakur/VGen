example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void 
sta_ic    (ic_wire input a
             ,ic_wire chan_input _cout, 
     cout_wire _sum) ;
void and_ic  (ic_wire chan_input _cout, 
                ic_wire and_chan_output _sum)   ;
void or_ic   (ic_wire and_chan_output _sum, 
                ic_wire or_chan_output _cout)  ;
void done   (ic_wire rd)   ;

input w;
    
always @   (a,b)
request cout = rd;
always @   (clk_a, clk_b);
begin 
rstim.clk = 1;
    
machine clk_a20b;
radio_port rcd_a20b = clk_a20b
================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

[[code]]
 [[code]]

/** Bit is the number of sync, data and/or internal registers. */
param bit

/** The 'internal_registers' bits are a single register. The bits for sync, data and internal registers are connected to the same bit number.*/
param int register_type

/** Number of assert on errors. */
param int assert_on_assert_failure

/** Zero bit observed between syncs. Defines when a zero is written indicating that ok() is done. */
param int half_adder_zero_pulse

/** Counter for internal registers*/
param int internal_registers

/** Type of encoding register expected on external pins. Volatile because of conditions_reg access.*/
param int register_encode

/** Configuration variable for number of external pins. */
param int external_pins

/** SI5. It's (log2
================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

initial 
begin
  cout = 0;
  sum = 0;
  [3:0] = ( b[3:0] << 4 ) + a[3:0];
  cout = 1;
end

initial
begin
  cout = \b[[2'b00]:take( 4, \b[3:0] )] + ( \b[1'b11] & a[1:0] );
end

//   MCU:Xilinx based 32-bit joystick controller core. Runs on Arduino boards.
end
`

================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

format concat( 
   format f_in, format f_out); 

wire boolean_cout;
wire sum_cout;
wire sum_cout_carry;
wire fout
constant b := "000010111"
constant unused := "0"
constant carry := "0"
constant eq := 0
constant d := "000010011"
constant n : integer := 0
constant o := 1
     
constant m := binary:=8
constant w := "33333333333"
constant silence := 8
    
location("6f", "chip")
    
    
    
    
    // define "io logic gate" which gets us back the floating inputs
    // as Boolean values 
  module left_logic_maker( 
   format l \nextract Z_L[i]_left,
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input run;
input ch;

int level = 0;
signed int carry_out;

wire v;
wire h = 0;
wire f = 0;

input address;

// Run clock
register type2 i = 0;
void i_fsm( RunClock );
static unsigned int i_n( );
static void h_fsm( RunClock );
static void f_fsm( RunClock );
static void i_i( RunClock );
static void i_c( RunClock );

// Run state machine implementation
static pair< bool, unsigned int > run_fsm( RunClock );
static pair< bool, unsigned int > run_state_machine();
static pair< bool, unsigned int > run_zeropage_transition();
static pair< bool, unsigned int > run_halfpage_transition();
static pair< bool, unsigned
================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
input inputs [1], 
         in [1], 
         carry, 
         current_out [1];
input sum_res, carry_res

begin

carry = 0;

sum = 0;
carry_res:= 0;
sign = a < 0;


  // interpret the input bits into an array by taking each bit
  // where the number of bits is half a counter
  for ( n=0; n < ((a + b) /2 ) & 1; n++)
    in[n] = a & 1;
    
  // increment the carry
  carry += (carry_res = a >>= 1 & 1 );

  current_out [0] = b >> 2;
  if ( carry == 1 ) {
    current_out [1] = b >> 1 & 1; 
    current_out [2] = b &
================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

//0x0						 -> 0x30
//0x1						 -> 0x31
//0x2						 -> 0x33
//0x3						 -> 0x34
//0x4c						 -> 0x4D
//0x5c						 -> 0x5D
//0x60						 -> 0x20
//0x61						 -> 0x21
//0x62						 -> 0x22
//0x63						 -> 0x23
//0x64						 -> 0x24
//0x65						 -> 0x25
//0x66						 -> 0x26
//0x67						 -> 0x27
//EOF						 -> 0x65
//(0x80 <= c <= 0xff) -> (0x80 <= c <= 0x47:5)

cmp_conditions( 
c0 == a1,
c2 == a
================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); // three output ports: sum, carry status, and overflow bit


#incremented_output counter_output;
module counter_module(
input clk,
input reset,
input [3:0] counter_in,
output counter_output );


// A wire player that has room for 3 bits of supply!!!
module wire {
// aWire -> [3:0] input bus requires three bits
input aX;
input bX;
input sumX;
always @(posedge clk, negedge reset) begin
  if (clk == 0)
    aWire = `aX;
  if (clk == 1)
    bWire = `bX;
  if (clk == 1)
    denner( `aX, `bX, `sumX )
end

term denner(a, b, sum) {
  //
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

let // This is a half subtractor. It subtracts two bits and produces a sum and carry-out.
module half_subtractor( 
input a, b,
output r, cout, sum );

`;

let hadd = blackhole( `add("a", "b", "out")` );
let hbin = blackhole( `add("a", "b")` );
let hout = binary( `0,0, yyyy,yyy,yyy,yyy,yyy,yyy` );

let h2a = blackhole( `add("a", "a")` );
let h2a_subtract = h2a.subtractor( `0`, "a", `out` );

let h2b = blackhole( `add("a", "b")` );
let h2b_subt
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Halfadder bit 0 = sum; halfadder bit 1 = carry-out
// Bits definitions:
//   0    output bit 0 = sum bit
//   1    output bit 0 = carry out bit
 //   2-7  montgomery (mod2^5) bit number
struct HalfAdder {
@MACHOP R( a,   b )
#if ZCYCLES > 0
  RALOCDATA;
#endif
} 
w_sum {
R( 0 )
#if ZCYCLES == 0;  // no factor COEFF
zmul lor( l,  M(z) )  ;// Portal LOR factor l .. perform Montgomery multiply for l
#endif  // ZCYCLES == 0
R( 1 ) ;// output logic: 1 bit
} 
w_carry {
R( 2 )
#if Z
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_l, a_h;
input b_l, b_h;
input charge_l, charge_h;

register unsigned int a_r;
register unsigned int b_r;
register unsigned int charge_r;

void Update_Register( 
input& a_h, 
input& a_r, 
unsigned int a_l, 
input& b_h, 
input& b_r, 
unsigned int b_l);

void Init_Adder( 
input a, 
input b);

void Clear_Sum_And_Carry_Out( 
output& cout, 
unsigned int sum, 
unsigned int carry_out);

void Enable_Half_Adder( input r = 0 );

main
Constrain the input a to [0,255]
Constrain the input
================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The full adder adds to three bits.
// The carry-out is made from the two least-significant bits.
module full_adder( 
input a, b,
input cout, sum, 
output carry );

// The converter produces a single byte.
module converter ( 
input q,
output byte_out );


module top (1);

top(
RNDM => RNDM )
    full_adder ( QA ~ U_P( V_P DB in AC in DB ).bus )
    non_w_r{1, 0};
top -> full_adder[1];

.finish
.precision_keep32
.endn
''' )

            hanp = pkind_pref_name(
                    pkind.name,
                    {
                        'RNDM':
                            'bit unsigned rotate-mod
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum ); 

reg ahi, adi, ashift, bhi, bdi, blshift; 

always @(posedge clk) 
  { 
    if (a.read() > 0)
      ahi.write(BIT(a.read(),0));
    else
      a.write(0);
    a.nc_write(a);

    if (b.read() > 0)
      bhi.write(BIT(b.read(),0));
    else
      b.write(0);
    b.nc_write(b);

    ahi += ahi << blshift;
      if (ahi == 1)
	blshift = (blshift+1)&32;
      // Prevents carry-out to take effect
    ahi <<= ashift;    
    if (ahi == 1)
	ashift = (ashift
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

wire  in_a[N_WIRE];
wire  carry_out[N_WIRE];
wire sum_wire, carry_out_wire;

initial_conditions out0 = {0, 0, 0, 0, 0, 0};

void out0_r( rst_n negedge clk p21 );
void bodf_in_Phase_A( rst_n negedge, posedge p21 )                
{
  sum_wire = a[0];
  carry_out_wire = a[1];
}

void bodf_in_Phase_B( rst_n negedge, posedge p21 )  
{
  OUT_Sum( sum_wire );

  carry_out_wire = 0;
}

void do_sets( boundary_time t, sensitivity s)
{
  switch
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

initial begin

  cout = 0;
  sum = 0;

end

assign [ a ] 5;
assign [ b ] 0;

inc ( { a } );
next;
assign [ sum] 0;
next;

tri ( [ a ] | [ b ] );
next;
assign [ cout ] { sum|cout }[ 1 ];
next;

endprogram

================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Bit shifter is input is binary and outputs bitwise shifted input.
module creative_shifter( 
input combine, bit_out,
output shiftout );

// Pipe an 8-bit input loaded in CPU_ID in the first half of the CPU pipe.
module combiner( 
input cfun, memory a,
output spineout );

module shifter ( 
input fuse,
output shiftin );

// The 10-bit output shifter on an LCR is the 8-bit shifter in-set
// and an 8-bit external shifter.
module ex_shifter(
input shiftr,
output ex_shiftr,
input a8,
output a_shiftr );

always @( posedge ex_shiftr )
rec A8_shiftr(
output a_shiftr,
input a8 );

///// INTERN
================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );
`,
		}
		assert.Equal(t, expectedAsmBin, asmBin, "produced AsmBin should match expected")
	})
}

================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

/*..................................................................................................................................
@@. part of "pack fru" part which does the "full" adder:                                                       @*/
module full_adder( 
input a, b,
output cout, sum );

module encoder( 
input in,
input rw,
output adder );

// this module generates the sequence rw | in1 | in2 ..
module frid_3013_0( 
input rw,
input in1, in2, ...);
//This module generates the sequence adder | rw | in1 | in2 ...
module frid_3013_full( 
input rw,
input in1, in2, ...,
output cout1, cout2 );


================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @ (ca)
begin
    for( integer me = 1; me<=48; me=me+4) ; 
    sum add( a , b , cout);
    sum substract( a , b , cout);   
end

half_adder add_out( 
input a, b,
output cout, sum);

always @(ca)
begin 
    sum substract_out( a , b , cout);
    sum add_out2( a , b , cout);
end

half_adder add_out2( 
input a, b,
output cout, sum);

always @(ca)
begin 
    for( integer me = 1; me<=48; me=me+4) ; 
    sum substract_out2( a , b , cout);
end

module adder( 
input
================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );


// This is a half subtractor. A subtractor subtract two bits and produces a sum.
module half_subtractor( 
input a, b, 
output cout, sum );


// This module computes a 16 bit unsigned half-carry number.
module unit_run( input s4p,
              output c, a, b );

#
================================================================
