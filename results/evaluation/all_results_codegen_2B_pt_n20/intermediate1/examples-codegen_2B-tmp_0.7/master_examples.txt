example-0: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void add(
input a,
input b,
output sum,
output carry);

void half_adder( 
input a, b,
output cout, sum );

void add(
input a,
input b,
output sum,
output carry);

void half_adder( 
input a, b,
output cout, sum );

void add(
input a,
input b,
output sum,
output carry);

void half_adder( 
input a, b,
output cout, sum );

void add(
input a,
input b,
output sum,
output carry);

void half_adder( 
input a, b,
output cout, sum );

void add(
input a,
input b,
output sum,
output carry);

void half_adder( 
input a, b,

================================================================
example-1: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

/////
// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum );

/////
// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and borrow-out.
module half_subtractor( 
input a, b,
output dout, diff );

/////
// This is a full subtractor. A full subtractor subtracts three bits and produces a difference and borrow-out.
module full_subtractor( 
input a, b, c,
output dout, diff );

/////
// This is a full oracle that checks the the sum and carry-out (or difference and borrow-out) values against the inputs.
module oracle_checker( 

================================================================
example-2: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

*/

void
adder::init()
{
    // Register all the registers
    for( int i = 0; i < m_registers; ++i ) {
        register_writer( i );
    }

    // Initialize function with space for the registers
    module::unbounded_instruction *insn = new module::unbounded_instruction;
    insn->set_opcode( module::OPCODE_NOP );
    insn->set_type( module::INSN_NOP );
    m_unbounded_instructions.push_back( insn );
    m_last_instr_idx = 0;
}

void
adder::register_writer( int id )
{
    m_writers[ id ] = ( module::reg_t ) m_unbounded_instructions.size();
================================================================
example-3: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input top, carry_in, carry_out;

input full;

input inb_val;

reg a_val;
reg b_val;
reg cout_val;

reg a_full;
reg b_full;
reg cout_full;

reg a_sum;
reg a_carry;

reg b_sum;
reg b_carry;

reg sum_val;

void half_adder_init()
{
    // Initialize full inputs
    full = 1;
    top = 0;
    carry_in = 0;
    carry_out = 0;
    // Initialize carry outputs
    cout_full = 0;
    cout_val = 0;
    sum_val = 0;
    // Initialize carry inputs
    inb_val = 0;
    a_full = 0;
================================================================
example-4: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void half_adder_isr(void);

void half_adder_isr(void) {
    cout = 4;
    sum = a + b;
}

================================================================
example-5: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );


// Half adder
module half_adder( 
input a, b,
output cout, sum, carry );


// Combines the Half adder and the 2-bit adder
module full_adder( 
input a, b,
output cout, sum, carry );


// Combines the 2-bit adder and the 2-bit adder 
module double_adder(
input a, b,
output cout, sum, carry );

*/


================================================================
example-6: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_p, b_p,
output cout_p, sum_p;

void half_adder::proc()
{
  
  sum = a + b;
  cout = ((sum >> 1) + (sum & 1));
  sum_p = sum;
  cout_p = cout;
  
}

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

input a_p, b_p,
output cout_p, sum_p;

void full_adder::proc()
{
  
  sum = a + b;
  cout = ((sum << 1) + (sum >> 7));
  sum_p = sum;
  cout_p = cout;

================================================================
example-7: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// Half Adder Functions

void do_half_adder( 
input a, b,
output cout, half_adder ha );

void do_half_adder_a( 
input a, 
output cout, half_adder ha );

void do_half_adder_b( 
input b, 
output cout, half_adder hb );

void do_half_adder_c( 
input cout, 
output sum, half_adder hc );

void do_half_adder_d( 
input cout, 
output sum, half_adder hd );

void do_half_adder_e( 
input cout, 
output sum, half_adder he );

void do_half_adder_f( 
input cout, 
output sum, half_adder hf );

void do_half
================================================================
example-8: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// The full adder takes three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum, carry );

// The full subtractor takes three bits and produces a sum and carry-out.
module full_subtractor( 
input a, b, c,
output cout, sum, carry );

// The subroutine that reads inputs from file, computes the sum and carry-out,
// and writes the sum and carry-out to file.
module adder(
input a,
output sum, carry );

// The subroutine that reads inputs from file, computes the sum and carry-out,
// and writes the sum and carry-out to file.
module subtractor(
input a,
output sum, carry );

// The subroutine that reads inputs from file, comp
================================================================
example-9: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two integers and produces a sum and carry-out.
////
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry );

// This is a carry-less adder. A carry-less adder adds two integers, producing a sum and carry-out.
module carry_less_adder( 
input a, b,
output cout, sum );


// This is a decoder. A decoder decodes a binary input into a boolean output.
module decoder( 
input b, 
output cout );


// Simple decoder.
module decoder2( 
input b, 
output cout );


// This is a full decoder. A full decoder dec
================================================================
example-10: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a, b,
input cout, sum;

input carry_out;

assign cout = a | (b << 1) | carry_out;
assign sum = cout | ((a & b) << 1);

assign carry_out = sum >> 2;


================================================================
example-11: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds two words and produces a sum.
module full_adder( 
input a, b,
output cout, sum );

// This is a half-adder that adds two words and produces a sum.
module sum_adder( 
input a, b,
output cout, sum );

// This is a full-adder that adds two words and produces a carry out.
module carry_adder( 
input a, b,
output cout, sum );

// This is a half-adder that adds two words and produces a carry out.
module carry_adder_2( 
input a, b,
output cout, sum );

// This is a full-adder that adds two words and produces a carry out.
module sum_adder_2( 
input a, b,
output cout, sum );

module processor
================================================================
example-12: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input a_in, b_in;
output cout_out, sum_out;

// output signals
wire carry_out;

wire carry_in;

// input signals
wire a_in_l, a_in_h,
b_in_l, b_in_h;

// internal signals
wire sum_in,
sum_out,
sum_l,
sum_h,
sum_c;

assign a_in_l = a & 1,
a_in_h = a >> 1,
b_in_l = b & 1,
b_in_h = b >> 1;

assign sum_in = a_in_h ^ a_in_l ^ b_in_h ^ b_in_l;

always @(posedge clk)
{
    sum_out = sum
================================================================
example-13: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
    cout = 0;
    sum = a + b;
    if ( sum > 0xF )
        cout = 1;
end

// This is a full adder. A full adder adds a bit at a time and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

always @(posedge clk) begin
    cout = 0;
    sum = a + b;
    if ( sum > 0xFF )
        cout = 1;
end

// This is an LFSR, which adds a bit at a time and produces a sum and carry-out.
module lfsr( 
input a, b,
output cout, sum );

always @(posedge clk) begin
    cout = 0
================================================================
example-14: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

/*

input:

a = first input (possible range from 0 to 255)
b = second input (possible range from 0 to 255)

output:

cout = sum of a+b (possible range from 0 to 255)
sum = sum of a and b (possible range from 0 to 255)
carry = carry out for sum of a and b (possible range from 0 to 1)

*/

void half_adder::execute()
{
    // put your code here
	sum.write(a+b);
	carry.write(sum<a+b ? 1 : 0);
	cout.write(sum);
}

================================================================
example-15: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

input cin, cout;

always @(posedge cin) cout <= cout + 1;

reg  sum, carry_out;
const int MAX = 16;

// This is a full adder. A full adder adds two bits and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum, carry_out );

input cin, cout;

always @(posedge cin) cout <= cout + 1;

reg  sum, carry_out;
const int MAX = 16;

// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum, carry_out );

input cin, cout;

always @(posedge cin) cout <=
================================================================
example-16: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds three bits and produces a sum and carry-out.
module full_adder( 
input a, b, c,
output cout, sum, carry );

// This is a half subtractor. A half subtractor subtracts two bits and produces a difference and carry-out.
module half_subtractor( 
input a, b,
output cout, difference );

// This is a full subtractor. A full subtractor subtracts three bits and produces a difference and carry-out.
module full_subtractor( 
input a, b, c,
output cout, difference, carry );

// This is a half multiplier. A half multiplier multiplies two bits and produces a product and carry-out.
module half_multiplier( 
input a, b,
output cout, product );

// This is a
================================================================
example-17: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );


// This is a half subtractor. A half subtractor subtracts two bits and produces a sum.
module half_subtrautor(
input a, b,
output cout, sum );


// This is a half multiplier. A half multiplier multiplies two bits and produces a sum.
module half_multiplier(
input a, b,
output cout, sum );


// This is a half modulo. A half modulo modifies two bits and produces a sum.
module half_modulo(
input a, b,
output cout, sum );


__attribute__((reqd_work_group_size(32, 32, 1)))
__kernel void __attribute__((reqd_work_group_size(32, 32, 1)))
half_adder(
input a, b,
output cout, sum )
{
    sum = a + b;
}
__
================================================================
example-18: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

// This is a full adder. A full adder adds a word and produces a sum and carry-out.
module full_adder( 
input a, b,
output cout, sum );

// Constant vector input.
module constant_vector_adder(
input a, b,
output cout, sum );



// ------------------------------------------------------------
// Saturating adder
// Each result is one bit wider than the input.
// The carry/borrow bit is always the rightmost bit.
// ------------------------------------------------------------

// saturating adder
module saturating_adder(
input a, b,
output cout, sum );

// saturating adder
module saturating_adder_2(
input a, b,
output cout, sum );

// saturating adder
module saturating_adder_3(
input a, b,
output cout, sum );
================================================================
example-19: 
// This is a half adder. A half adder adds two bits and produces a sum and carry-out.
module half_adder( 
input a, b,
output cout, sum );

void main()
{
  sum = a + b;
  cout = sum;
}

================================================================
