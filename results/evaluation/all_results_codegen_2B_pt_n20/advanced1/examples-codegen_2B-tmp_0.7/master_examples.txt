example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


always@* always
begin 
    s <=a and b;
    overflow <= s[7] and b[7];

end;

always@* always
begin 
    s <= a[7:0] or b[7:0];
    overflow <= s[7] and a[7] and b[7];

end;

always@* always
begin 
    s <= (a+b);
    overflow <= a[7] and b[7] and not(s[7]);

end;

always@* always
begin 
    s <= (a+b) or overflow;
    overflow <= a[7] and b[7] and not(s[7]);

end;

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// SIGNED_ADDER.v, -2, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow s[7] = (a[7] < b[7]) ? 1 : 0;
assign overflow s[6] = (a[6] == b[6]) ? 0 : 1;
assign overflow s[5] = (a[5] == b[5]) ? 0 : 1;
assign overflow s[4] = (a[4] == b[4]) ? 0 : 1;
assign overflow s[3] = (a[3] == b[3]) ? 0 : 1;
assign overflow s[2] = (a[2] == b[2]) ? 0 : 1;
assign overflow s[1] = (a[1] == b[1]) ? 0 : 1;
assign overflow s[0] = (a[0] == b[0]) ? 0 : 1;


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// 1. if a is 0 and b is 0, return 0
// 2. if a is 0 and b is 1, return b
// 3. if a is 0 and b is -1, return a
// 4. if a is 1 and b is 0, return a
// 5. if a is 1 and b is 1, return a+b
// 6. if a is 1 and b is -1, return a+b
// 7. otherwise return a+b
//
input a[7:0], b[7:0];
output s[7:0];
output overflow;

assign overflow = (a[7]<0) AND (b[7]<0);


================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder(s, a, b, overflow)
{
  s(7:0) = a(7:0) + b(7:0);
  if (s(7:0) > 0x7f) {
    s(7:0) = 0x7f;
    overflow(1);
  }
  else if (s(7:0) < 0x80) {
    s(7:0) = 0x80;
    overflow(1);
  }
  else {
    s(7:0) = 0x00;
    overflow(0);
  }
  
}

// Driver code

signed_adder a, b, s;
unsigned char overflow_cnt = 0;

a(7:0) = 0x7f;
b(7:0) = 0x80
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signal [7:0] carry_out;
signal [7:0] carry_in;
signal overflow;

assign carry_out = 0;

assign carry_in = (a[7]>0 ? a[7] : 0) + (b[7]>0 ? b[7] : 0);

if ( (carry_in>=128) || (carry_in<-128) )
  { 
    carry_out=0;
    overflow = 1;
  }
else
  {
    carry_out = carry_in;
    overflow = 0;
  }

s[7:0] = carry_out;


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// $ShowTree   

// $ShowCpp   



// $JUnitResult:   

================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


rule adder_int_signed_adder_int_signed_adder_int_signed_adder_int_signed_adder_int_signed_adder: signed_adder (
    a[7:0],
    b[7:0],
    s[7:0], 
    overflow[7:0]
) {
    if (a[7:0] < b[7:0]) {
        s[7:0] = a[7:0] + b[7:0];
        overflow[7:0] = (s[7:0] == 0x00);
    } else if (a[7:0] > b[7:0]) {
        s[7:0] = a[7:0] - b[7:0];
        overflow[7:0] = (s[7:0] == 0x
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire carry;

signed_adder(a[7:0], b[7:0], s[7:0], overflow)
{
  carry = a[7] + b[7];

  if (carry > 0) {
    s[7] = carry;
    overflow = true;
  } 
  else {
    s[7] = carry;
    overflow = false;
  }
  if (carry > 0) {
    s[6] = carry;
    overflow = true;
  } 
  else {
    s[6] = carry;
    overflow = false;
  }
  if (carry > 0) {
    s[5] = carry;
    overflow = true;
  } 
  else {
    s[5] = carry;
    overflow = false;
  
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


    signed_adder.func: 
    wire a_bits;
    wire b_bits;
    wire s_bits;
    wire overflow;

    always @ (posedge posedge)
    begin
        a_bits = a[7:0];
        b_bits = b[7:0];
        s_bits = s[7:0];
        overflow = ((a_bits ^ b_bits) & (a_bits ^ s_bits) & (a_bits ^ s_bits)) == 0;
        s_bits = a_bits + b_bits;
        if (overflow) s_bits = ~s_bits;
    end



================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



void main() {
  // Zero the output
  s = {};
  // Init overflow
  overflow = 0;

  // Add
  for (int i = 0; i < 8; i++) {
    if (a[i] == 0xFF && b[i] == 0xFF) {
      // Signed overflow
      overflow = 1;
    }
    s[i] = a[i] + b[i];
  }
}


================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// signals
input [7:0] s_in;
output [7:0] s_out;
output overflow;


// stores
integer i;

// signals
input [7:0] a_in;
input [7:0] b_in;

// outputs
output [7:0] a_out;
output [7:0] b_out;

// signals
input [7:0] s_in;
input [7:0] s_out;

// signals
input [7:0] a_in;
input [7:0] b_in;

// stores
integer i;

// signals
input [7:0] a_in;
input [7:0] b_in;

// outputs
output [7:0] a_out;
output [7:0] b_out
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire a_in, b_in, s_out, overflow_out;

signal a_sig : integer = a[7:0];
signal b_sig : integer = b[7:0];
signal s : integer = s[7:0];
signal overflow_sig : integer = overflow_in[7:0];


always @ (a_sig, b_sig, overflow_sig)
begin
    if ((a_sig == 0) && (b_sig == 0))
    begin
        s = 0;
        overflow_out = 0;
    end
    else if ((a_sig < 0) && (b_sig < 0))
    begin
        s = (a_sig + b_sig + 1) & 0xFF;
        overflow_out = overflow_
================================================================
example-15: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


input [7:0] a,
    input [7:0] b;
output [7:0] s;
output overflow;

assign s[7:0] = b[7:0] + a[7:0];

if (s[7] > 0) {
    assign overflow = s[7];
}
else {
    assign overflow = 0;
}

always @(posedge clock) begin
    if (a[7] and b[7] and ~s[7]) {
        s[7] = 1;
    }

end

================================================================
example-16: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// (a,b) > (s,0)
// (a,b) < (s,1)

wire sign_overflow = 0;

assign overflow = ((a[7] < b[7]) ^ ((a[7] < b[7]) ^ (s[7] < 0))) & ((a[7] < s[7]) ^ ((a[7] < b[7]) ^ (s[7] < 1)));
================================================================
example-17: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire overflow;

signal
    a_s = a[7:0]
    b_s = b[7:0]
    s_s = s[7:0]
;

always @(posedge clk)
    overflow = a_s && b_s;

always @(posedge clk)
    s_s = s_s + b_s;
    

================================================================
example-18: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signal <7:unsigned char> overflow; 

shift_reg r_a, r_b; 

constraint 
    a == 0 => overflow[7:0] = 0
    b == 0 => overflow[7:0] = 0
    a == 0 b == 0 => overflow[7:0] = 0
    a == 0 => overflow[7:0] = 0
    a == b == 0 => overflow[7:0] = 0
    a == 0 => overflow[7:0] = 0
    a == 0 => overflow[7:0] = 0 
    a == b => overflow[7:0] = 0
    a < b => overflow[7:0] = 1 
    a > b => overflow[7:0] = 1
    a > b => overflow[7:0] = 1
    b > a => overflow
================================================================
example-19: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


input [7:0] a;
input [7:0] b;
output [7:0] s;
output overflow;

rule add {
    if (a[7]) {
        s[7] = b[7] + 1;
    } else {
        s[7] = b[7];
    }
    if (s[7] > 0) {
        overflow = s[7];
        s[7] = s[7] - 1;
    } else {
        overflow = 0;
    }
}

// @begin_rule add
// @end_rule add

================================================================
