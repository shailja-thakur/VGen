example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = S101;
    if (next_state != present_state) {
        z = 1;
        present_state = next_state;
    }

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
    if (next_state != present_state) {
        z = 1;
        present_state = next_state;
    }

================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        next_state = IDLE;
        present_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = present_state;
    if (x == 1)
        present_state = S1;
    else
        if (x == 0)
            present_state = S10;
        else
            present_state = IDLE;
    if (present_state == S101)
        z = 1;
    else
        z = 0;
end

// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm_2(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        next_state = IDLE;
        present_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else if (x == 1)
        next_state = S1;
    else if (x == 0)
        next_state = S10;
    else
        next_state = IDLE;
    if (reset == 1)
        present_state = IDLE;
    else if (x == 1)
        present_state = S1;
    else if (x == 0)
        present_state = S10;
    else
        present_state = IDLE;
end

always @(posedge clk)
begin
    if (reset == 1)
        z = 0;
    else if (x == 1)
        z = 1;
    else
        z = 0;
end

always @(
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = present_state;
    if (x == 1)
        present_state = S1;
    else
        present_state = IDLE;
end

always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = present_state;
    if (x == 0)
        present_state = S10;
    else
        present_state = IDLE;
end

always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = present_state;
    if (x == 1)
        present_state
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        present_state = IDLE;
        next_state = IDLE;
    }
    else
    {
        if (x == 1)
        {
            if (present_state == IDLE)
            {
                next_state = S1;
            }
            else if (present_state == S1)
            {
                next_state = S10;
            }
            else if (present_state == S10)
            {
                next_state = S101;
            }
            else
            {
                next_state = IDLE;
            }
        }
        else
        {
            if (present_state == IDLE)
            {
                next_state = IDLE;
            }
            else if (present_
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
if (x == 1)
{
    if (reset == 0)
    {
        present_state = IDLE;
    }
    else
    {
        present_state = S1;
    }
}
else
{
    if (reset == 0)
    {
        present_state = IDLE;
    }
    else
    {
        present_state = S10;
    }
}

if (present_state == S1)
{
    if (reset == 0)
    {
        next_state = S101;
    }
    else
    {
        next_state = IDLE;
    }
}
else if (present_state == S10)
{
    if (reset == 0)
    {
        next_state = S101;

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        present_state = IDLE;
        next_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        next_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
        {
            next_state =
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = present_state;
    if (x == 1)
        next_state = S1;
    else if (x == 0)
        next_state = S10;
    else
        next_state = IDLE;
    if (next_state == IDLE)
        z = 1;
    else
        z = 0;
end

always @(posedge clk)
begin
    if (reset == 1)
        present_state = IDLE;
    else
        present_state = next_state;
end

always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = present_
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
    if (next_state == IDLE) present_state = IDLE;
    else present_state = next_state;

================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        present_state = IDLE;
        next_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
        {
            next_state = IDLE;
        }
        else
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
    if (next_state != present_state) present_state = next_state;

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
    if (next_state != present_state) {
        z = 1;
        present_state = next_state;
    }

================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (reset) next_state = IDLE;
    else if (x == 1) next_state = S1;
    else if (x == 0) next_state = S10;
    else next_state = IDLE;
    if (next_state != present_state) {
        z = 1;
        present_state = next_state;
    }

================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        present_state = IDLE;
        next_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        next_state = IDLE;
        present_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        next_state = IDLE;
        present_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
        else
        {
            next_state = IDLE;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
================================================================
