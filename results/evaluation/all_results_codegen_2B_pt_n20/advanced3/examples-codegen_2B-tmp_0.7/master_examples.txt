example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    next_state = IDLE;
    present_state = IDLE;
end

always @(posedge clk, posedge reset) begin
    if (reset) next_state = IDLE;
    if (clk) present_state = next_state;
    if (reset && x) next_state = S101;
    if (x) present_state = present_state == IDLE ? next_state : IDLE;
end


================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

  reg [2:0] x_and_z;
  reg [3:0] x_and_z_counters;
  reg [4:0] x_and_z_counters_shadow;
  reg [5:0] x_and_z_counters_shadow_shadow;
  reg [6:0] x_and_z_counters_shadow_shadow_shadow;
  reg [7:0] x_and_z_counters_shadow_shadow_shadow_shadow;
  reg [8:0] x_and_z_counters_shadow_shadow_shadow_shadow_shadow;
  reg [9:0] x_and_z_counters_shadow_shadow_shadow_shadow_shadow_shadow;
  reg [10:0] x_and_z_counters_shadow_shadow_shadow_shadow_shadow
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin

always @(posedge clk) 
  if (reset) next_state = IDLE;
  else if ((x == 1) and (present_state == IDLE)) next_state = S1;
  else if ((x == 0) and (present_state == S1)) next_state = IDLE;
  else if ((x == 1) and (present_state == S1) and (present_state != IDLE)) next_state = S10;
  else if ((x == 0) and (present_state == S10)) next_state = IDLE;
  else if ((x == 1) and (present_state == S10) and (present_state != IDLE)) next_state = S101;
  else if ((x == 0) and (present_state == S101)) next_state = IDLE;
  else if ((x
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


      // STATE 0
if ( reset is '0' and clk is '1' ) begin
    next_state = IDLE;
end
      // STATE 1
if ( abs(x) > 0 ) begin
    if ( x is '1' and present_state is IDLE ) begin
        next_state = S1;
    end
    if ( x is '0' and present_state is IDLE ) begin
        next_state = IDLE;
    end
end
      // STATE 2
if ( abs(x) is '0' and present_state is S1 ) begin
    next_state = S10;
end
      // STATE 3
if ( x is '1' and present_state is IDLE ) begin
    next_state = S101;
end
      // STATE 4
if ( x is '0' and present_state is IDLE
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
{
    if (rst == 1)
    {
        next_state = IDLE;
        present_state = IDLE;
    }
    else if (x == 1)
    {
        if (present_state == IDLE)
        {
            next_state = S1;
        }
        else if (present_state == S1)
        {
            next_state = S10;
        }
        else if (present_state == S10)
        {
            next_state = S101;
        }
    }
    else
    {
        if (present_state == IDLE)
        {
            next_state = IDLE;
        }
        else if (present_state == S1)
        {
            next_state = IDLE;
        }
        
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
begin
if (x == 0)
{
    present_state = IDLE;
    next_state = IDLE;
}
else if (x == 1)
{
    if (reset == 0)
    {
        present_state = IDLE;
        next_state = S1;
    }
    else
    {
        present_state = S1;
        next_state = S10;
    }
}
else if (x == 0)
{
    if (reset == 0)
    {
        present_state = IDLE;
        next_state = S1;
    }
    else
    {
        present_state = S10;
        next_state = S101;
    }
}
else
{
    if (reset == 0)
    {
        
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
    if (reset == 1)
    {
        next_state = IDLE;
        present_state = IDLE;
    }
    else
    {
        if (x == 1)
        {
            if (present_state == IDLE)
            {
                next_state = S1;
            }
            else
            {
                next_state = IDLE;
            }
        }
        else
        {
            if (present_state == IDLE)
            {
                next_state = S10;
            }
            else
            {
                next_state = IDLE;
            }
        }
    }
end

always @(posedge clk)
begin
    if (reset == 1)
    {
        z = 1;
    }
end

================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
if (clk == 1)
{
    next_state <= IDLE;
    if (reset == 1)
    {
        present_state <= IDLE;
    }
    else
    {
        if (x == 0)
        {
            next_state <= S1;
        }
        else
        {
            next_state <= S10;
        }
    }
}
else
{
    next_state <= IDLE;
    if (reset == 1)
    {
        present_state <= IDLE;
    }
    else
    {
        if (x == 0)
        {
            next_state <= S1;
        }
        else
        {
            next_state <= S10;
        }
    }
}

================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk, posedge rst)
  if (rst)
    next_state = IDLE;
  else if (reset)
    next_state = IDLE;
  else {
    if (x == 1)
      next_state = IDLE;
    else if (x != 0)
      next_state = S1;
    else
      next_state = IDLE;
  }
  present_state = next_state;

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
    next_state=IDLE;
    present_state=IDLE;
    if (reset == 1)
        next_state=IDLE;
end

always @(posedge clk)
    if (reset == 0)
        next_state=IDLE;
        
    if (x == 1)
        if (present_state == IDLE)
            next_state=S1;
        else if (present_state == S1)
            next_state=IDLE;
        else if (present_state == S10)
            next_state=S101;
        else if (present_state == S101)
            next_state=IDLE;
        else if (present_state == S101)
            next_state=IDLE;
    else
        if (present_state == IDLE)
            next_state
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) begin
    next_state <= IDLE;
    present_state <= IDLE;
    if (clk == 1)
        next_state <= S1;
    else if (clk == 0 && reset == 0)
        next_state <= S1;
    else if (x == 1)
        next_state <= S10;
    else if (x == 0)
        next_state <= S101;
    else
        next_state <= IDLE;
end


// driver code
adv_fsm fsm;

// driver pins
reg [3:0] x, y, z;

// driver ports
reg clk;
reg reset, x_valid;

// driver datalines
reg [255:0] out;

// driver interconnects
reg [7:0] inp;
reg [
================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
    if (reset) next_state=IDLE;
    else if (x) next_state=S1;
    else next_state=S10;
    if (reset && x) next_state=S101;
    present_state=next_state;
    if (present_state==S1)
      z=~x;
    if (present_state==S10)
      z=x;
    if (present_state==S101)
      z=!x;
end
);

================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
begin
    if (present_state == IDLE) {
        if (x == 1) {
            next_state = S1;
        } else {
            next_state = IDLE;
        }
    } else if (present_state == S1) {
        if (x == 0) {
            next_state = S10;
        } else {
            next_state = IDLE;
        }
    } else if (present_state == S10) {
        if (x == 1) {
            next_state = S101;
        } else {
            next_state = IDLE;
        }
    } else if (present_state == S101) {
        next_state = IDLE;

================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk)
    if (rst == 0)
        next_state = IDLE;
    else
        next_state = present_state;
    if ((x == 1) && (next_state == IDLE))
        next_state = S1;
    if ((x == 0) && (next_state == S1))
        next_state = S10;
    if ((x == 1) && (next_state == S10))
        next_state = S101;
    if ((x == 0) && (next_state == S101))
        next_state = IDLE;
    present_state = next_state;


================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
begin
present_state <= IDLE;
z <= 1'b0;
if (x == 1)
begin
  if (reset == 0)
    present_state <= S1;
  else
    present_state <= IDLE;
z <= 1'b1;
end
else // x == 0
begin
  if (reset == 0)
    present_state <= IDLE;
  else
    present_state <= IDLE;
z <= 1'b0;
end
else // x == 0
begin
  if (reset == 0)
    present_state <= IDLE;
  else
    present_state <= IDLE;
z <= 1'b0;
end
end
wire [1:0] idle_state, next_state;
begin
if (idle_state == IDLE)

================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin:
    if (reset == 1) begin:
        if (reset == 1) begin:
            z <= 0;
            next_state <= 0;
            present_state <= 0;
        end
        if (clk == 1) begin:
            if (x == 1) begin:
                present_state <= S1;
                next_state <= S10;
            end
            if (x == 0) begin:
                present_state <= S1;
                next_state <= S101;
            end
            if (x == 0) begin:
                present_state <= IDLE;
                next_state <= S1;
            end
        end
    end
    if (x == 1) begin:
        if (next_state == IDLE) begin:
            present_state <= S1;
            next_state <= S10;

================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (*)
#1 !clk1(clk),
#2 rsp_reset(reset),
#3 rsp_x(x),
@next_state_cond
if (rsp_reset == reset)
  next_state = IDLE;
else
  next_state = IDLE;
if (rsp_x == 1)
  next_state = S1;
else if (rsp_x == 0)
  next_state = IDLE;
if (rsp_x == rsp_x_prev)
  next_state = next_state;
rsp_x_prev = rsp_x;
#1 !clk1(clk),
#2 rsp_reset(reset),
#3 rsp_x(x),
@next_state_cond
if (rsp_reset == reset)
  
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin
  if (not(clk)) begin
    x_out_1 <= 1;
    next_state <= IDLE;
    present_state <= IDLE;
    z_out <= 1;
  end
  if (not(reset)) begin
    next_state <= IDLE;
    z_out <= 1;
  end
  if (x == 1) begin
    next_state <= S1;
    if (present_state == IDLE) begin
      next_state <= S1;
      present_state <= S10;
    end
    if (present_state == S1) begin
      next_state <= S10;
      present_state <= S101;
    end
    if (present_state == S10) begin
      next_state <= S101;
      present_state <= IDLE;

================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
    if (x) {
        next_state < 1;
        // if the next state is not IDLE, this signal is asserted to 1
    } else {
        next_state <> IDLE;
    }
    if (reset) {
        z=0;
        // if the reset signal is high, this is a reset state
        // next_state is assigned IDLE
        next_state = IDLE;
        // if the reset signal is low, this is a IDLE state
    } else {
        // next_state is assigned next_state
        // if the next state is not IDLE, this is a S1 state
        // the next_state is reset to IDLE
        next_state = IDLE;
        // if the next state is IDLE, next_state is assigned S1 if x is
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*)
begin
    next_state <= IDLE;
    present_state <= IDLE;
    if ( clk = '0' and reset = '0' ) begin 
        next_state <= IDLE;
        if x = '0' then next_state <= S1;
        else if x = '1' then next_state <= S10;
        else next_state <= IDLE;
    end else begin 
        if ( clk = '0' and reset = '1' ) begin
            next_state <= IDLE;
            if x = '0' then next_state <= S1;
            else if x = '1' then next_state <= S10;
            else next_state <= IDLE;
        end else begin
            if ( clk = '1' and reset = '0' ) begin
                next_state
================================================================
