example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin   :clk=1'b0;  // reset is not active on reset & 1'b1
                    next_state<=S1;
                    next_state <= IDLE; 
                    present_state<=IDLE; 
                    if (reset == 1'b0){ 
                        next_state<=IDLE;
                    };    
                    if (clk == 1'b1) {
                        if(present_state[1]==S101){ 
                            next_state<=S101;
                        }; 
                        if(present_state[1]==IDLE){ 
                            next_state<=IDLE;    
                        };
                    };
                    if (z == 1'b1) {
                        next_state<=S101;    
                    }
                    present_state <= next_state;
                    
end; 


================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
  if (reset) z = 1;
  else if (x) z = 0;
  else next_state = IDLE;
  while (--PRESCALE<=0) PRESCALE=PRESCALE+1;
  if ((RESET==RESET) && (PRESCALE==PRESCALE0)) {
    next_state = get_present_state();
    // while state is IDLE => next_state is reset to IDLE
    // while state is S1 => next_state is S10    
    // While state is S10 => next_state is S101
    // while state is S101 => next_state is IDLE  
    
    
  }
  if ((RESET==RESET) && (PRESCALE==PRESCALE1)) {
    next_state = get_present_state
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(*)
begin
  if (++x) {
    za = z;
    z_next = S10; 
  } else {
    za = ~(not in);
    z_next = IDLE;
  } 
  const clk_1 = clk and clk_1;
  const clk_0 = ~clk and clk_0;
  in1 = clk_1;
  int_clock = ((clk_1 or in1) and --reset and input[5:0] == 101); 
  const reset_1 = reset and reset_1;
  if (reset and in1) { 
    present_state = IDLE;
  } else {
    if (z != in or reset_1) {
      present_state = IDLE;
    } else {
      next_
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


assign present_state = idle;
reg [8:0] z0, z1, z2, z3, z4, z5, z6, z7;
reg idx = 8;
always @ (posedge posedge clk & posedge reset )
begin 
   if (reset) next_state = idle;
   else
   begin 
       if (x == (z & 0b00000111))
            {
                    next_state = present_state exists S101 ? current_pli_state    : nosymp ; // current pli state is 1 = current pli, 0 = previous pli, transition flag 
                    z = z | 1;
            }
       else
            {
                    next_state = idle;
                    z = z & 0b11111111;  // z contains 0 which signals start of reset stream
            
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @* event () 
begin
   if reg[0] == IDLE 
   {
      // The signal x has not yet changed. Assign present state to IDLE.
      present_state <= IDLE;
   }
   else if x[7] == 1 
   {
      // Signal x has transitioned from 0 to 1.
      // DAltrail has not yet changed and z is at 1 until after the internal switch has signaled next state.
      reg[1] <= S10;
      next_state <= S1;
   }
   else 
   {
      // Signal x has transitioned from 1 to 0.
      // DAltrail has not yet changed and z is at 1 until after the internal switch has signaled next state.
      reg[1] <= S101;
      next_state <= IDLE;
   }
   z <= next_state
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


subroutine r_S10_S1
if x put z=1, else z=0  
end
SS_IDLE=IDLE
LAT_S10_S1()

subroutine r_S10_S101
if x put z=1, else z=0  
end
SSYNC_S10=S1
XXX_IDLE=IDLE
LAT_S10_S101()

subroutine r_S10_S101
if x put z=1, else z=0, executed from within an interrupt
end
subroutine r_S10_S101_xxx
if x put z=1, else z=0  
end
ID=IDLE
LAT_S10_S101_xxx()

subroutine r_S10_S101_xxx
if x put z=1, else z
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(*) begin
    if ((clk==1) && (reset==0)) begin
        next_state = IDLE;
    end else begin
        if ((x==1) && (present_state == IDLE)) begin
            if (clk==1) begin
                  z=0;
            end else begin 
                if (clk==0) begin
                  next_state = ( present_state == IDLE) ? S10 : present_state;
                end else begin
                  present_state = (clk==1)?S1:present_state;
                  z=clk;
                end   
            end
        end else // next_state is IDLE
    if ((x==0) && (present_state == IDLE)) begin
        if ((reset==1)||(clk==0)) begin
            next_state = IDLE;
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


begin
// Reset and clock are used to get the signal x
#5 << clocks
#5 >> reset, clk

z = IDLE;
while 1'do 
    z = (blk) ? ((!S101) || (S1===present_state)) ? (1) : (0) : (1); //#5#: idump      
    S1 = S1<2 ? 0 : 1;
    S10 = S10<2 ? 0 : 1;
    S101 = S101<2 ? 0 : 1;
    next_state <=x
        if (S101==0) 
            {
                if (S1==1) 
                    { 
                        next_state = S10; 
                    }
                else 
                    { next_state=IDLE; }
             }
        else
            if (S10
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
    case(IDLE):  
        z=z.read();
        if (next_state==((x==IDLE?IDLE:IDLE), DEMUX_GET_X(x))) {
            if (reset==1) next_state=IDLE;
            z=1;
        } else {
            next_state=IDLE;
        }
    
""")
for elm in sequence:
    print("reg [{}+1:0] present_state[{}];".format(elm[0], elm[0]+1).replace(" ", "").replace("{}", str(elm[1]-1).zfill(elm[0]+1)+"+1"))
print("*)")
print("always @(posedge clk) begin .")
show_present_state(
================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
initial begin

    z = 0; 
    next_state = IDLE; 
    present_state = IDLE; 
// initialize state machine
      
if( reset == 1 )
{
    present_state = IDLE; 
    next_state = IDLE; 
}

whilst (z == 0)
{ 
    if(clk==1)// rising clock edge 
    {
        if( x == 1) // rising transition 
        {
	// next state
	next_state = S1; 
	//-1 as we are not processing z
	
	//first char, fsm instantiated with 1 by programme initialising rest of y 
	//thats why we decrement here 
	if (present_state == S1) 
	{
	    present_state = S10;
	}
================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) 
    if (x) // after rising edge '0' is followed by '1'
        present_state <= case1_m( clk );
        else
	    next_state <= S1;
    else 
        if (next_state && (~reset || x)) // it has been '1' tripped
            present_state <= S101; 
        else
            next_state <= IDLE;    

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


adv_fsm fsm;

always @(posedge clk) begin
   if (reset == 1) next_state = IDLE; 

   if (x == 1) next_state = S1; 
   else if (x == 0) next_state = S10; 
   else if (x == 101) next_state = S101; 
   else
      next_state = IDLE; 

   if (reset == 1) present_state = IDLE; 
   else 
      if (next_state == S1) 
         if (x == 1) 
            present_state = S1; 
         else
            present_state = IDLE; 
      else if (next_state == S10) 
         if (x == 0) 
            present_state = S10; 
         else
            present
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

 
always @(posedge clk) begin
//if(rst) next_state = IDLE;
//else
if (!reset) {
    if (x) {
        next_state = S101;
        if (present_state != S101) {
            present_state = next_state;
        }

    } else ;
        next_state = IDLE;
        if(present_state==IDLE) {

            if (x) {
                next_state = S10;

            } else {
                next_state = IDLE;
                present_state = next_state;
            }
        } 
} else {
    if (x) {
        next_state = S10;
        if (present_state != S10) {

            present_state = next_state;
         
        }

    } else {
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// S1 states
// when next_state is assigned RS, next_state stays at S1
// when next_state is assigned -1, next state is S1
always @(posedge) 
reg [1:0] {next_state : 0x00};
always @(posedge clk) 
{
    if (not reset) present_state = next_state;	// rotation -1 on reset/m_signal asserted
    next_state = 0b101;			// Dummy state assigned
    if((not present_state) or (present_state==S101)) 
        next_state = 0x00;			// IDLE
}

// S10 states
// when next_state is assigned RS, next_state stays at S10
// when next_state is assigned -1, next state is S10
always @(posedge gr)
================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk)
    if (app_state == IDLE)
    {
        if(x == 1) 
        {  
            if(rst && (!app_x)) 
            { 
                app_state = IDLE;
            }
            else 
            {
                app_state = S1;
            }
        } 
        else 
        { 
            if(rst && app_x) 
            { 
                app_state = IDLE;
            }
            else
            {
                app_state = IDLE;
            }
        } 
    }
    else if (app_state == S1)
    {
    	if(app_x == 0) 
        { 
            app_z = 1;
            if(rst && (!rx_rst
================================================================
example-15: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


start
{
  
  next_state = configure [present_state]:parameter IDLE;

  present_state = next_state [next_state not <> reset and clk == 1];
} end






================================================================
example-16: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

   
always @(posedge clk)
begin 
    // initialize all states to IDLE
    if (reset == 1) not(present_state) = IDLE; 
    // check for input is provided
    if (reset == 0) next_state = present_state; 
    // run ongoing transitions for on
    if (present_state <> S101) next_state = present_state + 1;
    // if next_state is still IDLE abort on wrong input
    if (next_state == IDLE) if (x == 0) next_state = S1;
    // empty next_state message if necessary
    if (next_state == S10) next_state = S1;
    if (next_state == S101) next_state = S101;
    // update present state with on transition
    if (x == 1) present_
================================================================
example-17: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or reset or x == 1)' W' (
present_state <= S1 << (IDLE-1)
  | 
  S1 << (IDLE-1)
  | 
  S10 << (IDLE-1)
  | 
  S101 << (IDLE-1)
);
always @(posedge clk or reset or x == 0)' File::R<1:0> (
present_state <= IDLE >>> (IDLE-1)
  | 
  IDLE
  ;

`ized File::R0;


================================================================
example-18: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


initial begin
reset_n <= reset;
reset <= reset;  
clk <= clk;
x <= x;
present_state <= IDLE;
next_state <= IDLE;
z <= 1;


//CS101 inside signal
if((x==1)) begin 
next_state <= S10;
end else begin 
if(x==0) begin 
next_state <= S1; 
end else begin 
next_state <= IDLE; 
end
//print "#### next state is set to S1 if x=1  and present_state is S101 [IDLE = 0], otherwise next_state is zero  ####";

initial state_init();
always @(posedge clk)
begin
if((x==1)) begin
if(present_state==IDLE){
//print "#### state =  IDLE - S101
================================================================
example-19: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always_comb
#5 /clk <= clk and reset;
// reset is a signal for triggering interrupt on zero crossing of
// clk at half cycle count

always   begin
  #5 STATE="IDLE";
  #5 PRESENT_STATE=IDLE;
always end
wire CLKC;
wire RXC;

always_comb
#5 CLKC=clk;
// input then clock signals are state of signals
#5 next_state=STATE;
// next_state=STAT0 is asserted when clk=0; rset=active while mid bit is 0
// next_state=STAT1 is asserted when clk=0; rset=active while mid bit is 1
// next_state=STAT2 is asserted at middle bit of next ck's value
// next_state=STAT2 by rset=active when clk's lsb
================================================================
