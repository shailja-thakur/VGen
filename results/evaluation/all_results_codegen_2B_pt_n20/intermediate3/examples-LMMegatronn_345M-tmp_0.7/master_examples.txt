example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = { r_reg[2], feedback_value, r_reg[3] };
assign q = r_reg;
assign feedback_value = feedback_value;

// q[0] is the input so it's the state machine starts the state of the LFSR
// which determines the next state of the LFSR will be sampled
// AND the current state of the LFSR.
always@(posedge clk or negedge reset)
begin
    if(reset == 0)
    begin
        r_reg <= 0;
        q <= 0;
    end
    else
    begin
        r_reg <= r_next;
        q <= feedback_value;
  
================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (r_reg[0]^r_reg[1]) ? 1'b1 : 1'b0;
//assign r_next = r_reg;
assign r_next = (r_reg == 5'b01010) ? 1'b1 : 1'b0;
//assign r_next = &r_reg;
assign r_en = feedback_value & r_reg[1]&r_reg[2]&r_reg[3]&r_reg[4]&r_reg[5]&r_reg[6]&r_reg[7]&r_reg[8]&r_reg[9]&r_reg[10]&r_reg[11]&r_reg[12]&r_reg[13]&r_reg[14]&r_reg[15]
================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {
  r_reg[0],
  r_reg[1],
  r_reg[2],
  r_reg[3],
  r_reg[4],
  r_reg[5],
  r_reg[6]
};
// only update the r_reg_1
always@(posedge clk, posedge reset)
begin
 if (reset == 1'b1)
  begin
  r_reg <= 5'b00000;
  r_next <= 5'b00000;
  end
  else
  begin
  r_reg <= r_next;
  r_next <= r_next;
  end
end
assign r_next = r_reg;
//assign q = r_reg;

assign q = (r_reg == 5'b00000) ? r_reg
================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg[4];
assign q = r_reg[3:0];

always@(posedge clk, posedge reset)
begin
	if(reset)
	begin
		r_reg <= 0;
		q <= 0;
	end
	else
	begin
		if(feedback_value)
		begin
			r_reg <= r_next;
			q <= r_next;
		end
	end
end


================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = (r_reg[0]) ? d_reg : r_reg[0];
assign q = (r_reg[1]) ? q_reg : q_reg;
assign feedback_value = (r_reg[2]) ? (q_reg[1]^r_reg[1]) : q_reg[1];

always@(posedge clk or posedge reset)
begin
  if(reset == 1'b1)
  begin
    r_reg <= 5'b11111;
    r_reg <= 5'b11111;
  end
  else
  begin
    r_reg <= r_next;
    r_reg <= r_next;
  end
end


================================================================
