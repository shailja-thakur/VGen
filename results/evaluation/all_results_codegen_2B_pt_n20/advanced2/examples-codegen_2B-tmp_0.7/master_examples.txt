example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if ((reset == 1) && (slowena == 1) && (q[3] < 9)) {
        q[3]++;
    }

// On the negative edge of the clock:
// if slow is high, increment the output q to 7.
// Otherwise, only increment the output q if the ena input is low and q is not 0.
always @(negedge clk)
    if ((slowena == 1) && (q[3] > 0)) {
        q[3]--;
    }
);

// The output q counts from 0 through 9.
// The output q is a string of three digits, with the most significant digit 0.
// The output q is a comma-separated string of the digits in the order 0, 1, 2.
// 
// For example, a count of 1 returns
================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (reset)
        q = 0;
    else if (slowena == 0 && q < 9)
        q++;

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

// On the negative edge of the clock:
// if reset is low, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 0.

always @(posedge clk)
  if (slowena)
  {
    if (reset)
    {
      q[3:0] = 0;
    }
    else if (q[3:0] < 9)
    {
      q[3:0]++;
    }
  }

================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
    if (slowena) {
        q[3] = q[3] + 1;
    } else if (reset && q[3] == 9) {
        q[3] = 0;
    }
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 0.
always @(negedge clk)
begin
    if (slowena) {
        q[3] = q[3] - 1;
    } else if (reset && q[3] == 0) {
        q[3] = 9;
    }
end

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena && (q[3] == 9)) {
        q[3] = 0;
    } else {
        if (reset) {
            q[3] = 0;
        } else if (slowena == 1 && q[3] != 9) {
            q[3] = (q[3] + 1) % 10;
        }
    }


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
    always @(clk, slowena, reset)
    begin
        if (reset) q = 0;
        else if (slowena) q = (q + 1) % 10;
    end
);

================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(*)
begin
    // If the ena input is high, increment Q.
    if (slowena == 1)
    {
        q[0] = (q[0] + 1) % 10;
    }
    // Otherwise, reset Q.
    if (slowena == 0)
    {
        q[0] = 0;
    }
end

// On the positive edge of the slow clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is low and q is not 9.

always @(*)
begin
    // If the ena input is low, increment Q.
    if (slowena == 1)
    {
        q[0] = (q[0] + 1) % 10;
    }
    // Otherwise, reset Q.
================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

reg [3:0] q;

initial begin
    q = 0;
    $display q;
    $next q;
end

// On the negative edge of the clock:
// If reset is high, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 0.

$display q;
$next q;

// On the posedge of clk:
// Read the ena input and increment q if it is high.
// If reset is high, reset the output q to 0.

always @(posedge clk) begin
    if (slowena) $display q;
    if (reset) $display q;
    if (ena) q = q + 1;
    if (reset) q = 0;
end


================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena)
        q[3:0] = q[3:0] + 1;

    else 
        if (reset)
            q[3:0] = 0;


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
{
  always @(posedge clk)
  begin
    if (reset) {
      q = 0;
    } else if (slowena) {
      if (q < 10) {
        q = q + 1;
      }
    }
  end
}

================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
initial begin
    if (slowena == 1'b0) {
        q = 0;
    } else if (clk_lo == 1'b0 || reset == 1'b0) {
        q = q + 1;
    }
end

// On the negative edge of the clock:
// if clk_lo is high, increment the output q.
// Otherwise, only increment the output q if the ena input is high and q is not 0.
initial begin
    if (clk_lo == 1'b0) {
    } else if (clk_hi == 1'b0 && slowena == 1'b0 && q == 0) {
        q = 1;
    } else if (clk_hi == 1'b1) {
        q = q + 1;
    }
end

// On the positive clock edge:
//
================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
{
    if (slowena == 1)
        q <= (q + 1);
}

// On the falling edge of the clock:
// if reset is high, reset the output q to 0.
always @(negedge clk)
{
    if (slowena == 1)
        q <= (q - 1);
}

always @(clk)
{
    if (reset == 1)
        q <= 0;
}

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(clk)
    if (slowena)                             // if slowena is high and q is less than 9,
        q <= (q + 1);                       // shift q down by 1 and increment it
    else if (slowena == 0 &&  q < 10)       // if slowena is low and q is less than 10,
        q <= (q + 1);                       // shift q down by 1 and increment it

================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena && reset)
    {
        q[3:0] = 0;
    }
    else if (slowena && !reset)
    {
        if (q[3:0] < 9)
        {
            q[3:0] = q[3:0] + 1;
        }
    }

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) 
    void reset_q(
        .q(q[3:0])
    );

always @(posedge clk or posedge slowena)
    void enc(
        .q(q[3:0])
    );

always_comb 
    void enable(
        .ena(ena),
        .rst(rst),
        .q(q)
    );

always @(rst)
    void reset_ena(
        .ena(ena),
        .rst(rst),
        .q(q)
    );
//@end

//@begin
//@begin
//@end

================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    #0 if reset && slowena
        q[3:0] = 0;
    endcase
    #0 if reset && !slowena
        q[3:0] = q[3];
    endcase
    #0 if posedge(clk)
        #0 if slowena
            if (slowena)
            {
                if (q[3] < 9)
                {
                    q[3] = q[3] + 1;
                }
                else
                {
                    q[3] = 0;
                }
            }
        #0 else
            if (slowena)
            {
                #0 if q[3] == 3
                    q[3] = 0;
                #0 else if q[3] == 4
                    q[3] = 1;
                #0
================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if ($reset) q = (reset ? 0 : 9);
    else if ($slowena)
    {
        if (q[1] < 9 && q[2] < 9 && q[3] < 9) q[1]++;
        if (q[1] < 9 && q[2] < 9 && q[3] < 9) q[1]++;
        if (q[1] < 9 && q[2] < 9 && q[3] < 9) q[1]++;
    }

// On the negative edge of the clock:
// if slowena is high, reset the output q to 0.
// Otherwise, increment the output q only if the ena input is high and q is not 0.
always @(negedge clk)
    if ($slowena) q = (reset ? 0 : 9
================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
  if (reset)
    q <= 0;
  else if (slowena)
    q <= q + 1;

================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
  if (slowena)
    q <= (reset? 0 : (q+1));

always @(posedge clk)
  if (reset)
    q <= 0;


================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// If the ena input is low, increment q by 1.

always @(posedge clk, posedge reset)
    if (!reset)
        q[3:0] <= (0b11'1111 - (clk - slowena) - (slowena - q));
    else
        q[3:0] <= (0b11'1111 - (clk - slowena) - (slowena - q));

================================================================
