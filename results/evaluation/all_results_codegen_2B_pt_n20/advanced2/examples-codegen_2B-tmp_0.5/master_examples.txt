example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q[3:0] < 9) {
            q[3:0] = q[3:0] + 1;
        }
    }
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 0.
always @(negedge clk) begin
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q[3:0] > 0) {
            q[3:0] = q[3:0] - 1;
        }

================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (slowena)
        q[3:0] = (q[3:0] + 1) % 10;
end

// On the negative edge of the clock:
// if reset is high, increment the output q to 9.
// Otherwise, only increment the output q if the ena input is high and q is not 0.
always @(negedge clk) begin
    if (slowena)
        q[3:0] = (q[3:0] + 1) % 10;
end
);

================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset)
        q = 0;
    else if (slowena)
        q = (q + 1) % 10;
end

// On the negative edge of the clock:
// If the ena input is high, increment the output q.
// Otherwise, if the ena input is low, reset the output q to 0.
always @(negedge clk) begin
    if (slowena)
        q = (q + 1) % 10;
    else if (slowena)
        q = 0;
end

// On the positive edge of the slow clock:
// if reset is high, reset the output q to 0.
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge slowena) begin
    if (reset)
        
================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (reset) 
        q = 0;
    else if ((ena == 1) && (q < 10))
        q = q + 1;

================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena)
        q[3:0] <= q[3:0] + 1;

================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena == 1)
        q <= (q + 1);


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena && !reset) {
        q[3:0] = q[3:0] + 1;
    }


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena == 1)
        q[3:0] = q[3:0] + 1;

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q != 9) {
            q[3:0] = q + 1;
        }
    }

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 0.
always @(negedge clk)
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q != 0) {
            q[3:0] = q + 1;
        }
    }


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q[3:0] < 9) {
            q[3:0] = q[3:0] + 1;
        }
    }


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena)
    {
        if (reset)
        {
            q = 0;
        }
        else if (q < 10)
        {
            q = q + 1;
        }
    }

// On the negative edge of the clock:
// if the reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is low and q is not 0.
always @(negedge clk, posedge reset)
    if (not reset)
    {
        if (ena)
        {
            if (q < 10)
            {
                q = q + 1;
            }
        }
    }
);

================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena)
        q <= q + 1;

================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (reset) q = 0;
    else if (slowena) q = q + 1;
end

// On the negative edge of the clock:
// if reset is high, reset the output q to 9.
// Otherwise, only increment the output q if the ena input is low and q is not 0.
always @(negedge clk) begin
    if (reset) q = 9;
    else if (slowena) q = q - 1;
end
);

// Design a decade counter that counts from 0 through 9, inclusive.

module count_fast(
    input clk,
    input fastena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
//
================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (reset)
        q[3:0] = 0;
    else if ((slowena && q[3:0] < 10) || !slowena);
        q[3:0] = q[3:0] + 1;

================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
  if (slowena)
  {
    if (reset)
    {
      q[3] = 0;
    }
    else if (q[3] < 10)
    {
      q[3] = q[3] + 1;
    }
  }


================================================================
example-15: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena)
        q[3:0] = q[3:0] + 1;

================================================================
example-16: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q[3:0] < 9) {
            q[3:0] = q[3:0] + 1;
        }
    }

// On the negative edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is low and q is not 0.
always @(negedge clk)
    if (slowena) {
        if (reset) {
            q[3:0] = 0;
        } else if (q[3:0] > 0) {
            q[3:0] = q[3:0] - 1;
        }
    }


================================================================
example-17: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
    if (slowena)
        q[3:0] <= q[3:0] + 1;
end

// On the negative edge of the clock:
// if reset is low, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 0.
always @(negedge clk) begin
    if (slowena)
        q[3:0] <= q[3:0] + 1;
end

// On the clock:
// if reset is high, reset the output q to 0.
// Otherwise, if the ena input is high, increment the output q.
always @(posedge clk) begin
    if (slowena && (reset || q[3:0] == 9))
        q[3:0] <= q[
================================================================
example-18: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
    if (slowena)
        q[3:0] = q[3:0] + 1;

================================================================
example-19: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
    if (slowena == 1) {
        q <= (q + 1);
    }

================================================================
