example-0: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

always @( posed("id_ar148.dat"), posed("id_ar152.dat") )
  begin 
    if (sel == 0) {
      out = a; 
    } else if (sel == 1) { 
      out = b; 
    }
    return out; 
  end

module nvco_demo();

always @ack_demo read level;

fifo( in_val ); 
tez( out_val ); 

wire [4:0] mips; 
wire [61:0] ram; 

always @clock
  if ( level == 0 )
    mips = in_val;
  else
    ram[63-level] = in_val;

always @clock
  if ((level & 0xf) == 0) 
    mips[level
================================================================
example-1: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

sig i()
{
  nilled = a;
  frac = ~a;
  reader1r = frac >> 2;
  reader2m = frec >> 2;
}

sig j(), I()
{
  nilled = b;
  frac = ~b;
  arch = frac >> 2;
}

sig o()
{
  o1 = out(1);
  o2 = out(2);
  o3 = out(3);
}

wire [4:0] ina = d
  {
  {in1pin, ina[1]},
  {~in1pin, ina[2]},
  {~in1pin, ina[3]},
  {~in1pin, ina[4]}
  }


================================================================
example-2: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// When sel=2, assign a to b. 
// When sel=3, assign a and b to out.

initial begin   

out = a||b||a||b;
    
// bla is the multiplexed input vector with index 1 and even bit
// bla13 is input vector with index 1 and odd bit
// dac value is the DAC output mapped to multiplexed input one bit
// dac value can be: bla1, bla2, bla3, bla3, or blank
dac minVal(3);
dac maxVal(4);
dac selectVal(3);
dac val;

out = selectVal||minVal||maxVal||(a&dac)||(b&dac);
    
end


================================================================
example-3: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, do not assign anything to output.
// When sel=3, do not assign anything to output.

// TODO: Generate the interrupt logic.  Setup interrupt registers and a
// function [val] external writing arg0.
// Register 4 reads from a interrupt provider.  There are 8 bit 38x4 
// 0:100 bases in the interrupt register.  The low nibble is for the
// highest numbered interrupt, 0x08 through 0x38, including bit 0.  
// 0x80 is for the lowest nibble of the interrupt register, the top bit.
// Args 0 and 1 are: int value (0-31 k Hz), register at step or 'sel'
clock [23:0] int0_clk;
clock [23:0] tclk;
wire [4:0]   int2_reg;


================================================================
example-4: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

assign { out[3] = a[3]; a[3] = a[2]; }
assign { out[2] = a[2]; a[2] = a[1]; }
assign { out[1] = a[1]; a[1] = a[0]; }

================================================================
example-5: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

wire one_bit;

initial out <= 0;
initial out <= sel;

always @(posedge clk1)
    // When a is clocked, toggle the one-bit state.
    out[4] = ~out[4];
    one_bit = (sel == 0) AND (out[4] == 0);

always @(posedge clk2)
    // When b is clocked, target all 1s in the data register.
    if (sel == 0)
        a[4] = 1;
    else
        b[4] = 1;

================================================================
example-6: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

================================================================
example-7: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
// Every other cycle wins. 

predicate mem_rams_c_ram1(unsigned[4:0] w, unsigned[] m) =
    (m[1:0]>0 | w[2:0]==0) & 
    (w[3:0]>0 | w[2:0]==0) &
    m[2:0]==4+m[0];

initial begin
if (!(sel=0) && a[3:0]) begin 
    a[3:0] <= m[4:0]; 
    out <= a[3:0];
  end
else if(sel = 1 && a[2:0]) begin 
    a[2:0] <= m[3:0]; 
    out <= a[2:0];
  end

    
end
);

initial begin
================================================================
example-8: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
constexpr int inputs     [] = {4, 0, 0, 4}; 
constexpr int input_sels[] = {1, 0, 1, 1};
constexpr int outputs[]   = {0, 4, 4, 0}; 
module new_layer(
inputs [4:0] a, b,
inputs [4:0] out_a, out_b );

inputs out_a;


   // Instantiate an arbitrary number of multiplexers.
module top_module(
inputs [4:0] a, b,
inputs [4:0] out_a, out_b );
module side_module(
inputs [4:0] a, b,
inputs [4:0] out_a, out_b );
.
// Each top_module feeds a needle *TERMALLY* to side_module.
================================================================
example-9: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.

// Physical semantics: sel signals an inversion-state for every three
// bits of a. 
always @(not a[3]) begin
  sel <= 1;
  if (not b[3]) b <= invert(if (sel == 0 at 0) out else aout);
  if (not b[0] and not b[1] and not b[2] and not b[3]) sel <= 0;
end

// Ivy semantics: "the bitwise inverse of sel, mod 4, inverts the state of the input."
always @(not a[3]) begin
  sel <= 1;
  if (not b[0]) b <= if (sel == 0 at 0) out else aout;
end

// Communication -- always aplies to one of the inverts
wire aout [9:0];
wire sout [4
================================================================
example-10: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// when sel=2 (3), assign 0 to out.
// when sel=3 (2), assign 1 to out.
always @(posedge clk) begin
    using out = (sel == 1) ? a : (sel == 2) ? b : 0;
    @(posedge clk) out <= 1;
end

digout mz = x;
`

================================================================
example-11: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 

always @(posedge  clk )
// assign input a to out
    if ( a[sel] == 31 ) // $
           {out = 0b1;}
    else if ( $0 ) // not $
           {out = a[sel]}
    else
           {out = 0b0}
}

always @( )
// assign input b to out
   if ( $0 ) {out = b}
   else {out = $}

`
)

================================================================
example-12: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.   

// When sel=0, assign a to out. 
// When sel=1, assign b to out.   

================================================================
example-13: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
constant SEL_BEGIN = 0;
constant SEL_B = 1 << 1;    // Valid values: 0 to 3
constant SEL_E = 1 << 3;    // Valid values: 0 to 3 
constant SEL_B_B = SEL_B | 0x1;
constant SEL_B_E = SEL_B | 0x2;
constant SEL_E_B = SEL_E | 0x1;
constant SEL_E_E = SEL_E | 0x2;
constant MPDR = 63;
// Design buttons for entering quanta values.
constant A_B_ON = 0x1;
constant A_B_OFF = 0x0;
var A_B;
// Design buttons for entering quanta values.
constant E_B_ON = 0x2
================================================================
example-14: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
wire [4:0] a_sel, b_sel, out_sel;
initial begin

out_sel <= 0;
out_sel <= b_sel?(a_sel):(b_sel);
end

always @(sel) begin
    out_sel <= 0;
    if (a[4:0]==0x01) out_sel <= 0b11000000 ;
    if (b[4:0]==0x01) out_sel <= 0b10100000 ;
    a_sel <= a[4:0];
    b_sel <= b[4:0];
end

// Get rid of this.
// Out input vector, lines [4:0] of input vector.
cout [4:0] out;

================================================================
example-15: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
reg [3:0] out;
always @(posedge ua,posedge ub) startup 
{ 
  if(ua && ub){
    out <= {((sel=='010'), a), ((sel=='001'), b)}; 
  }
}


================================================================
example-16: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
assign out = ~sel;

================================================================
example-17: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// Locate out based on sel value.

wire fifo_fbar;
wire fifo_cbar;

input [8:0] dataa;
input rd_a;
input /rd_a_n count;
input [8:0] datab;
input rd_b;
input /rd_b_n count;
input [9:8] id;
dout rd_b_n;

//note xor seems totally incorrect
input [197:0] data;
input rd_z;
input /rd_z_n count;

function increment_rd_z();
{
    //rd_z_n + count = 1;
    if (count>0) incr(rd_z_n); //stop fsh_z from increasing its counter when one is above proper upper bound (let pulse happen between
================================================================
example-18: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out.
// When sel=2, assign anand(a,b) to out. 

mux
assign out[4:0] = if(sel.v==0, a, b);
assign out<3, 4> = out>=15       => 0;
assign out<4, 4> = out>=16       => 0;

wire sel2, a2, b2, out2;

// design an 8-to-8 multiplexer
module mux2( 
input [8:0] a, b, 
input sel2,
output [8:0] out );


mux2
assign [8:0] out[8:0] = if(sel2.v==0, a, b);

assign out<6, 5> = out>=80       => 0;
assign
================================================================
example-19: 
// Design a 2-to-1 multiplexer.
module mux( 
input [4:0] a, b,
input sel,
output [4:0] out );
// When sel=0, assign a to out. 
// When sel=1, assign b to out. 
reg [4:0] x, y; 
always@ (*b == 0 * or *b == 7 * b);
always@ (*a == 0 * or *a == 7 * a);
always@ x == 0 and y == 0;
always@ x == 2	and y == 2;
always@ x == 2 and y == 0;
always@ x == 0	and y == 2;
NOBLK ( 
  select  sel;
  out : x = read(b, 0); 
  out : y = read(b, 1); 
);
);
boot 
{
+	await rgb_blk(RGB, var buf)
  { anf(col) == 7
  {
  CODE: mod 34
  	vec a = 	{ 4, 5, 6, 7,
  6,  7,  5
================================================================
