example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == '0')
        cur_state = IDLE;
    else
        cur_state = IDLE;
    next_state = IDLE;
    if (a == '1')
        next_state = SA;
    if (b == '1')
        next_state = SB;
    if (a == '0' and b == '0')
        next_state = SAB;
    if (a == '0' and b == '1')
        next_state = SA;
    if (a == '1' and b == '0')
        next_state = SB;
    if (a == '1' and b == '1')
        next_state = SAB;
    if (cur_state == SAB)
        z = '1';
    if (cur
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SA : (cur_state == SB) ? SB : IDLE;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and
================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        if (a == 1)
        {
            cur_state = SA;
        }
        else if (b == 1)
        {
            cur_state = SB;
        }
        else
        {
            cur_state = SAB;
        }
    }
    else
    {
        if (a == 1)
        {
            cur_state = SA;
        }
        else if (b == 1)
        {
            cur_state = SB;
        }
        else
        {
            cur_state = SAB;
        }
    }
    next_state = cur_state;

================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = cur_state;
    if (a == 1 && b == 1)
        next_state = SAB;
    if (a == 1)
        next_state = SA;
    if (b == 1)
        next_state = SB;
    if (next_state != cur_state)
        z = 1;
end

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (reset)
        next_state = IDLE;
    else if (a == 1)
        next_state = SA;
    else if (b == 1)
        next_state = SB;
    else if (a == 0 && b == 0)
        next_state = SAB;
    else
        next_state = IDLE;
    cur_state = next_state;

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        cur_state = SAB;
        next_state = IDLE;
    }
    if (a == 1 && cur_state == SA) {
        cur_state = SAB;
        next_state = IDLE;
    }
    if (b == 1 && cur_state == SB) {
        cur_state = SAB;
        next_state = IDLE;
    }
    if (cur_state == SAB) {
        cur_state = SAB;
        next_state = SAB;
    }
    if (cur_state == SAB && a == 1 && b == 1) {
        cur_state = SAB;
        next_state = IDLE;
    }
    if (cur_state == IDLE &&
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        if (a == 1 && b == 1)
        {
            cur_state = SAB;
        }
        else if (a == 1)
        {
            cur_state = SA;
        }
        else if (b == 1)
        {
            cur_state = SB;
        }
    }
    else if (cur_state == SAB)
    {
        if (a == 1 && b == 1)
        {
            cur_state = SAB;
        }
        else if (a == 1)
        {
            cur_state = SA;
        }
        else if (b == 1)
        {
            cur_state = SB;
        }
    }
    else if (cur_state == SA)
================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else
        next_state = cur_state;
    if (cur_state == IDLE && a == 1 && b == 1)
        next_state = SAB;
    if (cur_state == IDLE && a == 1 && b == 0)
        next_state = SA;
    if (cur_state == IDLE && a == 0 && b == 1)
        next_state = SB;
    if (cur_state == SA && a == 1 && b == 1)
        next_state = SAB;
    if (cur_state == SA && a == 1 && b == 0)
        next_state = IDLE;
    if (cur_state == SB && a == 0 && b == 1)
        next_state =
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);

================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        next_state = IDLE;
    else if (a == 1)
        next_state = SA;
    else if (b == 1)
        next_state = SB;
    else
        next_state = SAB;
    if (next_state != cur_state)
        z = 1;
end

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (cur_state == IDLE) {
        cur_state = SAB;
        next_state = IDLE;
    } else if (cur_state == SAB) {
        if (a == 1 && b == 1) {
            cur_state = SAB;
            next_state = IDLE;
        } else if (a == 1) {
            cur_state = SA;
            next_state = IDLE;
        } else if (b == 1) {
            cur_state = SB;
            next_state = IDLE;
        }
    } else if (cur_state == SA) {
        if (a == 1) {
            cur_state = SAB;
            next_state = IDLE;
        } else if (b == 1) {
            cur_state
================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state == IDLE)
    {
        if (a == 1 && b == 1)
        {
            cur_state = SAB;
            next_state = IDLE;
        }
        else if (a == 1 && b == 0)
        {
            cur_state = SA;
            next_state = IDLE;
        }
        else if (a == 0 && b == 1)
        {
            cur_state = SB;
            next_state = IDLE;
        }
        else
        {
            cur_state = IDLE;
            next_state = IDLE;
        }
    }
    else if (cur_state == SAB)
    {
        if (a == 1 && b == 1)
        {
            cur_state = SAB;

================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
if (reset == 1)
{
    cur_state = IDLE;
}
else
{
    cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
}
next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : (cur_state == SB) ? IDLE : cur_state;
if ((cur_state == SAB) && (next_state == IDLE))
{
    z = 1;
}
end
end

================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
    {
        cur_state = IDLE;
        next_state = IDLE;
        z = 1;
    }
    else if (a == 1)
    {
        if (cur_state == IDLE)
        {
            cur_state = SA;
            next_state = SAB;
        }
        else if (cur_state == SA)
        {
            cur_state = SB;
            next_state = SAB;
        }
        else if (cur_state == SAB)
        {
            cur_state = IDLE;
            next_state = IDLE;
        }
        z = 1;
    }
    else if (b == 1)
    {
        if (cur_state == IDLE)
        {

================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SAB : (cur_state == SB) ? IDLE : SAB;
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when
================================================================
example-15: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = next_state;
    if ((a == 1) && (b == 1))
        next_state = SAB;
    else if ((a == 1) && (b == 0))
        next_state = SA;
    else if ((a == 0) && (b == 1))
        next_state = SB;
    else
        next_state = IDLE;
    z <= next_state;
end

================================================================
example-16: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1) {
        cur_state = IDLE;
        next_state = IDLE;
    }
    else if (a == 1) {
        if (cur_state == IDLE) {
            cur_state = SA;
            next_state = SAB;
        }
        else if (cur_state == SAB) {
            cur_state = SA;
            next_state = SAB;
        }
        else if (cur_state == SA) {
            cur_state = SB;
            next_state = SAB;
        }
        else if (cur_state == SB) {
            cur_state = IDLE;
            next_state = IDLE;
        }
    }
    else if (b == 1) {
        if (cur_state
================================================================
example-17: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA ? SB : IDLE);
    z <= next_state;
end
);

// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
// paramter IDLE = 0,
// SA = 1,
// SB = 2,
// SAB = 3;
// reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.

================================================================
example-18: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = cur_state;
    if (cur_state == SAB)
        z = 1;
    else
        z = 0;

================================================================
example-19: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    if (reset == 1)
        cur_state = IDLE;
    else
        cur_state = (a == 1) ? SA : (b == 1) ? SB : SAB;
    next_state = (cur_state == SAB) ? IDLE : (cur_state == SA) ? SB : IDLE;
    z <= next_state;
end
);
// This is an FSM module abro(
// input clk,
// input reset,
// input a,
// input b,
// output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state
================================================================
