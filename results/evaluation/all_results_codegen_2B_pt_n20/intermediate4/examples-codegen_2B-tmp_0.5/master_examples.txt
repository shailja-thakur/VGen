example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
{
  if (reset == 1)
  {
    out = 0;
    next_state = 0;
    present_state = 0;
  }
  else
  {
    if (in == 1)
    {
      if (present_state == 0)
      {
        out = 1;
        next_state = 1;
      }
      else
      {
        out = 0;
        next_state = 0;
      }
    }
    else if (in == 0)
    {
      if (present_state == 1)
      {
        out = 0;
        next_state = 0;
      }
      else
      {
        out = 1;
        next_state = 1;
      }
    }
  }
  present_state = next_state
================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset) next_state = 0;
    else
    {
        if (next_state==0 and in==1) next_state = 1;
        if (next_state==1 and in==0) next_state = 0;
    }
    out = next_state;

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if ((reset == 1) && (clk == 1))
    {
        reset = 0;
    }
    else if ((reset == 1) && (clk == 0))
    {
        reset = 1;
    }
    else if ((reset == 0) && (clk == 1))
    {
        present_state = 0;
    }
    else if ((reset == 0) && (clk == 0))
    {
        if (in == 1)
        {
            present_state = 1;
        }
        else
        {
            present_state = 0;
        }
    }
    else
    {
        present_state = 0;
    }
    next_state = (present_state == 0)? 1 : 0;
    out = (present_state == 0)? 1
================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    if (reset == 1)
        out = 1;
    else
        out = 0;
    clk <= 1;
    reset <= 1;
    next_state <= 0;
    present_state <= 0;
    wait(1);
    next_state <= 1;
    present_state <= 1;
end

// State 0
initial begin
    if (clk == 1)
        out = 0;
    clk <= 0;
    reset <= 0;
    next_state <= 1;
    present_state <= 0;
    wait(1);
    next_state <= 0;
    present_state <= 1;
end

// State 1
initial begin
    if (clk == 1)
        out = 1;
    clk <= 0;
    reset <= 0;
    next_state <= 0;
    
================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg [1:0] state;

always @(posedge clk)
{
    if(reset == 1)
    {
        reset = 0;
    }
    //in is 1, go to state 0
    if(in == 1)
    {
        state = 0;
    }
    //in is 0, go to state 1
    if(in == 0)
    {
        state = 1;
    }
    //out is 1 in state 0 and out is 0 in state 1
    out = (state == 0) ? 1 : 0;
}

always @(nop)
{
    next_state = state;
}

initial begin
    state = 0;
    next_state = 0;
end

initial begin
    next_state = state;
end


================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// In state 0, if reset=1, go to state 1. In state 1, if reset=1, go to state 0.
// In state 1, if reset=0, go to state 1. In state 0, if reset=0, go to state 0.

always @(posedge clk)
  if (reset)
    out = 0;
  else if (reset == 0)
    out = 1;
  else
  {
    if (in)
    {
      if (present_state == 0)
        next_state = 1;
      else
        next_state = 0;
    }
    else
    {
      if (present_state == 1)
        next_state = 0;
      else
        next_state = 1;
    }
    out = next_state;
    present_state = next_state;

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    out = 0;
    next_state = reset;
    present_state = 0;
    if (reset == 1) begin
        out = 1;
        next_state = 0;
    end else begin
        if (clk == 1) begin
            out = in;
            next_state = 1;
        end
    end
end
// State machine for 0 to 1 transition
initial begin
    if (reset == 1) begin
        out = in;
        next_state = 1;
    end
    if (in == 1) begin
        out = 0;
        next_state = 0;
    end
    if (out == 1) begin
        next_state = 1;
    end
end
// State machine for 1 to 0 transition
initial begin
    if (reset == 1) begin
        out = in;
        next
================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 0) {
        present_state = 0;
    } else {
        present_state = next_state;
    }
    if (present_state == 0) {
        if (in == 1) {
            out = 1;
        } else {
            out = 0;
        }
    } else {
        if (in == 1) {
            if (present_state == 1) {
                out = 1;
            } else {
                out = 0;
            }
        } else {
            if (present_state == 0) {
                out = 1;
            } else {
                out = 0;
            }
        }
    }

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    out = 0;
    next_state = 0;
  }
  else
  {
    out = (present_state == 0 && in == 1) ? 1 : 0;
    next_state = (present_state == 0 && in == 0) ? 1 : 0;
  }
  present_state = next_state;
}

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    out = reset;
    next_state = 0;
    present_state = 0;
end

// State 1
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    out = reset;
    next_state = 1;
    present_state = 0;
end

// State 0
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in
================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign next_state = (in==1?1:0);
always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
        next_state = 0;
    }
    out = next_state;
    present_state = next_state;
}

// State 0
assign next_state = (in==1?1:0);
always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
        next_state = 0;
    }
    out = next_state;
    present_state = next_state;
}

// State 1
assign next_state = (in==1?1:0);
always @(posedge clk)
{
    if (reset == 1)
    {
        reset
================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset) next_state = 0;
    else
    {
        next_state = (present_state == 0) ? 1 : 0;
    }
    if (in) out = next_state;
    present_state = next_state;

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset) next_state = 0;
    else if (in) next_state = 1;
    else next_state = present_state;
    out = next_state;

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset)
    {
        reset = 1;
        next_state = 0;
    }
    else
    {
        next_state = (present_state == 1) ? 0 : 1;
        present_state = next_state;
    }
    out = (next_state == 0) ? 1 : 0;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
    if (reset == 1) {
        reset = 1;
    }
    if (reset == 0) {
        next_state = 0;
    } else {
        next_state = (in == 1) ? 1 : 0;
    }
    out = next_state;
    present_state = next_state;
}

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
initial begin
    next_state = 0;
    present_state = 0;
    out = 0;
    clk = 0;
    reset = 1;
end

initial begin
    next_state = 0;
    present_state = 0;
    out = 0;
    clk = 0;
    reset = 0;
end

always @(posedge clk) begin
    if (reset) begin
        next_state = 0;
        present_state = 0;
        out = 0;
        clk = 0;
        reset = 0;
    end
    if (reset) begin
        next_state = 0;
        present_state = 0;
        out = 0;
        clk = 0;
        reset = 0;
    end
    if (clk == 1) begin
        if (in == 1) begin
================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
reg state_table[2][2] = {{{0, 0}, {1, 1}}, {{0, 1}, {0, 0}}};
reg table_address;
// state_table[state][in] is the next state
// state_table[state][out] is the output
// table_address is the table address
initial begin
    out = 0;
    next_state = 0;
    state_table[0][0] = 0;
    state_table[0][1] = 1;
    state_table[1][0] = 1;
    state_table[1][1] = 0;
    table_address = 0;
end
always @(posedge clk)
    if (reset == 1)
    {
        reset = 1;
    }
    else
    {
        if (in == 1)
        {
================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @(posedge clk)
begin
if (reset === 1)
    out = 1;
else if (reset === 0)
{
    if (in == 1)
        out = 1;
    else if (in == 0)
        out = 0;
}
else if (in == 1)
{
    if (present_state == 0)
        out = 1;
    else if (present_state == 1)
        out = 0;
}

else if (in == 0)
{
    if (present_state == 0)
        out = 1;
    else if (present_state == 1)
        out = 0;
}
end

always @(posedge clk)
begin
if (reset === 1)
    present_state = 0;
else if (reset === 0)
{

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  out = (reset || (in && present_state == 0));
  if (reset && !present_state)
  {
    out = 1;
    next_state = 1;
  }
  else if (in && present_state == 1)
  {
    out = 0;
    next_state = 0;
  }
  else
  {
    out = 0;
    next_state = 1;
  }
  present_state = next_state;
}

// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
    if (reset)
        reset_state();
    else
        present_state = reset_state();
    if ((present_state == 0) and (in == 1))
        next_state = 1;
    if ((present_state == 1) and (in == 0))
        next_state = 0;
    if ((present_state == 0) and (in == 1))
        next_state = 1;
    if ((present_state == 1) and (in == 0))
        next_state = 0;
    out = next_state;
end

================================================================
