example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        next_state = 0;
    else
        next_state = present_state;
    if (in == 1)
        out = 1;
    else
        out = 0;
    present_state = next_state;

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 1)
  {
    out = 0;
    next_state = 0;
  }
  else
  {
    if (in == 1)
    {
      if (present_state == 0)
      {
        out = 1;
        next_state = 1;
      }
      else
      {
        out = 0;
        next_state = 0;
      }
    }
    else
    {
      if (present_state == 1)
      {
        out = 1;
        next_state = 1;
      }
      else
      {
        out = 0;
        next_state = 0;
      }
    }
  }
  present_
================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    present_state = in;
    next_state = (present_state == 1) ? 0 : 1;
  }
  out = next_state;
}

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        next_state = 0;
    else
        next_state = present_state;
    if (in == 1)
        out = 1;
    else
        out = 0;
    present_state = next_state;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset)
        next_state = 0;
    else
        next_state = (present_state == 0) ? 1 : 0;
    out = next_state;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    present_state = in;
    next_state = present_state;
  }
  out = next_state;
}

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        next_state = 0;
    else
        next_state = (in == 1) ? 0 : 1;
    out = next_state;

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        reset = 0;
    else
        reset = 1;
    if (reset == 1)
        next_state = 0;
    else
        next_state = 1;
    if (in == 1)
        present_state = next_state;
    else
        present_state = 0;
    out = present_state;

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    present_state = in;
    next_state = (present_state == 1) ? 0 : 1;
  }
  out = next_state;
}

================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        reset = 0;
    else if (reset == 0)
        reset = 1;
    else if (in == 1)
        present_state = 0;
    else
        present_state = 1;
    next_state = present_state;
    if (present_state == 0)
        out = 1;
    else
        out = 0;

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
    }
    if (reset == 0)
    {
        present_state = 0;
        next_state = 0;
    }
    else
    {
        present_state = 1;
        next_state = 1;
    }
    out = (present_state == 1) && (in == 1);
}

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
    if (reset == 1)
    {
        reset = 0;
    }
    if (reset == 0)
    {
        present_state = 0;
        next_state = 0;
    }
    else
    {
        present_state = in;
        next_state = present_state;
    }
    out = next_state;
}

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        reset = 0;
    else
        reset = 1;
    if (reset == 1)
        next_state = 0;
    else
        next_state = 1;
    if (in == 1)
        present_state = next_state;
    else
        present_state = 0;
    out = present_state;

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset)
        next_state = 0;
    else
        next_state = (present_state == 0) ? 1 : 0;
    out = next_state;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset)
        next_state = 0;
    else
        next_state = present_state;
    if (in)
        out = 1;
    else
        out = 0;
    present_state = next_state;

================================================================
example-15: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    present_state = in;
    next_state = (present_state == 1) ? 0 : 1;
  }
  out = (present_state == 1) ? 1 : 0;
}

================================================================
example-16: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset == 1)
        next_state = 0;
    else
        next_state = present_state;
    if (in == 1)
        out = 1;
    else
        out = 0;
    present_state = next_state;

================================================================
example-17: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    present_state = in;
    next_state = (present_state == 1) ? 0 : 1;
  }
  out = next_state;
}

================================================================
example-18: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
{
  if (reset == 1)
  {
    reset = 0;
  }
  if (reset == 0)
  {
    present_state = 0;
    next_state = 0;
  }
  else
  {
    present_state = in;
    next_state = (present_state == 1) ? 0 : 1;
  }
  out = next_state;
}

================================================================
example-19: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
    if (reset)
        next_state = 0;
    else
        next_state = (present_state == 0) ? 1 : 0;
    out = next_state;

================================================================
