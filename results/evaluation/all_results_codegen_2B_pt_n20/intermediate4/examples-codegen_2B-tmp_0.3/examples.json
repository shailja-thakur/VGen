// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\nalways @(posedge clk)\n{\n  if (reset == 1)\n    out = 0;\n  else\n  {\n    if (in == 1)\n      out = 1;\n    else\n      out = 0;\n  }\n}\n\nalways @(posedge clk)\n{\n  if (reset == 1)\n    next_state = 0;\n  else\n  {\n    if (in == 1)\n      next_state = 0;\n    else\n      next_state = 1;\n  }\n}\n\nalways @(posedge clk)\n{\n  if (reset == 1)\n    present_state = 0;\n  else\n  {\n    if (in == 1)\n      present_state = 1;\n    else\n      present_state = 0;\n  }\n}\n\nalways @(posedge clk"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n  {\n    next_state = 0;\n  }\n  else\n  {\n    if (in == 1)\n    {\n      next_state = 0;\n    }\n    else\n    {\n      next_state = 1;\n    }\n  }\n  present_state = next_state;\n  out = present_state;\n}\n"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n    if (reset == 1)\n    {\n        reset = 0;\n    }\n    else\n    {\n        if (reset == 0)\n        {\n            reset = 1;\n        }\n    }\n    if (in == 1)\n    {\n        if (present_state == 0)\n        {\n            out = 1;\n            next_state = 1;\n        }\n        else\n        {\n            out = 0;\n            next_state = 0;\n        }\n    }\n    else\n    {\n        if (present_state == 0)\n        {\n            out = 0;\n            next_state = 1;\n        }\n        else\n        {\n            out = 1;\n            next_state = 0;\n        }\n    }\n    present_state = next_state;\n}"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n    if (reset == 1)\n    {\n        reset = 0;\n    }\n    if (reset == 1)\n    {\n        next_state = 0;\n    }\n    else\n    {\n        next_state = in;\n    }\n    present_state = next_state;\n    out = present_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n  {\n    reset = 0;\n  }\n  if (reset == 1)\n  {\n    out = 0;\n  }\n  else\n  {\n    if (in == 1)\n    {\n      out = 1;\n    }\n    else\n    {\n      if (present_state == 0)\n      {\n        out = 1;\n      }\n      else\n      {\n        out = 0;\n      }\n      next_state = 0;\n    }\n  }\n  present_state = next_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        present_state = 0;\n    else\n        present_state = next_state;\n    next_state = present_state;\n    if (in == 1)\n        out = 1;\n    else\n        out = 0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n  {\n    out = 0;\n    present_state = 0;\n  }\n  else\n  {\n    out = (in == 1) ? 1 : 0;\n    next_state = (present_state == 0) ? 1 : 0;\n    present_state = next_state;\n  }\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "initial begin\n    next_state = 0;\n    out = 1;\n    present_state = 0;\nend\n\nalways @(posedge clk) begin\n    if (reset == 1) begin\n        next_state = 0;\n        out = 1;\n    end\n    if (reset == 0) begin\n        if (in == 1) begin\n            next_state = 1;\n            out = 1;\n        end\n        if (in == 0) begin\n            if (present_state == 0) begin\n                next_state = 0;\n                out = 1;\n            end\n            if (present_state == 1) begin\n                next_state = 1;\n                out = 1;\n            end\n        end\n    end\n    present_state = next_state;\nend\n"
    },
    {
      "finish_reason": "length",
      "index": 8,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  next_state = (present_state == 0) ? 1 : 0;\n  out = next_state;\n  present_state = next_state;\n}\n\nalways @(posedge reset)\n{\n  if (reset == 1)\n    present_state = 0;\n}\n\ninitial begin\n  out = 1;\n  next_state = 0;\nend\n\n// State 0\nalways @(posedge in)\n{\n  if (in == 1)\n    next_state = 1;\n}\n\nalways @(posedge clk)\n{\n  if (next_state == 0)\n    out = 1;\n  else\n    out = 0;\n}\n\n// State 1\nalways @(posedge in)\n{\n  if (in == 0)\n    next_state = 0;"
    },
    {
      "finish_reason": "stop",
      "index": 9,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n    if (reset == 1)\n    {\n        reset = 0;\n    }\n    if (reset == 0)\n    {\n        present_state = 0;\n        next_state = 0;\n    }\n    else\n    {\n        present_state = in;\n        next_state = (present_state == 1) ? 0 : 1;\n    }\n    out = next_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 10,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        out = 0;\n    else if (reset == 0)\n        out = 1;\n    else if (in == 1)\n        out = 1;\n    else if (in == 0)\n        out = 0;\n    else\n        out = 1;\n    if (reset == 1)\n        present_state = 0;\n    else if (reset == 0)\n        present_state = 1;\n    else\n        present_state = next_state;\n    next_state = present_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 11,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        reset = 0;\n    else\n        if (reset == 0)\n            reset = 1;\n    if (reset == 1)\n        present_state = 0;\n    else\n        if (in == 1)\n            present_state = 0;\n        else\n            if (in == 0)\n                present_state = 1;\n    next_state = present_state;\n    out = next_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 12,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n    if (reset == 1)\n    {\n        next_state = 0;\n    }\n    else\n    {\n        if (in == 1)\n        {\n            next_state = 0;\n        }\n        else\n        {\n            next_state = 1;\n        }\n    }\n    present_state = next_state;\n    out = next_state;\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 13,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        next_state = 0;\n    else\n        next_state = (in == 1) ? 0 : 1;\n    out = next_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 14,
      "logprobs": null,
      "text": "// reset=1, if reset=1, go to state 0\ninitial begin\n    out = 1;\n    next_state = 0;\n    present_state = 0;\n    reset = 1;\nend\n\nalways @(posedge clk) begin\n    if (reset == 1) begin\n        next_state = 0;\n    end else begin\n        if (in == 1) begin\n            next_state = 1;\n        end else begin\n            next_state = 0;\n        end\n    end\n    out = next_state;\nend\n\n"
    },
    {
      "finish_reason": "stop",
      "index": 15,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        out = 0;\n    else\n    {\n        if (in == 1)\n            out = 1;\n        else\n            out = 0;\n        next_state = 0;\n    }\n    if (reset == 1)\n        next_state = 1;\n    else\n        next_state = 0;\n    present_state = next_state;\n"
    },
    {
      "finish_reason": "stop",
      "index": 16,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\n    if (reset == 1)\n        out = 0;\n    else\n        out = 0;\n    if (reset == 1)\n        present_state = 0;\n    else\n        present_state = 0;\n    next_state = 0;\n    if (in == 1)\n        next_state = 1;\n    if ((present_state == 0) && (next_state == 1))\n        out = 1;\n    if ((present_state == 1) && (next_state == 0))\n        out = 0;\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 17,
      "logprobs": null,
      "text": "always @(posedge clk)\n{\n  if (reset == 1)\n  {\n    next_state = 0;\n    out = 1;\n  }\n  else\n  {\n    present_state = next_state;\n    next_state = (present_state == 0 ? 1 : 0);\n    out = (present_state == 0 ? 1 : 0);\n  }\n}\n\nalways @(posedge clk)\n{\n  if (reset == 1)\n  {\n    next_state = 0;\n    out = 1;\n  }\n  else\n  {\n    present_state = next_state;\n    next_state = (present_state == 0 ? 1 : 0);\n    out = (present_state == 0 ? 1 : 0);\n  }\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 18,
      "logprobs": null,
      "text": "\nalways @(posedge clk)\n{\n  if (reset == 1)\n  {\n    out = 1;\n    next_state = 0;\n    present_state = 0;\n  }\n  else\n  {\n    if (in == 1)\n    {\n      if (present_state == 0)\n      {\n        out = 1;\n        next_state = 1;\n      }\n      else\n      {\n        out = 0;\n        next_state = 0;\n      }\n    }\n    else\n    {\n      if (present_state == 1)\n      {\n        out = 0;\n        next_state = 0;\n      }\n      else\n      {\n        out = 1;\n        next_state = 1;\n      }\n    }\n    present_state = next_state;\n  }\n}\n"
    },
    {
      "finish_reason": "stop",
      "index": 19,
      "logprobs": null,
      "text": "always @(posedge clk)\n    if (reset == 1)\n        next_state = 0;\n    else\n        next_state = (present_state == 0) ? 1 : 0;\n    out = next_state;\n    present_state = next_state;\n"
    }
  ],
  "created": 1663537820,
  "id": "cmpl-pZhJNN3IttwdSzHAAjAMDfwgfPsGI",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 2626,
    "prompt_tokens": 148,
    "total_tokens": 2774
  }
}