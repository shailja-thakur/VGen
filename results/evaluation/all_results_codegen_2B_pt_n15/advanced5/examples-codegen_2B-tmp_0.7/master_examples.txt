example-0: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE

always @(posedge clk)
  if (cur_state == IDLE)
    next_state = IDLE;
  else if (a == 0 && b == 0)
    next_state = SAB;
  else if (a == 1 && b == 0)
    next_state = SB;
  else if (a == 0 && b == 1)
    next_state = SAB;
  else if (a == 1 && b == 1)
    next_state = IDLE;
  else
    next_state = IDLE;

always @(posedge clk)
  if (cur_state == IDLE)
    z = 1;
  else if (a == 0 && b == 0)
    z = 1;
  else if (a == 1 && b == 0)
================================================================
example-1: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [7:0] z;

always @(posedge clk)
    cur_state = (a == 1) && (b == 1);
    if ((a == 1) && (b == 0) && (cur_state == IDLE))
        next_state = SAB;
    else if ((a == 1) && (b == 1) && (cur_state == IDLE))
        next_state = SA;
    else if ((a == 0) && (b == 1))
        next_state = SAB;
    else if ((a == 1) && (b == 0))
        next_state = SB;
    else if ((a == 0) && (b == 0))
        next_state = IDLE;
    else
        next_state = IDLE;
    z = next_state;


================================================================
example-2: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
reg [1:0] last_state;
assign cur_state = ( reset ? 0 : ( ~a ? 1 : ~b ? 2 : ~reset ? 3 : cur_state ) );
always @(*)
begin
    last_state = ~cur_state;
end
always @(*)
begin
    if ( cur_state == IDLE )
    begin
        next_state = SAB;
    end
    else if ( cur_state == SA )
    begin
        next_state = SB;
    end
    else if ( cur_state == SB )
    begin
        next_state = SAB;
    end
    else
    begin
        next_state = IDLE;
    end
    if ( resets_rst_i && ( reset == 1 ) )
    begin
        next_state = IDLE;
        last_state
================================================================
example-3: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (reset) 
        cur_state = IDLE;
    else
        cur_state = next_state;
    if (cur_state == IDLE)
        z = 1;
    next_state = cur_state;

================================================================
example-4: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
blink(
a,
b,
clk,
z,
reset,
cur_state,
next_state,
idle,
SA,
SAB,
SB,
SB,
SB,
SB,
SB,
SB,
SB,
SB,
SB,
SB,
SB,
SAB );

================================================================
example-5: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

reg [3:0] delay_count;
// delay_count is incremented by one for each bit received.

stateab ab_state {
  reg [3:0] delay_count;
  reg [1:0] cur_state,next_state;
  reg [2:0] i;
  reg [3:0] j;
  // The number of bits received is limited by the number of inputs.
  // The number of bits received is the sum of the width of the inputs
  // minus one.
  // Assigning the number of input bits to the input delay counter
  // generates the expected number of bits.
  input [3:0] a,b;
  input [3:0] a2,b2;
  input [3:0] a3,b3;
  input [3:0] a4,b4;
================================================================
example-6: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero whenever cur_state is IDLE
// z is assigned one whenever cur_state is SA
// z is assigned zero whenever cur_state is SB
// z is assigned zero whenever cur_state is SAB
always @(posedge clk) begin
    cur_state = (reset?0:SAB);
    next_state = cur_state;
    if ((a == 1) and (cur_state == IDLE))
        next_state = SA;
    else if (b == 1)
        next_state = SB;
    z <= next_state;
end
end
""")

module.add(clk_gen)
module.add(reset)
module.add(a)
module.add(b)
module.add(z)

sim = Simulation(identify(0), module)
sim.run()

================================================================
example-7: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
begin
    // If the inputs are reset, they are set to high z
    if (reset == 1) {
        z = 1;
    }
    // If cur_state is IDLE, output is z
    if (cur_state == 0) {
        z = 1;
    }
    // If cur_state is SA, and a is high, output is 1
    if (cur_state == 1 && a == 1) {
        z = 1;
    }
    // If cur_state is SA, and b is high, output is 1
    if (cur_state == 2 && b == 1) {
        z = 1;
    }
    // If cur_state is SB, and a is high, output is 1
    if (cur_state == 3 && a == 1) {
        z = 1;
================================================================
example-8: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
wire [9:0] z;

// The following FSM transitions are all controlled by the 'next_state'
// variable to move between states

always @(posedge clk)
begin
    if (cur_state == IDLE and a and b)
        next_state = SAB;
    if (cur_state == SAB and b)
        next_state = SA;
    if (cur_state == SA and a)
        next_state = SB;
    if (cur_state == SB and a)
        next_state = SAB;
    if (cur_state == SAB and b)
        next_state = IDLE;
    if (cur_state == IDLE)
        next_state = IDLE;
end

// Construct our state machine
abro a_b_z;

// This is an interrupt handler to
================================================================
example-9: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB

always @(posedge clk)
  if (cur_state == IDLE)
  {
    next_state = IDLE;
  }
  else if (cur_state == SA && a == 1)
  {
    next_state = SB;
  }
  else if (cur_state == SB && b == 1)
  {
    next_state = SAB;
  }
  else if (cur_state == SAB && a == 1)
  {
    next_state = SA;
  }
  else
  {
    next_state = IDLE;
  }
  cur_state = next_state;

================================================================
example-10: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned zero when cur_state is IDLE
wire [1:0] cur_state_out,next_state_out;

always @(posedge clk)
begin
   cur_state = cur_state_out;
   if (reset)
      next_state = IDLE;
   else
   if (a)
      next_state = SA;
   else
      next_state = IDLE;
   if (b)
      next_state = next_state_out;
   if (next_state != cur_state)
      cur_state_out = next_state;
end

always @(posedge clk)
begin
   z = cur_state == SAB ? 1 : 0;
end



================================================================
example-11: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
// z is assigned one when cur_state is SA
// z is assigned one when cur_state is SB
// z is assigned one when cur_state is IDLE
// z is assigned zero otherwise
reg [1:0] st;
initial begin
next_state = IDLE;
cur_state = IDLE;
z = 1;
st = 1;
end
reg [1:0] n_st;
initial begin
n_st = st;
next_state = IDLE;
end
reg [15:0] out_p;
reg [15:0] out_n;
initial begin
out_p = 0;
out_n = 0;
end

always @(posedge clk) begin
    cur_state = next_state;
    // State Machine
    if (cur_state == IDLE)
    {
        if ((~
================================================================
example-12: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk) begin
    if (cur_state == IDLE)
    {
        next_state = IDLE;
    }
    else if (cur_state == SAB)
    {
        next_state = IDLE;
    }
    else if (cur_state == SB)
    {
        next_state = IDLE;
    }
    else if (cur_state == SAB)
    {
        next_state = SAB;
    }
    else
    {
        next_state = cur_state;
    }
    cur_state = next_state;
end
`;

var ab = {};
ab.states = [
  'IDLE',
  'SA',
  'SB',
  'SAB'
];
ab.strs = ['IDLE', 'SA', '
================================================================
example-13: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if ((reset == 1) && (cur_state == IDLE)){
    next_state = IDLE;
    }
    else if ((reset == 1) && (cur_state == SAB && a == 1 && b == 1) || (reset == 1) && (cur_state == IDLE && a == 1)){
    next_state = SA;
    }
    else if ((reset == 1) && (cur_state == SB && a == 1 && b == 1) || (reset == 1) && (cur_state == IDLE && a == 1)){
    next_state = SB;
    }
    else if ((reset == 1) && (cur_state == SAB && a == 1 && b == 0) || (reset == 1) && (cur_state == IDLE && a == 1)){
    next
================================================================
example-14: 
// This is an FSM
module abro(
input clk,
input reset,
input a,
input b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// If cur_state is IDLE and a and b are both high, state changes to SAB
// If cur_state is IDLE, and a is high, state changes to SA
// If cur_state is IDLE, and b is high, state changes to SB
// If cur_state is SA, and b is high, state changes to SAB
// If cur_state is SB, and a is high, state changes to SAB
// If cur_state is SAB, state changes to IDLE
// z is assigned one when cur_state is SAB
always @(posedge clk)
    if (cur_state != next_state) {
    cur_state = next_state;
    z = cur_state == SAB ? 1 : 0;
    }

================================================================
