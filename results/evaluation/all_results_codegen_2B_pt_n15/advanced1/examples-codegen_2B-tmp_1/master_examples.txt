example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// let x = 8-bit number b by default
// let overflow = true if signed overflow occurred, yes if overflow has occurred
// s is the output value
// s before modification 
void signed_adder_mux8(
    input [7:0] _in,
    output [7:0] s,
    output overflow
) {
    // s before modification 
    int x = _in[7];
    int overflow = true;
    s[7:0]  =  _in[7] + _in[6] + overflow;
    s[6:0]  = _in[6] + _in[5] + overflow;
    s[5:0]  = _in[5] + _in[4] + overflow;
    s[4:0]  = _in[4] + _in[3] + overflow;
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


input [7:0] adder_input = {12, 44, 2, 83, 0, 33};


//init output s and overflow
output clear;

function main
{
   // Preserve signed overflow of a and b for input_t
   intentional interference with signed overflow
   let b_interf: bit_vector = b_roll_input,
       a_interf: bit_vector = a_roll_input;

   let max_a_val: integer = 0xffffff,
       max_b_val: integer = 0xffffff;

   //add -264 and save -256 for a and b (32768 bytes) to ensure that overflow occurs
   a_input [a_input_index] = ~((uint8) -264);
   b_input [b_input_index] = -256;

   // compare input and output
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign overflow = a[bits(a,0..7)-1] == b[bits(b,0..7)-1]

decode mismatch (s[7..0]!=a[7..0] or s[7..0]!=b[7..0]) if overflow else 0

process
begin
        case (int8_t(a[7]) - int8_t(b[4])) encoded 16
                add_s_8_s_8_2103_1 101 101
                case (int8_t(-1) +s[7] - int8_t(b[4])) encoded 16
                add_s_8_s_8_2111_1 101 101
                case (int8_t(a[7]) +s[7] - int8_t(b[4])) encoded 16
                add_
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


sign_adder ()
{
  // attach the SIGNEDNESS token to a.
  // assign to a dispatch line of sign addition and gate.


  // assignments
  // parse adjacent zeroes
  // assignment on input stream
  // assignment on output stream
  // polling and success detection
  // output persists
}



// define the expression of the task

signed_adder : gtic (+ 0x80, - 0x80) overflow : STAT (ax < 0x80), 
                  ax ;
 
// declare the input and output signals



signed_adder : signed_adder(a, b, s, overflow)  

// dbnc assembly line
signed_adder : 
  ax < 0x80    => "15 counter", 
  ax == 0 => 
    ax < 0x80 => "4 duty complete status cycle", 

================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder( \beta,\tau,s,overflow)\ 
this->b = a[7:0] + b[7:0];
this->s = s[7:0] + this->b;

 // if overflow is true, the most significant bit of the sum of the bits is a sign bit of the most significant bit of s. 
  if (this->b[0] != 0) {
    this->s[0] = 1;
  } else {
    this->s[0] =0;
  }

{ // if overflow is cinfinity, dont add the zero extenstion
if (this->b[576] < 0x80) {
  this->overflow = this->overflow is TRUE;
}else {
  this->overflow = FALSE;
}
}




================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// 3/11/2010: Fixed signed_adder as given in the example.
// 
// This bug causes the AVR simulator to crash because it
// assumes that s is always 0 when overflow is 0.

signed_adder.derivations a = 
public sig  ([_n] a) {
  auto overflow = _n X_os.bit<int>(); 
  
  switch (overflow) {
    case (0x00): 
      s = s + a;
      break;
    case (0x01):
      extern void abort(void); abort();
      break;
    default:
      s = s + a + 1;
      break;
  }
  overflow = overflow.popdata<int>();
  s overflow = overflow.popdata<int>();

  return override;
}
signed_adder.
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


task main()
{
    int  A[8] = {0x3D, 0x8E, 0x9E, 0xAD, 0xAE, 0x00, 0x00, 0x00};
    int  B[8] = {0x00, 0x00, 0x88, 0xC6, 0x15, 0x00, 0x00, 0x99};
    int  s[8] = {0x80, 0x00, 0x7E, 0xDA, 0xAA, 0xF3, 0x00, 0x00}; 
    int  o[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    
    signed_adder  a(a, b, s, o);

================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


void @unsigned_adder(
    input     a[7:0],
    input     b[7:0],
    output    s[7:0],
    output    overflow
)
{
  // memcpy function in ROS
  // all the data that you can send to that memory location memory copy to the addressed location
  memcpy(q, &b, 7);
  memcpy(r, &a, 7);
  
  // subtract part of the number
  q[7] -= b[7];
  r[7] -= a[7];
  
  // logical shift
  r[7] <<= 1;
  r[7] >>= 1;
  
  
  s[7] = q[7];
  s[6] = r[6];
  s[5] = r[5];
  
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

    assign s[7:0] a[7:0] a << 1;
    assign overflow */

================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


wire S[8];

wire overflow;

// XOR a and b
wire overflowb = ~a & b & ~s

// Signature factor ? ???
input bit overflowf;

reg [15:0] ar2, ar1, barg
;

assign ar2 = (a[3:0] << 4) + (a[4:0] << 4)
, the transition is predictable if S[2:0] = ar2
, so we use only a special case: ar2 = 0, then we can skip ar1

// Split in some mess ? ? 
assign ar1[7:4] = s[1:0]
, ar1 = s[0]
, read the two integer, thanks XMB... 
// XMB:
// 09 09 09 00 01
// 09 09 02 02 03 04 05 06 07 08
//
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


behavior Adder:
    handler overflow_init
    entry
        clk <= led, clk => 1
    end
    
    msg a, b, result_s, result;
    reg [7:0] result_tmp, i;
    assign result_tmp = result = a[7:0] + b[7:0];  
    always @ ()
        clk <= led
    end    
            
    sign_calc_msg(a, b, result_tmp);
    
    result_s[7:0] = result_tmp[7:0]; 
 
    if((a[7:0] < 0 && b[7:0] < 0 && result_tmp < 0) ||
       (a[7:0] > 0 && b[7:0] > 0  && result_tmp > 0))
                overflow
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

  assign overflow = (a[7] < b[7]) | (s[7] < a[7])| (s[7] < b[7]);

in(in0, in1) out(soft_out0, out0) 
{ 
  in { 
    input sign_in { 0, 1 };
  }   
  out(printf("Softout0, overflow ")) { 
    input overflow_in { 0, 1 };
  }
}

control ck_q03 { 
  input [7:0] sig { 00, 01, 10, 11 };
  output qout { q00: bit lane, q01, q10, q11: soft_out0 output soft_out1 }; 
}

razerr(err_q03; q03); 
in0 { 
  input sign_in {
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// help/input
// The numbers 7b and 7c are added to the output s. 
// a signed overflow occurs values 7b and 7c are
//  high
//  negative/positive 


// Reference
// https://projecteuler.com/problem=2

#include<iostream>

using namespace std;

#define INT_MAX 1073741824
#define INT_MAX2 18 228897661

void console_unsigned_adder(unsigned int a, unsigned int b, unsigned int carry_bit); 
void console_signed_adder_base2(unsigned int base2_a, unsigned int base2_b, unsigned int& carry_bit);

int main() 
{
    // a(that) + b(that)

    unsigned int a = INT_MAX, b = NUMBER_MAX;
    unsigned int s =
================================================================
