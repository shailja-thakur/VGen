example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
// $$$
================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



// Tasks:
// 1. Write a function that takes two 8-bit 2's complement numbers a and b and returns the sum of a and b.
// 2. Write a function that takes a 8-bit 2's complement number a and returns the occurence of a signed overflow.
// 3. Write a function that takes a 8-bit 2's complement number a and returns the occurence of a signed overflow.

// 4. Write a function that takes a 8-bit 2's complement number a and returns the sum of a and b.
// 5. Write a function that takes a 8-bit 2's complement number a and returns the occurence of a signed overflow.
// 6. Write a function that takes a 8-bit 2's complement number a and returns the occurence of a signed overflow.
// 7. Write a function that takes a 8-bit 2's complement number a and returns the
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// A signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

// input a[7:0] and b[7:0]
// output s[7:0]
// output overflow

// input a[7:0] and b[7:0]
// output s[7:0]
// output overflow

input a[7:0] and b[7:0]
output s[7:0]
output overflow

// output a[7:0] and b[7:0]
// output s[7:0]
// output overflow

// input a[7:0] and b[7:0]
// output s[7:0]
// output
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder :
    assign s[7:0] b[7:0] + a[7:0]
    (
        s[7:0] + a[7:0] = overflow
        overflow = s[7]
        s[7:0] = s[7:0] + a[7:0]
    )


================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


s = a[7:0] + b[7:0];
overflow = a[7] != 0 and b[7] != 0 and (a[7] > b[7]) != (s[7] > 0);

================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// function add(a, b, s, overflow) returns (a, b, s, overflow)
// var a, b, s, overflow;
// s = a[7:0] + b[7:0];
// overflow = (s > 127) ? 1 : 0;
// if (s > 127) {
//     s = (s - 256) + overflow;
// }
// a[7:0] = s;
// b[7:0] = a[7:0] + b[7:0];
// overflow = (b > 127) ? 1 : 0;
// if (b > 127) {
//     b = (b - 256) + overflow;
// }
// return [a, b, s, overflow];


module signed_adder_s(input [7:0] a,
    input [7:0] b
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// TESTS

signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x00, 0xff, 0x00, 0x00);
signed_adder(0xff, 0x00, 0x00, 0x00);
signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x00, 0x00, 0x00, 0x00);
signed_adder(0x
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


//s = a + b
//if overflow
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s = s - 1
//	s = s + 1
//	s =
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


sign_adder:
  assign s[7:0] = a[7:0] + b[7:0];
  
  assign overflow = (a[7:0] < b[7:0]) && (s[7:0] > 0);
  
  assign s[7:0] = a[7:0] + b[7:0];
  
  assign overflow = (a[7:0] > b[7:0]) && (s[7:0] < 0);

// 
// $v1 = $v0 + $v2;
// $v2 = $v2 + $v3;
// $v3 = $v3 + $v4;
// $v4 = $v4 + $v5;
// $v5 = $v5 + $v6;
// $v6
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


s <= a + b;
s <= overflow;

// s is the sum of a and b
// overflow is the signed overflow of a and b


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


input a[7:0];
input b[7:0];
output s[7:0];
output overflow;

wire [7:0] a_s, b_s, s_s;

assign s[7:0] = a[7:0] + b[7:0];
assign overflow = a_s && b_s && s_s && (a[7] < b[7]) && (s[7] < 0);

assign a_s = a[7] < b[7];
assign b_s = a[7] < s[7];
assign s_s = a[7] < s[7];

================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low



//mux

// assign bits of the input a to the output s
// assign 0 to the output overflow
// assign 1 to the output overflow if the most significant bit of a is high and the most significant bit of s is low
// assign 0 to the output overflow if the most significant bit of a is low and the most significant bit of s is high

// assign bits of the input b to the output s
// assign 0 to the output overflow
// assign 1 to the output overflow if the most significant bit of b is high and the most significant bit of s is low
// assign 0 to the output overflow if the most significant bit of b is low and the most significant bit of s is high

// assign the signed overflow of a and b to the output overflow
// assign 0 to the output overflow
// assign 1 to the output overflow if the most significant bit of a and b are low and the most significant bit of s
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signed_adder #0
    input a, b, s
    output overflow
    assign overflow = a[7:0] and b[7:0]
    assign s[7:0] = a[7:0] + b[7:0]
    assign overflow = overflow and (a[7:0] < 0 and s[7:0] > 0) or (a[7:0] > 0 and s[7:0] < 0)
    assign overflow = overflow and (a[7:0] < 0 and b[7:0] < 0) or (a[7:0] > 0 and b[7:0] > 0)
    assign overflow = overflow and (a[7:0] < 0 and b[7:0] > 0) or (a[7:0] > 0 and b[7:0] <
================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


signal [7:0] s;
signal [1:0] overflow;

always @(posedge clk)
    if (a[7] == 0)
        s <= b[7:0];
    else if (a[7] == 1)
        s <= b[7:0] + 1;
    else
        s <= b[7:0] + a[7:0];
    overflow <= a[7] == 0 ? 0 : 1;

always @(posedge clk) 
    if (s[7] == 0)
        s <= (s + overflow);
    else if (s[7] == 1)
        s <= (s + overflow) + 1;
    else
        s <= (s + overflow) + s[7:0];

always @(posedge clk) 
    if
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// function add(a, b)
// {
//     s := (a + b)
//     overflow := (a & 0x80) != (b & 0x80)
//     return s, overflow
// }

// function main()
// {
//     a := 0b11000011
//     b := 0b01101101
//     s := add(a, b)
//     print s
//     overflow := s[7]
//     print overflow
// }

// Output:
// [0b11000011 0b01101101 0b01101101 0b00000000]
// 1
// 1

================================================================
