example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat input.txt
// 0001 0000 0000 0000
// 0010 0001 0000 0000
// 0100 0100 0100 0100
// 1000 1000 0000 0000
// $ cat output.txt
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// $ cat overflow.txt
// 1
// $ cat output.txt
// 0001 0000 0000 0000
// 0010 0001 0000 0000
// 0100 0100 0100 0100
// 1000 1000 0000 0000
// $ cat overflow.txt
// 0
// $ cat output.txt
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// $ cat overflow.txt
// 1
// $ cat output.txt
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// 0000 0000 0000 0000
// 0000 0000 0000 0000

================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat t1.in
// a = 0x00
// b = 0x00
// s = 0x00
// overflow = 0
// $ cat t1.out
// s = 0x01
// overflow = 1
// $ cat t2.in
// a = 0xFF
// b = 0x00
// s = 0xFF
// overflow = 0
// $ cat t2.out
// s = 0xFE
// overflow = 1

// $ cat t3.in
// a = 0x00
// b = 0xFF
// s = 0x00
// overflow = 0
// $ cat t3.out
// s = 0x01
// overflow = 1

// $ cat t4.in
// a = 0xFF
// b = 0xFF
// s = 0xFF
// overflow = 0
//
================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


def signed_adder_saturate(a, b, s, overflow):
  if (a & 0x80) == 0x80 and (b & 0x80) == 0x80 and (s & 0x80) == 0x80:
    overflow = 1
  else:
    overflow = 0
  s = a + b
  return s, overflow

def signed_adder_saturate_2(a, b, s, overflow):
  if (a & 0x80) == 0x80 and (b & 0x80) == 0x80 and (s & 0x80) == 0x80:
    overflow = 1
  else:
    overflow = 0
  s = a + b
  return s, overflow

def signed_adder_saturate_3(a, b, s, overflow):
  if (
================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat t1.in
// a = 0x80, b = 0x00
// $ gcc -o t1 t1.c
// $ ./t1
// a = 0x80, b = 0x00
// a = 0x80, b = 0x80
// a = 0x00, b = 0x00
// a = 0x00, b = 0x80
// a = 0x00, b = 0x00
// a = 0x80, b = 0x00
// a = 0x80, b = 0x80
// a = 0x00, b = 0x00
// a = 0x00, b = 0x80
// a = 0x00, b = 0x00
// a = 0x80, b = 0x00
// a = 0x80, b = 0x80
// a = 0
================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


void main() {
  // a[7:0] = 0x00;
  // b[7:0] = 0x00;
  // s[7:0] = 0x00;
  // overflow = 0;
  // a[7:0] = 0x00;
  // b[7:0] = 0x00;
  // s[7:0] = 0x00;
  // overflow = 0;
  // a[7:0] = 0x00;
  // b[7:0] = 0x00;
  // s[7:0] = 0x00;
  // overflow = 0;
  // a[7:0] = 0x00;
  // b[7:0] = 0x00;
  // s[7:0] = 0x00;
  // overflow = 0
================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// This is the output of the design
// [0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
// [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
// [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
// [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
// [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
// [0x00, 0x00, 0x00, 0
================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat t1.in
// a = 0x80, b = 0x00
// $ gcc -o t1 t1.c
// $ ./t1
// a = 0x7f, b = 0x00
// a = 0x80, b = 0x00
// a = 0x00, b = 0x00
// a = 0x00, b = 0x80
// a = 0x00, b = 0x7f
// a = 0x7f, b = 0x00
// a = 0x00, b = 0x00
// a = 0x00, b = 0x00
// a = 0x00, b = 0x00
// a = 0x00, b = 0x00
// a = 0x00, b = 0x00
// a = 0x00, b = 0x00
//
================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// A simple implementation of signed_adder
// This is an example of a simple design pattern
// The design pattern is the separation of the logic from the implementation
// The implementation is the code that does the actual work
// The logic is the code that does the checking and the assignment
// The design pattern is to separate the logic from the implementation
// The implementation is the code that does the actual work
// The logic is the code that does the checking and the assignment
// The design pattern is to separate the logic from the implementation
// The implementation is the code that does the actual work
// The logic is the code that does the checking and the assignment
// The design pattern is to separate the logic from the implementation
// The implementation is the code that does the actual work
// The logic is the code that does the checking and the assignment
// The design pattern is to separate the logic from the implementation
// The implementation is the code that does the
================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat t1.txt
// 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0
================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


s = a[7:0] + b[7:0];

if (a[7:0] < b[7:0])
    s[7:0] = 1;
else
    s[7:0] = 0;

if (a[7:0] < 0)
    s[7:0] = 1;
else
    s[7:0] = 0;

if (a[7:0] > 0)
    s[7:0] = 1;
else
    s[7:0] = 0;

if (a[7:0] > b[7:0])
    s[7:0] = 1;
else
    s[7:0] = 0;

if (s[7:0] == 1)
    overflow = 1;
else
    overflow = 0
================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// This is a simple implementation of the signed_adder.
// The input a and b are stored in the registers a and b.
// The output s is stored in the register s.
// The output overflow is stored in the register overflow.

// The following registers are used:
// a, b, s, overflow

// The following instructions are used:
// add, sb, sbz, sbz_c, sbz_c_c, sbz_c_c_c, sbz_c_c_c_c, sbz_c_c_c_c_c, sbz_c_c_c_c_c_c, sbz_c_c_c_c_c_c_c, sbz_c_c_c_c_c_c_c_c, sbz_c
================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// $ cat t1.in
// a = 0x00
// b = 0x00
// s = 0x00
// overflow = 0
// $ cat t1.out
// a = 0x00
// b = 0x00
// s = 0x00
// overflow = 0
// $ cat t2.in
// a = 0x01
// b = 0x00
// s = 0x01
// overflow = 0
// $ cat t2.out
// a = 0x01
// b = 0x00
// s = 0x01
// overflow = 0
// $ cat t3.in
// a = 0x80
// b = 0x00
// s = 0x00
// overflow = 1
// $ cat t3.out
// a = 0x80
// b = 0x00
// s = 0x00

================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// function adder(a, b, s, overflow)
//     if a[7:0] < b[7:0] then
//         s[7:0] = a[7:0] + b[7:0]
//         overflow = 0
//     else
//         s[7:0] = a[7:0] - b[7:0]
//         overflow = 1
// endmodule

// function adder(a, b, s, overflow)
//     if a[7:0] < b[7:0] then
//         s[7:0] = a[7:0] + b[7:0]
//         overflow = 0
//     else
//         s[7:0] = a[7:0] - b[7:0]
//         overflow = 1
// end
================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


task signed_adder_task()
{
  unsigned int i;
  unsigned int carry = 0;
  unsigned int overflow = 0;

  for (i = 7; i >= 0; i--)
  {
    carry = a[i] + b[i] + carry;
    s[i] = carry & 0x80;
    carry = carry >> 7;
  }

  overflow = a[7] + b[7] + carry;
  s[7] = overflow & 0x80;
  overflow = overflow >> 7;
  overflow = overflow + carry;
  s[6] = overflow & 0x80;
  overflow = overflow >> 7;
  overflow = overflow + carry;
  s[5] = overflow & 0x80;
  overflow = overflow >> 7;
  overflow = overflow + carry;
================================================================
