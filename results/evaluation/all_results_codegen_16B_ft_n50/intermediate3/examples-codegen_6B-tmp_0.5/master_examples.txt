example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @(posedge clk or posedge reset)
if(reset)
r_reg <= 5'b0;
else
r_reg <= r_next;
assign q = r_reg;
assign feedback_value = (r_reg[2:0] ^ r_reg[4:3]);
always @(posedge clk or posedge reset)
if(reset)
r_next <= 5'b0;
else
r_next <= {r_reg[4:0], feedback_value};

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
// initializing the register to 5'h1
assign r_next = {r_reg[3], r_reg[4], feedback_value};
assign q = r_reg;
// clock pulse
always @(posedge clk)
if (reset)
begin
r_reg <= 5'h1;
end
else
begin
r_reg <= r_next;
end

================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
// initializing r_reg to all 1s
assign r_next = {r_reg[3:0], feedback_value};
always @(posedge clk or posedge reset)
begin
if (reset)
	r_reg <= 5'b111111;
else
	r_reg <= r_next;
end
assign q = r_reg;

================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
always @( posedge clk, posedge reset ) begin
	if ( reset ) begin
	r_reg <= 5'b1000000;
	end else begin
	r_reg <= r_next;
	end
end
assign r_next = {r_reg[3:0], feedback_value};
assign q = r_reg;

================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
//
always @(posedge clk or posedge reset)
begin
if (reset)
	r_reg <= 5'b0;
else
	r_reg <= r_next;
end
// next-state logic
assign r_next = (feedback_value) ? r_reg : r_reg >> 1;
// output logic
assign q = r_reg;

================================================================
