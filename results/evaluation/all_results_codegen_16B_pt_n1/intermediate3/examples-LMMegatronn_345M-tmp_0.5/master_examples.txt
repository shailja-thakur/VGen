example-0: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {
r_reg[3],r_reg[2],r_reg[1],
r_reg[0],
r_reg[7],
r_reg[6],
r_reg[5],
r_reg[4],
r_reg[3],
r_reg[2],
r_reg[1]
};
//assign r_next = {
r_reg[3],r_reg[2],r_reg[1],
r_reg[0],
r_reg[7],
r_reg[6],
r_reg[5],
r_reg[4],
r_reg[3],
r_reg[2],
r_reg[1]
};
//assign r_next = {
r_reg[3],r_reg[1],
r_reg[0],

================================================================
example-1: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = r_reg + 5'b1;
assign q = r_reg[4];
assign feedback_value = r_reg[3];

always@(posedge clk, posedge reset) begin
	if(reset) r_reg <= 5'b11111;
	else begin
		if(r_next == 5'b00000) r_reg <= 5'b00000;
		else if(r_next == 5'b00001) r_reg <= 5'b00000;
		else r_reg <= r_next;
	end
end

assign q = r_reg;


================================================================
example-2: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {r_reg[4], feedback_value};
assign q = r_reg;

always@(posedge clk, posedge reset)
begin
	if(reset)
		r_reg <= 5'b11111;
	else
		r_reg <= r_next;
end

assign q = r_reg[4] ^ r_reg[3];


================================================================
example-3: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {r_reg[3],r_reg[2],r_reg[1],r_reg[0]};
assign q = r_reg;
assign feedback_value = feedback_value;

always@(posedge clk or posedge reset)
begin
  if(reset == 1'b1)
  begin
    r_reg <= 5'b00000;
    r_reg <= 5'b00000;
    q <= 5'b00000;
  end
  else
  begin
    r_reg <= r_next;
    r_reg <= r_next;
    q <= feedback_value;
  end
end


================================================================
example-4: 
// Design a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3
module lfsr( 
    input clk,
    input reset,
    output [4:0] q
); 
reg [4:0] r_reg;
wire [4:0] r_next;
wire feedback_value;
// on reset set the value of r_reg to 1
// otherwise assign r_next to r_reg
// assign the xor of bit positions 2 and 4 of r_reg to feedback_value
// assign feedback value concatenated with 4 MSBs of r_reg to r_next
// assign r_reg to the output q
assign r_next = {r_reg[3],r_reg[2],r_reg[1],r_reg[0]};
assign q = r_reg;
assign feedback_value = feedback_value & r_reg[4];
always @(posedge clk or posedge reset)
begin
  if (reset == 1)
  begin
    r_reg <= 5'b00000;
    r_next <= 5'b00000;
  end
  else
  begin
    r_reg <= r_next;
    r_next <= r_next;
  end
end
assign r_next = r_reg;
assign q = q_reg;
assign feedback_value = feedback_value & r_reg[4];

================================================================
