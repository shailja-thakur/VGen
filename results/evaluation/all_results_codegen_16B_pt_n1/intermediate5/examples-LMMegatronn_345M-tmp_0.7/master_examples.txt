example-0: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
reg [7:0] data;
// which is the rotate register
reg [7:0] out_shr;

always @(posedge clk or posedge reset)
begin
	if(reset)
		begin
			//from shifting out bit
			shift_reg <= 0;
			data <=0;
		end
	else
		begin
			//from shifting out bit
			shift_reg[7]<=data[7];
			shift_reg[6]<=data[6];
			shift_reg[5]<=data[5];
			shift_reg[4]<=data[4];
			shift_reg[3]<=data[3];
			shift_reg[2]
================================================================
example-1: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always@(posedge clk or negedge reset)
begin
    if(reset == 0)
    begin
        out <= 0;
        out[2] <= 0;
        out[3] <= 0;
        out[4] <= 0;
        out[5] <= 0;
        out[6] <= 0;
        out[7] <= 0;
    end
    else
    begin
        out <= data;
        out[2] <= load;
        out[3] <= 0;
        out[4
================================================================
example-2: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
// which is the initial/left store unit
reg [7:0] out_reg;
// which is the output shift register
reg [7:0] shift_out;
// which is the FSM
reg [1:0] current_state;
// it's the first product
always@(posedge clk or negedge reset)
begin
    if(!reset)
    begin
        // both stop bit and load_sr_input
        previous_state <= 2'b00;
        previous_state <= 2'b00;
        out_reg <= 8'b00000001;
        out_reg_valid <= 1'b0;
     
================================================================
example-3: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
always@(posedge clk)
	if(reset)
		out = 8'b00000000;
	else if (load)
		out = data >> 1; 
	else if (load && !load_hold)
		out = {1'b0,data} << (7 - 1);
	else if (!load)
		out = {1'b0,data} >> 1;

================================================================
example-4: 
// this is a shift left and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// rotate the register out followed by shift left by amount bits
reg [7:0] shift_reg;
always @(posedge clk)
begin
                                   // or shift left
                                     // ascii_data ? 8'b0 : shift_reg
                                      // ascii_data ? 8'b1 : shift_reg
                                  
================================================================
