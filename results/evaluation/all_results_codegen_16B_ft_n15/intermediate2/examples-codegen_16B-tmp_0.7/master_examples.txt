example-0: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
 if (reset == 1'b1) 
 begin 
 // reset the count
 q <= 4'd1; 
 end 
 else if (q == 12) 
 begin 
 // prevent q from going to 13
 q <= 4'd1; 
 end 
 else 
 begin 
 // increment q
 q <= q + 4'd1; 
 end 
 end

================================================================
example-1: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk, posedge reset) begin
	if(reset) 
	q <= 4'd1;
	else if(q == 4'd12)
	q <= 4'd1;
	else
	q <= q + 4'd1;
end

================================================================
example-2: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
if(reset)
	q <= 4'b0000;
else
	begin
	if ( q == 4'b1111)
	q <= 4'b0000;
	else
	q <= q + 1'b1;
	end
end

================================================================
example-3: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) begin
// if reset, assign q to 1
if (reset) 
q <= 4'b1;
// if increment q and q is 12, then increment q by 1
else if (q == 4'b1101) 
q <= 4'b1;
// if increment q, assign q to next value
else
q <= q + 1;
end

================================================================
example-4: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if( reset )
	begin
	case (q)
	4'b0000 : q <= 4'b0001;
	4'b0001 : q <= 4'b1111;
	4'b1111 : q <= 4'b0001;
	4'b1001: q <= 4'b0001;
	default : q <= q + 1;
	endcase
	end
end

================================================================
example-5: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) 
begin
	if(reset)
	begin
	q <= 4'd1; 
	end
	else 
	begin
	if(q == 4'd12)
	begin
	q <= 4'd1;
	end
	else
	begin
	q <= q + 4'd1;
	end
	end
end

================================================================
example-6: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset) 
begin 
if(reset) 
q <= 4'd1; 
else 
case (q) 
4'd12 : q <= 4'd1 ; 
default : q <= q + 4'd1 ; 
endcase 
end 
// output logic 
always@(q) 
begin 
case(q) 
4'd1 : q <= 4'd2; 
4'd2 : q <= 4'd3; 
4'd3 : q <= 4'd4; 
4'd4 : q <= 4'd5; 
4'd5 : q <= 4'd6; 
4'd6 : q <= 4'd7; 
4'd7 : q <= 4'd8; 
4'd8 : q <= 4'd9; 
4'd9 : q <= 4'd10; 

================================================================
example-7: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 

always@(posedge clk or posedge reset) 
begin
if(reset)
q <= 1;
else
begin
if(q == 12)
q <= 1;
else
q <= q + 1;
end
end

================================================================
example-8: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin 
case (q) 
4'b0000 : begin
if (reset)
q = 4'b0000;
else
q = 4'b0001;
end
4'b0001 : begin
if (reset || q == 4'b1111)
q = 4'b0000;
else
q = 4'b0010;
end
4'b0010 : begin
if (reset || q == 4'b1111)
q = 4'b0000;
else
q = 4'b0011;
end
4'b0011 : begin
if (reset || q == 4'b1111)
q = 4'b0000;
else
q = 4'b0100;
end
4'b0100 : begin
if (reset || q == 4'b1111)
q = 4'b0000;
else
q =
================================================================
example-9: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset)
begin
if(reset) 
q <= 4'b0001;
else if(q == 12)
q <= 4'b0001;
else
q <= q + 4'b0001;
end

================================================================
example-10: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk )
begin
case (reset)
0: q <= 4'b0000;
1: q <= 4'b0001;
2: q <= 4'b0010;
3: q <= 4'b0011;
4: q <= 4'b0100;
5: q <= 4'b0101; 
6: q <= 4'b0110;
7: q <= 4'b0111;
8: q <= 4'b1000;
9: q <= 4'b1001;
10: q <= 4'b1010; 
11: q <= 4'b1011;
12: q <= 4'b1100;
default: q <= 4'b0000; 
endcase
end 

================================================================
example-11: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk) begin
 if (reset) 
 q <= 4'd1;
 else if(q == 12)
 q <= 4'd1;
 else 
 q <= q + 4'd1;
end

================================================================
example-12: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk or posedge reset) 
begin 
if (reset) 
q <= 4'b0000; 
else 
case (q) 
4'b1111: q <= 4'b0000; 
// count from 12 to 1
default: q <= q + 4'b0001; 
endcase 
end 

================================================================
example-13: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always@(posedge clk or posedge reset)
begin
if (reset)
 q <= 4'd1; 
else if (q == 12)
q <= 4'd1;
else
q <= q + 4'd1;
end

================================================================
example-14: 
// This is a counter that counts from 1 to 12
module counter( 
    input clk,
    input reset,
    output reg [3:0] q
); 
// update q on the positive edge of the clock according to the following cases:
// on reset, assign q to 1
// else if q is 12, assign q to 1
// else, increment q by 1 
always @(posedge clk)
begin
if (reset)
q <= 4'b1;
else if (q == 12)
q <= 4'b1;
else
q <= q + 4'b1;
end

================================================================
