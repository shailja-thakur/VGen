example-0: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[7] = a[7] ^ b[7] ^ s[7];
assign s[6:0] = a[6:0] + b[6:0] + s[7];
assign overflow = (a[7] == b[7]) & (a[7] == s[7]) ? 1'b1 : 1'b0;


================================================================
example-1: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0]; //assign the first bit of output s to the first bit of the input a and b
assign s[1] = a[1] ^ b[1]; //assign the second bit of output s to the second bit of the input a and b
assign s[2] = a[2] ^ b[2]; //assign the third bit of output s to the third bit of the input a and b
assign s[3] = a[3] ^ b[3]; //assign the fourth bit of output s to the fourth bit of the input a and b
assign s[4] = a[4] ^ b[4]; //assign the fifth bit of output s to the fifth bit of the input a and b
assign s[5] = a[5] ^ b[5]; //assign
================================================================
example-2: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = (a[7] == b[7]) ? (a + b) : (~a + ~b + 8'b1);
assign overflow = ((~a[7] == b[7]) && (a[7] != s[7])) || ((~a[7] != b[7]) && (a[7] == s[7])); // check if a or b is negative and if so, check if s is negative


================================================================
example-3: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// this is a standard 8-bit adder
wire [8:0] sum = a + b;

// two's complement adder
wire [7:0] sum_comp = ~(a + b);


// the sign of the sum
assign s[0] = sum[0];

// the carry out bit of the sum
assign s[7:1] = sum[7:1];

// the sum of the first two complement bits. 
assign s[7] = sum[7] | sum_comp[7];

// the overflow bit of the sum
assign overflow = (a[7] == b[7] && a[7] != sum[7]);




================================================================
example-4: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b; 
assign overflow = ((a[7] == 1'b0) && (b[7] == 1'b1) && (s[7] == 1'b1)) || ((a[7] == 1'b1) && (b[7] == 1'b0) && (s[7] == 1'b0));


================================================================
example-5: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low

	assign s = a + b;
	assign overflow = (a[7] == b[7] && a[7] != s[7]) || (a[7] != b[7] && s[7] == 1);
	
	

================================================================
example-6: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((~a[7] & b[7] & ~s[7]) | (~a[7] & ~b[7] & s[7]) | (a[7] & b[7] & s[7]));


================================================================
example-7: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7]==b[7] && a[7]!=s[7]);


================================================================
example-8: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s[0] = a[0] ^ b[0];
assign s[1] = a[1] ^ b[1];
assign s[2] = a[2] ^ b[2];
assign s[3] = a[3] ^ b[3];

assign s[4] = a[4] ^ b[4];
assign s[5] = a[5] ^ b[5];
assign s[6] = a[6] ^ b[6];
assign s[7] = a[7] ^ b[7];

assign overflow = a[7] ^ b[7] & (a[7] ^ s[7]);


================================================================
example-9: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = ((a[7] == 0) && (b[7] == 0) && (s[7] == 1)) || ((a[7] == 1) && (b[7] == 1) && (s[7] == 0));

// assign overflow to zero when the output s is between +127 and -128 (not truly 0)
// This expression is true when either both a and b are negative or a and b are positive and s is negative.


================================================================
example-10: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] == b[7]) && (a[7] != s[7]) ? 1'b1 : 1'b0;


================================================================
example-11: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// add the unsigned numbers a and b to the 8-bit wire s
// if the result is negative, set it to the two's complement of the result
assign s = (a + b); 
assign overflow = a[7] & b[7] & ~s[7] | ~(a[7] | b[7]) & s[7];



================================================================
example-12: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b;
assign overflow = (a[7] & ~b[7] & s[7]) | (a[7] & b[7] & ~s[7]);




================================================================
example-13: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


assign s = a + b; // if a and b are signed numbers, the sum of a and b will be converted to an unsigned number.
assign overflow = ((a[7] == 1'b0) && (b[7] == 1'b0) && (s[7] == 1'b1)) || ((a[7] == 1'b1) && (b[7] == 1'b1) && (s[7] == 1'b0)); 


================================================================
example-14: 
// Design a signed adder that adds two 8-bit 2's complement numbers, a[7:0] and b[7:0]. 

module signed_adder(input [7:0] a,
    input [7:0] b,
    output [7:0] s,
    output overflow
); 

// The numbers a and b are added to the output s. 
// assign the occurence of the signed overflow of a and b to the output overflow.
// a signed overflow occurs if the most significant bits of a and b are low and the most significant bit of s is high
// a signed overflow may also occur if the most significant bits of a and b are high and the most significant bit of s is low


// Edge cases
// a + b = 2**8 - b
// a + (b+1) = -b + 2**7
// a + (b+1) = -b + 2**7 + 1
// a + (b+1) = -b + 2**7 + 1 + 2**8 = 2**9 - b + 2**8
// a + (b+1) = 2**8 - b + 2**8 = 2**9 - b
// a + b = 2**8 - b

assign overflow = (a[7] == 1'b0 && b[7] == 1'b0 && s[8] == 1'b1) || (a[7] == 1'b1 && b[7] == 1'b1 && s[8] == 1'b0);


// Create the eight bit s
assign s = a
================================================================
