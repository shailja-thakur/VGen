example-0: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or sel)
begin
	case (sel)
	0: pos = 2'd0;
	1: pos = 2'd1;
	2: pos = 2'd2;
	3: pos = 2'd3;
	endcase
end

================================================================
example-1: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
begin
if( in[2]==1'b1 )
	pos=2'd2;	// 0010
else if( in[1]==1'b1 )
	pos=2'd1;	// 0100
else if( in[0]==1'b1 )
	pos=2'd0;	// 1000
else
	pos=2'd0;	// 0000
end

================================================================
example-2: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
case (in)
3'b000: pos = 2'b00; 
3'b001: pos = 2'b01; 
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
default: pos = 2'b00; 
endcase 

================================================================
example-3: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in or sel)
begin
assign pos = sel ? b : '0;
end

================================================================
example-4: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or sel)
	begin: output
	case(sel)
	0: pos=0;
	1: pos=in[0];
	2: pos=in[1];
	3: pos=in[2];
	endcase
	end

================================================================
example-5: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
case (in)
3'b000: pos = 2'b00;
3'b001: pos = 2'b01;
3'b010: pos = 2'b10;
3'b011: pos = 2'b11;
3'b100: pos = 2'b10;
3'b101: pos = 2'b01;
3'b110: pos = 2'b00;
3'b111: pos = 2'b11;
default: pos = 2'b00;
endcase

================================================================
example-6: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in)
begin
	if (in[2]==1'b1) pos = 2'b10;
	else if (in[1] == 1'b1) pos = 2'b01;
	else if (in[0]==1'b1) pos = 2'b00;
	else pos = 2'bXX;
end

================================================================
example-7: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or sel)
case (sel)
1'b0: pos=2'b00;
1'b1: pos=2'b11;
default: pos=2'b00;
endcase

================================================================
example-8: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or sel) begin
	casex({sel,in})
	4'b1xxx: pos=2'b00;	// 00 or 11 - out is zero
	4'b01xx: pos=2'b01;	// 010 or 011 - out is A
	4'b001x: pos=2'b10;	// 010 or 011 - out is B
	4'b0001: pos=2'b11;	// 000 or 111 - out is C
	default: pos=2'b00;
	endcase
end

================================================================
example-9: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
assign pos[1] = in[2] | in[1];
assign pos[0] = in[0] | (in[1] & in[2]);

================================================================
example-10: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ ( in ) 
begin 
	case ( in ) 
	3'b000: pos = 2'b00; 
	3'b001: pos = 2'b01; 
	3'b010: pos = 2'b10; 
	3'b011: pos = 2'b11; 
	default: pos= 2'b00; 
	endcase 
end

================================================================
example-11: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @ (in)
begin
case (in)
0 : pos = 2'b00;
1 : pos = 2'b01;
2 : pos = 2'b10;
3 : pos = 2'b11;
endcase
end

================================================================
example-12: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in or negedge in[0])
	if (in[0] == 1'b0)
	assign pos[1] = 1'b0;
	else
	assign pos[0] = 1'b1;

================================================================
example-13: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(*)
case (in)
3'b000: pos = 2'b0;
3'b001: pos = 2'b00;
3'b010: pos = 2'b01;
3'b011: pos = 2'b10;
3'b100: pos = 2'b11;
3'b101: pos = 2'b01;
default: pos = 2'b0;
endcase

================================================================
example-14: 
// This is a 3-bit priority encoder. If none of the input bits are high, output is zero.
module priority_encoder( 
input [2:0] in,
output reg [1:0] pos ); 
// When sel=1, assign b to out
always @(in)
begin
	case (in)
	3'b000: pos = 2'b00;	// Pass SA
	3'b001: pos = 2'b01;	// Pass SB
	3'b010: pos = 2'b10;	// Pass SA & SB
	3'b011: pos = 2'b11;	// Pass SB & SA
	default: pos = 2'b00;	// Pass SA
	endcase
end

================================================================
