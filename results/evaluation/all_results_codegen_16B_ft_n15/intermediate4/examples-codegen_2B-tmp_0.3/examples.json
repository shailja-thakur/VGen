// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: begin\nif(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nend\n1: begin\nif(in)\nnext_state <= 0;\nelse\nnext_state <= 1;\nend\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\n// next_state\nalways @(present_state, in)\ncase (present_state)\n0: begin\nnext_state <= in ? 0 : 1;\nout <= 0;\nend\n1: begin\nnext_state <= in ? 0 : 1;\nout <= 0;\nend\ndefault: begin\nnext_state <= 0;\nout <= 0;\nend\nendcase\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk) begin\nif (reset) begin\npresent_state <= 0;\nnext_state <= 0;\nend\nelse begin\npresent_state <= next_state;\nend\nend\nalways @(present_state or in) begin\ncase (present_state)\n0: begin\nif (in == 1) next_state <= 0;\nelse next_state <= 1;\nend\n1: begin\nif (in == 0) next_state <= 0;\nelse next_state <= 1;\nend\nendcase\nend\nassign out = (present_state == 1);\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk or posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 1;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: begin\nif(in)\nnext_state <= 1;\nelse\nnext_state <= 0;\nend\n1: begin\nif(in)\nnext_state <= 0;\nelse\nnext_state <= 1;\nend\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0: out <= 0;\n1: out <= 0;\nendcase\nend\n"
    }
  ],
  "created": 1663304573,
  "id": "cmpl-fkWb92FZne5ljUs7dTvgJJdL1QyuO",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 700,
    "prompt_tokens": 148,
    "total_tokens": 848
  }
}