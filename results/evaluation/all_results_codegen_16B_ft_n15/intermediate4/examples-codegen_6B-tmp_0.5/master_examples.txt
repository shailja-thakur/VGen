example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;
always @(posedge clk or posedge reset)
	if (reset)
	begin
	next_state = 0;
	present_state = 0;
	end
	else
	begin
	// State transition logic
	case(present_state)
	0: if(in) next_state = 0; else next_state = 1;
	1: if(in) next_state = 1; else next_state = 0;
	endcase
	// State flip-flops with synchronous reset
	present_state = next_state;
	end

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1

always @ (posedge clk)
	present_state <= next_state;

always @ (posedge clk)
	if(reset)
	begin
	next_state <= 0;
	end
	else if (present_state == 0 && in == 1)
	begin
	next_state <= 1;
	end
	else if (present_state == 1 && in == 0)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= present_state;
	end
// output logic
always @ (posedge clk)
	if (present_state == 0)
	begin
	out <= 0;
	end
	else if (present_state == 1)
	begin
	out <= 1;
	end

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b0 && in) || (present_state==1'b1 && ~in);
// Register transition to next state
always @(posedge clk or posedge reset)
	if (reset) present_state<=1'b0;
	else 	present_state<=next_state;
// Next state that depends on the inputs. The next state is a combinational output of the Moore state machine
assign next_state=(present_state==1'b0 && in) || (present_state==1'b1 && ~in);
// Output logic
assign out=(present_state==1'b0 && in) || (present_state==1'b1 && ~in);

================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out=(present_state==1'b1 && in==1'b1) || (present_state==1'b0 && in==1'b0);
always @(posedge clk or posedge reset)
	if(reset)
	begin
	next_state<=1'b0;
	present_state<=1'b0;
	end
	else
	begin
	//can also use the present state and next state as a combinational output
	//next_state=present_state;
	next_state= (in==1'b1)?(present_state=1'b1):(present_state=1'b0);
	present_state=next_state;
	end

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in;

always @ (posedge clk or posedge reset)
	begin
	if (reset)
	present_state <= 1'b0;
	else
	present_state <= next_state;
	end

always @ (present_state or in)
	begin
	case(present_state)
	1'b0: if (in)
	next_state = 1'b0;
	else
	next_state = 1'b1;
	1'b1: if (in)
	next_state = 1'b1;
	else
	next_state = 1'b0;
	endcase
	end


================================================================
