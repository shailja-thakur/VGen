// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "// next_state = present_state;\nalways @(posedge clk)\nbegin\ncase(present_state)\n0 : if(reset) next_state = 1;\nelse if(in) next_state = 0;\nelse next_state = present_state;\n1 : if(reset) next_state = 0;\nelse if(in) next_state = 1;\nelse next_state = present_state;\ndefault : next_state = present_state;\nendcase\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0 : if(in) present_state = 1;\nelse present_state = 0;\n1 : if(in) present_state = 1;\nelse present_state = 0;\nendcase\nend\nalways @(present_state)\nbegin\ncase(present_state)\n0 : out"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif (reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state <= in ? 0 : 1;\n1: next_state <= in ? 0 : 0;\nendcase\nend\nassign out = (present_state == 0) ? 1 : 0;\n"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "always @(posedge clk)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state or in)\nbegin\ncase(present_state)\n0: next_state = in ? 0 : 1;\n1: next_state = in ? 0 : 1;\ndefault: next_state = 0;\nendcase\nend\n// Output logic\nalways @(present_state)\nbegin\ncase(present_state)\n0: out = 0;\n1: out = 0;\nendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\tpresent_state <= 0;\n\tnext_state <= 0;\n\tend\n\telse\n\tbegin\n\tpresent_state <= next_state;\n\tend\nend\nalways @(in, present_state)\nbegin\n\tcase (present_state)\n\t0: next_state <= in ? 0 : 1;\n\t1: next_state <= in ? 1 : 0;\n\tdefault: next_state <= present_state;\n\tendcase\nend\nalways @(present_state)\nbegin\n\tcase (present_state)\n\t0: out <= 0;\n\t1: out <= 0;\n\tdefault: out <= 1;\n\tendcase\nend\n"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "always @(posedge clk, posedge reset)\nbegin\nif(reset)\npresent_state <= 0;\nelse\npresent_state <= next_state;\nend\nalways @(present_state, in)\nbegin\ncase(present_state)\n0: next_state = in ? 0 : 1;\n1: next_state = in ? 1 : 0;\ndefault: next_state = 0;\nendcase\nend\nassign out = (present_state == 1 && in == 1);\n"
    }
  ],
  "created": 1663304575,
  "id": "cmpl-03NN1Ct0miRyOYHwdGZp1tecsIqg2",
  "model": "codegen",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 743,
    "prompt_tokens": 148,
    "total_tokens": 891
  }
}