example-0: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state, in)
begin
case(present_state)
0:
begin
if (in)
next_state <= 0;
else
next_state <= 1;
end
1:
begin
if (in)
next_state <= 1;
else
next_state <= 0;
end
endcase
end
assign out = (present_state == 1);

================================================================
example-1: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else 
	begin
	present_state <= next_state;
	end
assign out = ((present_state == 1) && (in == 0)) ? 1 : 0;
// Determine next state
always @(*)
	case(present_state)
	0: begin
	if(in == 1)
	next_state = 0;
	else
	next_state = 1;
	end
	1: begin
	if(in == 1)
	next_state = 1;
	else
	next_state = 0;
	end
	default: next_state = 0;
	endcase

================================================================
example-2: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
case (present_state)
0:begin
 if(in)
 next_state <= 0;
 else
 next_state <= 1;
 end
 1:begin
 if (in)
 next_state <= 1;
 else
 next_state <= 0;
 end
 endcase
end

always @(posedge clk)
begin
if (reset)
present_state <= 0;
else
present_state <= next_state;
end

assign out = (present_state == 1);


================================================================
example-3: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter S0=0, S1=1;
always@(posedge clk)
begin
if(reset)
present_state<=S0;
else
present_state<=next_state;
end
always@(in,present_state)
begin
case(present_state)
S0:if(in)
next_state<=S0;
else
next_state<=S1;
S1:if(in)
next_state<=S1;
else
next_state<=S0;
endcase
end
// output logic, d0 is an output, so assign it to be whatever is currently in the 
// register
assign d0=(present_state==S0)?1:0;
assign out=(present_state == S0)?1:0;

================================================================
example-4: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter S0 = 0, S1 = 1;
always @(posedge clk) begin
case(present_state)
	S0: begin
	if(in) begin next_state = S0; out=0; end
	else begin next_state = S1; out=0; end
	end
	S1: begin
	if(in) begin next_state = S1; out=0; end
	else begin next_state = S0; out=0; end
	end
endcase
end
always @(reset)
if(reset) present_state = S0;
else present_state = next_state;

================================================================
example-5: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Resetting the machine
always@(posedge clk)
begin
if(reset)
begin
present_state <= 0;
end
else
begin
present_state <= next_state;
end
end
// Next state calculation
always@(present_state, in)
begin
case(present_state) //Case 0 stays in state 0. Case 1 goes to state 0. Case 2 stays in state 2. Case 3 goes to state 2.
1'b0:if(in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
1'b1:if(in)
begin
next_state <= 0;
end
else
begin
next_state <= 1;
end
endcase
end
assign out = (present_state == 1)? 1:0;

================================================================
example-6: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always@(posedge clk, posedge reset)
begin
	if(reset)
	begin
	present_state <= 0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always@(in, present_state)
begin
	case(present_state)
	0 : begin
	if(in)
	begin
	next_state <= 0;
	end
	else
	begin
	next_state <= 1;
	end
	end
	1 : begin
	if(in)
	begin
	next_state <= 1;
	end
	else
	begin
	next_state <= 0;
	end
	end
	endcase
end

================================================================
example-7: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
assign out = present_state & in; 
always @(posedge clk)
begin
	if (reset)	//if reset==1, state = 0, else state = present_state
	begin
	present_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(in, present_state)
begin
	case (present_state)
	0:
	begin
	next_state <= in;
	end
	1:
	begin
	next_state <= ~in;
	end
	endcase
end

================================================================
example-8: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	present_state <= 1'b0;
	next_state <= 1'b0;
	end
	else
	begin
	present_state <= next_state;
	end
end
always @(present_state, in)
begin
 if(present_state == 1'b0 && in == 1'b1)
	next_state <= 1'b0;
 else if(present_state == 1'b0 && in == 1'b0)
	next_state <= 1'b1;
 else if(present_state == 1'b1 && in == 1'b1)
	next_state <= 1'b1;
 else if(present_state == 1'b1 && in == 1'b0)
	next_state <= 1
================================================================
example-9: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if (reset)
present_state <= 1'd0;
else
present_state <= next_state;
end
always @(in or present_state)
begin
case(present_state)
1'd0:
begin
if (in)
next_state = 1'd0;
else
next_state = 1'd1;
end
1'd1:
begin
if (in)
next_state = 1'd1;
else
next_state = 1'd0;
end
endcase
end
assign out = (present_state == 1'd0);

================================================================
example-10: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk)
begin
if(reset)
present_state <= 0;
else
present_state <= next_state;
end
always @(present_state,in)
begin
case(present_state)
0: begin
if(in)
next_state <= 0;
else
next_state <= 1;
end
1: begin
if(in)
next_state <= 1;
else
next_state <=0;
end
endcase
end
assign out = ((present_state == 1) && (next_state == 0));

================================================================
example-11: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// out=1 in state 1 and out=0 in state 0
// clk=1 in state 1 and stay in state 1
// clk=0 in state 0 and stay in state 0
assign out= (present_state & in)? 1:0;
always @(posedge clk) begin
if(reset) present_state=0;
else present_state = next_state;
end
always @(*) begin
if(present_state == 0) begin
if(in == 1'b1) next_state = 0;
else if(in == 1'b0) next_state = 1;
end
else if(present_state == 1) begin
if(in == 1'b1) next_state = 1;
else if(in == 1'b0) next_state = 0;
end
end

================================================================
example-12: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
parameter S0=0, S1=1;
always@(posedge clk, posedge reset)
begin
if(reset)
present_state <= S0;
else
present_state <= next_state;
end
always@(present_state, in)
case(present_state)
S0: if(in) begin next_state = S0; out = 1; end else begin next_state= S1; out=0; end
S1: if(in) begin next_state = S1; out = 1; end else begin next_state= S0; out=0; end
endcase

================================================================
example-13: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @(posedge clk) begin
	if(reset)
	present_state <= 0;
	else
	present_state <= next_state;
end
// Register next state, 0 and 1 are valid states for this fsm
always @(posedge clk) begin
	if(reset)
	next_state <= 0;
	else
	case(present_state)
	0: if(in)
	next_state <= 0;
	else
	next_state <= 1;
	1: if(in)
	next_state <= 1;
	else
	next_state <= 0;
	endcase
end
assign out = (present_state == 0)? 1:0;

================================================================
example-14: 
// Design a Moore state machine with two states 0 and 1, one input in, and one output out. Reset state is 0.
module simple_fsm(clk, reset, in, out);
input clk;
input reset;
input in;
output out;
wire out;
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
always @ (posedge clk)
begin
	if(reset)
	begin
	present_state <= 0;
	next_state <= 0;
	end
	else
	begin
	case(present_state)
	0:
	begin
	if(in)
	begin
	next_state <= 0;
	present_state <= 0;
	end
	else
	begin
	next_state <= 1;
	present_state <= 0;
	end
	end
	1:
	begin
	if(in)
	begin
	next_state <= 1;
	present_state <= 1;
	end
	else
	begin
	next_state <= 0;
	present_state <= 1;
	end
	end
	endcase
	end
end

================================================================
