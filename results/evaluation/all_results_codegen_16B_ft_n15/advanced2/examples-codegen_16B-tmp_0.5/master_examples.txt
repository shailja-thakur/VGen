example-0: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena && q < 9) begin
	q <= q + 1;
	end
	else begin
	q <= q;
	end
	end
end


================================================================
example-1: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin

if (reset) begin
q <= 0;
end

else begin
if (slowena) begin
if (q != 9) begin
q <= q + 1;
end
end
end

end



================================================================
example-2: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
// Notice the use of a non-blocking assignment statement.
always @(posedge clk) begin
	if (reset)
	begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001)
	q <= q + 1;
	end
end


================================================================
example-3: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk)
begin
	if (reset)
	begin
	q <= 4'b0000;
	end
	else
	begin
	if (slowena)
	begin
	if (q != 9)
	begin
	q <= q + 1;
	end
	else
	begin
	q <= 4'b0000;
	end
	end
	end
end


================================================================
example-4: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if(reset)
	begin
	q <= 4'b0;
	end
	else
	begin
	if(slowena)
	begin
	if(q == 4'd9)
	begin
	q <= 4'b0;
	end
	else
	begin
	q <= q + 1'b1;
	end
	end
	end
end


================================================================
example-5: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena && q < 4'b1001) begin
	q <= q + 1;
	end
	end
end

// On the negative edge of the clock, set the output q to the value of the input q.
// This is a reset function.
always @(negedge clk) begin
	q <= q;
end

// On the positive edge of the enable, set the output q to the value of the input q.
// This is a non-reset function.
always @(posedge slowena) begin
	q <= q;
end


================================================================
example-6: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk)
begin
	if(reset)
	begin
	// when reset is high, set output to 0
	q <= 4'b0;
	end
	else
	begin
	// when reset is low, increment the output if ena is high and q is not 9
	if(slowena && q < 4'b1001)
	begin
	q <= q + 1;
	end
	end
end


================================================================
example-7: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0000;
	end
	else begin
	if (slowena) begin
	if (q == 9) begin
	q <= 4'b0000;
	end
	else begin
	q <= q + 1;
	end
	end
	end

================================================================
example-8: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset) begin
	// if reset is high, reset the output q to 0. 
	q <= 4'b0;
	end
	else begin
	// if reset is low, only increment the output q if the ena input is high and q is not 9.
	if (slowena && q < 4'b1001) begin
	// if ena is high and q is less than 9, increment q by 1.
	q <= q + 4'b0001;
	end
	end
end


================================================================
example-9: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
if (reset)
q <= 4'b0;
else if (slowena && q < 9)
q <= q + 1;
end


================================================================
example-10: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	
	end
	else begin
	
	end
end


================================================================
example-11: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) q <= 0;
	else begin
	if (slowena && q < 9) q <= q + 1;
	end
end


================================================================
example-12: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	
	q <= 4'b0;
	end
	else begin
	
	if (slowena && q < 4'b1001) begin
	
	q <= q + 1'b1;
	
	end
	end
end


================================================================
example-13: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.
always @(posedge clk) begin
	if (reset) begin
	q <= 4'b0;
	end
	else begin
	if (slowena) begin
	if (q == 4'd9) begin
	q <= 4'd0;
	end
	else begin
	q <= q + 4'd1;
	end
	end
	end
end


================================================================
example-14: 
// Design a decade counter that counts from 0 through 9, inclusive.

module count_slow(
    input clk,
    input slowena,
    input reset,
    output reg [3:0] q);

// On the positive edge of the clock:
// if reset is high, reset the output q to 0. 
// Otherwise, only increment the output q if the ena input is high and q is not 9.

always @(posedge clk) begin
	if (reset == 1)
	begin
	q = 4'b0000;
	end
	else if (slowena == 1)
	begin
	if (q == 9)
	begin
	q = 4'b0000;
	end
	else
	begin
	q = q + 1;
	end
	end
	end

================================================================
