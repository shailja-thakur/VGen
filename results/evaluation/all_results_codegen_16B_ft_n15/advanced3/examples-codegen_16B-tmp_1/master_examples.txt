example-0: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE



always @(posedge clk, posedge reset) begin
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(x, present_state) begin
case(present_state)
IDLE: begin
if(x)
next_state <= S1;
else
next_state <= IDLE;
end
S1: begin
if (!x)
next_state <= S10;
else
next_state <= IDLE;
end
S10: begin
if(x)
next_state <= S101;
else
next_state <= IDLE;
end
S101: begin
next_state <= IDLE;
end
endcase
end
assign z = (present_state == S101);

================================================================
example-1: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk, posedge reset) 
	begin 
	if(reset) present_state <= IDLE;
	else present_state <= next_state;
	end
//output is asserted to 1 when correct state is S101
// and present state is S1, S10, S101 or IDLE
assign z = (present_state == S101 && x==1) ? 1:0;
// changing the next state
always @ (present_state, x) 
case(present_state)
IDLE: if (x) next_state = S1;
	else next_state = IDLE;
S1: if (x) next_state = S10;
	else next_state = IDLE;
S10: if(x) next_state = S101;
	else next_state = IDLE;
S101:
================================================================
example-2: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(x, present_state)
//always @(posedge clk, posedge reset)
begin
case(present_state)
	IDLE : begin
	if(x) next_state <= S1;
	else next_state <= IDLE;
	z <= 0;
	end
	S1 : begin
	z <= 0;
	next_state <= S10;
	end
	S10 : begin
	z <= 0;
	next_state <= S101;
	end
	S101 : begin
	z <= 1;
	next_state <= IDLE;
	end
endcase
end
/*Always block to update values for all FSM state any time the state changes*/
always @(posedge clk, posedge reset)
begin
if(reset)
	present_state <= IDLE;
else 
	
================================================================
example-3: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @ ( present_state, x )
	begin 
	 	case ( present_state ) 
	 	IDLE : if ( x )
	 	IDLE : next_state <= S1;
	 	S1 : if ( x )
	 	S1 : next_state <= S10; 
	 	S10 : if ( x )
	 	S101 : begin
	 	next_state <= IDLE;
	 	end
	 	IDLE : begin
	 	next_state <= IDLE;
	 	end 
	 	endcase 
	end 
// output logic assigned to HEX0 through HEX1 through HEX6 
always @(present_state) 
case ( present_state ) 
	IDLE : begin 
	z = 0; 
	hex =
================================================================
example-4: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk) begin
present_state <= next_state;
end 

always @( present_state, x ) begin
case( present_state )
IDLE : next_state <= ( x==0 ? IDLE : S1 );
S1 : next_state <= ( x==1 ? S10 : IDLE );
S10 : next_state <= ( x==1 ? S101 : IDLE );
S101 : next_state <= ( x==0 ? S1 : IDLE );

endcase
end 

always @( x ) begin 
case( {present_state, x} ) 
{IDLE, 0} : z = 0;
{IDLE, 1} : z = 0;
{S1, 0} : z = 0;
{S1, 1} : z = 0;
{S10, 0}
================================================================
example-5: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always @(present_state)
	begin 
	case (present_state)
	 IDLE: begin
	if (x)
	begin
	next_state = S1;
	z = 0;
	end
	else 
	begin
	next_state = IDLE;
	z = 0;
	end
	end
	S1: begin
	if (~x)
	begin
	next_state = IDLE;
	z = 0;
	end
	else begin
	next_state = S1;
	z = 0;
	end
	end
	S10: begin
	if (x)
	begin
	next_state = S1;
	z = 0;
	end
	else begin
	next_state = S1;
	z = 1;
	end
	end
	S
================================================================
example-6: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// combinational logic. having present state register will eliminate the 
// need of next state register
reg z_to_x, x_to_z;
always @(present_state or 	x)
begin
	case(present_state)
	IDLE : begin
	z_to_x <= 1'b0;
	x_to_z <= x;
	end
	S1 : begin
	z_to_x <= x;
	x_to_z <= 'b0;
	end
	S10: begin
	z_to_x <= 'b0;
	x_to_z <= x;
	end
	S101: begin
	z_to_x <= 1'b1;
	x_to_z <= 'b0;
	end
	endcase
end


reg [1:0] c
================================================================
example-7: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// memory of present state. S101 stands for state 10
reg [1:0] pt;

always @( posedge clk, negedge reset ) 
begin 
if( !reset ) 
pt <= IDLE; 
else 
pt <= next_state; 
end 
// counter and next state selection logic
always @( negedge clk ) begin 
if(reset)
present_state <= IDLE;
else
present_state <= next_state;
end 
// FSM
always @( present_state, x ) 
begin 
case( present_state ) 
IDLE : begin 
if( x == 1 ) 
next_state = S1; 
else 
next_state = IDLE; 
end 
S1 : begin 
if( x == 0 ) 
next_state = S
================================================================
example-8: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(present_state or x)
begin 
z=1'b1;
case (present_state)
IDLE : if (x) begin next_state = S1; z = 1'b1; end
else begin next_state = IDLE; z = 1'b1; end
S1 : if(!x) begin next_state = IDLE; z=1'b0; end
else begin next_state = S1; z=1'b1; end
S10 : if(!x) begin next_state = IDLE; z=1'b0; end
else begin next_state = S1; z=1'b1; end
S101: if(!x) begin next_state = S1; z=1'b0; end
else begin next_state = IDLE; z=1'b1; end

================================================================
example-9: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @(posedge clk or negedge reset)
begin
if(!reset)
present_state <= IDLE;
else
present_state <= next_state;
end

always @(present_state or x)
begin
case (present_state)
IDLE : begin
if(x)
next_state = S1;
else
next_state = IDLE;

z = 1'b0;
end

S1 : begin
if(x==0)
begin
next_state = S10;
z= 1'b0;
end 

else 
begin 
next_state = IDLE;
z=1'b0;
end

end

S10 : begin
if(x)
begin
next_state = S101;
z= 1'b1;
end 

else

================================================================
example-10: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always_comb
	begin 
	present_state = x ? S1 : IDLE;	// next_state logic
	next_state = x ? IDLE : present_state;
	end
 // combinational logic for assigning values to z based on present state and inputs x, reset
 // if reset is high, present state is reset to IDLE to avoid irregular expression of z
 always_comb
 begin 
 case(present_state)
 IDLE: z = 0;
 S1: z = 0;
 S10: z = 0;
 S101: z = 1;
endcase
 end	

================================================================
example-11: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE

	always@(posedge clk)
	if( reset )
	begin
	present_state <= IDLE; 
	end 
	else
	present_state <= next_state ; 
	
// next_state logic
always @ (*)
begin 
case ( present_state ) 
IDLE : if( x ) 
begin 
next_state = S1; 
end 
else 
begin 
next_state = IDLE; 
end 
S1 : if ( ~x ) 
begin 
next_state = IDLE; 
end 
else 
begin 
next_state = S10; 
end 
S10 : if ( x ) 
begin 
next_state = S101; 
end 
else 
begin 
next_state = IDLE; 
end
S101 :
================================================================
example-12: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


// output signals z 
// output next_state value
always @( posedge clk or posedge reset )
begin 
if(reset) 
present_state = IDLE; // present state is IDLE
else 
present_state = next_state;
end

always@(*)
begin
case(present_state)
IDLE:
begin
if(x) 
next_state = S1; 
else 
next_state = IDLE;
end
S1:
begin
if(!x)
next_state = S10;
else 
next_state = IDLE;
end
S10:
begin
if(x)
next_state = S101; 
else 
next_state = IDLE;
end
S101:
begin
if(x) 
next_state = IDLE;
else
================================================================
example-13: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE




always@(present_state,x)
begin 
case(present_state) 
IDLE:begin 
if( x == 1) 
next_state = S1;
else 
next_state = IDLE;
end 
S1: begin 
if( x == 0) 
next_state = S10;
else 
next_state = IDLE;
end
S10: begin 
if( x == 1)
begin
if( present_state == IDLE) 
begin 
next_state = IDLE;
z = 0; 
end 
else 
begin 
next_state = S101;
z = 1;// output signal z is asserted to 1 when present_state is S101
end 
end 
else 
next_state = IDLE;
end 
S101: begin 

================================================================
example-14: 
// This is a finite state machine that recognizes the sequence 101 on the input signal x. 
module adv_fsm(
input clk,
input reset,
input x,
output z ); 
reg [1:0] present_state, next_state;
parameter IDLE=0, S1=1, S10=2, S101=3;
// output signal z is asserted to 1 when present_state is S101 
// present_state is reset to IDLE when rset is high
// otherwise it is assigned next state
// if present_state is IDLE, next_state is assigned S1 if x is 1, otherwise next_state stays at IDLE
// if present_state is S1, next_state is assigned S10 if x is 0, otherwise next_state stays at IDLE 
// if present_state is S10, next_state is assigned S101 if x is 1, otherwise next_state stays at IDLE 
// if present_state is S101, next_state is assigned IDLE


always @ (posedge clk)
begin
if(reset)
 present_state <= IDLE;
 
else
begin
case(present_state)
IDLE: if(x)
present_state <= S1;
IDLE:if(x)
present_state <= IDLE;
S1:if(~x)
present_state <= IDLE;
S1:if(~x)
present_state <= S10;
S10: if(x)
present_state <= S101;
S10:if(x)
present_state <= IDLE;
S101:if(~x)
present_state <= IDLE;
S101:if(~x)
present_state <= S1;
 
endcase
end
end

assign z = (present_state == S101); 

================================================================
