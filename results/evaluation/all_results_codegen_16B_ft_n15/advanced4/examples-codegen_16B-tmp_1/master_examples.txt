example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)

begin

if(load) begin q <= data; end
else begin
// if ena is on, shift based on amount
	q <= q >> amount;
	// data[63:0];
end	
end

================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	// Shift left/right
	always @(posedge clk) begin
	if(load) q <= data;
	else if(ena) begin
	if(amount == 2'b01)
	q <= {data[31:0], q[63:32]};
	else if(amount == 2'b10)
	q <= {q[63:32], data[31:0]};
	else
	q <= q << amount;
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
	begin
	if (~load) // load position when the ena and the load are both low
	q <= data>>amount;
	else 
	q <= data>>(amount ? 8 : 1);
	end

================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if (ena) begin
//	if (ena) begin//(~load) // When ena is not low, assign data[63:0] to shift register q.
//	if (load) begin
	if(load)
	begin
	case(amount)
	
	2'b00: q <= {1'b0,data[62:0]};
	2'b01: q <= {8'b0,data[63:0]};
	2'b10: q <= {data[62:0],1'b0};
	2'b11: q <= {data[63:0],8'b0};

	endcase
	end

	
	end

	else begin //if (rm & !ena) // rm = reset mode, upon which q will return to 0.

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load==1)
	begin
	q[63:0] <= data[63:0];
end

// shift is determined by the value of amount and direction.
if(amount ==2'b00 && ena ==1)
/////////// begin left shift //////////
begin
q[63:1] <= q[62:0];
end


else if (amount ==2'b01 && ena ==1)
begin
q[63:8] <= q[56:0];
end

else if(amount ==2'b10 && ena ==1)
begin
q[63:1] <= q[61:0];
end

else if(amount ==2'b11 && ena ==1)
begin
q[63:8] <= q[56:0];
end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) begin
	if(load) begin
	q[63:0] <= data[63:0];
	end
	if(ena) begin
	case(amount)
	2'b00: begin
	//arithmetic shift left
	if(q[63] == 1'b1) begin
	q[63:1] <= {1'b0, q[62:0]};
	end
	else begin
	q[63:1] <= q[63:1];
	end
	end
	2'b01: begin 
	//sign-extend and replicate the sign bit for all the bits.
	if(q[63] == 1'b1) begin
	q[63:8] <= {8{1'b1}};
	end
	else begin
	q[63:
================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] q_reg;

always@(posedge clk)
begin
case(ena)
	1'b1: q <= #1 data;
	default: q <= #1 q_reg;
endcase
if(ena)
begin
	case(amount)
	2'b00, 2'b01: 
	begin
	 q_reg <= #1 q;
	end
	2'b10:
	begin
	 q_reg <= #1 q >> 1;
	end
	2'b11:
	begin
	 q_reg <= #1 q >> 8;
	end
endcase
end
else
begin
	case(amount)
	2'b00, 2'b01:
	begin
	q <= #1 data;
	end
	2'b10:
	begin

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @(posedge clk)
 begin
	if(ena)
	 begin
	 case (amount)
	 2'b00: q <= q << 1;
	 //Shift left by 1 bit.
	 2'b01: q <= q << 8;
	 //Shift left by 8 bits.
	 2'b11: q <= q >> 1; 
	 //Shift right by 1 bit.
	 2'b10: q <= q >> 8;
	 // Shift right by 8 bits.
	 endcase
	 end
	 else
	 //if ena is not high, do not shift the register.
	 q <= q;
	 // hold the value of the register.
	 end
 end

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk)
	begin
	if(load == 1)
	begin
	q <= data;
	end
	else
	begin
	if(ena == 1)
	begin
	if(amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63] <= q[62];
	q[62] <= q[61];
	q[61] <= q[60];
	q[60] <= q[59];
	q[59] <= q[58];
	q[58] <= q[57];
	q[57] <= q[56];
	q[56] <= q[55];
	q[55] <= q[54];
	q[54] <= q[53];
	q[53] <= q[52];
	q[52
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	
always @ (posedge clk)
	begin
	if (load) q <= data;
	else if (ena) begin
	if (amount == 2'b00) q[63] <= q[56];
	else if (amount == 2'b01) q[56:5] <= q[55:0];
	else if (amount == 2'b10) q[63:8] <= q[63:0];
	else if (amount == 2'b11) q[63:8] <= q[55:0];
	q <= q >> amount;
	end
	end
	

================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
	begin
	if (load) 
	 q <= data; // lits the register with input.
	else if (ena)
	 begin
	case(amount) // chooses operation to carry out on selected item.
	 2'b00: q <= {q[62:0], 1'b0}; //lessthan 1, do nothin.
	 2'b01: q <= q << 1; // 8 bit shift left.
	 2'b10: q <= q >> 1; // 1 bit shift right.
	 2'b11: q <= 64'd0; // 8 bit shift right.
	 endcase
	end
	else
	 begin
	 q <= q; // do nothing. 
	 end
	end
	
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load) q <= data;
	if(ena) q <= {q[62:amount],q[63]};
	end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if({ena,amount} == 2'b10) begin
	q[0] <= 1'b0;
	end
	if({ena,amount} == 2'b11) begin 
	q[63] <= 1'b0;
	end
	if({ena,amount} == 2'b01) begin 
	q[63:24] <= data[63:24]; 
	end
	if({ena,amount} == 2'b00) begin 
	q[63:24] <= data[63:24]<< 8; 
	end
end

================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) begin: SHIFT
	if (load) begin
	q[63] <= data[0];
	q[62:0] <= data[63:1];
	end
	else if (ena) begin
	case (amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	 endcase
	end
	end

================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(clk)
	begin
	if (ena && load)
	begin 
	q <= data;	
	end
	else if (enrast)
	begin
	 
	case (amount)
	2'b00: q = { q[62:0], ~q[63] };
	2'b10: q = { q[59:0], q[63:2] };
	2'b11: q = { q[56:0], q[63:4] };
	2'b01: 
	q = { q[55:0], q[63:6] };
	endcase
	end
	end



================================================================
