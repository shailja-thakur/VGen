example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(ena or load or amount)
	begin
	if(load == 1'b1)
	begin
	q[63] <= data [63];
	q[62] <= data [62];
	q[61] <= data [61];
	q[60] <= data [60];
	q[59] <= data [59];
	q[58] <= data [58];
	q[57] <= data [57];
	q[56] <= data [56];
	q[55] <= data [55];
	q[54] <= data [54];
	q[53] <= data [53];
	q[52] <= data [52];
	q[51] <= data [51];
	q[50] <= data [50];
	q[49] <= data [49];
	q[48] <= data
================================================================
