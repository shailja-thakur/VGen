example-0: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load)
	begin
	q[63:0] <= data[63:0];
	end
	else
	begin
	if(ena)
	begin
	if (amount == 2'b00) 
	// shift left by 1 bit:
	q[63:1] <= q[62:0];
	else if (amount == 2'b01) 
	// shift left by 8 bits:
	q[63:8] <= q[57:0];
	else if (amount == 2'b10) 
	// shift right by 1 bit:
	q[63:1] <= q[62:0] << 1;
	else if (amount == 2'b11) 
	// shift right by 8 bits:
	q[63:8] <= q[57
================================================================
example-1: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if (load) begin
	q <= data;
	end
	if (ena) begin
	case (amount)
	2'b00 :
	q <= q << 1;
	2'b01 :
	q <= q << 8;
	2'b10 :
	q <= q >> 1;
	2'b11 :
	q <= q >> 8;
	endcase
	end
	end

================================================================
example-2: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk)
	begin
	if(load)
	begin
	q <= data;
	end
	else if(ena)
	begin
	if(amount == 2'b00 || amount == 2'b10)
	begin
	q[63] <= q[62];
	q[62] <= q[61];
	q[61] <= q[60];
	q[60] <= q[59];
	q[59] <= q[58];
	q[58] <= q[57];
	q[57] <= q[56];
	q[56] <= q[55];
	q[55] <= q[54];
	q[54] <= q[53];
	q[53] <= q[52];
	q[52] <= q[51];
	q[51] <=
================================================================
example-3: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	// when load is high, assign data[63:0] to shift register q.
	if (load) q <= data;
	// if ena is high, shift q.
	if (ena) begin
	// amount: Chooses which direction and how much to shift.
	if (amount == 2'b00) begin
	// shift left by 1 bit.
	q <= q << 1;
	end
	else if (amount == 2'b01) begin
	// shift left by 8 bits.
	q <= q << 8;
	end
	else if (amount == 2'b10) begin
	// shift right by 1 bit.
	q <= q >> 1;
	end
	else begin
	// shift right by 8 bits.
	q <= q >> 8;
	end
	end

================================================================
example-4: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @(posedge clk) begin
	if(ena) begin
	if(load) begin
	q <= data;
	end
	else begin 
	if(amount !== 2'b00) begin
	q <= {q[62:0],q[63]};
	end
	else begin
	q <= {q[55:0],q[63:56]};
	end 
	end
	end

================================================================
example-5: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


reg [63:0] temp;

always @(posedge clk) begin
if(load) begin
q <= data;
end
else begin
if(ena) begin
case(amount)
2'b00: temp <= q << 1;
2'b01: temp <= q << 8;
2'b10: temp <= q >> 1;
2'b11: temp <= q >> 8;
endcase
q <= temp;
end
else begin
q <= q;
end
end
end



================================================================
example-6: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk) 
begin
if (load) 
begin
	q <= data;
end
else if(ena) 
begin
	case (amount)
	2'b00: q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	default: q <= 64'b0;
	endcase
end

================================================================
example-7: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if (load == 1'b1)
	begin
	//	q <= data;
	end
	else if (ena == 1'b1)
	begin
	case (amount)
	2'b00:
	begin
	q[0] <= q[1];
	q[1] <= q[2];
	q[2] <= q[3];
	q[3] <= q[4];
	q[4] <= q[5];
	q[5] <= q[6];
	q[6] <= q[7];
	q[7] <= q[8];
	q[8] <= q[9];
	q[9] <= q[10];
	q[10] <= q[11];
	q[11] <= q[12];

================================================================
example-8: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk) 
	begin 
	if(load) 
	begin 
	q <= data; 
	end 
	else if(ena) 
	begin 
	if(amount == 2'b00) 
	begin 
	q[0] <= q[63]; 
	q[63:1] <= q[62:0]; 
	end
	else if(amount == 2'b01) 
	begin 
	q[0] <= 0; 
	q[63:1] <= q[62:0]; 
	end
	else if(amount == 2'b10)
	begin 
	q[63] <= q[0]; 
	q[62:0] <= q[63:1]; 
	end
	else 
	begin 
	q[
================================================================
example-9: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
//	if (load)
//	begin
//	q <= data;
//	end

	if (ena)
	begin
	if (amount == 2'b00)
	begin
	q[0] <= q[63];
	q[63:1] <= q[62:0];
	end
	else if (amount == 2'b01)
	begin
	q[0] <= q[7];
	q[63:1] <= q[70:7];
	q[7] <= q[6];
	q[6] <= q[5];
	q[5] <= q[4];
	q[4] <= q[3];
	q[3] <= q[2];
	q[2] <= q[1];
	q[1] <=
================================================================
example-10: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


always @ (posedge clk)
begin
	if(load == 1'b1)
	begin
	//	$display("load is %d",load);	
	q <= data[63:0];
	end
	
	else if(ena == 1'b1)
	begin
	//	$display("ena is %d",load);
	
	if(amount[1:0] == 2'b00) 
	begin
	//	$display("left 1 bit");
	q <= q << 1;
	end
	
	else if(amount[1:0] == 2'b01) 
	begin
	//	$display("left 8 bit");
	q <= q << 8;
	end
	
	else if(amount[1:0] == 2'b10) 
	begin
	//	
================================================================
example-11: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always@(posedge clk) begin
	//if (load)
	//	q <= data;
	if (load) begin
	//	q <= data << amount; 
	//	q <= data >>> amount;
	end
	if (ena) begin
	//	q <= q << amount; 
	//	q <= q >>> amount;
	end
	end

================================================================
example-12: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @(posedge clk) begin
	if (load) begin
	q <= data;
	end
	if (ena) begin
	case (amount)
	2'b00:	q <= q << 1;
	2'b01: q <= q << 8;
	2'b10: q <= q >> 1;
	2'b11: q <= q >> 8;
	endcase
	end
	end


================================================================
example-13: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

	always @ (posedge clk)
	begin
	if(load)
	begin
	q[63:62] <= data[63:62];
	q[61:56] <= data[61:56];
	q[55:48] <= data[55:48];
	q[47:40] <= data[47:40];
	q[39:32] <= data[39:32];
	q[31:24] <= data[31:24];
	q[23:16] <= data[23:16];
	q[15:8] <= data[15:8];
	q[7:0] <= data[7:0];
	end
	else if(ena)
	begin
	if(amount == 2'b00)
	begin
	q[63:1] <= q[62:0];
	
================================================================
example-14: 
// Design a 64-bit arithmetic shift register, with synchronous load. 
// The shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, assign data[63:0] to shift register q.
// if ena is high, shift q.
// amount: Chooses which direction and how much to shift.
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.

 always @ (posedge clk) begin
 if (load && ena)
 q <=data;
 else if (ena) begin
 case (amount)
 2'b00: q <= q << 1;
 2'b01: q <= q << 8;
 2'b10: q <= q >> 1;
 2'b11: q <= q >> 8;
 endcase
 end
 end
 
 endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/17/2021 12:15:37 PM
// Design Name: 
// Module Name: tb_sc_fm
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.
================================================================
