example-0: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
reg [7:0] out;
always@(posedge clk or posedge reset)
begin
	if(reset)
	out <= 'b0;
	else
	begin
	if(load)
	out <= data;
	else
	begin
	$display("Data: %b ", out);
	out = out << amount;
	$display("retData: %b",out);
	end
	end
	end

================================================================
example-1: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
// reset is active low, oposite of what you might think
always @(posedge clk, posedge reset)
begin
if(reset == 1'b0)
 begin
// clear state, equivalent to a reset
out <= 8'h00;
 end
else if (load == 1'b1)
 begin
// load the data into the register
out <= data;
end
else
 begin
$display("no change in output");
out <= out;
// do not change output
end
end


================================================================
example-2: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk) begin
	if(reset) begin
	out=0;
	end
	if(load==1'b1) begin
	out=data;
	end
	else begin
	case(amount)
	3'd0: out=out;
	3'd1: out={out[6:0],out[7]};
	3'd2: out={out[5:0],out[7:6]};
	3'd3: out={out[4:0],out[7:6]};
	3'd4: out={out[3:0],out[7:6]};
	3'd5: out={out[2:0],out[7:6]};
	3'd6: out={out[1:0],out[7:6]};
	3'd7: out={out[
================================================================
example-3: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk) begin
if (reset) begin
	out<=0;
end
else if (load) begin
	out<=data;
	end
else begin
	out[7:amount] <= out[6:0];
	out[7-(amount)] <= out [7];
	end
end

================================================================
example-4: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always@(posedge clk,negedge reset)
begin
	if(reset==0)
	begin
	// do init here
	end
	else
	begin
	// load is high, rotate left
	if (load==1) begin
	`left_shift
	// store back the result
	out<=data;
	end
	end
end

================================================================
example-5: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
reg [8:0] out_next;
always @ (posedge clk) begin
if (reset) begin
out <= 0;
out_next <= 0;
end
else if (load) begin //load data
out <= data;
out_next <= out_next; // assign incoming data to out
end
else begin // rotate data
out <= out_next[8:1];
out_next <= {out_next[0:0],out_next[8:1]};
end
end

================================================================
example-6: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
// direction is calculated based on amount
// shift logic is selcted based on direction
always @(posedge clk, posedge reset)
begin
 if(reset)
 begin
 out <= 0;
 end
 else
 begin
 case(amount)
 3'b000:
 begin
 data <= {(data[1]|load),(data[0]|load),(out[0]|load)};
 direction <= 1;
 shift <= 3'b000;
 end
 3'b001:
 begin
 data <= {data[0],(data[7]|load),(data[6]|load),(data[5]|load)};
 direction <= 1;
 shift <= 3'b110;
 end
 3'b010:
 begin
 data <= {(data[2]|load),(data[1]|load),data[0]};
 direction
================================================================
example-7: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk,reset,load)
begin
	if (reset) begin 
 	 out<=0; 
 end
 
 
 else if (load) begin
 	 out <= data; 
 end
 
 //rotate left
 else begin 
	out <= (data<<amount) | out >> amount;
 end
end

================================================================
example-8: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
// when load is 0, internal storage is cleared
always @ (posedge clk or posedge reset)
begin
	if(reset)
	begin
	// do nothing
	end
	else
	begin
	case(load)
	0: out <= data;
	1:
	begin
	out[7:data[0]+amount] <= out[0];
	// rotate left
	out[data[0]+amount-1:0] <= out[data[0]+amount:1];
	out[0+amount-1:data[0]==0?amount:data[0]+amount] <= out[1+amount-1:1];	//if output is high from normal shift, create one high bit and leave it there
	end
	end
	end
end

================================================================
example-9: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
	always @(posedge clk)
	begin
	out = 0;
	case (load)
	1'b0:
	begin
	out = data;
	end
	1'b1:
	begin
	out = {data[0 +:amount],out[7:1]};
	end
	endcase
	end

================================================================
example-10: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk)
begin
 if(reset)
 out = 8'b0;
 if(load)
 out <= data;
 else if(amount>0)
 out = {data[7:amount],data[7:8]};
 else if(amount<0)
 out = {data[7:(2-amount)],data[7:8]};
end

================================================================
example-11: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk or reset)
begin
if(!reset)
begin
out <= 8'b0;
end
else if (reset)
begin
	out <= data;
end
else if (load)
begin
	out <= #2 out << amount;
end
end

================================================================
example-12: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @(posedge clk, posedge reset)
begin
	if(reset)
	begin
	// reset
	out<= 8'b0;
	end
	else
	begin
	if(load) out <= data; // load data to output
	else 
	begin
	out[7:amount] <= out[6:0]; // left shift
	out[7-(amount):0] <= data; // right shift
	end
	end
end

================================================================
example-13: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ (posedge clk)
begin
if(reset)
 begin
 out <= #1 8'b0;
 end
 else if (load)
 begin
 out <= #1 data;
 end
 else
 begin
 out <= #1 {out[7:amount],out[0]};
 end
end

================================================================
example-14: 
// left shift and rotate operation
module left_rotate(clk,reset,amount,data,load,out);
input clk,reset;
input [2:0] amount;
input [7:0] data;
input load;
output reg [7:0] out;
// when load is high, load data to out
// left shift and rotate the register out by amount bits
always @ *
	begin
	if(reset)	begin 
	out = data; 	// operation in progress when reset is high
	if(load)	begin 
	out = data;	// keeps shifting same value for reset cycles
	end 
	end 
	else	begin 
	out = data; 	// hold data when reset is low
	end 
	end 

================================================================
